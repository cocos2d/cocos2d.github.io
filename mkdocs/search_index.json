{
    "docs": [
        {
            "location": "/index.html", 
            "text": "h3 {\n      text-align: center;\n  }\n\n  img {\n    display: block;\n    margin-left: auto;\n    margin-right: auto;\n  }\n\n  p {\n    text-align:left;\n  }\n\n  .center {\n    text-align:center;\n  }\n\n .section {\n    width: 265px;\n    float: left;\n    padding: 10px;\n    margin: 3px;\n  }\n\n  .cocosBlue {background-color: #61cee0;}\n  .cocosBlueDarker1 {background-color: #57b9c9;}\n  .cocosBlueDarker2 {background-color: #4da4b3;}\n  .cocosBlueDarker3 {background-color: #43909c;}\n\n  .clearfix {overflow: auto;}\n\n\n\n\n\nWelcome to the Cocos Docs!\n\n\nWe know that learning something new can be hard. It doesn't help when you can't\nfind useful documentation to help you through the issues you are having. These docs\nare designed to help you learn how to write games using the Cocos family of products,\nfrom basic to advanced techniques. It can be read from start to finish or used as a reference.\nWe also have a very active \ncommunity\n that can help too.\n\n\n\n\nSearch\n\n\n\n    \n\n        \n\n    \n\n\n\n\n\n\n\n\nQuick Topics\n\n\n{{REPLACE}}", 
            "title": "Home"
        }, 
        {
            "location": "/index.html#welcome-to-the-cocos-docs", 
            "text": "We know that learning something new can be hard. It doesn't help when you can't\nfind useful documentation to help you through the issues you are having. These docs\nare designed to help you learn how to write games using the Cocos family of products,\nfrom basic to advanced techniques. It can be read from start to finish or used as a reference.\nWe also have a very active  community  that can help too.", 
            "title": "Welcome to the Cocos Docs!"
        }, 
        {
            "location": "/index.html#search", 
            "text": "", 
            "title": "Search"
        }, 
        {
            "location": "/index.html#quick-topics", 
            "text": "{{REPLACE}}", 
            "title": "Quick Topics"
        }, 
        {
            "location": "/installation/A/index.html", 
            "text": "Prerequisites\n\n\nBuild Requirements\n\n\nv3.13, v3.13.1\n\n\n\n\n\n\nMac OS X 10.7+, Xcode 7+\n\n\nUbuntu 14.04+, gcc, CMake 2.6+\n\n\nWindows 7+, VS 2013 or VS 2015\n\n\nPython 2.7.5\n\n\nNDK r11+ and API level 19 is required to build Android games\n\n\nWindows Phone/Store 8.1, VS 2013 Update 4+ or VS 2015\n\n\nWindows Phone/Store 10.0, VS 2015\n\n\n\n\nv3.12\n\n\n\n\n\n\nMac OS X 10.7+, Xcode 7+\n\n\nUbuntu 14.04+, gcc, CMake 2.6+\n\n\nWindows 7+, VS 2013 or VS 2015\n\n\nPython 2.7.5\n\n\nNDK r10c+ is required to build Android games\n\n\nClang for developing Android games\n\n\nWindows Phone/Store 8.1, VS 2013 Update 4+ or VS 2015\n\n\nWindows Phone/Store 10.0, VS 2015\n\n\n\n\nv3.8, v3.9, v3.10, v3.11, v3.11.1\n\n\n\n\n\n\nMac OS X 10.7+, Xcode 5.1+\n\n\nUbuntu 14.04+, gcc 4.9+, CMake 2.6+\n\n\nWindows 7+, VS 2013 or VS 2015\n\n\nPython 2.7.5\n\n\nNDK r10c+ is required to build Android games\n\n\nWindows Phone/Store 8.1, VS 2013 Update 4+ or VS 2015\n\n\nWindows Phone/Store 10.0, VS 2015\n\n\n\n\nv3.7\n\n\n\n\n\n\nMac OS X 10.7+, Xcode 5.1+\n\n\nUbuntu 14.04+, gcc 4.9+, CMake 2.6+\n\n\nWindows 7+, VS 2013+\n\n\nPython 2.7.5\n\n\nNDK r10c+ is required to build Android games\n\n\nWindows Phone/Store 8.1, VS 2013 Update 4+\n\n\nJRE or JDK 1.6+ is required for web publishing\n\n\n\n\nv3.4, v3.5, v3.6\n\n\n\n\n\n\nMac OS X 10.7+, Xcode 5.1+\n\n\nUbuntu 14.04+, gcc 4.9+\n\n\nWindows 7+, VS 2012+\n\n\nPython 2.7.5\n\n\nNDK r10c+ is required to build Android games\n\n\nWindows Phone/Store 8.0 VS 2012+\n\n\nWindows Phone/Store 8.1 VS 2013 Update 3+\n\n\n\n\nv3.3\n\n\n\n\n\n\nMac OS X 10.7+, Xcode 5.1+\n\n\nUbuntu 14.04+, gcc 4.9+\n\n\nWindows 7+, VS 2012+\n\n\nPython 2.7.5\n\n\nNDK r10c+ is required to build Android games\n\n\nWindows Phone/Store 8.0 VS 2012+\n\n\nWindows Phone/Store 8.1 VS 2013 Update 3+\n\n\n\n\nv3.0, v3.1, v3.1.1, v3.2\n\n\n\n\n\n\nMac OS X 10.7+, Xcode 4.6+\n\n\nUbuntu 12.04+, gcc 4.7\n\n\nWindows 7+, VS 2012+\n\n\nPython 2.7.5\n\n\nNDK r9d is required to build Android games\n\n\nWindows Phone/Store 8.0 VS 2012+\n\n\nWindows Phone/Store 8.1 VS 2013 Update 3+\n\n\n\n\nRuntime Requirements\n\n\n\n\niOS 6.0+ for iPhone / iPad games\n\n\nAndroid 2.3+ for Android games\n\n\nWindows 8.1 or Windows 10.0 for Windows Phone/Store 8.1 games\n\n\nWindows 10.0 for Windows Phone/Store 10.0  games\n\n\nOS X v10.6+ for Mac games\n\n\nWindows 7+ for Win games\n\n\nModern browsers and IE 9+ for web games\n\n\n\n\nRevision history\n\n\n\n\n1/2/2017 - slackmoehrle - reviews while comparing to README for each tagged release.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/installation/A/index.html#prerequisites", 
            "text": "", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/installation/A/index.html#build-requirements", 
            "text": "", 
            "title": "Build Requirements"
        }, 
        {
            "location": "/installation/A/index.html#v313-v3131", 
            "text": "Mac OS X 10.7+, Xcode 7+  Ubuntu 14.04+, gcc, CMake 2.6+  Windows 7+, VS 2013 or VS 2015  Python 2.7.5  NDK r11+ and API level 19 is required to build Android games  Windows Phone/Store 8.1, VS 2013 Update 4+ or VS 2015  Windows Phone/Store 10.0, VS 2015", 
            "title": "v3.13, v3.13.1"
        }, 
        {
            "location": "/installation/A/index.html#v312", 
            "text": "Mac OS X 10.7+, Xcode 7+  Ubuntu 14.04+, gcc, CMake 2.6+  Windows 7+, VS 2013 or VS 2015  Python 2.7.5  NDK r10c+ is required to build Android games  Clang for developing Android games  Windows Phone/Store 8.1, VS 2013 Update 4+ or VS 2015  Windows Phone/Store 10.0, VS 2015", 
            "title": "v3.12"
        }, 
        {
            "location": "/installation/A/index.html#v38-v39-v310-v311-v3111", 
            "text": "Mac OS X 10.7+, Xcode 5.1+  Ubuntu 14.04+, gcc 4.9+, CMake 2.6+  Windows 7+, VS 2013 or VS 2015  Python 2.7.5  NDK r10c+ is required to build Android games  Windows Phone/Store 8.1, VS 2013 Update 4+ or VS 2015  Windows Phone/Store 10.0, VS 2015", 
            "title": "v3.8, v3.9, v3.10, v3.11, v3.11.1"
        }, 
        {
            "location": "/installation/A/index.html#v37", 
            "text": "Mac OS X 10.7+, Xcode 5.1+  Ubuntu 14.04+, gcc 4.9+, CMake 2.6+  Windows 7+, VS 2013+  Python 2.7.5  NDK r10c+ is required to build Android games  Windows Phone/Store 8.1, VS 2013 Update 4+  JRE or JDK 1.6+ is required for web publishing", 
            "title": "v3.7"
        }, 
        {
            "location": "/installation/A/index.html#v34-v35-v36", 
            "text": "Mac OS X 10.7+, Xcode 5.1+  Ubuntu 14.04+, gcc 4.9+  Windows 7+, VS 2012+  Python 2.7.5  NDK r10c+ is required to build Android games  Windows Phone/Store 8.0 VS 2012+  Windows Phone/Store 8.1 VS 2013 Update 3+", 
            "title": "v3.4, v3.5, v3.6"
        }, 
        {
            "location": "/installation/A/index.html#v33", 
            "text": "Mac OS X 10.7+, Xcode 5.1+  Ubuntu 14.04+, gcc 4.9+  Windows 7+, VS 2012+  Python 2.7.5  NDK r10c+ is required to build Android games  Windows Phone/Store 8.0 VS 2012+  Windows Phone/Store 8.1 VS 2013 Update 3+", 
            "title": "v3.3"
        }, 
        {
            "location": "/installation/A/index.html#v30-v31-v311-v32", 
            "text": "Mac OS X 10.7+, Xcode 4.6+  Ubuntu 12.04+, gcc 4.7  Windows 7+, VS 2012+  Python 2.7.5  NDK r9d is required to build Android games  Windows Phone/Store 8.0 VS 2012+  Windows Phone/Store 8.1 VS 2013 Update 3+", 
            "title": "v3.0, v3.1, v3.1.1, v3.2"
        }, 
        {
            "location": "/installation/A/index.html#runtime-requirements", 
            "text": "iOS 6.0+ for iPhone / iPad games  Android 2.3+ for Android games  Windows 8.1 or Windows 10.0 for Windows Phone/Store 8.1 games  Windows 10.0 for Windows Phone/Store 10.0  games  OS X v10.6+ for Mac games  Windows 7+ for Win games  Modern browsers and IE 9+ for web games", 
            "title": "Runtime Requirements"
        }, 
        {
            "location": "/installation/A/index.html#revision-history", 
            "text": "1/2/2017 - slackmoehrle - reviews while comparing to README for each tagged release.", 
            "title": "Revision history"
        }, 
        {
            "location": "/installation/Android-terminal/index.html", 
            "text": "Android with Command-line Installation and Setup\n\n\nEnvironment Requirements\n\n\nA supported environment. See \nInstallation Prerequisites\n\n\nStarting decisions\n\n\nAndroid development is a complicated beast. Not only are there several development \nenvironment options, each also requires several dependencies. These all need to be \nworking before you can attempt to build a Cocos2d-x project. Read these steps \na few\n\ntimes and take a few minutes to think about what workflow best suites you.\n\n\nPrerequisites\n\n\nBefore we even talk about Cocos2d-x specific tasks, you need a working Android\nenvironment. This includes:\n\n\n\n\n\n\nJDK/SDK 1.6+ \nhttp://www.oracle.com/technetwork/java/javase/downloads/index.html\n\n\n\n\n\n\nAndroid NDK \nhttps://developer.android.com/tools/sdk/ndk/index.html\n\n\n\n\n\n\nApache Ant \nhttp://ant.apache.org/bindownload.cgi\n\n\n\n\n\n\nPython 2.7.5 \nhttps://www.python.org/downloads/\n \nNOT PYTHON 3\n\n\n\n\n\n\nYour system may already have some of these items. Download the items that you need \nto inorder to have a complete environment. Nothing on this list can be missing.\n\n\nOS X Instructions\n\n\nPython\n\n\nOS X systems come with \nPython\n installed by default. Verify that your system\nhas \nPython\n and ensusre that it is a version \nless than 3\n. From \nTerminal.app\n \nor \niTerm 2\n execute the following:\n\n\n python --version\n\n\n\n\nIf you see output, such as:\n\n\nPython 2.7.10\n\n\n\n\nYou are good to go. If you see anything else you may need to install Python. \nUse the link above. \nYou cannot move on in this document until this step is working.\n\n\nJAVA\n\n\nOS X systems usually \ndo not\n come with JAVA installed. It is necessary to download and\ninstall it using the link above. Make sure that you install the \nJDK\n. It is not enough\nto just install the \nJRE\n.\n\n\n\n\nOnce installed, it is necessary to set \nJAVA_HOME\n in your \n.bash_profile\n. Example:\n\n\nexport JAVA_HOME=$\n(/usr/libexec/java_home -v 1.8)\n\n\n\n\n\nOnce you are done with this step, \nre-source\n your \n.bash_profile\n: \nsource ~/.bash_profile\n.\nNow you can test that \nJAVA\n is available on your system:\n\n\n java -v\n\n\n\n\nYou should see some version info as output. Example:\n\n\njava version \n1.8.0_111\n\nJava(TM) SE Runtime Environment (build 1.8.0_111-b14)\nJava HotSpot(TM) 64-Bit Server VM (build 25.111-b14, mixed mode)\n\n\n\n\nIf you see any of the following types of errors, the \nJDK\n is either not installed\nor is not accessible. Verify you have set \nJAVA_HOME\n. Example errors:\n\n\nUnable to find any JVMs matching version \n(null)\n.\nMatching Java Virtual Machines (0):\n\nNo Java runtime present, requesting install.\n\nUnable to find any JVMs matching version \n(null)\n.\nNo Java runtime present, try --request to install.\n\n\n\n\nIf you are unsure, you can always execute \n/usr/libexec/java_home -V\n for a listing\nof \nJAVA JDKs\n on your system. Example:\n\n\n usr/libexec/java_home -V\nMatching Java Virtual Machines (1):\n    1.8.0_111, x86_64:  \nJava SE 8\n /Library/Java/JavaVirtualMachines/jdk1.8.0_111.jdk/Contents/Home\n\n/Library/Java/JavaVirtualMachines/jdk1.8.0_111.jdk/Contents/Home\n\n\n\n\nApache Ant\n\n\nApache Ant\n is another required tool. It is not installed on an OSX system by\ndefault. It is neccessary to download it using the link above. Using a \nbinary\n\ndistribution is fine. There is no need to download the source and compile by hand\nunless this is your preferred method.\n\n\nAfter downloading, unzip the \nApache Ant\n archive. You only need to place the \n\nApache Ant\n folder someplace in your \n$PATH\n and then set an \n$ANT_ROOT\n\nenvironment variable in your \n.bash_profile\n. Exactly the same way \n$JAVA_HOME\n \nwas added above. Example, if your \nApache ANT\n folder is named \napache-ant-1.10.0\n:\n\n\nexport ANT_ROOT=/Applications/Cocos/tools/ant/bin\nexport PATH=$ANT_ROOT:$PATH\n\n\n\n\nAndroid NDK and SDK\n\n\nObviously, you need the \nAndroid NDK and SDK\n to do Android development. These \nare not installed on an OSX system by default. It is neccessary to download it \nusing the link above. \n\n\nBrew\n\n\nUsing \nbrew\n is one option for installing the \nAndroid NDK and SDK\n.\nInstalling with \nbrew\n makes the installation simple. A single command, a few \nenvironment variables and you are done. Example:\n\n\nbrew install android-ndk android-sdk\n\n\n\n\nThis will take a while to complete. Once it is done, you need to set a few \nenvorinment variables in your \n.bash_profile\n.\n\n\nexport NDK_ROOT=/usr/local/Cellar/android-ndk/r12b\nexport PATH=$NDK_ROOT:$PATH\nexport ANDROID_HOME=/usr/local/opt/android-sdk\nexport ANDROID_SDK_ROOT=/usr/local/Cellar/android-sdk/24.4.1_1\nexport PATH=$ANDROID_SDK_ROOT:$PATH\nexport PATH=$ANDROID_SDK_ROOT/tools:$ANDROID_SDK_ROOT/platform-tools:$PATH\n\n\n\n\nMake sure to re-source your \n.bash_profile\n!\n\n\nInstalling manually.\n\n\nIf you choose not to use \nbrew\n you can still download and install the\n\nAndroid NDK and SDK\n by hand. After downloading, set the same environment\nvariables as above, but using your custom paths. For example, if you downloaded\nthe \nAndroid NDK and SDK\n to \n~/Projects/\n:\n\n\nexport NDK_ROOT=/Users/username/Projects/android-ndk/r12b\nexport PATH=$NDK_ROOT:$PATH\nexport ANDROID_HOME=/Users/username/Projects/android-sdk\nexport ANDROID_SDK_ROOT=/Users/username/Projects/android-sdk/24.4.1_1\nexport PATH=$ANDROID_SDK_ROOT:$PATH\nexport PATH=$ANDROID_SDK_ROOT/tools:$ANDROID_SDK_ROOT/platform-tools:$PATH\n\n\n\n\nInstalling additional Android SDKs\n\n\nDepending upon what Android OS versions you wish to target, you may need to \ninstall additional \nAndroid SDKs\n to cover those OS versions. As \nAndroid SDKs\n\nevolve, sometimes older OS suppot is dropped. This means that your game might\nnot be able to target older devices. This is a personal decision on the part of\nthe game developer.\n\n\nIf you wish to install additional \nAndroid SDKs\n, use the built in \nandroid\n\nGUI tool to install whatever you need. Example:\n\n\n android\n\n\n\n\n\n\nIt is only necessary to install the \nAndroid SDK Tools\n for each release you\nwant installed on your system. It is always a good idea to update the \nAndroid SDK Platform-Tools\n\nwhen a new version becomes available.\n\n\n\n\nCocos2d-x\n\n\nInstalling \nCocos2d-x\n is probably the easiest part of this process. You can \nget started with \nCocos2d-x\n by either downloading a self-contained \n\n.zip\n from the \nwebsite\n or by cloning our \n\nGitHub Repo\n. Pick what works for you.\n\nThere is no need to do both.\n\n\nBy downloading a .zip archive\n\n\nDownload Cocos2d-x and unzip it. (maybe: \n~/\n or \n~/Projects\n )\n\n\n\n\nCloning from GitHub\n\n\nUse the following commands to clone our GitHub repo and get your environment setup.\nIf you are not familar with GitHub's workflow, \nlearn it\n or download \nusing the step above, \nBy downloading a .zip archive\n.\n\n\ncd \nto where you want to clone this repo\n\n\ngit clone git@github.com:cocos2d/cocos2d-x.git\n\ngit submodule update --init\n\ngit submodule update\n\n./download-deps.py\n\n\n\n\nMaking sure you are ready to create the next hit game!\n\n\nNext, you are ready to build \ncpp-tests\n. It is a good idea to perform this \nstep before starting a new project. It ensures that your environment is setup \ncompletely. If anything fails during this step, it is important to read the \nerror message carefully and re-visit the step above that is related to the\nerror message you see. \n\n\nChange your directory to the where the \nandroid-build.py\n script is located.\n(usually \nCocos2d-x/build\n). To see what targets are available. run:\n\n\n android list targets\n\n\n\n\n\n\nNow you can execute the command to build:\n\n\n python android-build.py -p \ntarget # from above\n cpp-tests\n\n\n\n\nEverything should build successfully!\n\n\n\n\nStarting a new project\n\n\nOnce everything above works, you can start a new project! To do this, read our\ndocument on the \nCocos Command-line tool\n.\n\n\nHow to deploy it on your Android phone via command line\n\n\nEnable \nUSB Debugging\n\non your phone and then connect your phone via USB.\n\n\nChange your directory to the the \nbin\n directory of your android project\n\n\nUse \nadb\n to install the \n.apk\n to your Android phone by executing:\n\n\n adb install MyGame-debug.apk", 
            "title": "Android Command-line Setup"
        }, 
        {
            "location": "/installation/Android-terminal/index.html#android-with-command-line-installation-and-setup", 
            "text": "", 
            "title": "Android with Command-line Installation and Setup"
        }, 
        {
            "location": "/installation/Android-terminal/index.html#environment-requirements", 
            "text": "A supported environment. See  Installation Prerequisites", 
            "title": "Environment Requirements"
        }, 
        {
            "location": "/installation/Android-terminal/index.html#starting-decisions", 
            "text": "Android development is a complicated beast. Not only are there several development \nenvironment options, each also requires several dependencies. These all need to be \nworking before you can attempt to build a Cocos2d-x project. Read these steps  a few \ntimes and take a few minutes to think about what workflow best suites you.", 
            "title": "Starting decisions"
        }, 
        {
            "location": "/installation/Android-terminal/index.html#prerequisites", 
            "text": "Before we even talk about Cocos2d-x specific tasks, you need a working Android\nenvironment. This includes:    JDK/SDK 1.6+  http://www.oracle.com/technetwork/java/javase/downloads/index.html    Android NDK  https://developer.android.com/tools/sdk/ndk/index.html    Apache Ant  http://ant.apache.org/bindownload.cgi    Python 2.7.5  https://www.python.org/downloads/   NOT PYTHON 3    Your system may already have some of these items. Download the items that you need \nto inorder to have a complete environment. Nothing on this list can be missing.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/installation/Android-terminal/index.html#os-x-instructions", 
            "text": "", 
            "title": "OS X Instructions"
        }, 
        {
            "location": "/installation/Android-terminal/index.html#python", 
            "text": "OS X systems come with  Python  installed by default. Verify that your system\nhas  Python  and ensusre that it is a version  less than 3 . From  Terminal.app  \nor  iTerm 2  execute the following:   python --version  If you see output, such as:  Python 2.7.10  You are good to go. If you see anything else you may need to install Python. \nUse the link above.  You cannot move on in this document until this step is working.", 
            "title": "Python"
        }, 
        {
            "location": "/installation/Android-terminal/index.html#java", 
            "text": "OS X systems usually  do not  come with JAVA installed. It is necessary to download and\ninstall it using the link above. Make sure that you install the  JDK . It is not enough\nto just install the  JRE .   Once installed, it is necessary to set  JAVA_HOME  in your  .bash_profile . Example:  export JAVA_HOME=$ (/usr/libexec/java_home -v 1.8)   Once you are done with this step,  re-source  your  .bash_profile :  source ~/.bash_profile .\nNow you can test that  JAVA  is available on your system:   java -v  You should see some version info as output. Example:  java version  1.8.0_111 \nJava(TM) SE Runtime Environment (build 1.8.0_111-b14)\nJava HotSpot(TM) 64-Bit Server VM (build 25.111-b14, mixed mode)  If you see any of the following types of errors, the  JDK  is either not installed\nor is not accessible. Verify you have set  JAVA_HOME . Example errors:  Unable to find any JVMs matching version  (null) .\nMatching Java Virtual Machines (0):\n\nNo Java runtime present, requesting install.\n\nUnable to find any JVMs matching version  (null) .\nNo Java runtime present, try --request to install.  If you are unsure, you can always execute  /usr/libexec/java_home -V  for a listing\nof  JAVA JDKs  on your system. Example:   usr/libexec/java_home -V\nMatching Java Virtual Machines (1):\n    1.8.0_111, x86_64:   Java SE 8  /Library/Java/JavaVirtualMachines/jdk1.8.0_111.jdk/Contents/Home\n\n/Library/Java/JavaVirtualMachines/jdk1.8.0_111.jdk/Contents/Home", 
            "title": "JAVA"
        }, 
        {
            "location": "/installation/Android-terminal/index.html#apache-ant", 
            "text": "Apache Ant  is another required tool. It is not installed on an OSX system by\ndefault. It is neccessary to download it using the link above. Using a  binary \ndistribution is fine. There is no need to download the source and compile by hand\nunless this is your preferred method.  After downloading, unzip the  Apache Ant  archive. You only need to place the  Apache Ant  folder someplace in your  $PATH  and then set an  $ANT_ROOT \nenvironment variable in your  .bash_profile . Exactly the same way  $JAVA_HOME  \nwas added above. Example, if your  Apache ANT  folder is named  apache-ant-1.10.0 :  export ANT_ROOT=/Applications/Cocos/tools/ant/bin\nexport PATH=$ANT_ROOT:$PATH", 
            "title": "Apache Ant"
        }, 
        {
            "location": "/installation/Android-terminal/index.html#android-ndk-and-sdk", 
            "text": "Obviously, you need the  Android NDK and SDK  to do Android development. These \nare not installed on an OSX system by default. It is neccessary to download it \nusing the link above.", 
            "title": "Android NDK and SDK"
        }, 
        {
            "location": "/installation/Android-terminal/index.html#brew", 
            "text": "Using  brew  is one option for installing the  Android NDK and SDK .\nInstalling with  brew  makes the installation simple. A single command, a few \nenvironment variables and you are done. Example:  brew install android-ndk android-sdk  This will take a while to complete. Once it is done, you need to set a few \nenvorinment variables in your  .bash_profile .  export NDK_ROOT=/usr/local/Cellar/android-ndk/r12b\nexport PATH=$NDK_ROOT:$PATH\nexport ANDROID_HOME=/usr/local/opt/android-sdk\nexport ANDROID_SDK_ROOT=/usr/local/Cellar/android-sdk/24.4.1_1\nexport PATH=$ANDROID_SDK_ROOT:$PATH\nexport PATH=$ANDROID_SDK_ROOT/tools:$ANDROID_SDK_ROOT/platform-tools:$PATH  Make sure to re-source your  .bash_profile !", 
            "title": "Brew"
        }, 
        {
            "location": "/installation/Android-terminal/index.html#installing-manually", 
            "text": "If you choose not to use  brew  you can still download and install the Android NDK and SDK  by hand. After downloading, set the same environment\nvariables as above, but using your custom paths. For example, if you downloaded\nthe  Android NDK and SDK  to  ~/Projects/ :  export NDK_ROOT=/Users/username/Projects/android-ndk/r12b\nexport PATH=$NDK_ROOT:$PATH\nexport ANDROID_HOME=/Users/username/Projects/android-sdk\nexport ANDROID_SDK_ROOT=/Users/username/Projects/android-sdk/24.4.1_1\nexport PATH=$ANDROID_SDK_ROOT:$PATH\nexport PATH=$ANDROID_SDK_ROOT/tools:$ANDROID_SDK_ROOT/platform-tools:$PATH", 
            "title": "Installing manually."
        }, 
        {
            "location": "/installation/Android-terminal/index.html#installing-additional-android-sdks", 
            "text": "Depending upon what Android OS versions you wish to target, you may need to \ninstall additional  Android SDKs  to cover those OS versions. As  Android SDKs \nevolve, sometimes older OS suppot is dropped. This means that your game might\nnot be able to target older devices. This is a personal decision on the part of\nthe game developer.  If you wish to install additional  Android SDKs , use the built in  android \nGUI tool to install whatever you need. Example:   android   It is only necessary to install the  Android SDK Tools  for each release you\nwant installed on your system. It is always a good idea to update the  Android SDK Platform-Tools \nwhen a new version becomes available.", 
            "title": "Installing additional Android SDKs"
        }, 
        {
            "location": "/installation/Android-terminal/index.html#cocos2d-x", 
            "text": "Installing  Cocos2d-x  is probably the easiest part of this process. You can \nget started with  Cocos2d-x  by either downloading a self-contained  .zip  from the  website  or by cloning our  GitHub Repo . Pick what works for you. There is no need to do both.", 
            "title": "Cocos2d-x"
        }, 
        {
            "location": "/installation/Android-terminal/index.html#by-downloading-a-zip-archive", 
            "text": "Download Cocos2d-x and unzip it. (maybe:  ~/  or  ~/Projects  )", 
            "title": "By downloading a .zip archive"
        }, 
        {
            "location": "/installation/Android-terminal/index.html#cloning-from-github", 
            "text": "Use the following commands to clone our GitHub repo and get your environment setup.\nIf you are not familar with GitHub's workflow,  learn it  or download \nusing the step above,  By downloading a .zip archive .  cd  to where you want to clone this repo \n\ngit clone git@github.com:cocos2d/cocos2d-x.git\n\ngit submodule update --init\n\ngit submodule update\n\n./download-deps.py", 
            "title": "Cloning from GitHub"
        }, 
        {
            "location": "/installation/Android-terminal/index.html#making-sure-you-are-ready-to-create-the-next-hit-game", 
            "text": "Next, you are ready to build  cpp-tests . It is a good idea to perform this \nstep before starting a new project. It ensures that your environment is setup \ncompletely. If anything fails during this step, it is important to read the \nerror message carefully and re-visit the step above that is related to the\nerror message you see.   Change your directory to the where the  android-build.py  script is located.\n(usually  Cocos2d-x/build ). To see what targets are available. run:   android list targets   Now you can execute the command to build:   python android-build.py -p  target # from above  cpp-tests  Everything should build successfully!", 
            "title": "Making sure you are ready to create the next hit game!"
        }, 
        {
            "location": "/installation/Android-terminal/index.html#starting-a-new-project", 
            "text": "Once everything above works, you can start a new project! To do this, read our\ndocument on the  Cocos Command-line tool .", 
            "title": "Starting a new project"
        }, 
        {
            "location": "/installation/Android-terminal/index.html#how-to-deploy-it-on-your-android-phone-via-command-line", 
            "text": "Enable  USB Debugging \non your phone and then connect your phone via USB.  Change your directory to the the  bin  directory of your android project  Use  adb  to install the  .apk  to your Android phone by executing:   adb install MyGame-debug.apk", 
            "title": "How to deploy it on your Android phone via command line"
        }, 
        {
            "location": "/installation/Android-VisualStudio/index.html", 
            "text": "Android with Visual Studio\n\n\nEnvironment Requirements\n\n\n\n\n\n\nA Supported OS. See \nInstallation Prerequisites\n\n\n\n\n\n\nCocos2d-x v3.12 \nhttp://cocos2d-x.org/download\n\n\n\n\n\n\nPython 2.7.5 \nhttps://www.python.org/downloads/\n\n\n\n\n\n\nVisual Studio 2015 update 2+ (NOT Visual Studio Code!) \nhttps://www.visualstudio.com/en-us/products/visual-studio-community-vs.aspx\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\n\nDownload and install \nVisual Studio 2015 update 2+\n.\n\n\n\n\n\n\nDownload and install \nPython\n. Ensure that it is available in your \n$PATH\n.\n\n\n\n\n\n\nDownload \nCocos2d-x\n and unzip it where you wish.\n\n\n\n\n\n\nFrom a command-line, change to the location you unzipped Cocos2d-x to and run:\n    \nsh\n    python setup.py\n\n\n\n\n\n\nUsing Visual Studio with Cocos2d-x\n\n\nMake sure that you are using \nCocos2d-x v3.12\n. \n\n\nCreating a new project\n\n\n\n\n\n\nRead our document on the \nCocos Command-line tool\n\n  and create a new project.\n\n\n\n\n\n\nDownload \nproj.visualstudio\n\n\n\n\n\n\ncopy \nproj.visualstudio.zip\n into your project's root directory and unzip it. It should \n  fall inline with your other project directories. Example:\n\n\n\n\n\n\n\n\n\n\n\n\nBy default \nproj.visualstudio\n contains a project called \nCocos2d.sln\n, open this \n  \n.sln\n file.\n\n\n\n\n\n\nBuild and run!\n\n\n\n\n\n\n\n\nIntegrating with an existing project\n\n\n\n\n\n\nDownload \nproj.visualstudio\n\n\n\n\n\n\ncopy \nproj.visualstudio.zip\n into your project's root directory and unzip it. It should \n  fall inline with your other project directories. Example:\n\n\n\n\n\n\n\n\n\n\n\n\nBy default \nproj.visualstudio\n contains a project called \nCocos2d.sln\n, feel free to \n  re-name this to your project's name.\n\n\n\n\n\n\nOpen the \n.sln\n file.\n\n\n\n\n\n\nAdd any source files and resources that are required to build your project. Change any \n  necessary \nbuild settings\n required by your project.\n\n\n\n\n\n\nBuild and troubleshoot any integration needs.", 
            "title": "Android Visual Studio Setup"
        }, 
        {
            "location": "/installation/Android-VisualStudio/index.html#android-with-visual-studio", 
            "text": "", 
            "title": "Android with Visual Studio"
        }, 
        {
            "location": "/installation/Android-VisualStudio/index.html#environment-requirements", 
            "text": "A Supported OS. See  Installation Prerequisites    Cocos2d-x v3.12  http://cocos2d-x.org/download    Python 2.7.5  https://www.python.org/downloads/    Visual Studio 2015 update 2+ (NOT Visual Studio Code!)  https://www.visualstudio.com/en-us/products/visual-studio-community-vs.aspx", 
            "title": "Environment Requirements"
        }, 
        {
            "location": "/installation/Android-VisualStudio/index.html#prerequisites", 
            "text": "Download and install  Visual Studio 2015 update 2+ .    Download and install  Python . Ensure that it is available in your  $PATH .    Download  Cocos2d-x  and unzip it where you wish.    From a command-line, change to the location you unzipped Cocos2d-x to and run:\n     sh\n    python setup.py", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/installation/Android-VisualStudio/index.html#using-visual-studio-with-cocos2d-x", 
            "text": "Make sure that you are using  Cocos2d-x v3.12 .", 
            "title": "Using Visual Studio with Cocos2d-x"
        }, 
        {
            "location": "/installation/Android-VisualStudio/index.html#creating-a-new-project", 
            "text": "Read our document on the  Cocos Command-line tool \n  and create a new project.    Download  proj.visualstudio    copy  proj.visualstudio.zip  into your project's root directory and unzip it. It should \n  fall inline with your other project directories. Example:       By default  proj.visualstudio  contains a project called  Cocos2d.sln , open this \n   .sln  file.    Build and run!", 
            "title": "Creating a new project"
        }, 
        {
            "location": "/installation/Android-VisualStudio/index.html#integrating-with-an-existing-project", 
            "text": "Download  proj.visualstudio    copy  proj.visualstudio.zip  into your project's root directory and unzip it. It should \n  fall inline with your other project directories. Example:       By default  proj.visualstudio  contains a project called  Cocos2d.sln , feel free to \n  re-name this to your project's name.    Open the  .sln  file.    Add any source files and resources that are required to build your project. Change any \n  necessary  build settings  required by your project.    Build and troubleshoot any integration needs.", 
            "title": "Integrating with an existing project"
        }, 
        {
            "location": "/installation/Android-Studio/index.html", 
            "text": "Android Studio Installation and Setup\n\n\nPrerequisites\n\n\n\n\n\n\nA supported environment. See \nInstallation Prerequisites\n\n\n\n\n\n\nCompleted the \nAndroid Command-Line Instructions\n\n\n\n\n\n\nCocos2d-x v3.x \nhttp://cocos2d-x.org/download\n\n\n\n\n\n\nAndroid Studio 2.3 \nhttps://developer.android.com/studio/index.html\n\n\n\n\n\n\nSetup\n\n\n\n\n\n\nunzip the \nAndroid Studio Bundle\n\n\n\n\n\n\nlaunch \nAndroid Studio\n\n\n\n\n\n\nCompiling \ncpp-tests\n\n\n\n\n\n\nimport the \ncpp-tests\n project from \ncocos2d-x root/tests/cpp-tests/proj.android-studio\n\nin \nAndroid Studio\n. \nAndroid Studio\n will do everything required. You can run\n\ncpp-tests\n by clicking on the \nplay\n button.\n\n\n\n\n\n\n\n\nDebugging \ncpp-tests\n\n\nSince cocos2d-x \nv3.15\n, you can use \nAndroid Studio 2.3+\n to debug c++ codes:\n\n\n\n\nset breakpoint by \nstep 1\n\n\nrun in debug mode by \nstep 2\n\n\n\n\nyou will see stack trace by \nstep 3\n\n\n\n\n\n\n\n\nBuild for release mode\n\n\nYou have to do a few steps to build release mode:\n\n\n\n\nchange \nBuild Variant\n to \nrelease\n\n\nset sign information in \ngradle.properties\n\n\n\n\nfor \nlua projects\n, if you want to encrypt lua codes, you should set encrypt information in \ngradle.properties\n too\n\n\n\n\n\n\n\n\n\n\nInstalling new SDK versions and build tools\n\n\n\n\n\n\nuse the built in \nSDK Manager\n to install the \nSDK versions\n and \nbuild tools\n\nthat you are targetting.\n\n\n\n\n\n\n\n\n\n\n\n\nNote: It is important to note that \nAndroid Studio\n uses a location to install\n  \nSDK versions\n and \nbuild tools\n that is not the same as if you were doing\n    command-line development. Double check that you have everything you need installed\n    from inside \nAndroid Studio\n.\n\n\nStarting a new project\n\n\nOnce everything above works, you can start a new project! To do this, read our\ndocument on the \nCocos Command-line tool\n.", 
            "title": "Android Studio Setup"
        }, 
        {
            "location": "/installation/Android-Studio/index.html#android-studio-installation-and-setup", 
            "text": "", 
            "title": "Android Studio Installation and Setup"
        }, 
        {
            "location": "/installation/Android-Studio/index.html#prerequisites", 
            "text": "A supported environment. See  Installation Prerequisites    Completed the  Android Command-Line Instructions    Cocos2d-x v3.x  http://cocos2d-x.org/download    Android Studio 2.3  https://developer.android.com/studio/index.html", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/installation/Android-Studio/index.html#setup", 
            "text": "unzip the  Android Studio Bundle    launch  Android Studio", 
            "title": "Setup"
        }, 
        {
            "location": "/installation/Android-Studio/index.html#compiling-cpp-tests", 
            "text": "import the  cpp-tests  project from  cocos2d-x root/tests/cpp-tests/proj.android-studio \nin  Android Studio .  Android Studio  will do everything required. You can run cpp-tests  by clicking on the  play  button.", 
            "title": "Compiling cpp-tests"
        }, 
        {
            "location": "/installation/Android-Studio/index.html#debugging-cpp-tests", 
            "text": "Since cocos2d-x  v3.15 , you can use  Android Studio 2.3+  to debug c++ codes:   set breakpoint by  step 1  run in debug mode by  step 2   you will see stack trace by  step 3", 
            "title": "Debugging cpp-tests"
        }, 
        {
            "location": "/installation/Android-Studio/index.html#build-for-release-mode", 
            "text": "You have to do a few steps to build release mode:   change  Build Variant  to  release  set sign information in  gradle.properties   for  lua projects , if you want to encrypt lua codes, you should set encrypt information in  gradle.properties  too", 
            "title": "Build for release mode"
        }, 
        {
            "location": "/installation/Android-Studio/index.html#installing-new-sdk-versions-and-build-tools", 
            "text": "use the built in  SDK Manager  to install the  SDK versions  and  build tools \nthat you are targetting.       Note: It is important to note that  Android Studio  uses a location to install\n   SDK versions  and  build tools  that is not the same as if you were doing\n    command-line development. Double check that you have everything you need installed\n    from inside  Android Studio .", 
            "title": "Installing new SDK versions and build tools"
        }, 
        {
            "location": "/installation/Android-Studio/index.html#starting-a-new-project", 
            "text": "Once everything above works, you can start a new project! To do this, read our\ndocument on the  Cocos Command-line tool .", 
            "title": "Starting a new project"
        }, 
        {
            "location": "/installation/Android-Eclipse/index.html", 
            "text": "Android with Eclipse Installation and Setup\n\n\nPrerequisites\n\n\n\n\n\n\nComplete steps in \nAndroid Command-Line Installation and Setup\n\n\n\n\n\n\nEclipse ADT Bundle \nhttp://www.eclipse.org/downloads/\n\n\n\n\n\n\nOpen the proj.android project with Eclipse.\n\n\n\n\n\n\nLaunch Eclipse\n\n\n\n\n\n\nRight click your mouse at the empty area of the \nPackage Explorer\n and choose\n\nImport\n.\n\n\n\n\n\n\nChoose \nExisting Android Code Into Workspace\n from the pop up dialog and Click\n\nNext\n.\n\n\n\n\n\n\n\n\nClick the \nBrowse\n button to choose the directory of \nCPP-Tests\n \nproj.android\n\nand Click \nOk\n.\n\n\n\n\n\n\n\n\nClick \nFinish\n.\n\n\n\n\n\n\nImport Libcocos2dx Project\n\n\n\n\n\n\nSame steps as above only using the path of the \nlibcocos2dx\n project is\n\n[your own game project folder]/cocos/2d/platform/android/java\n.\n\n\n\n\n\n\n\n\nBuild and Run the Android Project\n\n\n\n\n\n\nConnect your Android phone with \nUSB remote debugging\n option enabled.\n\n\n\n\n\n\nMake sure your computer can recognize your phone (you might need to install\ndrivers for your specific phone)\n\n\n\n\n\n\nRight click on the project and choose \nRun as\n -\n \nAndroid Application\n.", 
            "title": "Android Eclipse Setup"
        }, 
        {
            "location": "/installation/Android-Eclipse/index.html#android-with-eclipse-installation-and-setup", 
            "text": "", 
            "title": "Android with Eclipse Installation and Setup"
        }, 
        {
            "location": "/installation/Android-Eclipse/index.html#prerequisites", 
            "text": "Complete steps in  Android Command-Line Installation and Setup    Eclipse ADT Bundle  http://www.eclipse.org/downloads/", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/installation/Android-Eclipse/index.html#open-the-projandroid-project-with-eclipse", 
            "text": "Launch Eclipse    Right click your mouse at the empty area of the  Package Explorer  and choose Import .    Choose  Existing Android Code Into Workspace  from the pop up dialog and Click Next .     Click the  Browse  button to choose the directory of  CPP-Tests   proj.android \nand Click  Ok .     Click  Finish .", 
            "title": "Open the proj.android project with Eclipse."
        }, 
        {
            "location": "/installation/Android-Eclipse/index.html#import-libcocos2dx-project", 
            "text": "Same steps as above only using the path of the  libcocos2dx  project is [your own game project folder]/cocos/2d/platform/android/java .", 
            "title": "Import Libcocos2dx Project"
        }, 
        {
            "location": "/installation/Android-Eclipse/index.html#build-and-run-the-android-project", 
            "text": "Connect your Android phone with  USB remote debugging  option enabled.    Make sure your computer can recognize your phone (you might need to install\ndrivers for your specific phone)    Right click on the project and choose  Run as  -   Android Application .", 
            "title": "Build and Run the Android Project"
        }, 
        {
            "location": "/installation/iOS/index.html", 
            "text": "iOS and OS X Installation and Setup\n\n\nPrerequisites\n\n\n\n\nA supported environment. See \nInstallation Prerequisites\n\n\n\n\nSetting up Cocos2d-x\n\n\nYou can get started with \nCocos2d-x\n by either downloading a self-contained \n\n.zip\n from the \nwebsite\n or by cloning our \n\nGitHub Repo\n. Pick what works for you.\n\nThere is no need to do both.\n\n\nBy downloading a .zip archive\n\n\nDownload Cocos2d-x and unzip it. (maybe: \n~/\n or \n~/Projects\n )\n\n\n![](iOS-img/unzip.png \"\")\n\n![](iOS-img/unzipping.png \"\")\n\n\n\nCloning from GitHub\n\n\nUse the following commands to clone our GitHub repo and get your environment setup.\nIf you are not familar with GitHub's workflow, \nlearn it\n or download \nusing the step above, \nBy downloading a .zip archive\n.\n\n\ncd \nto where you want to clone this repo\n\n\ngit clone git@github.com:cocos2d/cocos2d-x.git\n\ngit submodule update --init\n\ngit submodule update\n\n./download-deps.py\n\n\n\n\nMake sure you have a working environment!\n\n\nSee \nPrerequisites\n above. This means a working \nPython\n, having run \n/setup.py\n, \nupdated your \n$PATH\n and run \nsource ~/.bash_profile\n.\n\n\nBuild and Run\n\n\niOS\n\n\n\n\nEnter \n/build\n and open \ncocos2d_tests.xcodeproj\n\n\nChoose \ncpp-tests iOS\n from targets drop-down box\n\n\nClick \nrun\n to compile and run \ncpp-tests\n\n\n\n\nOS X\n\n\n\n\nIn \n/build\n, open \ncocos2d_tests.xcodeproj\n\n\nChoose \ncpp-tests Mac\n from targets drop-down box\n\n\nClick \nrun\n to compile and run \ncpp-tests\n\n\n\n\nRunning on an iOS Device\n\n\nIn order to run on iOS Device an iOS Developer Program membership is needed.\nYou can purchase one from Apple: \nhttps://developer.apple.com/programs/ios/\n\n. The steps to run on iOS device are the same as running in a simulator except\nyou select you device from the device list.\n\n\nStarting a new project\n\n\nOnce everything above works, you can start a new project! To do this, read our\ndocument on the \nCocos Command-line tool\n.\n\n\nRevision history\n\n\n\n\n1/2/2017 - slackmoehrle - tested steps, re-worded, added Github, combined iOS and OSX instructions.", 
            "title": "IOS and OSX Setup"
        }, 
        {
            "location": "/installation/iOS/index.html#ios-and-os-x-installation-and-setup", 
            "text": "", 
            "title": "iOS and OS X Installation and Setup"
        }, 
        {
            "location": "/installation/iOS/index.html#prerequisites", 
            "text": "A supported environment. See  Installation Prerequisites", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/installation/iOS/index.html#setting-up-cocos2d-x", 
            "text": "You can get started with  Cocos2d-x  by either downloading a self-contained  .zip  from the  website  or by cloning our  GitHub Repo . Pick what works for you. There is no need to do both.", 
            "title": "Setting up Cocos2d-x"
        }, 
        {
            "location": "/installation/iOS/index.html#by-downloading-a-zip-archive", 
            "text": "Download Cocos2d-x and unzip it. (maybe:  ~/  or  ~/Projects  )  ![](iOS-img/unzip.png \"\")\n\n![](iOS-img/unzipping.png \"\")", 
            "title": "By downloading a .zip archive"
        }, 
        {
            "location": "/installation/iOS/index.html#cloning-from-github", 
            "text": "Use the following commands to clone our GitHub repo and get your environment setup.\nIf you are not familar with GitHub's workflow,  learn it  or download \nusing the step above,  By downloading a .zip archive .  cd  to where you want to clone this repo \n\ngit clone git@github.com:cocos2d/cocos2d-x.git\n\ngit submodule update --init\n\ngit submodule update\n\n./download-deps.py", 
            "title": "Cloning from GitHub"
        }, 
        {
            "location": "/installation/iOS/index.html#make-sure-you-have-a-working-environment", 
            "text": "See  Prerequisites  above. This means a working  Python , having run  /setup.py , \nupdated your  $PATH  and run  source ~/.bash_profile .", 
            "title": "Make sure you have a working environment!"
        }, 
        {
            "location": "/installation/iOS/index.html#build-and-run", 
            "text": "", 
            "title": "Build and Run"
        }, 
        {
            "location": "/installation/iOS/index.html#ios", 
            "text": "Enter  /build  and open  cocos2d_tests.xcodeproj  Choose  cpp-tests iOS  from targets drop-down box  Click  run  to compile and run  cpp-tests", 
            "title": "iOS"
        }, 
        {
            "location": "/installation/iOS/index.html#os-x", 
            "text": "In  /build , open  cocos2d_tests.xcodeproj  Choose  cpp-tests Mac  from targets drop-down box  Click  run  to compile and run  cpp-tests", 
            "title": "OS X"
        }, 
        {
            "location": "/installation/iOS/index.html#running-on-an-ios-device", 
            "text": "In order to run on iOS Device an iOS Developer Program membership is needed.\nYou can purchase one from Apple:  https://developer.apple.com/programs/ios/ \n. The steps to run on iOS device are the same as running in a simulator except\nyou select you device from the device list.", 
            "title": "Running on an iOS Device"
        }, 
        {
            "location": "/installation/iOS/index.html#starting-a-new-project", 
            "text": "Once everything above works, you can start a new project! To do this, read our\ndocument on the  Cocos Command-line tool .", 
            "title": "Starting a new project"
        }, 
        {
            "location": "/installation/iOS/index.html#revision-history", 
            "text": "1/2/2017 - slackmoehrle - tested steps, re-worded, added Github, combined iOS and OSX instructions.", 
            "title": "Revision history"
        }, 
        {
            "location": "/installation/Linux/index.html", 
            "text": "Linux Installation and Setup\n\n\nPrerequisites\n\n\n\n\n\n\nA supported environment. See \nInstallation Prerequisites\n\n\n\n\n\n\nCocos2d-x v3.x \nhttp://cocos2d-x.org/download\n\n\n\n\n\n\nSetting up Cocos2d-x\n\n\n\n\n\n\nDownload Cocos2d-x and unzip it. (maybe: ~/)\n\n\n\n\n\n\nInstall dependencies. If you are using Ubuntu/Debian, there is a shell script\n\nbuild/install-deps-linux.sh\n for you to install the dependences easily. Run\nthe commands below, in a terminal:\n\n\n```sh\n\n\n\n\ncd $cocos2dx_root/build\n./install-deps-linux.sh\n```\n\n\n\n\nOtherwise, you should install the dependencies manually. The dependencies are:\n\n\nsh\nlibx11-dev\nlibxmu-dev\nlibglu1-mesa-dev\nlibgl2ps-dev\nlibxi-dev\ng++\nlibzip-dev\nlibpng12-dev\nlibcurl4-gnutls-dev\nlibfontconfig1-dev\nlibsqlite3-dev\nlibglew*-dev\nlibssl-dev\n\n\n\n\n\n\nBuilding Cocos2d-x\n\n\n\n\n\n\nRun \ncmake\n to generate \nmakefile\n:\n\n\n```sh\n\n\n\n\nmkdir linux-build\ncd linux-build\ncmake ../..\n```\n\n\n\n\n\n\n\n\nWhen \ncmake\n finishes, many files \n folders will be generated in\n\ncoocs2dx_root/build/linux-build\n\n\n\n\n\n\n\n\nRun \nmake\n to compile:\n\n\n```sh\n\n\n\n\nmake\n```\n\n\n\n\nEverything will be generated in \ncocos2dx_root/build/linux-build/bin/cpp-tests/\n\nif compiled successfully.\n\n\n\n\n\n\nRun \ncpp-tests\n\n\n```sh\n\n\n\n\ncd bin/cpp-tests/\n./cpp-tests\n```\n\n\n\n\n\n\n\n\nStarting a new project\n\n\nOnce everything above works, you can start a new project! To do this, read our\ndocument on the \nCocos Command-line tool\n.", 
            "title": "Linux Setup"
        }, 
        {
            "location": "/installation/Linux/index.html#linux-installation-and-setup", 
            "text": "", 
            "title": "Linux Installation and Setup"
        }, 
        {
            "location": "/installation/Linux/index.html#prerequisites", 
            "text": "A supported environment. See  Installation Prerequisites    Cocos2d-x v3.x  http://cocos2d-x.org/download", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/installation/Linux/index.html#setting-up-cocos2d-x", 
            "text": "Download Cocos2d-x and unzip it. (maybe: ~/)    Install dependencies. If you are using Ubuntu/Debian, there is a shell script build/install-deps-linux.sh  for you to install the dependences easily. Run\nthe commands below, in a terminal:  ```sh   cd $cocos2dx_root/build\n./install-deps-linux.sh\n```   Otherwise, you should install the dependencies manually. The dependencies are:  sh\nlibx11-dev\nlibxmu-dev\nlibglu1-mesa-dev\nlibgl2ps-dev\nlibxi-dev\ng++\nlibzip-dev\nlibpng12-dev\nlibcurl4-gnutls-dev\nlibfontconfig1-dev\nlibsqlite3-dev\nlibglew*-dev\nlibssl-dev", 
            "title": "Setting up Cocos2d-x"
        }, 
        {
            "location": "/installation/Linux/index.html#building-cocos2d-x", 
            "text": "Run  cmake  to generate  makefile :  ```sh   mkdir linux-build\ncd linux-build\ncmake ../..\n```     When  cmake  finishes, many files   folders will be generated in coocs2dx_root/build/linux-build     Run  make  to compile:  ```sh   make\n```   Everything will be generated in  cocos2dx_root/build/linux-build/bin/cpp-tests/ \nif compiled successfully.    Run  cpp-tests  ```sh   cd bin/cpp-tests/\n./cpp-tests\n```", 
            "title": "Building Cocos2d-x"
        }, 
        {
            "location": "/installation/Linux/index.html#starting-a-new-project", 
            "text": "Once everything above works, you can start a new project! To do this, read our\ndocument on the  Cocos Command-line tool .", 
            "title": "Starting a new project"
        }, 
        {
            "location": "/installation/Tizen/index.html", 
            "text": "Tizen Installation and Setup\n\n\nEnvironment Requirements\n\n\n\n\nWindows, OS X or Ubuntu (a relatively recent version should suffice)\n\n\nCocos2d-x v3.11 \nhttp://cocos2d-x.org/download\n\n\nTizen 2.4 Rev3+ SDK \nhttps://developer.tizen.org/development/tools/download\n\n\nJava JDK for your platform (a relatively recent version should suffice)\n\n\n\n\nPrerequisites\n\n\n\n\nDownload \nCocos2d-x\n.\n\n\nDownload \nTizen installer\n.\n\n\nDownload \nJava JDK\n for your platform.\n\n\n\n\nInstallation\n\n\n\n\nInstall \nJava JDK\n for your platform. You may or may not need to do this depending upon your current setup.\n\n\n\n\nInstall \nTizen\n using the installer you downloaded. If you haven't downloaded it, please refer to prerequisites above.\n\n\n\n\n\n\nDouble click the \nTizen\n installer that you downloaded and follow the prompts.\n\n\n\n\n\n\n\n\n\n\n\n\nClick the 'Done' button, then when prompted to run the Update Manager, click 'Yes(Y)'.\n\n\n\n\n\n\n\n\nSelect \n2.4 Mobile\n and click the down-arrow at the right side to install. If you install version 2.4, the resulting TPK could also be installed on Tizen device runs 2.3 version system. The resulting TPK is back compatible for old version devices.\n\n\n\n\n\n\n\n\nAfter completing all steps, you should be able to launc the Tizen IDE 2.4.\n\n\n\n\n\n\n\n\nRunning the built in tests\n\n\nJust like with any platform Cocso2d-x supports, you can run our sample tests to understand the engine's functionality.\nFor c++ you want to look at \ncpp-tests\n and for Lua, \nlua-tests\n.\n\n\n\n\nLaunch the \nTizen IDE\n\n\n\n\nSelect \nFile -\n Import\n\n\n\n\n\n\n\n\nUnder \nGeneral\n, select \nExisting Projects into Workspace\n\n\n\n\n\n\n\n\nBrowse to where the \nCocos2d-x root\n is. Then select \ncpp-tests\n and \nlibcocos2d-x\n ensuring that the path for both contains \nproj.tizen\n as it is possible to import projects for Android, but we don't want to do this.\n\n\n\n\n\n\n\n\nBy default, a project has three configurations \nDebug\n, \nRelease\n and \nEmulator\n. \nDebug\n and \nRelease\n are settings that build for hardware. \nEmulator\n is for simulating a hardware device when one is not available. It is always best to test on actual hardware before deploying your app to production.\n\n\nTo change either \nDebug\n or \nRelease\n, right click on the \nlibcocos2d-x\n project and select \nProperties\n. When this window opens, select \nC/C++ Build -\n Tizen Settings\n. A few items here need to be changed. Change the properties with the red boxes on the screenshot below.\n  * Choose \nMobile 2.4\n, \nx86\n and \nGCC 4.9\n of the toolchain.\n  * Then click the \nOK\n button.\n\n\n\n\nRepeat this same step for the \ncpp-tests\n project.\n\n\nTo build for the \nEmulator\n, right click on the \nlibcocos2d-x\n project and select \nBuild Configurations -\n Set Active -\n Emulator\n\n\n\n\n\n\n\n\nNow, we can build. First, build \nlibcocos2d-x\n. Right click on the \nlibcocos2d-x\n project and select \nBuild Project\n or press the \nF10\n key.\n\n\n\n\n\n\n\n\nRepeat this same step for the \ncpp-tests\n project.\n\n\n\n\n\n\nOnce everything is built \ncpp-tests\n will run and you can experiment with it's functionality.\n\n\n\n\nCompiling \n Running with Command-line tool\n\n\nYou also can compile \n run your project on Tizen with \ncocos\n command. There are some arguments for the Tizen platform:\n| Argument | Available Value | Description |\n| ----|----|----|\n| --tizen-arch | x86, arm | Determines the architecture type for the rootstrap. Default is x86. (x86 is for simulators, and arm for devices) |\n| --tizen-profile | Path of signing profile | Set the profile path for signing. |\n| --tizen-sign | String | Set the profile name to use for signing. |\n| --tizen-strip | - | Determines whether to strip the native binary. |\n\n\nSample commands:\n1. \ncocos compile -s PROJECT_PATH -p tizen  -m release --tizen-arch arm --tizen-profile PROFILE_PATH --tizen-sign SIGN_STRING --tizen-strip\n\n\nCompile the project for the ARM architecture. A .tpk file will be generated.\n\n\n\n\n\n\n\ncocos run -s PROJECT_PATH -p tizen --tizen-profile PROFILE_PATH --tizen-sign SIGN_STRING\n\n\nLaunch the Tizen simulator and then run the project on the Tizen simulator. (Note: it is important to remember that the Tizen simulator must always be running in-order to run your project.)\n\n\n\n\n\n\nStarting a new project\n\n\nOnce everything above works, you can start a new project! To do this, read our\ndocument on the \nCocos Command-line tool\n.", 
            "title": "Tizen Setup"
        }, 
        {
            "location": "/installation/Tizen/index.html#tizen-installation-and-setup", 
            "text": "", 
            "title": "Tizen Installation and Setup"
        }, 
        {
            "location": "/installation/Tizen/index.html#environment-requirements", 
            "text": "Windows, OS X or Ubuntu (a relatively recent version should suffice)  Cocos2d-x v3.11  http://cocos2d-x.org/download  Tizen 2.4 Rev3+ SDK  https://developer.tizen.org/development/tools/download  Java JDK for your platform (a relatively recent version should suffice)", 
            "title": "Environment Requirements"
        }, 
        {
            "location": "/installation/Tizen/index.html#prerequisites", 
            "text": "Download  Cocos2d-x .  Download  Tizen installer .  Download  Java JDK  for your platform.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/installation/Tizen/index.html#installation", 
            "text": "Install  Java JDK  for your platform. You may or may not need to do this depending upon your current setup.   Install  Tizen  using the installer you downloaded. If you haven't downloaded it, please refer to prerequisites above.    Double click the  Tizen  installer that you downloaded and follow the prompts.       Click the 'Done' button, then when prompted to run the Update Manager, click 'Yes(Y)'.     Select  2.4 Mobile  and click the down-arrow at the right side to install. If you install version 2.4, the resulting TPK could also be installed on Tizen device runs 2.3 version system. The resulting TPK is back compatible for old version devices.     After completing all steps, you should be able to launc the Tizen IDE 2.4.", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/Tizen/index.html#running-the-built-in-tests", 
            "text": "Just like with any platform Cocso2d-x supports, you can run our sample tests to understand the engine's functionality.\nFor c++ you want to look at  cpp-tests  and for Lua,  lua-tests .   Launch the  Tizen IDE   Select  File -  Import     Under  General , select  Existing Projects into Workspace     Browse to where the  Cocos2d-x root  is. Then select  cpp-tests  and  libcocos2d-x  ensuring that the path for both contains  proj.tizen  as it is possible to import projects for Android, but we don't want to do this.     By default, a project has three configurations  Debug ,  Release  and  Emulator .  Debug  and  Release  are settings that build for hardware.  Emulator  is for simulating a hardware device when one is not available. It is always best to test on actual hardware before deploying your app to production.  To change either  Debug  or  Release , right click on the  libcocos2d-x  project and select  Properties . When this window opens, select  C/C++ Build -  Tizen Settings . A few items here need to be changed. Change the properties with the red boxes on the screenshot below.\n  * Choose  Mobile 2.4 ,  x86  and  GCC 4.9  of the toolchain.\n  * Then click the  OK  button.   Repeat this same step for the  cpp-tests  project.  To build for the  Emulator , right click on the  libcocos2d-x  project and select  Build Configurations -  Set Active -  Emulator     Now, we can build. First, build  libcocos2d-x . Right click on the  libcocos2d-x  project and select  Build Project  or press the  F10  key.     Repeat this same step for the  cpp-tests  project.    Once everything is built  cpp-tests  will run and you can experiment with it's functionality.", 
            "title": "Running the built in tests"
        }, 
        {
            "location": "/installation/Tizen/index.html#compiling-running-with-command-line-tool", 
            "text": "You also can compile   run your project on Tizen with  cocos  command. There are some arguments for the Tizen platform:\n| Argument | Available Value | Description |\n| ----|----|----|\n| --tizen-arch | x86, arm | Determines the architecture type for the rootstrap. Default is x86. (x86 is for simulators, and arm for devices) |\n| --tizen-profile | Path of signing profile | Set the profile path for signing. |\n| --tizen-sign | String | Set the profile name to use for signing. |\n| --tizen-strip | - | Determines whether to strip the native binary. |  Sample commands:\n1.  cocos compile -s PROJECT_PATH -p tizen  -m release --tizen-arch arm --tizen-profile PROFILE_PATH --tizen-sign SIGN_STRING --tizen-strip  Compile the project for the ARM architecture. A .tpk file will be generated.    cocos run -s PROJECT_PATH -p tizen --tizen-profile PROFILE_PATH --tizen-sign SIGN_STRING  Launch the Tizen simulator and then run the project on the Tizen simulator. (Note: it is important to remember that the Tizen simulator must always be running in-order to run your project.)", 
            "title": "Compiling &amp; Running with Command-line tool"
        }, 
        {
            "location": "/installation/Tizen/index.html#starting-a-new-project", 
            "text": "Once everything above works, you can start a new project! To do this, read our\ndocument on the  Cocos Command-line tool .", 
            "title": "Starting a new project"
        }, 
        {
            "location": "/installation/Windows/index.html", 
            "text": "Windows Installation and Setup\n\n\nPrerequisites\n\n\n\n\n\n\nA supported environment. See \nInstallation Prerequisites\n\n\n\n\n\n\nCocos2d-x v3.x \nhttp://cocos2d-x.org/download\n\n\n\n\n\n\nSetting up Cocos2d-x\n\n\n\n\n\n\nDownload Cocos2d-x and unzip it. (maybe: ~/)\n\n\n\n\n\n\n\n\nMake sure you have a working environment see \nPrerequisites\n above. This means\na working \nPython\n, having run \n/setup.py\n and updated your\n\n$PATH\n.\n\n\n\n\n\n\nCompile and run the \ncpp-tests\n project\n\n\n\n\n\n\nOpen \ncocos2d-win32.vc2012.sln\n in the \nbuild\n folder\n\n\n\n\n\n\n\n\nRight click the \nTestCpp\n project, and select \nSet as StartUp Project\n.\n\n\n\n\n\n\n\n\nCompile and run the \nTestCpp\n project.\n\n\n\n\n\n\nStarting a new project\n\n\nOnce everything above works, you can start a new project! To do this, read our\ndocument on the \nCocos Command-line tool\n.", 
            "title": "Windows Setup"
        }, 
        {
            "location": "/installation/Windows/index.html#windows-installation-and-setup", 
            "text": "", 
            "title": "Windows Installation and Setup"
        }, 
        {
            "location": "/installation/Windows/index.html#prerequisites", 
            "text": "A supported environment. See  Installation Prerequisites    Cocos2d-x v3.x  http://cocos2d-x.org/download", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/installation/Windows/index.html#setting-up-cocos2d-x", 
            "text": "Download Cocos2d-x and unzip it. (maybe: ~/)     Make sure you have a working environment see  Prerequisites  above. This means\na working  Python , having run  /setup.py  and updated your $PATH .", 
            "title": "Setting up Cocos2d-x"
        }, 
        {
            "location": "/installation/Windows/index.html#compile-and-run-the-cpp-tests-project", 
            "text": "Open  cocos2d-win32.vc2012.sln  in the  build  folder     Right click the  TestCpp  project, and select  Set as StartUp Project .     Compile and run the  TestCpp  project.", 
            "title": "Compile and run the cpp-tests project"
        }, 
        {
            "location": "/installation/Windows/index.html#starting-a-new-project", 
            "text": "Once everything above works, you can start a new project! To do this, read our\ndocument on the  Cocos Command-line tool .", 
            "title": "Starting a new project"
        }, 
        {
            "location": "/installation/Windows-Phone/index.html", 
            "text": "Windows Phone 8 Installation and Setup\n\n\nPrerequisites\n\n\n\n\n\n\nA supported environment. See \nInstallation Prerequisites\n\n\n\n\n\n\nCocos2d-x v3.x \nhttp://cocos2d-x.org/download\n\n\n\n\n\n\nRegister to be a Windows Phone Developer [http://msdn.microsoft.com/en-us/library/windowsphone/help/jj206719(v=vs.105](http://msdn.microsoft.com/en-us/library/windowsphone/help/jj206719(v=vs.105)\n\n\n\n\n\n\nSetting up Cocos2d-x\n\n\n\n\n\n\nDownload Cocos2d-x and unzip it. (maybe: ~/)\n\n\n\n\n\n\n\n\nMake sure you have a working environment see \nPrerequisites\n above. This means\na working \nPython\n, having run \n/setup.py\n and updated your\n\n$PATH\n.\n\n\n\n\n\n\nCompile and run the \ncpp-tests\n project\n\n\n\n\n\n\nOpen \ncocos2d-wp8.vc2012.sln\n in the \nbuild\n folder\n\n\n\n\n\n\n\n\nRight click the \ncpp-tests\n project, and select \nSet as StartUp Project\n.\n\n\n\n\n\n\n\n\nSelect \nEmulator\n or a \nDevice\n to run the project on. If you select \nDevice\n\nyou need to connect your phone device using usb. Compile and run the \nTestCpp\n\nproject.\n\n\n\n\n\n\n\n\nHow to debug in project\n\n\n\n\n\n\nRight click \ncpp-tests\n, select \nProperties\n, in \nDebug\n, select \ndebug\n\ntarget.\n\n\n\n\n\n\n\n\nIf you select \nManaged Only\n in \nUI Task\n, it's to debug c# code in \ncpp-tests\n.\nIf you select \nNative Only\n, it's to debug c++ code in \ncpp-testsComponent\n.\nIf you select \nNative Only\n and want to use \nCCLog\n function, right click\n\ncpp-testsComponent\n and define \nCOCOS2D_DEBUG=1\n in \nPreprocessor Definitions\n.\n\n\n\n\n\n\n\n\nStarting a new project\n\n\nOnce everything above works, you can start a new project! To do this, read our\ndocument on the \nCocos Command-line tool\n.", 
            "title": "Windows Phone Setup"
        }, 
        {
            "location": "/installation/Windows-Phone/index.html#windows-phone-8-installation-and-setup", 
            "text": "", 
            "title": "Windows Phone 8 Installation and Setup"
        }, 
        {
            "location": "/installation/Windows-Phone/index.html#prerequisites", 
            "text": "A supported environment. See  Installation Prerequisites    Cocos2d-x v3.x  http://cocos2d-x.org/download    Register to be a Windows Phone Developer [http://msdn.microsoft.com/en-us/library/windowsphone/help/jj206719(v=vs.105](http://msdn.microsoft.com/en-us/library/windowsphone/help/jj206719(v=vs.105)", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/installation/Windows-Phone/index.html#setting-up-cocos2d-x", 
            "text": "Download Cocos2d-x and unzip it. (maybe: ~/)     Make sure you have a working environment see  Prerequisites  above. This means\na working  Python , having run  /setup.py  and updated your $PATH .", 
            "title": "Setting up Cocos2d-x"
        }, 
        {
            "location": "/installation/Windows-Phone/index.html#compile-and-run-the-cpp-tests-project", 
            "text": "Open  cocos2d-wp8.vc2012.sln  in the  build  folder     Right click the  cpp-tests  project, and select  Set as StartUp Project .     Select  Emulator  or a  Device  to run the project on. If you select  Device \nyou need to connect your phone device using usb. Compile and run the  TestCpp \nproject.", 
            "title": "Compile and run the cpp-tests project"
        }, 
        {
            "location": "/installation/Windows-Phone/index.html#how-to-debug-in-project", 
            "text": "Right click  cpp-tests , select  Properties , in  Debug , select  debug \ntarget.     If you select  Managed Only  in  UI Task , it's to debug c# code in  cpp-tests .\nIf you select  Native Only , it's to debug c++ code in  cpp-testsComponent .\nIf you select  Native Only  and want to use  CCLog  function, right click cpp-testsComponent  and define  COCOS2D_DEBUG=1  in  Preprocessor Definitions .", 
            "title": "How to debug in project"
        }, 
        {
            "location": "/installation/Windows-Phone/index.html#starting-a-new-project", 
            "text": "Once everything above works, you can start a new project! To do this, read our\ndocument on the  Cocos Command-line tool .", 
            "title": "Starting a new project"
        }, 
        {
            "location": "/programmers-guide/about/index.html", 
            "text": "What is Cocos2d-x?\n\n\nAbout Cocos2d-x\n\n\nStarted in 2010, Cocos2d-x is an open source, cross-platform game engine. It is\nloaded with powerful features that allows developers to create spectacular games\nwith ease.\n\n\nWhy choose Cocos2d-x\n\n\nWhy would you want to choose Cocos2d-x over other available game engines?\n\n\n\n\n\n\nModern C++ API (please refer to the modernizing done in \nversion 3.0\n)\n\n\n\n\n\n\nCross-platform - desktop and mobile\n\n\n\n\n\n\nCapability to test and debug your game on the desktop and then push it to a\n  mobile or desktop target\n\n\n\n\n\n\nA vast API of functionality including sprites, actions, animations, particles,\n  transitions, timers, events (touch, keyboard, accelerometer, mouse), sound,\n  file IO, persistence, skeletal animations, 3D\n\n\n\n\n\n\nWhere to get Cocos2d-x and what do I get?\n\n\nYou can clone the \nGitHub Repo\n and follow the steps in the \nREADME\n. You can also download as part of the Cocos package on our \ndownload page\n. No matter if you choose to develop in C++, JavaScript or Lua, everything you need is in one package. The Cocos family of products has a few different pieces.\n\n\n\n\n\n\nCocos2d-x\n - this is the game engine, itself. It includes the engine and the\n  \ncocos\n command-line tool. You can download a \nproduction\n\n  release or stay bleeding edge by cloning our \nGitHub Repo\n.\n\n\n\n\n\n\nCocos Creator\n - is a unified game development tool. You can create your\n  entire game, from start to finish, using this tool. It uses JavaScript. Lua and\n  C++ support are being added. Read more about \nCocos Creator\n.\n\n\n\n\n\n\nCocos Launcher\n - is a graphical tool to create and manage your projects.\n  This is also an easy way to add SDKBOX plugins to your project. \nDocumentaion\n\n  is available.\n\n\n\n\n\n\nCoco Studio\n - is EOL'd and has been replaced by \nCocos Creator\n. \nDocumentation\n\n  is still available.\n\n\n\n\n\n\nCode IDE\n -  is EOL'd. Common text editors and IDE's can be used instead.\n\n\n\n\n\n\nConventions used in this book\n\n\n\n\nauto\n is used for creating local variables.\n\n\nusing namespace cocos2d;\n is used to shorten types.\n\n\neach chapter has \na compilable source code sample\n to  demonstrate concepts.\n\n\nclass names, methods names and other API components are rendered using fixed fonts. eg: \nSprite\n.\n\n\nitalics\n are used to notate concepts and keywords.\n\n\n\n\nLearning Resources\n\n\n\n\nThis very guide! You can also get it as a \nPDF\n \n and \nePub\n\n\nSonar Systems Videos\n\n\nAndroid Fundamentals\n\n\nMake School Tutorials\n\n\nGame From Scratch\n\n\n\n\nSpreading the word!\n\n\nYou can help us spread the word about Cocos2d-x! We would surely appreciate it!\n\n\n\n\nTalk about us on Facebook! Our \nFacebook Page\n\n\nTweet, Tweet! Our \nTwitter\n\n\nRead our \nBlog\n and promote it on your social media.\n\n\nBecome a \nRegional Coordinator\n\n\n\n\nWhere to get help\n\n\n\n\nForums\n\n\nBug Tracker\n\n\nIRC. We are in \nFreenode\n in the \n#cocos2d\n channel\n\n\ncpp-tests\n project. This project is our basis for testing. Use this project to\nlearn how we implement the functionality of the engine. This project is located in\n\nCocos2d-x_root/build.\n\n\nAPI Reference\n.", 
            "title": "About Cocos2d-x"
        }, 
        {
            "location": "/programmers-guide/about/index.html#what-is-cocos2d-x", 
            "text": "", 
            "title": "What is Cocos2d-x?"
        }, 
        {
            "location": "/programmers-guide/about/index.html#about-cocos2d-x", 
            "text": "Started in 2010, Cocos2d-x is an open source, cross-platform game engine. It is\nloaded with powerful features that allows developers to create spectacular games\nwith ease.", 
            "title": "About Cocos2d-x"
        }, 
        {
            "location": "/programmers-guide/about/index.html#why-choose-cocos2d-x", 
            "text": "Why would you want to choose Cocos2d-x over other available game engines?    Modern C++ API (please refer to the modernizing done in  version 3.0 )    Cross-platform - desktop and mobile    Capability to test and debug your game on the desktop and then push it to a\n  mobile or desktop target    A vast API of functionality including sprites, actions, animations, particles,\n  transitions, timers, events (touch, keyboard, accelerometer, mouse), sound,\n  file IO, persistence, skeletal animations, 3D", 
            "title": "Why choose Cocos2d-x"
        }, 
        {
            "location": "/programmers-guide/about/index.html#where-to-get-cocos2d-x-and-what-do-i-get", 
            "text": "You can clone the  GitHub Repo  and follow the steps in the  README . You can also download as part of the Cocos package on our  download page . No matter if you choose to develop in C++, JavaScript or Lua, everything you need is in one package. The Cocos family of products has a few different pieces.    Cocos2d-x  - this is the game engine, itself. It includes the engine and the\n   cocos  command-line tool. You can download a  production \n  release or stay bleeding edge by cloning our  GitHub Repo .    Cocos Creator  - is a unified game development tool. You can create your\n  entire game, from start to finish, using this tool. It uses JavaScript. Lua and\n  C++ support are being added. Read more about  Cocos Creator .    Cocos Launcher  - is a graphical tool to create and manage your projects.\n  This is also an easy way to add SDKBOX plugins to your project.  Documentaion \n  is available.    Coco Studio  - is EOL'd and has been replaced by  Cocos Creator .  Documentation \n  is still available.    Code IDE  -  is EOL'd. Common text editors and IDE's can be used instead.", 
            "title": "Where to get Cocos2d-x and what do I get?"
        }, 
        {
            "location": "/programmers-guide/about/index.html#conventions-used-in-this-book", 
            "text": "auto  is used for creating local variables.  using namespace cocos2d;  is used to shorten types.  each chapter has  a compilable source code sample  to  demonstrate concepts.  class names, methods names and other API components are rendered using fixed fonts. eg:  Sprite .  italics  are used to notate concepts and keywords.", 
            "title": "Conventions used in this book"
        }, 
        {
            "location": "/programmers-guide/about/index.html#learning-resources", 
            "text": "This very guide! You can also get it as a  PDF    and  ePub  Sonar Systems Videos  Android Fundamentals  Make School Tutorials  Game From Scratch", 
            "title": "Learning Resources"
        }, 
        {
            "location": "/programmers-guide/about/index.html#spreading-the-word", 
            "text": "You can help us spread the word about Cocos2d-x! We would surely appreciate it!   Talk about us on Facebook! Our  Facebook Page  Tweet, Tweet! Our  Twitter  Read our  Blog  and promote it on your social media.  Become a  Regional Coordinator", 
            "title": "Spreading the word!"
        }, 
        {
            "location": "/programmers-guide/about/index.html#where-to-get-help", 
            "text": "Forums  Bug Tracker  IRC. We are in  Freenode  in the  #cocos2d  channel  cpp-tests  project. This project is our basis for testing. Use this project to\nlearn how we implement the functionality of the engine. This project is located in Cocos2d-x_root/build.  API Reference .", 
            "title": "Where to get help"
        }, 
        {
            "location": "/programmers-guide/basic_concepts/index.html", 
            "text": "Basic Cocos2d-x Concepts\n\n\nThis chapter assumes you've just gotten started with Cocos2d-x, and are ready to\nstart working on the game of your dreams. Don't worry, it will be fun!\n\n\nLet's get started!\n\n\nCocos2d-x is a cross-platform game engine. A game engine is a piece of software\nthat provides common functionality that all games need. You might have heard this\nreferred to as an API or framework but in this guide, we'll be calling it a\n'game engine'.\n\n\nGame engines include many components that when used together will help speed up\ndevelopment time, and often perform better than homemade engines. A game engine\nis usually comprised of some or all of the following components: a renderer,\n2d/3d graphics, collision detection, a physics engine, sound, controller support,\nanimations and more.  Game engines usually support multiple platforms thus making\nit easy to develop your game and then deploy it to multiple platforms without\nmuch overhead at all.\n\n\nSince Cocos2d-x is a game engine, it provides a simplified API for developing\ncross-platform mobile and desktop games. By encapsulating the power inside an\neasy to use API, you can focus on developing your games and worry less about the\nimplementation of the technical underpinnings. Cocos2d-x will take care of as\nmuch or as little of the heavy lifting as you want.\n\n\nCocos2d-x provides \nScene\n, \nTransition\n, \nSprite\n, \nMenu\n, \nSprite3D\n, \nAudio\n\nobjects and much more. Everything you need to create your games are included.\n\n\nMain Components\n\n\nIt might seem overwhelming at first, but getting started with Cocos2d-x is\nsimple. Before we dive into depth we must understand some of the concepts\nCocos2d-x utilizes. At the heart of Cocos2d-x are \nScene\n, \nNode\n, \nSprite\n,\n\nMenu\n and \nAction\n objects. Look at any of your favorite games, and you will\nsee all of these components in one form or another!\n\n\nLet's have a look. This might look a bit similar to a very popular game you might have\nplayed:\n\n\n\n\nLet's take another look, but splitting up the screenshot and identifying the\ncomponents used to build it:\n\n\n\n\nYou can see a menu, some sprites and labels, which all have an equivalent in\nCocos2d-x.  Take a look at a few of your own game design documents,and see what\ncomponents you have, you'll probably have a few that match up.\n\n\nDirector\n\n\nCocos2d-x uses the concept of a \nDirector\n, just like in a movie! The \nDirector\n\ncontrols the flow of operations and tells the necessary recipient what to do.\nThink of yourself as the \nExecutive Producer\n and you tell the \nDirector\n what\nto do! One common \nDirector\n task is to control \nScene\n replacements and\ntransitions. The \nDirector\n is a shared singleton (effectively, there's only one\ninstance of the class at a time) object that you can call from anywhere in your\ncode.\n\n\nHere is an example of a typical game flow. The \nDirector\n takes care of\ntransitioning through this as your game criteria decides:\n\n\n\n\nYou are the director of your game. You decide what happens, when and how.\nTake charge!\n\n\nScene\n\n\nIn your game you probably want a main menu, a few levels and an ending scene.\nHow do you organize all of these into the separate pieces they are? You guessed\nit, \nScene\n. When you think about your favorite movie you can see that it's\ndistinctly broken down into scenes, or separate parts of the story line. If we\napply this same thought process to games, we should come up with at least a few\nscenes no matter how simple the game is.\n\n\nTaking another look at the familiar image from earlier:\n\n\n\n\nThis is a main menu and it is a single \nScene\n. This scene is made up of\nseveral pieces that all fit together to give us the end result. Scenes are drawn\nby the \nrenderer\n. The \nrenderer\n is responsible for rendering sprites and\nother objects into the screen. To better understand this we need to talk a bit\nabout the \nscene graph\n.\n\n\nScene Graph\n\n\nA \nscene graph\n is a data structure that arranges a graphical scene. A\n\nscene graph\n contains \nNode\n objects in a tree (yes, it is called\n\nscene graph\n, but it is actually represented by a \ntree\n) structure.\n\n\n\n\nIt sounds and looks complicated. I'm sure you are asking why should you care\nabout this technical detail if Cocos2d-x does the heavy lifting for you? It\nreally is important to understand how Scenes are drawn by the renderer.\n\n\nOnce you start adding nodes, sprites and animations to your game, you want to\nmake sure you are drawing the things you expect. But what if you are not?  What\nif your sprites are hidden in the background and you want them to be the\nforemost objects? No big deal, just take a step back and run through the scene\ngraph on a piece of paper, and I bet you find your mistake easily.\n\n\nSince the \nScene Graph\n is a tree; you can \nwalk the tree\n. Cocos2d-x uses\nthe \nin-order walk\n algorithm. An \nin-order walk\n is the left side of the\ntree being walked, then the root node, then the right side of the tree. Since\nthe right side of the tree is rendered last, it is displayed first on the\n\nscene graph\n.\n\n\n\n\nThe \nscene graph\n is easily demonstrated, let's take a look at our game scene\nbroken down:\n\n\n\n\nWould be rendered as a tree, simplified to the following:\n\n\n\n\nAnother point to think about is elements with a negative \nz-order\n are on the\nleft side of the tree, while elements with a positive \nz-order\n are on the right\nside.  Keep this in consideration when ordering your elements! Of course, you\ncan add elements in any order, and they're automatically sorted based upon a\ncustomizable \nz-order\n.\n\n\nBuilding on this concept, we can think of a \nScene\n as a collection of\n\nNode\n objects. Let's break the scene above down to see the \nscene graph\n uses\nthe \nz-order\n to layout the \nScene\n:\n\n\n\n\nThe \nScene\n on the left is actually made up of multiple \nNode\n objects\nthat are given a different \nz-order\n to make them \"stack\" on top of each other.\n\n\nIn Cocos2d-x, you build the \nscene graph\n using the \naddChild()\n API call:\n\n\n\n  \n\n    \nC++\n\n    \nJavascript\n\n  \n\n\n\n\n\n\n\n\n\n\n\n// Adds a child with the z-order of -2, that means\n// it goes to the \nleft\n side of the tree (because it is negative)\nscene-\naddChild(title_node, -2);\n\n// When you don't specify the z-order, it will use 0\nscene-\naddChild(label_node);\n\n// Adds a child with the z-order of 1, that means\n// it goes to the \nright\n side of the tree (because it is positive)\nscene-\naddChild(sprite_node, 1);\n\n\n\n\n\n\n\n\n\n\n\n\n\n// Adds a child with the z-order of -2, that means\n// it goes to the \nleft\n side of the tree (because it is negative)\nscene.addChild(title_node, -2);\n\n// When you don't specify the z-order, it will use 0\nscene.addChild(label_node);\n\n// Adds a child with the z-order of 1, that means\n// it goes to the \nright\n side of the tree (because it is positive)\nscene.addChild(sprite_node, 1);\n\n\n\n\n\n\n\nSprites\n\n\nAll games have \nSprite\n objects, and you may or may not realize what they are.\nSprites are the objects that you move around the screen.\nYou can manipulate them. The main character in your game is probably a\nSprite. I know what you might be thinking -  isn't every graphical object\na \nSprite\n? No! Why? Well a Sprite is only a Sprite if you move it around. If you\ndon't move it around it is just a \nNode\n.\n\n\nTaking another look at the image from above, let's point out what are\nSprites and what are Nodes:\n\n\n\n\nSprites are important in all games. Writing a platformer, you probably have\na main character that is made by using an image of some sort. This is\na \nSprite\n.\n\n\nSprites\n are easy to create and they have configurable properties\nlike: \nposition\n, \nrotation\n, \nscale\n, \nopacity\n, \ncolor\n and more.\n\n\n\n  \n\n    \nC++\n\n    \nJavascript\n\n  \n\n\n\n\n\n\n\n\n\n\n\n// This is how to create a sprite\nauto mySprite = Sprite::create(\nmysprite.png\n);\n\n// this is how to change the properties of the sprite\nmySprite-\nsetPosition(Vec2(500, 0));\n\nmySprite-\nsetRotation(40);\n\nmySprite-\nsetScale(2.0); // sets both the scale of the X and Y axis uniformly\n\nmySprite-\nsetAnchorPoint(Vec2(0, 0));\n\n\n\n\n\n\n\n\n\n\n\n\n\n// This is how to create a sprite\nvar mySprite = new cc.Sprite(res.mySprite_png);\n\n// this is how to change the properties of the sprite\nmySprite.setPosition(cc._p(500, 0));\n\nmySprite.setRotation(40);\n\nmySprite.setScale(2.0); // sets both the scale of the X and Y axis uniformly\n\nmySprite.setAnchorPoint(cc._p(0, 0));\n\n\n\n\n\n\n\nLet's illustrate each property, consider the following screenshot from\nthe example code for this chapter:\n\n\n\n\nIf we set the position using \nmySprite-\nsetPosition(Vec2(500, 0));\n:\n\n\n\n\nNote that the \nSprite\n position has changed from its original position to the\nnew position that we specified.\n\n\nIf we now set a new rotation, using \nmySprite-\nsetRotation(40);\n:\n\n\n\n\n... you can see that the \nSprite\n has been rotated to the new amount that was\nspecified.\n\n\nIf we now specify a new scale using \nmySprite-\nsetScale(2.0);\n:\n\n\n\n\nAgain, we can see that the \nSprite\n now has changed according to our code\nchanges.\n\n\nLastly, all \nNode\n objects (since a \nSprite\n is a subclass of \nNode\n) have a\nvalue for \nanchor point\n. We haven't talked about this yet, so now is a good\ntime. You can think of \nanchor point\n as a way of specifying what part of the\nsprite will be used as a base coordinate when setting the position of it.\n\n\nUsing the character from our example game, and setting the anchor point to\n\n0, 0\n using:\n\n\n\n  \n\n    \nC++\n\n    \nJavascript\n\n  \n\n\n\n\n\n\n\n\n\n\n\nmySprite-\nsetAnchorPoint(Vec2(0, 0));\n\n\n\n\n\n\n\n\n\n\n\n\n\nmySprite.setAnchorPoint(cc._p(0, 0));\n\n\n\n\n\n\n\nwould result in the lower left corner of our sprite being used as the basis for\nany \nsetPosition()\n call. Let's see a few of these in action:\n\n\n \n \n \n \n\n\nTake a look at the red dot in each picture. This red dot illustrates where\nthe anchor point is!\n\n\nAs you can see \nanchor point\n is very useful when positioning \nNodes\n. You\ncan even adjust the \nanchor point\n dynamically to simulate effects in your\ngame.\n\n\nWe really can tweak just about every aspect of the \nSprite\n. But, what if we\nwanted to have these same types of changes occur in an automated, time\ndetermined manner? Well, keep reading...\n\n\nActions\n\n\nCreating a \nScene\n and adding \nSprite\n objects on the screen is only part\nof what we need to do. For a game to be a game we need to make things move\naround! \nAction\n objects are an integral part of every game. \nActions\n allow the\ntransformation of \nNode\n objects in time space. Want to move a \nSprite\n\nfrom one \nPoint\n to another and use a callback when complete? No problem!\nYou can even create a \nSequence\n of \nAction\n items to be performed on a\n\nNode\n. You can change \nNode\n properties like position, rotation and scale.\nExample Actions: \nMoveBy\n, \nRotate\n, \nScale\n. All games use \nActions\n.\n\n\nTaking a look at the \nsample code\n\nfor this chapter, here are \nActions\n in work:\n\n\n\n\nand after 5 seconds the sprite will move to a new position:\n\n\n\n\nAction\n objects are easy to create:\n\n\n\n  \n\n    \nC++\n\n    \nJavascript\n\n  \n\n\n\n\n\n\n\n\n\n\n\nauto mySprite = Sprite::create(\nBlue_Front1.png\n);\n\n// Move a sprite 50 pixels to the right, and 10 pixels to the top over 2 seconds.\nauto moveBy = MoveBy::create(2, Vec2(50,10));\nmySprite-\nrunAction(moveBy);\n\n// Move a sprite to a specific location over 2 seconds.\nauto moveTo = MoveTo::create(2, Vec2(50,10));\nmySprite-\nrunAction(moveTo);\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar mySprite = new cc.Sprite(res.mySprite_png);\n\n// Move a sprite 50 pixels to the right, and 10 pixels to the top over 2 seconds.\nvar moveBy = new cc.MoveBy(2, cc._p(50,10));\nmySprite.runAction(moveBy);\n\n// Move a sprite to a specific location over 2 seconds.\nvar moveTo = new cc.MoveTo(2, cc._p(50,10));\nmySprite.runAction(moveTo);\n\n\n\n\n\n\n\nSequences and Spawns\n\n\nWith moving \nSprite\n objects on the screen we have everything we need to create\nour game, right? Not quite. What about running multiple \nActions\n? Yes,\nCocos2d-x handles this too in a few different ways.\n\n\nJust like it sounds, a \nSequence\n is multiple \nAction\n objects run in a specified\norder. Need to run the \nSequence\n in reverse? No problem, Cocos2d-x handles\nthis with no additional work.\n\n\nTake a look at the flow of an example \nSequence\n for moving a \nSprite\n\ngradually:\n\n\n\n\nThis \nSequence\n is easy to make:\n\n\n\n  \n\n    \nC++\n\n    \nJavascript\n\n  \n\n\n\n\n\n\n\n\n\n\n\nauto mySprite = Node::create();\n\n// move to point 50,10 over 2 seconds\nauto moveTo1 = MoveTo::create(2, Vec2(50,10));\n\n// move from current position by 100,10 over 2 seconds\nauto moveBy1 = MoveBy::create(2, Vec2(100,10));\n\n// move to point 150,10 over 2 seconds\nauto moveTo2 = MoveTo::create(2, Vec2(150,10));\n\n// create a delay\nauto delay = DelayTime::create(1);\n\nmySprite-\nrunAction(Sequence::create(moveTo1, delay, moveBy1, delay.clone(),\nmoveTo2, nullptr));\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar mySprite = new cc.Node();\n\n// move to point 50,10 over 2 seconds\nvar moveTo1 = new cc.MoveTo(2, cc._p(50,10));\n\n// move from current position by 100,10 over 2 seconds\nvar moveBy1 = new cc.MoveBy(2, cc._p(100,10));\n\n// move to point 150,10 over 2 seconds\nvar moveTo2 = new cc.MoveTo(2, cc._p(150,10));\n\n// create a delay\nvar delay = new cc.DelayTime(1);\n\nmySprite.runAction(Sequence.create(moveTo1, delay, moveBy1, delay.clone(),\nmoveTo2));\n\n\n\n\n\n\n\nThis example runs a \nSequence\n, in order, but what about running all the\nspecified \nActions\n at the same time? Cocos2d-x supports this too and it\nis called \nSpawn\n. \nSpawn\n will take all the specified \nAction\n objects and\nexecutes them at the same time. Some might be longer than others, so they won't\nall finish at the same time if this is the case.\n\n\n\n  \n\n    \nC++\n\n    \nJavascript\n\n  \n\n\n\n\n\n\n\n\n\n\n\nauto myNode = Node::create();\n\nauto moveTo1 = MoveTo::create(2, Vec2(50,10));\nauto moveBy1 = MoveBy::create(2, Vec2(100,10));\nauto moveTo2 = MoveTo::create(2, Vec2(150,10));\n\nmyNode-\nrunAction(Spawn::create(moveTo1, moveBy1, moveTo2, nullptr));\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar myNode = new cc.Node();\n\nvar moveTo1 = new cc.MoveTo(2, cc._p(50,10));\nvar moveBy1 = new cc.MoveBy(2, cc._p(100,10));\nvar moveTo2 = new cc.MoveTo(2, cc._p(150,10));\n\nmyNode.runAction(Spawn.create(moveTo1, moveBy1, moveTo2));\n\n\n\n\n\n\n\nWhy \nSpawn\n actions? Is there ever a reason? Sure! What if your main\ncharacter has multiple \nActions\n when obtaining a power up? Maybe beating\nthe boss at the end of a level has multiple \nActions\n that need to happen\nto end the level.\n\n\nParent Child Relationship\n\n\nCocos2d-x uses a \nparent and child\n relationship. This means that properties\nand changes to the parent node are applied to its children. Consider a single\n\nSprite\n and then a \nSprite\n that has children:\n\n\n\n\nWith children, changing the rotation of the parent will also change the\nrotation to all children:\n\n\n\n\n\n  \n\n    \nC++\n\n    \nJavascript\n\n  \n\n\n\n\n\n\n\n\n\n\n\nauto myNode = Node::create();\n\n// rotating by setting\nmyNode-\nsetRotation(50);\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar myNode = new cc.Node();\n\n// rotating by setting\nmyNode.setRotation(50);\n\n\n\n\n\n\n\nJust like with rotation, if you change the scale of the parent the children\nwill also get scaled:\n\n\n\n\n\n  \n\n    \nC++\n\n    \nJavascript\n\n  \n\n\n\n\n\n\n\n\n\n\n\nauto myNode = Node::create();\n\n// scaling by setting\nmyNode-\nsetScale(2.0); // scales uniformly by 2.0\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar myNode = new cc.Node();\n\n// scaling by setting\nmyNode.setScale(2.0); // scales uniformly by 2.0\n\n\n\n\n\n\n\nNot all changes to the \nparent\n are passed down to its \nchildren\n. Changing the\n\nparent\n \nanchor point\n only affects transform operations (\nscale\n, \nposition\n,\n\nrotate\n, \nskew\n, etc...) and does not affect children positioning. In fact, children\nwill be always added to the bottom-left (0,0) corner of its parent.\n\n\nLogging as a way to output messages\n\n\nSometimes, when your app is running, you might wish to see messages being written\nto the console for informational or debug purposes. This is built into the\nengine, using \nlog()\n. Example:\n\n\n\n  \n\n    \nC++\n\n    \nJavascript\n\n  \n\n\n\n\n\n\n\n\n\n\n\n// a simple string\nlog(\nThis would be outputted to the console\n);\n\n// a string and a variable\nstring s = \nMy variable\n;\nlog(\nstring is %s\n, s);\n\n// a double and a variable\ndouble dd = 42;\nlog(\ndouble is %f\n, dd);\n\n// an integer and a variable\nint i = 6;\nlog(\ninteger is %d\n, i);\n\n// a float and a variable\nfloat f = 2.0f;\nlog(\nfloat is %f\n, f);\n\n// a bool and a variable\nbool b = true;\nif (b == true)\n    log(\nbool is true\n);\nelse\n    log(\nbool is false\n);\n\n\n\n\nAnd, as expected, if you prefer you can use \nstd::cout\n in place of \nlog()\n,\nhowever, \nlog()\n might offer easier formatting of complex output.\n\n\n\n\n\n\n\n\n\n\n\n// a simple string\ncc.log(\nThis would be outputted to the console\n);\n\n// outputting more than a simple string\nvar pos = cc._p(sender.x, sender.y);\ncc.log(\nPosition x: \n + pos.x + ' y:' + pos.y);\n\n\n\n\n\n\n\nConclusion\n\n\nWe have gone through a lot of Cocos2d-x concepts. Take a deep breath.\nDon't worry. Just dive in with your ideas and take it one step at a time.\nCocos2d-x and programming in general are not skills that are learned\novernight. These take practice and understanding. Remember that the \nforums\n are also there to help you with questions.", 
            "title": "Basic Concepts"
        }, 
        {
            "location": "/programmers-guide/basic_concepts/index.html#basic-cocos2d-x-concepts", 
            "text": "This chapter assumes you've just gotten started with Cocos2d-x, and are ready to\nstart working on the game of your dreams. Don't worry, it will be fun!  Let's get started!  Cocos2d-x is a cross-platform game engine. A game engine is a piece of software\nthat provides common functionality that all games need. You might have heard this\nreferred to as an API or framework but in this guide, we'll be calling it a\n'game engine'.  Game engines include many components that when used together will help speed up\ndevelopment time, and often perform better than homemade engines. A game engine\nis usually comprised of some or all of the following components: a renderer,\n2d/3d graphics, collision detection, a physics engine, sound, controller support,\nanimations and more.  Game engines usually support multiple platforms thus making\nit easy to develop your game and then deploy it to multiple platforms without\nmuch overhead at all.  Since Cocos2d-x is a game engine, it provides a simplified API for developing\ncross-platform mobile and desktop games. By encapsulating the power inside an\neasy to use API, you can focus on developing your games and worry less about the\nimplementation of the technical underpinnings. Cocos2d-x will take care of as\nmuch or as little of the heavy lifting as you want.  Cocos2d-x provides  Scene ,  Transition ,  Sprite ,  Menu ,  Sprite3D ,  Audio \nobjects and much more. Everything you need to create your games are included.", 
            "title": "Basic Cocos2d-x Concepts"
        }, 
        {
            "location": "/programmers-guide/basic_concepts/index.html#main-components", 
            "text": "It might seem overwhelming at first, but getting started with Cocos2d-x is\nsimple. Before we dive into depth we must understand some of the concepts\nCocos2d-x utilizes. At the heart of Cocos2d-x are  Scene ,  Node ,  Sprite , Menu  and  Action  objects. Look at any of your favorite games, and you will\nsee all of these components in one form or another!  Let's have a look. This might look a bit similar to a very popular game you might have\nplayed:   Let's take another look, but splitting up the screenshot and identifying the\ncomponents used to build it:   You can see a menu, some sprites and labels, which all have an equivalent in\nCocos2d-x.  Take a look at a few of your own game design documents,and see what\ncomponents you have, you'll probably have a few that match up.", 
            "title": "Main Components"
        }, 
        {
            "location": "/programmers-guide/basic_concepts/index.html#director", 
            "text": "Cocos2d-x uses the concept of a  Director , just like in a movie! The  Director \ncontrols the flow of operations and tells the necessary recipient what to do.\nThink of yourself as the  Executive Producer  and you tell the  Director  what\nto do! One common  Director  task is to control  Scene  replacements and\ntransitions. The  Director  is a shared singleton (effectively, there's only one\ninstance of the class at a time) object that you can call from anywhere in your\ncode.  Here is an example of a typical game flow. The  Director  takes care of\ntransitioning through this as your game criteria decides:   You are the director of your game. You decide what happens, when and how.\nTake charge!", 
            "title": "Director"
        }, 
        {
            "location": "/programmers-guide/basic_concepts/index.html#scene", 
            "text": "In your game you probably want a main menu, a few levels and an ending scene.\nHow do you organize all of these into the separate pieces they are? You guessed\nit,  Scene . When you think about your favorite movie you can see that it's\ndistinctly broken down into scenes, or separate parts of the story line. If we\napply this same thought process to games, we should come up with at least a few\nscenes no matter how simple the game is.  Taking another look at the familiar image from earlier:   This is a main menu and it is a single  Scene . This scene is made up of\nseveral pieces that all fit together to give us the end result. Scenes are drawn\nby the  renderer . The  renderer  is responsible for rendering sprites and\nother objects into the screen. To better understand this we need to talk a bit\nabout the  scene graph .", 
            "title": "Scene"
        }, 
        {
            "location": "/programmers-guide/basic_concepts/index.html#scene-graph", 
            "text": "A  scene graph  is a data structure that arranges a graphical scene. A scene graph  contains  Node  objects in a tree (yes, it is called scene graph , but it is actually represented by a  tree ) structure.   It sounds and looks complicated. I'm sure you are asking why should you care\nabout this technical detail if Cocos2d-x does the heavy lifting for you? It\nreally is important to understand how Scenes are drawn by the renderer.  Once you start adding nodes, sprites and animations to your game, you want to\nmake sure you are drawing the things you expect. But what if you are not?  What\nif your sprites are hidden in the background and you want them to be the\nforemost objects? No big deal, just take a step back and run through the scene\ngraph on a piece of paper, and I bet you find your mistake easily.  Since the  Scene Graph  is a tree; you can  walk the tree . Cocos2d-x uses\nthe  in-order walk  algorithm. An  in-order walk  is the left side of the\ntree being walked, then the root node, then the right side of the tree. Since\nthe right side of the tree is rendered last, it is displayed first on the scene graph .   The  scene graph  is easily demonstrated, let's take a look at our game scene\nbroken down:   Would be rendered as a tree, simplified to the following:   Another point to think about is elements with a negative  z-order  are on the\nleft side of the tree, while elements with a positive  z-order  are on the right\nside.  Keep this in consideration when ordering your elements! Of course, you\ncan add elements in any order, and they're automatically sorted based upon a\ncustomizable  z-order .  Building on this concept, we can think of a  Scene  as a collection of Node  objects. Let's break the scene above down to see the  scene graph  uses\nthe  z-order  to layout the  Scene :   The  Scene  on the left is actually made up of multiple  Node  objects\nthat are given a different  z-order  to make them \"stack\" on top of each other.  In Cocos2d-x, you build the  scene graph  using the  addChild()  API call:  \n   \n     C++ \n     Javascript \n       // Adds a child with the z-order of -2, that means\n// it goes to the  left  side of the tree (because it is negative)\nscene- addChild(title_node, -2);\n\n// When you don't specify the z-order, it will use 0\nscene- addChild(label_node);\n\n// Adds a child with the z-order of 1, that means\n// it goes to the  right  side of the tree (because it is positive)\nscene- addChild(sprite_node, 1);     // Adds a child with the z-order of -2, that means\n// it goes to the  left  side of the tree (because it is negative)\nscene.addChild(title_node, -2);\n\n// When you don't specify the z-order, it will use 0\nscene.addChild(label_node);\n\n// Adds a child with the z-order of 1, that means\n// it goes to the  right  side of the tree (because it is positive)\nscene.addChild(sprite_node, 1);", 
            "title": "Scene Graph"
        }, 
        {
            "location": "/programmers-guide/basic_concepts/index.html#sprites", 
            "text": "All games have  Sprite  objects, and you may or may not realize what they are.\nSprites are the objects that you move around the screen.\nYou can manipulate them. The main character in your game is probably a\nSprite. I know what you might be thinking -  isn't every graphical object\na  Sprite ? No! Why? Well a Sprite is only a Sprite if you move it around. If you\ndon't move it around it is just a  Node .  Taking another look at the image from above, let's point out what are\nSprites and what are Nodes:   Sprites are important in all games. Writing a platformer, you probably have\na main character that is made by using an image of some sort. This is\na  Sprite .  Sprites  are easy to create and they have configurable properties\nlike:  position ,  rotation ,  scale ,  opacity ,  color  and more.  \n   \n     C++ \n     Javascript \n       // This is how to create a sprite\nauto mySprite = Sprite::create( mysprite.png );\n\n// this is how to change the properties of the sprite\nmySprite- setPosition(Vec2(500, 0));\n\nmySprite- setRotation(40);\n\nmySprite- setScale(2.0); // sets both the scale of the X and Y axis uniformly\n\nmySprite- setAnchorPoint(Vec2(0, 0));     // This is how to create a sprite\nvar mySprite = new cc.Sprite(res.mySprite_png);\n\n// this is how to change the properties of the sprite\nmySprite.setPosition(cc._p(500, 0));\n\nmySprite.setRotation(40);\n\nmySprite.setScale(2.0); // sets both the scale of the X and Y axis uniformly\n\nmySprite.setAnchorPoint(cc._p(0, 0));   Let's illustrate each property, consider the following screenshot from\nthe example code for this chapter:   If we set the position using  mySprite- setPosition(Vec2(500, 0)); :   Note that the  Sprite  position has changed from its original position to the\nnew position that we specified.  If we now set a new rotation, using  mySprite- setRotation(40); :   ... you can see that the  Sprite  has been rotated to the new amount that was\nspecified.  If we now specify a new scale using  mySprite- setScale(2.0); :   Again, we can see that the  Sprite  now has changed according to our code\nchanges.  Lastly, all  Node  objects (since a  Sprite  is a subclass of  Node ) have a\nvalue for  anchor point . We haven't talked about this yet, so now is a good\ntime. You can think of  anchor point  as a way of specifying what part of the\nsprite will be used as a base coordinate when setting the position of it.  Using the character from our example game, and setting the anchor point to 0, 0  using:  \n   \n     C++ \n     Javascript \n       mySprite- setAnchorPoint(Vec2(0, 0));     mySprite.setAnchorPoint(cc._p(0, 0));   would result in the lower left corner of our sprite being used as the basis for\nany  setPosition()  call. Let's see a few of these in action:           Take a look at the red dot in each picture. This red dot illustrates where\nthe anchor point is!  As you can see  anchor point  is very useful when positioning  Nodes . You\ncan even adjust the  anchor point  dynamically to simulate effects in your\ngame.  We really can tweak just about every aspect of the  Sprite . But, what if we\nwanted to have these same types of changes occur in an automated, time\ndetermined manner? Well, keep reading...", 
            "title": "Sprites"
        }, 
        {
            "location": "/programmers-guide/basic_concepts/index.html#actions", 
            "text": "Creating a  Scene  and adding  Sprite  objects on the screen is only part\nof what we need to do. For a game to be a game we need to make things move\naround!  Action  objects are an integral part of every game.  Actions  allow the\ntransformation of  Node  objects in time space. Want to move a  Sprite \nfrom one  Point  to another and use a callback when complete? No problem!\nYou can even create a  Sequence  of  Action  items to be performed on a Node . You can change  Node  properties like position, rotation and scale.\nExample Actions:  MoveBy ,  Rotate ,  Scale . All games use  Actions .  Taking a look at the  sample code \nfor this chapter, here are  Actions  in work:   and after 5 seconds the sprite will move to a new position:   Action  objects are easy to create:  \n   \n     C++ \n     Javascript \n       auto mySprite = Sprite::create( Blue_Front1.png );\n\n// Move a sprite 50 pixels to the right, and 10 pixels to the top over 2 seconds.\nauto moveBy = MoveBy::create(2, Vec2(50,10));\nmySprite- runAction(moveBy);\n\n// Move a sprite to a specific location over 2 seconds.\nauto moveTo = MoveTo::create(2, Vec2(50,10));\nmySprite- runAction(moveTo);     var mySprite = new cc.Sprite(res.mySprite_png);\n\n// Move a sprite 50 pixels to the right, and 10 pixels to the top over 2 seconds.\nvar moveBy = new cc.MoveBy(2, cc._p(50,10));\nmySprite.runAction(moveBy);\n\n// Move a sprite to a specific location over 2 seconds.\nvar moveTo = new cc.MoveTo(2, cc._p(50,10));\nmySprite.runAction(moveTo);", 
            "title": "Actions"
        }, 
        {
            "location": "/programmers-guide/basic_concepts/index.html#sequences-and-spawns", 
            "text": "With moving  Sprite  objects on the screen we have everything we need to create\nour game, right? Not quite. What about running multiple  Actions ? Yes,\nCocos2d-x handles this too in a few different ways.  Just like it sounds, a  Sequence  is multiple  Action  objects run in a specified\norder. Need to run the  Sequence  in reverse? No problem, Cocos2d-x handles\nthis with no additional work.  Take a look at the flow of an example  Sequence  for moving a  Sprite \ngradually:   This  Sequence  is easy to make:  \n   \n     C++ \n     Javascript \n       auto mySprite = Node::create();\n\n// move to point 50,10 over 2 seconds\nauto moveTo1 = MoveTo::create(2, Vec2(50,10));\n\n// move from current position by 100,10 over 2 seconds\nauto moveBy1 = MoveBy::create(2, Vec2(100,10));\n\n// move to point 150,10 over 2 seconds\nauto moveTo2 = MoveTo::create(2, Vec2(150,10));\n\n// create a delay\nauto delay = DelayTime::create(1);\n\nmySprite- runAction(Sequence::create(moveTo1, delay, moveBy1, delay.clone(),\nmoveTo2, nullptr));     var mySprite = new cc.Node();\n\n// move to point 50,10 over 2 seconds\nvar moveTo1 = new cc.MoveTo(2, cc._p(50,10));\n\n// move from current position by 100,10 over 2 seconds\nvar moveBy1 = new cc.MoveBy(2, cc._p(100,10));\n\n// move to point 150,10 over 2 seconds\nvar moveTo2 = new cc.MoveTo(2, cc._p(150,10));\n\n// create a delay\nvar delay = new cc.DelayTime(1);\n\nmySprite.runAction(Sequence.create(moveTo1, delay, moveBy1, delay.clone(),\nmoveTo2));   This example runs a  Sequence , in order, but what about running all the\nspecified  Actions  at the same time? Cocos2d-x supports this too and it\nis called  Spawn .  Spawn  will take all the specified  Action  objects and\nexecutes them at the same time. Some might be longer than others, so they won't\nall finish at the same time if this is the case.  \n   \n     C++ \n     Javascript \n       auto myNode = Node::create();\n\nauto moveTo1 = MoveTo::create(2, Vec2(50,10));\nauto moveBy1 = MoveBy::create(2, Vec2(100,10));\nauto moveTo2 = MoveTo::create(2, Vec2(150,10));\n\nmyNode- runAction(Spawn::create(moveTo1, moveBy1, moveTo2, nullptr));     var myNode = new cc.Node();\n\nvar moveTo1 = new cc.MoveTo(2, cc._p(50,10));\nvar moveBy1 = new cc.MoveBy(2, cc._p(100,10));\nvar moveTo2 = new cc.MoveTo(2, cc._p(150,10));\n\nmyNode.runAction(Spawn.create(moveTo1, moveBy1, moveTo2));   Why  Spawn  actions? Is there ever a reason? Sure! What if your main\ncharacter has multiple  Actions  when obtaining a power up? Maybe beating\nthe boss at the end of a level has multiple  Actions  that need to happen\nto end the level.", 
            "title": "Sequences and Spawns"
        }, 
        {
            "location": "/programmers-guide/basic_concepts/index.html#parent-child-relationship", 
            "text": "Cocos2d-x uses a  parent and child  relationship. This means that properties\nand changes to the parent node are applied to its children. Consider a single Sprite  and then a  Sprite  that has children:   With children, changing the rotation of the parent will also change the\nrotation to all children:   \n   \n     C++ \n     Javascript \n       auto myNode = Node::create();\n\n// rotating by setting\nmyNode- setRotation(50);     var myNode = new cc.Node();\n\n// rotating by setting\nmyNode.setRotation(50);   Just like with rotation, if you change the scale of the parent the children\nwill also get scaled:   \n   \n     C++ \n     Javascript \n       auto myNode = Node::create();\n\n// scaling by setting\nmyNode- setScale(2.0); // scales uniformly by 2.0     var myNode = new cc.Node();\n\n// scaling by setting\nmyNode.setScale(2.0); // scales uniformly by 2.0   Not all changes to the  parent  are passed down to its  children . Changing the parent   anchor point  only affects transform operations ( scale ,  position , rotate ,  skew , etc...) and does not affect children positioning. In fact, children\nwill be always added to the bottom-left (0,0) corner of its parent.", 
            "title": "Parent Child Relationship"
        }, 
        {
            "location": "/programmers-guide/basic_concepts/index.html#logging-as-a-way-to-output-messages", 
            "text": "Sometimes, when your app is running, you might wish to see messages being written\nto the console for informational or debug purposes. This is built into the\nengine, using  log() . Example:  \n   \n     C++ \n     Javascript \n       // a simple string\nlog( This would be outputted to the console );\n\n// a string and a variable\nstring s =  My variable ;\nlog( string is %s , s);\n\n// a double and a variable\ndouble dd = 42;\nlog( double is %f , dd);\n\n// an integer and a variable\nint i = 6;\nlog( integer is %d , i);\n\n// a float and a variable\nfloat f = 2.0f;\nlog( float is %f , f);\n\n// a bool and a variable\nbool b = true;\nif (b == true)\n    log( bool is true );\nelse\n    log( bool is false );  And, as expected, if you prefer you can use  std::cout  in place of  log() ,\nhowever,  log()  might offer easier formatting of complex output.     // a simple string\ncc.log( This would be outputted to the console );\n\n// outputting more than a simple string\nvar pos = cc._p(sender.x, sender.y);\ncc.log( Position x:   + pos.x + ' y:' + pos.y);", 
            "title": "Logging as a way to output messages"
        }, 
        {
            "location": "/programmers-guide/basic_concepts/index.html#conclusion", 
            "text": "We have gone through a lot of Cocos2d-x concepts. Take a deep breath.\nDon't worry. Just dive in with your ideas and take it one step at a time.\nCocos2d-x and programming in general are not skills that are learned\novernight. These take practice and understanding. Remember that the  forums  are also there to help you with questions.", 
            "title": "Conclusion"
        }, 
        {
            "location": "/programmers-guide/sprites/index.html", 
            "text": "Sprites\n\n\nWhat are Sprites\n\n\nA Sprite is a 2D image that can be animated or transformed by changing its\nproperties, including \nrotation\n, \nposition\n, \nscale\n, \ncolor\n, etc.\n\n\nCreating Sprites\n\n\nThere are different ways to create Sprites depending upon what you need to\naccomplish. You can create a \nSprite\n from an image with various graphic formats\nincluding: \nPNG\n, \nJPEG\n, \nTIFF\n, and others. Let's go through some create methods and\ntalk about each one.\n\n\nCreating a Sprite\n\n\nA \nSprite\n can be created by specifying an image file to use.\n\n\n\n  \n\n    \nC++\n\n    \nJavascript\n\n  \n\n\n\n  \n\n\n\n\n\n  auto mySprite = Sprite::create(\nmysprite.png\n);\n\n\n\n\n\n\n\n\n\n\n\n\n\n  var mySprite = new cc.Sprite(res.mySprite_png);\n\n\n\n\n\n\n\n\n\nThe statement above creates a \nSprite\n using the \nmysprite.png\n image. The result\nis that the created \nSprite\n uses the whole image. \nSprite\n has the same dimensions\nof \nmysprite.png\n. If the image file is 200 x 200 the resulting \nSprite\n is 200 x\n200.\n\n\nCreating a Sprite with a Rect\n\n\nIn the previous example, the created \nSprite\n has the same size as the original\nimage file. If you want to create a \nSprite\n with only a certain portion of the\nimage file, you can do it by specifying a \nRect\n.\n\n\nRect\n has 4 values: \norigin x\n, \norigin y\n, \nwidth\n and \nheight\n.\n\n\n\n  \n\n    \nC++\n\n    \nJavascript\n\n  \n\n\n\n  \n\n\n\n\n\nauto mySprite = Sprite::create(\nmysprite.png\n, Rect(0,0,40,40));\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar mySprite = new cc.Sprite(res.mySprite_png, cc.rect(0,0,40,40));\n\n\n\n\n\n\n\n\n\nRect\n starts at the top left corner. This is the opposite of what you might be\nused to when laying out screen position as it starts from the lower left corner.\nThus the resulting \nSprite\n is only a portion of the image file. In this case the\n\nSprite\n dimension is 40 x 40 starting at the top left corner.\n\n\nIf you don't specify a \nRect\n, Cocos2d-x will automatically use the full width\nand height of the image file you specify. Take a look at the example below. If\nwe use an image with dimensions 200 x 200 the following 2 statements would have\nthe same result.\n\n\n\n  \n\n    \nC++\n\n    \nJavascript\n\n  \n\n\n\n  \n\n\n\n\n\nauto mySprite = Sprite::create(\nmysprite.png\n);\n\nauto mySprite = Sprite::create(\nmysprite.png\n, Rect(0,0,200,200));\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar mySprite = new cc.Sprite(res.mySprite_png);\n\nvar mySprite = new cc.Sprite(res.mySprite_png, cc.rect(0,0,200,200));\n\n\n\n\n\n\n\nCreating a Sprite from a Sprite Sheet\n\n\nA \nsprite sheet\n is a way to combine sprites into a single file. Using a\n\nsprite sheet\n helps achieve better performance by \nbatching\n the\n\ndraw calls\n. They can also save disk and video memory in cases where the\nsprites can be packed on a sheet more efficiently (generally requires special tools).\nYou will read more about this in the Advanced Chapter, but it is but it is one of many\nstandard methods in the industry for increasing game performance.\n\n\nWhen using a \nsprite sheet\n it is first loaded, in its entirety, into the\n\nSpriteFrameCache\n. \nSpriteFrameCache\n is a caching class that retains the \nSpriteFrame\n\nobjects added to it, for future quicker access. The \nSpriteFrame\n is loaded\nonce and retained in the \nSpriteFrameCache\n\n\nHere is an example sprite sheet:\n\n\n\n\nIt doesn't look like much but let's take a closer look at what is happening:\n\n\n\n\nAs you can see the \nsprite sheet\n, at a minimum it reduces unneeded space and\nconsolidates all sprites into a single file.\n\n\nLet's tie this all together!\n\n\nLoading a Sprite Sheet\n\n\nLoad your \nsprite sheet\n into the \nSpriteFrameCache\n, probably in \nAppDelegate\n:\n\n\n\n  \n\n    \nC++\n\n    \nJavascript\n\n  \n\n\n\n  \n\n\n\n\n\n// load the Sprite Sheet\nauto spritecache = SpriteFrameCache::getInstance();\n\n// the .plist file can be generated with any of the tools mentioned below\nspritecache-\naddSpriteFramesWithFile(\nsprites.plist\n);\n\n\n\n\n\n\n\n\n\n\n\n\n\n// load the Sprite Sheet\nvar spritecache = cc.SpriteFrameCache;\n\n// the .plist file can be generated with any of the tools mentioned below\nspritecache.addSpriteFramesWithFile(res.sprites_plist);\n\n\n\n\n\n\n\nNow that we have a \nsprite sheet\n loaded into \nSpriteFrameCache\n we can create\n\nSprite\n objects by utilizing it.\n\n\nCreating a Sprite from SpriteFrameCache\n\n\nThis creates a \nSprite\n by pulling it from the \nSpriteFrameCache\n.\n\n\n\n  \n\n    \nC++\n\n    \nJavascript\n\n  \n\n\n\n  \n\n\n\n\n\n// Our .plist file has names for each of the sprites in it.  We'll grab\n// the sprite named, \nmysprite\n from the sprite sheet:\nauto mysprite = Sprite::createWithSpriteFrameName(\nmysprite.png\n);\n\n\n\n\n\n\n\n\n\n\n\n\n\n// Our .plist file has names for each of the sprites in it.  We'll grab\n// the sprite named, \nBlue_Front1\n from the sprite sheet:\nvar mysprite = cc.Sprite.createWithSpriteFrameName(res.mySprite_png);\n\n\n\n\n\n\n\n\n\nCreating a Sprite from a SpriteFrame\n\n\nAnother way to create the same \nSprite\n is by fetching the \nSpriteFrame\n from the\n\nSpriteFrameCache\n, and then creating the \nSprite\n with the \nSpriteFrame\n. Example:\n\n\n\n  \n\n    \nC++\n\n    \nJavascript\n\n  \n\n\n\n  \n\n\n\n\n\n// this is equivalent to the previous example,\n// but it is created by retrieving the SpriteFrame from the cache.\nauto newspriteFrame = SpriteFrameCache::getInstance()-\ngetSpriteFrameByName(\nBlue_Front1.png\n);\nauto newSprite = Sprite::createWithSpriteFrame(newspriteFrame);\n\n\n\n\n\n\n\n\n\n\n\n\n\n// this is equivalent to the previous example,\n// but it is created by retrieving the SpriteFrame from the cache.\nvar newspriteFrame = cc.SpriteFrameCache.getSpriteFrameByName(res.sprites_plist);\nvar newSprite = cc.Sprite.createWithSpriteFrame(newspriteFrame);\n\n\n\n\n\n\n\n\n\nTools for creating Sprite Sheets\n\n\nCreating a \nsprite sheet\n manually is a tedious process. Fortunately there are\ntools that can generate them automatically. These tools can provide even more\nways to adjust your \nsprite sheet\n for maximum optimization!\n\n\nHere are a few tools:\n\n\n\n\nCocos Studio\n\n\nShoeBox\n\n\nTexture Packer\n\n\nZwoptex\n\n\nSprite Sheet Packer\n\n\n\n\nSprite Manipulation\n\n\nAfter creating a \nSprite\n you will have access to a variety of properties it\nhas that can be manipulated.\n\n\nGiven:\n\n\n\n  \n\n    \nC++\n\n    \nJavascript\n\n  \n\n\n\n  \n\n\n\n\n\nauto mySprite = Sprite::create(\nmysprite.png\n);\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar mySprite = new Sprite(res.mysprite_png);\n\n\n\n\n\n\n\n\n\nAnchor Point and Position\n\n\nAnchor Point\n is a point that you set as a way to specify what part of\nthe \nSprite\n will be used when setting its position. \nAnchor Point\n affects\nonly properties that can be transformed. This includes \nscale\n, \nrotation\n,\n\nskew\n. This excludes \ncolor\n and \nopacity\n. The \nanchor point\n uses a\nbottom left coordinate system. This means that when specifying X and Y coordinate\nvalues you need to make sure to start at the bottom left hand corner to do your\ncalculations. By default, all \nNode\n objects have a default \nanchor point\n of\nis \n(0.5, 0.5)\n.\n\n\nSetting the \nanchor point\n is easy:\n\n\n\n  \n\n    \nC++\n\n    \nJavascript\n\n  \n\n\n\n  \n\n\n\n\n\n// DEFAULT anchor point for all Sprites\nmySprite-\nsetAnchorPoint(0.5, 0.5);\n\n// bottom left\nmySprite-\nsetAnchorPoint(0, 0);\n\n// top left\nmySprite-\nsetAnchorPoint(0, 1);\n\n// bottom right\nmySprite-\nsetAnchorPoint(1, 0);\n\n// top right\nmySprite-\nsetAnchorPoint(1, 1);\n\n\n\n\n\n\n\n\n\n\n\n\n\n// DEFAULT anchor point for all Sprites\nmySprite.setAnchorPoint(cc._p(0.5, 0.5));\n\n// bottom left\nmySprite.setAnchorPoint(cc._p(0, 0));\n\n// top left\nmySprite.setAnchorPoint(cc._p(0, 1));\n\n// bottom right\nmySprite.setAnchorPoint(cc._p(1, 0));\n\n// top right\nmySprite.setAnchorPoint(cc._p(1, 1));\n\n\n\n\n\n\n\nTo represent this visually:\n\n\n\n\nSprite properties effected by anchor point\n\n\nUsing \nanchor point\n effects only properties that can be transformed. This includes\n\nscale\n, \nrotation\n, \nskew\n.\n\n\nPosition\n\n\nA \nsprite's\n position is affected by its \nanchor point\n as it is this point\nthat is used as a starting point for positioning. Let's visually look at how this\nhappens. Notice the colored line and where the \nsprite's\n position is in relation\nto it. Notice, as we change the \nanchor point\n values, the \nsprite's\n position\nchanges. It is important to note that all it took was changing the \nanchor point\n\nvalue. We did not use a \nsetPosition()\n statement to achieve this:\n\n\n\n\nThere are more ways to set position than just \nanchor point\n. \nSprite\n objects\ncan also be set using the \nsetPosition()\n method.\n\n\n\n  \n\n    \nC++\n\n    \nJavascript\n\n  \n\n\n\n  \n\n\n\n\n\n// position a sprite to a specific position of x = 100, y = 200.\nmySprite-\nsetPosition(Vec2(100, 200));\n\n\n\n\n\n\n\n\n\n\n\n\n\nmySprite.setPosition(cc._p(100, 200));\n\n\n\n\n\n\n\nRotation\n\n\nChanges the \nsprite's\n rotation, by a positive or negative number of degrees.\nA positive value rotates the \nSprite\n object clockwise, while a negative value\nrotates the \nSprite\n object counter-clockwise. The default value is \n0\n.\n\n\n\n  \n\n    \nC++\n\n    \nJavascript\n\n  \n\n\n\n  \n\n\n\n\n\n// rotate sprite by +20 degrees\nmySprite-\nsetRotation(20.0f);\n\n// rotate sprite by -20 degrees\nmySprite-\nsetRotation(-20.0f);\n\n// rotate sprite by +60 degrees\nmySprite-\nsetRotation(60.0f);\n\n// rotate sprite by -60 degrees\nmySprite-\nsetRotation(-60.0f);\n\n\n\n\n\n\n\n\n\n\n\n\n\n// rotate sprite by +20 degrees\nmySprite.setRotation(cc._p(20.0));\n\n// rotate sprite by -20 degrees\nmySprite.setRotation(cc._p(-20.0));\n\n// rotate sprite by +60 degrees\nmySprite.setRotation(cc._p(60.0));\n\n// rotate sprite by -60 degrees\nmySprite.setRotation(cc._p(-60.0));\n\n\n\n\n\n\n\n\n\nScale\n\n\nChanges the \nsprite's\n scale, either by x, y or uniformly for both x and y.\nThe default value is 1.0 for both x and y.\n\n\n\n  \n\n    \nC++\n\n    \nJavascript\n\n  \n\n\n\n  \n\n\n\n\n\n// increases X and Y size by 2.0 uniformly\nmySprite-\nsetScale(2.0);\n\n// increases just X scale by 2.0\nmySprite-\nsetScaleX(2.0);\n\n// increases just Y scale by 2.0\nmySprite-\nsetScaleY(2.0);\n\n\n\n\n\n\n\n\n\n\n\n\n\n// increases X and Y size by 2.0 uniformly\nmySprite.setScale(cc._p(2.0));\n\n// increases just X scale by 2.0\nmySprite.setScaleX(cc._p(2.0));\n\n// increases just Y scale by 2.0\nmySprite.setScaleY(cc._p(2.0));\n\n\n\n\n\n\n\n\n\nSkew\n\n\nChanges the \nsprite's\n skew, either by x, y or uniformly for both x and y.\nThe default value is 0,0 for both x and y.\n\n\n\n  \n\n    \nC++\n\n    \nJavascript\n\n  \n\n\n\n  \n\n\n\n\n\n// adjusts the X skew by 20.0\nmySprite-\nsetSkewX(20.0f);\n\n// adjusts the Y skew by 20.0\nmySprite-\nsetSkewY(20.0f);\n\n\n\n\n\n\n\n\n\n\n\n\n\n// adjusts the X skew by 20.0\nmySprite.setSkewX(cc._p(20.0));\n\n// adjusts the Y skew by 20.0\nmySprite.setSkewY(cc._p(20.0));\n\n\n\n\n\n\n\n\n\nSprite properties not affected by anchor point\n\n\nThere are a few properties of \nSprite\n objects that are not affected by\n\nanchor point\n. Why? Because they only change superficial qualities like \ncolor\n\nand \nopacity\n.\n\n\nColor\n\n\nChanges the \nsprite's\n color. This is done by passing in a \nColor3B\n object.\n\nColor3B\n objects are \nRGB\n values. We haven't encountered \nColor3B\n yet but\nit is simply an object that defines an \nRGB color\n. An \nRGB color\n is a 3 byte\nvalue from 0 - 255. Cocos2d-x also provides pre-defined colors that you can pick\nfrom. Using these will be a bit faster since they are pre-defined. A few examples:\n\nColor3B::White\n and \nColor3B::Red\n.\n\n\n\n  \n\n    \nC++\n\n    \nJavascript\n\n  \n\n\n\n  \n\n\n\n\n\n// set the color by passing in a pre-defined Color3B object.\nmySprite-\nsetColor(Color3B::WHITE);\n\n// Set the color by passing in a Color3B object.\nmySprite-\nsetColor(Color3B(255, 255, 255)); // Same as Color3B::WHITE\n\n\n\n\n\n\n\n\n\n\n\n\n\n// set the color by passing in a pre-defined Color3B object.\nmySprite.setColor(cc.color.WHITE);\n\n// Set the color by passing in a Color3B object.\nmySprite.setColor(cc.color(255, 255, 255)); // Same as Color3B::WHITE\n\n\n\n\n\n\n\n\n\nOpacity\n\n\nChanges the \nsprite's\n opacity by the specified value. An opaque object is not\ntransparent at all. This property expects a value from 0 to 255, where 255 means\nfully opaque and 0 means fully transparent. Think: \nzero opacity means invisible\n,\nand you'll always understand how this works. The default value is 255 (fully opaque).\n\n\n\n  \n\n    \nC++\n\n    \nJavascript\n\n  \n\n\n\n  \n\n\n\n\n\n// Set the opacity to 30, which makes this sprite 11.7% opaque.\n// (30 divided by 256 equals 0.1171875...)\nmySprite-\nsetOpacity(30);\n\n\n\n\n\n\n\n\n\n\n\n\n\n// Set the opacity to 30, which makes this sprite 11.7% opaque.\n// (30 divided by 256 equals 0.1171875...)\nmySprite.setOpacity(30);\n\n\n\n\n\n\n\n\n\nPolygon Sprite\n\n\nA \nPolygon Sprite\n is also a \nSprite\n, that is used to display a 2d image.\nHowever, unlike a normal \nSprite\n object, which is a rectangle made of just 2\ntriangles, \nPolygonSprite\n objects are made of a series of triangles.\n\n\nWhy use a Polygon Sprite?\n\n\nSimple, \nperformance\n!\n\n\nThere is a lot of technical jargon that we can toss around here about \npixel fill rate\n\nbut the take home lesson is that a \nPolygonSprite\n draws based upon the shape of\nyour \nSprite\n, not a simple rectangle around the largest width and height. This\nsaves a lot of unnecessary drawing. Consider this example:\n\n\n\n\nNotice the difference between the left and right versions?\n\n\nOn the left, a typical \nSprite\n drawn in rectangular fashion by the use of 2\ntriangles.\n\n\nOn the right, a \nPolygonSprite\n drawn with many smaller triangles.\n\n\nWhether or not this trade-off is worth it for purely performance reasons depends\non a number of factors (sprite shape/detail, size, quantity drawn on screen, etc.),\nbut in general, \nvertices are cheaper than pixels\n on modern GPUs.\n\n\n\n\n\nAutoPolygon\n\n\nAutoPolygon\n is a helper class. It's purpose is to process an image into a 2d\npolygon mesh at runtime.\n\n\nThere are functions for each step in the process, from tracing all the points,\nto triangulation. The result, can be then passed to a \nSprite\n objects \ncreate\n\nfunction to create a \nPolygonSprite\n. Example:\n\n\n\n  \n\n    \nC++\n\n    \nJavascript\n\n  \n\n\n\n  \n\n\n\n\n\n// Generate polygon info automatically.\nauto pinfo = AutoPolygon::generatePolygon(\nfilename.png\n);\n\n// Create a sprite with polygon info.\nauto sprite = Sprite::create(pinfo);\n\n\n\n\n\n\n\n\n\n\n\n\n\n// Generate polygon info automatically.\nvar pinfo = cc.autopolygon.generatePolygon(res.mysprite_png);\n\n// Create a sprite with polygon info.\nvar sprite = new cc.Sprite(pinfo);", 
            "title": "Sprites"
        }, 
        {
            "location": "/programmers-guide/sprites/index.html#sprites", 
            "text": "", 
            "title": "Sprites"
        }, 
        {
            "location": "/programmers-guide/sprites/index.html#what-are-sprites", 
            "text": "A Sprite is a 2D image that can be animated or transformed by changing its\nproperties, including  rotation ,  position ,  scale ,  color , etc.", 
            "title": "What are Sprites"
        }, 
        {
            "location": "/programmers-guide/sprites/index.html#creating-sprites", 
            "text": "There are different ways to create Sprites depending upon what you need to\naccomplish. You can create a  Sprite  from an image with various graphic formats\nincluding:  PNG ,  JPEG ,  TIFF , and others. Let's go through some create methods and\ntalk about each one.", 
            "title": "Creating Sprites"
        }, 
        {
            "location": "/programmers-guide/sprites/index.html#creating-a-sprite", 
            "text": "A  Sprite  can be created by specifying an image file to use.  \n   \n     C++ \n     Javascript \n    \n       auto mySprite = Sprite::create( mysprite.png );       var mySprite = new cc.Sprite(res.mySprite_png);    The statement above creates a  Sprite  using the  mysprite.png  image. The result\nis that the created  Sprite  uses the whole image.  Sprite  has the same dimensions\nof  mysprite.png . If the image file is 200 x 200 the resulting  Sprite  is 200 x\n200.", 
            "title": "Creating a Sprite"
        }, 
        {
            "location": "/programmers-guide/sprites/index.html#creating-a-sprite-with-a-rect", 
            "text": "In the previous example, the created  Sprite  has the same size as the original\nimage file. If you want to create a  Sprite  with only a certain portion of the\nimage file, you can do it by specifying a  Rect .  Rect  has 4 values:  origin x ,  origin y ,  width  and  height .  \n   \n     C++ \n     Javascript \n    \n     auto mySprite = Sprite::create( mysprite.png , Rect(0,0,40,40));     var mySprite = new cc.Sprite(res.mySprite_png, cc.rect(0,0,40,40));    Rect  starts at the top left corner. This is the opposite of what you might be\nused to when laying out screen position as it starts from the lower left corner.\nThus the resulting  Sprite  is only a portion of the image file. In this case the Sprite  dimension is 40 x 40 starting at the top left corner.  If you don't specify a  Rect , Cocos2d-x will automatically use the full width\nand height of the image file you specify. Take a look at the example below. If\nwe use an image with dimensions 200 x 200 the following 2 statements would have\nthe same result.  \n   \n     C++ \n     Javascript \n    \n     auto mySprite = Sprite::create( mysprite.png );\n\nauto mySprite = Sprite::create( mysprite.png , Rect(0,0,200,200));     var mySprite = new cc.Sprite(res.mySprite_png);\n\nvar mySprite = new cc.Sprite(res.mySprite_png, cc.rect(0,0,200,200));", 
            "title": "Creating a Sprite with a Rect"
        }, 
        {
            "location": "/programmers-guide/sprites/index.html#creating-a-sprite-from-a-sprite-sheet", 
            "text": "A  sprite sheet  is a way to combine sprites into a single file. Using a sprite sheet  helps achieve better performance by  batching  the draw calls . They can also save disk and video memory in cases where the\nsprites can be packed on a sheet more efficiently (generally requires special tools).\nYou will read more about this in the Advanced Chapter, but it is but it is one of many\nstandard methods in the industry for increasing game performance.  When using a  sprite sheet  it is first loaded, in its entirety, into the SpriteFrameCache .  SpriteFrameCache  is a caching class that retains the  SpriteFrame \nobjects added to it, for future quicker access. The  SpriteFrame  is loaded\nonce and retained in the  SpriteFrameCache  Here is an example sprite sheet:   It doesn't look like much but let's take a closer look at what is happening:   As you can see the  sprite sheet , at a minimum it reduces unneeded space and\nconsolidates all sprites into a single file.  Let's tie this all together!", 
            "title": "Creating a Sprite from a Sprite Sheet"
        }, 
        {
            "location": "/programmers-guide/sprites/index.html#loading-a-sprite-sheet", 
            "text": "Load your  sprite sheet  into the  SpriteFrameCache , probably in  AppDelegate :  \n   \n     C++ \n     Javascript \n    \n     // load the Sprite Sheet\nauto spritecache = SpriteFrameCache::getInstance();\n\n// the .plist file can be generated with any of the tools mentioned below\nspritecache- addSpriteFramesWithFile( sprites.plist );     // load the Sprite Sheet\nvar spritecache = cc.SpriteFrameCache;\n\n// the .plist file can be generated with any of the tools mentioned below\nspritecache.addSpriteFramesWithFile(res.sprites_plist);   Now that we have a  sprite sheet  loaded into  SpriteFrameCache  we can create Sprite  objects by utilizing it.", 
            "title": "Loading a Sprite Sheet"
        }, 
        {
            "location": "/programmers-guide/sprites/index.html#creating-a-sprite-from-spriteframecache", 
            "text": "This creates a  Sprite  by pulling it from the  SpriteFrameCache .  \n   \n     C++ \n     Javascript \n    \n     // Our .plist file has names for each of the sprites in it.  We'll grab\n// the sprite named,  mysprite  from the sprite sheet:\nauto mysprite = Sprite::createWithSpriteFrameName( mysprite.png );     // Our .plist file has names for each of the sprites in it.  We'll grab\n// the sprite named,  Blue_Front1  from the sprite sheet:\nvar mysprite = cc.Sprite.createWithSpriteFrameName(res.mySprite_png);", 
            "title": "Creating a Sprite from SpriteFrameCache"
        }, 
        {
            "location": "/programmers-guide/sprites/index.html#creating-a-sprite-from-a-spriteframe", 
            "text": "Another way to create the same  Sprite  is by fetching the  SpriteFrame  from the SpriteFrameCache , and then creating the  Sprite  with the  SpriteFrame . Example:  \n   \n     C++ \n     Javascript \n    \n     // this is equivalent to the previous example,\n// but it is created by retrieving the SpriteFrame from the cache.\nauto newspriteFrame = SpriteFrameCache::getInstance()- getSpriteFrameByName( Blue_Front1.png );\nauto newSprite = Sprite::createWithSpriteFrame(newspriteFrame);     // this is equivalent to the previous example,\n// but it is created by retrieving the SpriteFrame from the cache.\nvar newspriteFrame = cc.SpriteFrameCache.getSpriteFrameByName(res.sprites_plist);\nvar newSprite = cc.Sprite.createWithSpriteFrame(newspriteFrame);", 
            "title": "Creating a Sprite from a SpriteFrame"
        }, 
        {
            "location": "/programmers-guide/sprites/index.html#tools-for-creating-sprite-sheets", 
            "text": "Creating a  sprite sheet  manually is a tedious process. Fortunately there are\ntools that can generate them automatically. These tools can provide even more\nways to adjust your  sprite sheet  for maximum optimization!  Here are a few tools:   Cocos Studio  ShoeBox  Texture Packer  Zwoptex  Sprite Sheet Packer", 
            "title": "Tools for creating Sprite Sheets"
        }, 
        {
            "location": "/programmers-guide/sprites/index.html#sprite-manipulation", 
            "text": "After creating a  Sprite  you will have access to a variety of properties it\nhas that can be manipulated.  Given:  \n   \n     C++ \n     Javascript \n    \n     auto mySprite = Sprite::create( mysprite.png );     var mySprite = new Sprite(res.mysprite_png);", 
            "title": "Sprite Manipulation"
        }, 
        {
            "location": "/programmers-guide/sprites/index.html#anchor-point-and-position", 
            "text": "Anchor Point  is a point that you set as a way to specify what part of\nthe  Sprite  will be used when setting its position.  Anchor Point  affects\nonly properties that can be transformed. This includes  scale ,  rotation , skew . This excludes  color  and  opacity . The  anchor point  uses a\nbottom left coordinate system. This means that when specifying X and Y coordinate\nvalues you need to make sure to start at the bottom left hand corner to do your\ncalculations. By default, all  Node  objects have a default  anchor point  of\nis  (0.5, 0.5) .  Setting the  anchor point  is easy:  \n   \n     C++ \n     Javascript \n    \n     // DEFAULT anchor point for all Sprites\nmySprite- setAnchorPoint(0.5, 0.5);\n\n// bottom left\nmySprite- setAnchorPoint(0, 0);\n\n// top left\nmySprite- setAnchorPoint(0, 1);\n\n// bottom right\nmySprite- setAnchorPoint(1, 0);\n\n// top right\nmySprite- setAnchorPoint(1, 1);     // DEFAULT anchor point for all Sprites\nmySprite.setAnchorPoint(cc._p(0.5, 0.5));\n\n// bottom left\nmySprite.setAnchorPoint(cc._p(0, 0));\n\n// top left\nmySprite.setAnchorPoint(cc._p(0, 1));\n\n// bottom right\nmySprite.setAnchorPoint(cc._p(1, 0));\n\n// top right\nmySprite.setAnchorPoint(cc._p(1, 1));   To represent this visually:", 
            "title": "Anchor Point and Position"
        }, 
        {
            "location": "/programmers-guide/sprites/index.html#sprite-properties-effected-by-anchor-point", 
            "text": "Using  anchor point  effects only properties that can be transformed. This includes scale ,  rotation ,  skew .", 
            "title": "Sprite properties effected by anchor point"
        }, 
        {
            "location": "/programmers-guide/sprites/index.html#position", 
            "text": "A  sprite's  position is affected by its  anchor point  as it is this point\nthat is used as a starting point for positioning. Let's visually look at how this\nhappens. Notice the colored line and where the  sprite's  position is in relation\nto it. Notice, as we change the  anchor point  values, the  sprite's  position\nchanges. It is important to note that all it took was changing the  anchor point \nvalue. We did not use a  setPosition()  statement to achieve this:   There are more ways to set position than just  anchor point .  Sprite  objects\ncan also be set using the  setPosition()  method.  \n   \n     C++ \n     Javascript \n    \n     // position a sprite to a specific position of x = 100, y = 200.\nmySprite- setPosition(Vec2(100, 200));     mySprite.setPosition(cc._p(100, 200));", 
            "title": "Position"
        }, 
        {
            "location": "/programmers-guide/sprites/index.html#rotation", 
            "text": "Changes the  sprite's  rotation, by a positive or negative number of degrees.\nA positive value rotates the  Sprite  object clockwise, while a negative value\nrotates the  Sprite  object counter-clockwise. The default value is  0 .  \n   \n     C++ \n     Javascript \n    \n     // rotate sprite by +20 degrees\nmySprite- setRotation(20.0f);\n\n// rotate sprite by -20 degrees\nmySprite- setRotation(-20.0f);\n\n// rotate sprite by +60 degrees\nmySprite- setRotation(60.0f);\n\n// rotate sprite by -60 degrees\nmySprite- setRotation(-60.0f);     // rotate sprite by +20 degrees\nmySprite.setRotation(cc._p(20.0));\n\n// rotate sprite by -20 degrees\nmySprite.setRotation(cc._p(-20.0));\n\n// rotate sprite by +60 degrees\nmySprite.setRotation(cc._p(60.0));\n\n// rotate sprite by -60 degrees\nmySprite.setRotation(cc._p(-60.0));", 
            "title": "Rotation"
        }, 
        {
            "location": "/programmers-guide/sprites/index.html#scale", 
            "text": "Changes the  sprite's  scale, either by x, y or uniformly for both x and y.\nThe default value is 1.0 for both x and y.  \n   \n     C++ \n     Javascript \n    \n     // increases X and Y size by 2.0 uniformly\nmySprite- setScale(2.0);\n\n// increases just X scale by 2.0\nmySprite- setScaleX(2.0);\n\n// increases just Y scale by 2.0\nmySprite- setScaleY(2.0);     // increases X and Y size by 2.0 uniformly\nmySprite.setScale(cc._p(2.0));\n\n// increases just X scale by 2.0\nmySprite.setScaleX(cc._p(2.0));\n\n// increases just Y scale by 2.0\nmySprite.setScaleY(cc._p(2.0));", 
            "title": "Scale"
        }, 
        {
            "location": "/programmers-guide/sprites/index.html#skew", 
            "text": "Changes the  sprite's  skew, either by x, y or uniformly for both x and y.\nThe default value is 0,0 for both x and y.  \n   \n     C++ \n     Javascript \n    \n     // adjusts the X skew by 20.0\nmySprite- setSkewX(20.0f);\n\n// adjusts the Y skew by 20.0\nmySprite- setSkewY(20.0f);     // adjusts the X skew by 20.0\nmySprite.setSkewX(cc._p(20.0));\n\n// adjusts the Y skew by 20.0\nmySprite.setSkewY(cc._p(20.0));", 
            "title": "Skew"
        }, 
        {
            "location": "/programmers-guide/sprites/index.html#sprite-properties-not-affected-by-anchor-point", 
            "text": "There are a few properties of  Sprite  objects that are not affected by anchor point . Why? Because they only change superficial qualities like  color \nand  opacity .", 
            "title": "Sprite properties not affected by anchor point"
        }, 
        {
            "location": "/programmers-guide/sprites/index.html#color", 
            "text": "Changes the  sprite's  color. This is done by passing in a  Color3B  object. Color3B  objects are  RGB  values. We haven't encountered  Color3B  yet but\nit is simply an object that defines an  RGB color . An  RGB color  is a 3 byte\nvalue from 0 - 255. Cocos2d-x also provides pre-defined colors that you can pick\nfrom. Using these will be a bit faster since they are pre-defined. A few examples: Color3B::White  and  Color3B::Red .  \n   \n     C++ \n     Javascript \n    \n     // set the color by passing in a pre-defined Color3B object.\nmySprite- setColor(Color3B::WHITE);\n\n// Set the color by passing in a Color3B object.\nmySprite- setColor(Color3B(255, 255, 255)); // Same as Color3B::WHITE     // set the color by passing in a pre-defined Color3B object.\nmySprite.setColor(cc.color.WHITE);\n\n// Set the color by passing in a Color3B object.\nmySprite.setColor(cc.color(255, 255, 255)); // Same as Color3B::WHITE", 
            "title": "Color"
        }, 
        {
            "location": "/programmers-guide/sprites/index.html#opacity", 
            "text": "Changes the  sprite's  opacity by the specified value. An opaque object is not\ntransparent at all. This property expects a value from 0 to 255, where 255 means\nfully opaque and 0 means fully transparent. Think:  zero opacity means invisible ,\nand you'll always understand how this works. The default value is 255 (fully opaque).  \n   \n     C++ \n     Javascript \n    \n     // Set the opacity to 30, which makes this sprite 11.7% opaque.\n// (30 divided by 256 equals 0.1171875...)\nmySprite- setOpacity(30);     // Set the opacity to 30, which makes this sprite 11.7% opaque.\n// (30 divided by 256 equals 0.1171875...)\nmySprite.setOpacity(30);", 
            "title": "Opacity"
        }, 
        {
            "location": "/programmers-guide/sprites/index.html#polygon-sprite", 
            "text": "A  Polygon Sprite  is also a  Sprite , that is used to display a 2d image.\nHowever, unlike a normal  Sprite  object, which is a rectangle made of just 2\ntriangles,  PolygonSprite  objects are made of a series of triangles.", 
            "title": "Polygon Sprite"
        }, 
        {
            "location": "/programmers-guide/sprites/index.html#why-use-a-polygon-sprite", 
            "text": "Simple,  performance !  There is a lot of technical jargon that we can toss around here about  pixel fill rate \nbut the take home lesson is that a  PolygonSprite  draws based upon the shape of\nyour  Sprite , not a simple rectangle around the largest width and height. This\nsaves a lot of unnecessary drawing. Consider this example:   Notice the difference between the left and right versions?  On the left, a typical  Sprite  drawn in rectangular fashion by the use of 2\ntriangles.  On the right, a  PolygonSprite  drawn with many smaller triangles.  Whether or not this trade-off is worth it for purely performance reasons depends\non a number of factors (sprite shape/detail, size, quantity drawn on screen, etc.),\nbut in general,  vertices are cheaper than pixels  on modern GPUs.", 
            "title": "Why use a Polygon Sprite?"
        }, 
        {
            "location": "/programmers-guide/sprites/index.html#autopolygon", 
            "text": "AutoPolygon  is a helper class. It's purpose is to process an image into a 2d\npolygon mesh at runtime.  There are functions for each step in the process, from tracing all the points,\nto triangulation. The result, can be then passed to a  Sprite  objects  create \nfunction to create a  PolygonSprite . Example:  \n   \n     C++ \n     Javascript \n    \n     // Generate polygon info automatically.\nauto pinfo = AutoPolygon::generatePolygon( filename.png );\n\n// Create a sprite with polygon info.\nauto sprite = Sprite::create(pinfo);     // Generate polygon info automatically.\nvar pinfo = cc.autopolygon.generatePolygon(res.mysprite_png);\n\n// Create a sprite with polygon info.\nvar sprite = new cc.Sprite(pinfo);", 
            "title": "AutoPolygon"
        }, 
        {
            "location": "/programmers-guide/actions/index.html", 
            "text": "Actions\n\n\nAction\n objects are just like they sound. They make a \nNode\n perform a change\nto its properties. \nAction\n objects allow the transformation of \nNode\n properties\nin time. Any object with a base class of \nNode\n can have \nAction\n objects performed\non it. As an example, you can move a \nSprite\n from one position to another and\ndo it over a span of time.\n\n\nExample of \nMoveTo\n and \nMoveBy\n action:\n\n\n\n  \n\n    \nC++\n\n    \nJavascript\n\n  \n\n\n\n  \n\n\n\n\n\n// Move sprite to position 50,10 in 2 seconds.\nauto moveTo = MoveTo::create(2, Vec2(50, 10));\nmySprite1-\nrunAction(moveTo);\n\n// Move sprite 20 points to right in 2 seconds\nauto moveBy = MoveBy::create(2, Vec2(20,0));\nmySprite2-\nrunAction(moveBy);\n\n\n\n\n\n\n\n\n\n\n\n\n\n// Move sprite to position 50,10 in 2 seconds.\nvar moveTo = new cc.MoveTo(2, cc._p(50, 10));\nmySprite1.runAction(moveTo);\n\n// Move sprite 20 points to right in 2 seconds\nvar moveBy = new cc.MoveBy(2, cc._p(20,0));\nmySprite2.runAction(moveBy);\n\n\n\n\n\n\n\nBy and To, what is the difference?\n\n\nYou will notice that each \nAction\n has a \nBy\n and \nTo\n version. Why? Because\nthey are different in what they accomplish. A \nBy\n is relative to the current\nstate of the \nNode\n. A \nTo\n action is absolute, meaning it doesn't take into\naccount the current state of the \nNode\n. Let's take a look at a specific example:\n\n\n\n  \n\n    \nC++\n\n    \nJavascript\n\n  \n\n\n\n  \n\n\n\n\n\nauto mySprite = Sprite::create(\nmysprite.png\n);\nmySprite-\nsetPosition(Vec2(200, 256));\n\n// MoveBy - lets move the sprite by 500 on the x axis over 2 seconds\n// MoveBy is relative - since x = 200 + 200 move = x is now 400 after the move\nauto moveBy = MoveBy::create(2, Vec2(500, mySprite-\ngetPositionY()));\n\n// MoveTo - lets move the new sprite to 300 x 256 over 2 seconds\n// MoveTo is absolute - The sprite gets moved to 300 x 256 regardless of\n// where it is located now.\nauto moveTo = MoveTo::create(2, Vec2(300, mySprite-\ngetPositionY()));\n\n// Delay - create a small delay\nauto delay = DelayTime::create(1);\n\nauto seq = Sequence::create(moveBy, delay, moveTo, nullptr);\n\nmySprite-\nrunAction(seq);\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar mySprite = new cc.Sprite(res.mysprite_png);\nmySprite.setPosition(cc._p(200, 256));\n\n// MoveBy - lets move the sprite by 500 on the x axis over 2 seconds\n// MoveBy is relative - since x = 200 + 200 move = x is now 400 after the move\nvar moveBy = new cc.MoveBy(2, cc._p(500, mySprite.y));\n\n// MoveTo - lets move the new sprite to 300 x 256 over 2 seconds\n// MoveTo is absolute - The sprite gets moved to 300 x 256 regardless of\n// where it is located now.\nvar moveTo = new cc.MoveTo(2, cc._p(300, mySprite.y));\n\n// Delay - create a small delay\nvar delay = new cc.DelayTime(1);\n\nvar seq = new cc.Sequence(moveBy, delay, moveTo);\n\nmySprite.runAction(seq);\n\n\n\n\n\n\n\n\n\nBasic Actions and how to run them\n\n\nBasic actions are usually a singular action, thus accomplishing a single objective.\nLet's take a look at a few examples:\n\n\nMove\n\n\nMove\n a \nNode\n over a set period of time.\n\n\n\n  \n\n    \nC++\n\n    \nJavascript\n\n  \n\n\n\n  \n\n\n\n\n\nauto mySprite = Sprite::create(\nmysprite.png\n);\n\n// Move a sprite to a specific location over 2 seconds.\nauto moveTo = MoveTo::create(2, Vec2(50, 0));\n\nmySprite-\nrunAction(moveTo);\n\n// Move a sprite 50 pixels to the right, and 0 pixels to the top over 2 seconds.\nauto moveBy = MoveBy::create(2, Vec2(50, 0));\n\nmySprite-\nrunAction(moveBy);\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar mySprite = new cc.Sprite(res.mysprite_png);\n\n// Move a sprite to a specific location over 2 seconds.\nvar moveTo = new cc.MoveTo(2, cc._p(50, 0));\n\nmySprite.runAction(moveTo);\n\n// Move a sprite 50 pixels to the right, and 0 pixels to the top over 2 seconds.\nvar moveBy = new cc.MoveBy(2, cc._p(50, 0));\n\nmySprite.runAction(moveBy);\n\n\n\n\n\n\n\n\n\nRotate\n\n\nRotate\n a \nNode\n clockwise over 2 seconds.\n\n\n\n  \n\n    \nC++\n\n    \nJavascript\n\n  \n\n\n\n  \n\n\n\n\n\nauto mySprite = Sprite::create(\nmysprite.png\n);\n\n// Rotates a Node to the specific angle over 2 seconds\nauto rotateTo = RotateTo::create(2.0f, 40.0f);\nmySprite-\nrunAction(rotateTo);\n\n// Rotates a Node clockwise by 40 degree over 2 seconds\nauto rotateBy = RotateBy::create(2.0f, 40.0f);\nmySprite-\nrunAction(rotateBy);\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar mySprite = new cc.Sprite(res.mysprite_png);\n\n// Rotates a Node to the specific angle over 2 seconds\nvar rotateTo = new cc.RotateTo(2.0, 40.0);\nmySprite.runAction(rotateTo);\n\n// Rotates a Node clockwise by 40 degree over 2 seconds\nvar rotateBy = new cc.RotateBy(2.0, 40.0);\nmySprite.runAction(rotateBy);\n\n\n\n\n\n\n\n\n\nScale\n\n\nScale\n a \nNode\n by 10 over 2 seconds.\n\n\n\n  \n\n    \nC++\n\n    \nJavascript\n\n  \n\n\n\n  \n\n\n\n\n\nauto mySprite = Sprite::create(\nmysprite.png\n);\n\n// Scale uniformly by 3x over 2 seconds\nauto scaleBy = ScaleBy::create(2.0f, 3.0f);\nmySprite-\nrunAction(scaleBy);\n\n// Scale X by 5 and Y by 3x over 2 seconds\nauto scaleBy = ScaleBy::create(2.0f, 3.0f, 3.0f);\nmySprite-\nrunAction(scaleBy);\n\n// Scale to uniformly to 3x over 2 seconds\nauto scaleTo = ScaleTo::create(2.0f, 3.0f);\nmySprite-\nrunAction(scaleTo);\n\n// Scale X to 5 and Y to 3x over 2 seconds\nauto scaleTo = ScaleTo::create(2.0f, 3.0f, 3.0f);\nmySprite-\nrunAction(scaleTo);\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar mySprite = new cc.Sprite(res.mysprite_png);\n\n// Scale uniformly by 3x over 2 seconds\nvar scaleBy = new cc.ScaleBy(2.0, 3.0);\nmySprite.runAction(scaleBy);\n\n// Scale X by 5 and Y by 3x over 2 seconds\nvar scaleBy = new cc.ScaleBy(2.0, 3.0, 3.0);\nmySprite.runAction(scaleBy);\n\n// Scale to uniformly to 3x over 2 seconds\nvar scaleTo = new cc.ScaleTo(2.0, 3.0);\nmySprite.runAction(scaleTo);\n\n// Scale X to 5 and Y to 3x over 2 seconds\nvar scaleTo = new cc.ScaleTo(2.0, 3.0, 3.0);\nmySprite.runAction(scaleTo);\n\n\n\n\n\n\n\n\n\nFade In/Out\n\n\nFade\n a \nNode\n.\n\n\nIt modifies the opacity from 0 to 255. The \nreverse\n of this action is \nFadeOut\n\n\n\n  \n\n    \nC++\n\n    \nJavascript\n\n  \n\n\n\n  \n\n\n\n\n\nauto mySprite = Sprite::create(\nmysprite.png\n);\n\n// fades in the sprite in 1 seconds\nauto fadeIn = FadeIn::create(1.0f);\nmySprite-\nrunAction(fadeIn);\n\n// fades out the sprite in 2 seconds\nauto fadeOut = FadeOut::create(2.0f);\nmySprite-\nrunAction(fadeOut);\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar mySprite = new cc.Sprite(res.mysprite_png);\n\n// fades in the sprite in 1 seconds\nvar fadeIn = new cc.FadeIn(1.0);\nmySprite.runAction(fadeIn);\n\n// fades out the sprite in 2 seconds\nvar fadeOut = new cc.FadeOut(2.0);\nmySprite.runAction(fadeOut);\n\n\n\n\n\n\n\n\n\nTint\n\n\nTint\n a \nNode\n that implements the \nNodeRGB\n protocol from current the tint to \\\na custom tine.\n\n\n\n  \n\n    \nC++\n\n    \nJavascript\n\n  \n\n\n\n  \n\n\n\n\n\nauto mySprite = Sprite::create(\nmysprite.png\n);\n\n// Tints a node to the specified RGB values\nauto tintTo = TintTo::create(2.0f, 120.0f, 232.0f, 254.0f);\nmySprite-\nrunAction(tintTo);\n\n// Tints a node BY the delta of the specified RGB values.\nauto tintBy = TintBy::create(2.0f, 120.0f, 232.0f, 254.0f);\nmySprite-\nrunAction(tintBy);\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar mySprite = new cc.Sprite(res.mysprite_png);\n\n// Tints a node to the specified RGB values\nvar tintTo = new cc.TintTo(2.0, 120.0, 232.0, 254.0);\nmySprite.runAction(tintTo);\n\n// Tints a node BY the delta of the specified RGB values.\nvar tintBy = new cc.TintBy(2.0, 120.0, 232.0, 254.0);\nmySprite.runAction(tintBy);\n\n\n\n\n\n\n\n\n\nAnimate\n\n\nWith \nAnimate\n it is possible to do simple \nflipbook\n animation with your \nSprite\n\nobjects. This is simply replacing the \ndisplay frame\n at set intervals for the\nduration of the animation. Let's consider this example:\n\n\n\n  \n\n    \nC++\n\n    \nJavascript\n\n  \n\n\n\n  \n\n\n\n\n\nauto mySprite = Sprite::create(\nmysprite.png\n);\n\n// now lets animate the sprite we moved\nVector\nSpriteFrame*\n animFrames;\nanimFrames.reserve(12);\nanimFrames.pushBack(SpriteFrame::create(\nBlue_Front1.png\n, Rect(0,0,65,81)));\nanimFrames.pushBack(SpriteFrame::create(\nBlue_Front2.png\n, Rect(0,0,65,81)));\nanimFrames.pushBack(SpriteFrame::create(\nBlue_Front3.png\n, Rect(0,0,65,81)));\nanimFrames.pushBack(SpriteFrame::create(\nBlue_Left1.png\n, Rect(0,0,65,81)));\nanimFrames.pushBack(SpriteFrame::create(\nBlue_Left2.png\n, Rect(0,0,65,81)));\nanimFrames.pushBack(SpriteFrame::create(\nBlue_Left3.png\n, Rect(0,0,65,81)));\nanimFrames.pushBack(SpriteFrame::create(\nBlue_Back1.png\n, Rect(0,0,65,81)));\nanimFrames.pushBack(SpriteFrame::create(\nBlue_Back2.png\n, Rect(0,0,65,81)));\nanimFrames.pushBack(SpriteFrame::create(\nBlue_Back3.png\n, Rect(0,0,65,81)));\nanimFrames.pushBack(SpriteFrame::create(\nBlue_Right1.png\n, Rect(0,0,65,81)));\nanimFrames.pushBack(SpriteFrame::create(\nBlue_Right2.png\n, Rect(0,0,65,81)));\nanimFrames.pushBack(SpriteFrame::create(\nBlue_Right3.png\n, Rect(0,0,65,81)));\n\n// create the animation out of the frames\nAnimation* animation = Animation::createWithSpriteFrames(animFrames, 0.1f);\nAnimate* animate = Animate::create(animation);\n\n// run it and repeat it forever\nmySprite-\nrunAction(RepeatForever::create(animate));\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar mySprite = new Sprite(res.mysprite_png);\n\n// now lets animate the sprite we moved.\nvar animFrames = new Array();\nanimFrames.push(new cc.SpriteFrame(res.Blue_Front1_png), cc.Rect(0,0,65,81)));\nanimFrames.push(new cc.SpriteFrame(res.Blue_Front2.png), cc.Rect(0,0,65,81)));\nanimFrames.push(new cc.SpriteFrame(res.Blue_Front3.png), cc.Rect(0,0,65,81)));\nanimFrames.push(new cc.SpriteFrame(res.Blue_Left1.png), cc.Rect(0,0,65,81)));\nanimFrames.push(new cc.SpriteFrame(res.Blue_Left2.png), cc.Rect(0,0,65,81)));\nanimFrames.push(new cc.SpriteFrame(res.Blue_Left3.png), cc.Rect(0,0,65,81)));\nanimFrames.push(new cc.SpriteFrame(res.Blue_Back1.png), cc.Rect(0,0,65,81)));\nanimFrames.push(new cc.SpriteFrame(res.Blue_Back2.png), cc.Rect(0,0,65,81)));\nanimFrames.push(new cc.SpriteFrame(res.Blue_Back3.png), cc.Rect(0,0,65,81)));\nanimFrames.push(new cc.SpriteFrame(res.Blue_Right1.png), cc.Rect(0,0,65,81)));\nanimFrames.push(new cc.SpriteFrame(res.Blue_Right2.png), cc.Rect(0,0,65,81)));\nanimFrames.push(new cc.SpriteFrame(res.Blue_Right3.png), cc.Rect(0,0,65,81)));\n\n// create the animation out of the frames\nvar animation = cc.Animation.createWithSpriteFrames(animFrames, 0.1);\nvar animate = new cc.Animate(animation);\n\n// run it and repeat it forever\nmySprite.runAction(cc.RepeatForever(animate));\n\n\n\n\n\n\n\nIt's hard to show an animation in text, so please run the example \nProgrammer\nGuide Sample\n code to see this in action!\n\n\nEasing\n\n\nEasing\n is animating with a specified acceleration to make the animations smooth.\nA few things to keep in mind is that regardless of speed, ease actions always\nstart and finish at the same time. \nEase\n actions are a good way to \nfake\n physics\nin your game! Perhaps you want a few simulated physics effects but don't want the\noverhead and complexity of adding it all for a few very basic actions. Another\ngood example is to animate menus and buttons.\n\n\nHere are common easing functions displayed over a graph:\n\n\n\n\nCocos2d-x supports most of the easing function in the above graph. They are also\nsimple to implement. Lets look at a specific use case. Lets drop a \nSprite\n object\nfrom the top of the screen and make it bounce.\n\n\n\n  \n\n    \nC++\n\n    \nJavascript\n\n  \n\n\n\n  \n\n\n\n\n\n// create a sprite\nauto mySprite = Sprite::create(\nmysprite.png\n);\n\n// create a MoveBy Action to where we want the sprite to drop from.\nauto move = MoveBy::create(2, Vec2(200, dirs-\ngetVisibleSize().height -\n newSprite2-\ngetContentSize().height));\nauto move_back = move-\nreverse();\n\n// create a BounceIn Ease Action\nauto move_ease_in = EaseBounceIn::create(move-\nclone() );\n\n// create a delay that is run in between sequence events\nauto delay = DelayTime::create(0.25f);\n\n// create the sequence of actions, in the order we want to run them\nauto seq1 = Sequence::create(move_ease_in, delay, move_ease_in_back,\n    delay-\nclone(), nullptr);\n\n// run the sequence and repeat forever.\nmySprite-\nrunAction(RepeatForever::create(seq1));\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRun the example \nProgrammer Guide Sample\n code to see this in action!\n\n\nSequences and how to run them\n\n\nSequences\n are a series of \nAction\n objects to be executed sequentially. This can\nbe any number of \nAction\n objects, \nFunctions\n and even another \nSequence\n.\nFunctions? Yes! Cocos2d-x has a \nCallFunc\n object that allows you to create a\n\nfunction()\n and pass it in to be run in your \nSequence\n. This allows you to add\nyour own functionality to your \nSequence\n objects besides just the stock \nAction\n\nobjects that Cocos2d-x provides. This is what a \nSequence\n looks like when executing:\n\n\n\n\nAn example sequence\n\n\n\n  \n\n    \nC++\n\n    \nJavascript\n\n  \n\n\n\n  \n\n\n\n\n\nauto mySprite = Sprite::create(\nmysprite.png\n);\n\n// create a few actions.\nauto jump = JumpBy::create(0.5, Vec2(0, 0), 100, 1);\n\nauto rotate = RotateTo::create(2.0f, 10);\n\n// create a few callbacks\nauto callbackJump = CallFunc::create([](){\n    log(\nJumped!\n);\n});\n\nauto callbackRotate = CallFunc::create([](){\n    log(\nRotated!\n);\n});\n\n// create a sequence with the actions and callbacks\nauto seq = Sequence::create(jump, callbackJump, rotate, callbackRotate, nullptr);\n\n// run it\nmySprite-\nrunAction(seq);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSo what does this \nSequence\n action do?\n\n\nIt will execute the following actions sequentially:\n\n\nJump\n -\n \ncallbackJump()\n -\n \nRotate\n -\n \ncallbackRotate()\n\n\nRun the example \nProgrammer Guide Sample\n code to see this in action!\n\n\nSpawn\n\n\nSpawn\n is very similar to \nSequence\n, except that all actions will run at the same\ntime. You can have any number of \nAction\n objects and even other \nSpawn\n objects!\n\n\n\n\nSpawn\n produces the same result as running multiple consecutive \nrunAction()\n\nstatements. However, the benefit of spawn is that you can put it in a \nSequence\n\nto help achieve specific effects that you cannot otherwise. Combining \nSpawn\n and\n\nSequence\n is a very powerful feature.\n\n\nExample, given:\n\n\n\n  \n\n    \nC++\n\n    \nJavascript\n\n  \n\n\n\n  \n\n\n\n\n\n// create 2 actions and run a Spawn on a Sprite\nauto mySprite = Sprite::create(\nmysprite.png\n);\n\nauto moveBy = MoveBy::create(10, Vec2(400,100));\nauto fadeTo = FadeTo::create(2.0f, 120.0f);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUsing a \nSpawn\n:\n\n\n\n  \n\n    \nC++\n\n    \nJavascript\n\n  \n\n\n\n  \n\n\n\n\n\n// running the above Actions with Spawn.\nauto mySpawn = Spawn::createWithTwoActions(moveBy, fadeTo);\nmySprite-\nrunAction(mySpawn);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nand consecutive \nrunAction()\n statements:\n\n\n\n  \n\n    \nC++\n\n    \nJavascript\n\n  \n\n\n\n  \n\n\n\n\n\n// running the above Actions with consecutive runAction() statements.\nmySprite-\nrunAction(moveBy);\nmySprite-\nrunAction(fadeTo);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBoth would produce the same result. However, one can use \nSpawn\n in a \nSequence\n.\nThis flowchart shows how this might look:\n\n\n\n\n\n  \n\n    \nC++\n\n    \nJavascript\n\n  \n\n\n\n  \n\n\n\n\n\n// create a Sprite\nauto mySprite = Sprite::create(\nmysprite.png\n);\n\n// create a few Actions\nauto moveBy = MoveBy::create(10, Vec2(400,100));\nauto fadeTo = FadeTo::create(2.0f, 120.0f);\nauto scaleBy = ScaleBy::create(2.0f, 3.0f);\n\n// create a Spawn to use\nauto mySpawn = Spawn::createWithTwoActions(scaleBy, fadeTo);\n\n// tie everything together in a sequence\nauto seq = Sequence::create(moveBy, mySpawn, moveBy, nullptr);\n\n// run it\nmySprite-\nrunAction(seq);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRun the example \nProgrammer Guide Sample\n code to see this in action!\n\n\nClone\n\n\nClone\n is exactly like it sounds. If you have an \nAction\n, you can apply it to\nmultiple \nNode\n objects by using \nclone()\n. Why do you have to clone? Good question.\n\nAction\n objects have an \ninternal state\n. When they run, they are actually\nchanging the \nNode\n objects properties. Without the use of \nclone()\n you don't\ntruly have a unique \nAction\n being applied to the \nNode\n. This will produce\nunexpected results, as you can't know for sure what the properties of the \nAction\n\nare currently set at.\n\n\nLet's hash through an example, say you have a \nheroSprite\n and it has a position\nof \n(0,0)\n. If you run an \nAction\n of:\n\n\n\n  \n\n    \nC++\n\n    \nJavascript\n\n  \n\n\n\n  \n\n\n\n\n\nMoveBy::create(10, Vec2(400,100));\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis will move \nheroSprite\n from \n(0,0)\n to \n(400, 100)\n over the course of\n\n10 seconds\n. \nheroSprite\n now has a new position of \n(400, 100)\n and more\nimportantly the \nAction\n has this position in it's \ninternal state\n. Now, say\nyou have an \nemenySprite\n with a position of \n(200, 200)\n. If you were to apply\nthis same:\n\n\n\n  \n\n    \nC++\n\n    \nJavascript\n\n  \n\n\n\n  \n\n\n\n\n\nMoveBy::create(10, Vec2(400,100));\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nto your \nenemySprite\n, it would end up at a position of \n(800, 200)\n and not\nwhere you thought it would. Do you see why? It is because the \nAction\n already\nhad an \ninternal state\n to start from when performing the \nMoveBy\n. \nCloning\n\nan \nAction\n prevents this. It ensures you get a unique version \nAction\n applied\nto your \nNode\n.\n\n\nLet's also see this in code, first, incorrect.\n\n\n\n  \n\n    \nC++\n\n    \nJavascript\n\n  \n\n\n\n  \n\n\n\n\n\n// create our Sprites\nauto heroSprite = Sprite::create(\nherosprite.png\n);\nauto enemySprite = Sprite::create(\nenemysprite.png\n);\n\n// create an Action\nauto moveBy = MoveBy::create(10, Vec2(400,100));\n\n// run it on our hero\nheroSprite-\nrunAction(moveBy);\n\n// run it on our enemy\nenemySprite-\nrunAction(moveBy); // oops, this will not be unique!\n// uses the Actions current internal state as a starting point.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCorrectly, using \nclone()\n!:\n\n\n\n  \n\n    \nC++\n\n    \nJavascript\n\n  \n\n\n\n  \n\n\n\n\n\n// create our Sprites\nauto heroSprite = Sprite::create(\nherosprite.png\n);\nauto enemySprite = Sprite::create(\nenemysprite.png\n);\n\n// create an Action\nauto moveBy = MoveBy::create(10, Vec2(400,100));\n\n// run it on our hero\nheroSprite-\nrunAction(moveBy);\n\n// run it on our enemy\nenemySprite-\nrunAction(moveBy-\nclone()); // correct! This will be unique\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReverse\n\n\nReverse\n is also exactly like it sounds. If you run a series of actions, you\ncan call \nreverse()\n to run it, in the opposite order. Otherwise known as, backwards.\nHowever, it is not just simply running the \nAction\n in reverse order. Calling\n\nreverse()\n is actually manipulating the properties of the original \nSequence\n or\n\nSpawn\n in reverse too.\n\n\nUsing the \nSpawn\n example above, reversing is simple.\n\n\n\n  \n\n    \nC++\n\n    \nJavascript\n\n  \n\n\n\n  \n\n\n\n\n\n// reverse a sequence, spawn or action\nmySprite-\nrunAction(mySpawn-\nreverse());\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMost \nAction\n and \nSequence\n objects are reversible!\n\n\nIt's easy to use, but let's make sure we see what is happening. Given:\n\n\n\n  \n\n    \nC++\n\n    \nJavascript\n\n  \n\n\n\n  \n\n\n\n\n\n// create a Sprite\nauto mySprite = Sprite::create(\nmysprite.png\n);\nmySprite-\nsetPosition(50, 56);\n\n// create a few Actions\nauto moveBy = MoveBy::create(2.0f, Vec2(500,0));\nauto scaleBy = ScaleBy::create(2.0f, 2.0f);\nauto delay = DelayTime::create(2.0f);\n\n// create a sequence\nauto delaySequence = Sequence::create(delay, delay-\nclone(), delay-\nclone(),\ndelay-\nclone(), nullptr);\n\nauto sequence = Sequence::create(moveBy, delay, scaleBy, delaySequence, nullptr);\n\n// run it\nnewSprite2-\nrunAction(sequence);\n\n// reverse it\nnewSprite2-\nrunAction(sequence-\nreverse());\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhat is really happening? If we lay out the steps as a list it might be helpful:\n\n\n\n\nmySprite\n is created\n\n\nmySprite\n position is set to \n(50, 56)\n\n\nsequence\n starts to run\n\n\nsequence\n moves \nmySprite\n by \n500\n, over \n2 seconds\n, \nmySprite\n new position\n      \n(550, 56)\n\n\nsequence\n delays for \n2 seconds\n\n\nsequence\n scales \nmySprite\n by \n2x\n over \n2 seconds\n\n\nsequence\n delays for \n6\n more seconds (notice we run another sequence to\n   accomplish this)\n\n\nwe run a \nreverse()\n on the sequence so we re-run each action backwards\n\n\nsequence\n is delayed for \n6 seconds\n\n\nsequence\n scales \nmySprite\n by \n-2x\n over \n2 seconds\n\n\nsequence\n delays for \n2 seconds\n\n\nsequence\n moves \nmySprite\n by \n-500\n, over \n2 seconds\n, \nmySprite\n new position\n    \n(50, 56)\n\n\n\n\nYou can see that a \nreverse()\n is simple for you to use, but not so simple in\nits internal logic. Cocos2d-x does all the heavy lifting!", 
            "title": "Actions"
        }, 
        {
            "location": "/programmers-guide/actions/index.html#actions", 
            "text": "Action  objects are just like they sound. They make a  Node  perform a change\nto its properties.  Action  objects allow the transformation of  Node  properties\nin time. Any object with a base class of  Node  can have  Action  objects performed\non it. As an example, you can move a  Sprite  from one position to another and\ndo it over a span of time.  Example of  MoveTo  and  MoveBy  action:  \n   \n     C++ \n     Javascript \n    \n     // Move sprite to position 50,10 in 2 seconds.\nauto moveTo = MoveTo::create(2, Vec2(50, 10));\nmySprite1- runAction(moveTo);\n\n// Move sprite 20 points to right in 2 seconds\nauto moveBy = MoveBy::create(2, Vec2(20,0));\nmySprite2- runAction(moveBy);     // Move sprite to position 50,10 in 2 seconds.\nvar moveTo = new cc.MoveTo(2, cc._p(50, 10));\nmySprite1.runAction(moveTo);\n\n// Move sprite 20 points to right in 2 seconds\nvar moveBy = new cc.MoveBy(2, cc._p(20,0));\nmySprite2.runAction(moveBy);", 
            "title": "Actions"
        }, 
        {
            "location": "/programmers-guide/actions/index.html#by-and-to-what-is-the-difference", 
            "text": "You will notice that each  Action  has a  By  and  To  version. Why? Because\nthey are different in what they accomplish. A  By  is relative to the current\nstate of the  Node . A  To  action is absolute, meaning it doesn't take into\naccount the current state of the  Node . Let's take a look at a specific example:  \n   \n     C++ \n     Javascript \n    \n     auto mySprite = Sprite::create( mysprite.png );\nmySprite- setPosition(Vec2(200, 256));\n\n// MoveBy - lets move the sprite by 500 on the x axis over 2 seconds\n// MoveBy is relative - since x = 200 + 200 move = x is now 400 after the move\nauto moveBy = MoveBy::create(2, Vec2(500, mySprite- getPositionY()));\n\n// MoveTo - lets move the new sprite to 300 x 256 over 2 seconds\n// MoveTo is absolute - The sprite gets moved to 300 x 256 regardless of\n// where it is located now.\nauto moveTo = MoveTo::create(2, Vec2(300, mySprite- getPositionY()));\n\n// Delay - create a small delay\nauto delay = DelayTime::create(1);\n\nauto seq = Sequence::create(moveBy, delay, moveTo, nullptr);\n\nmySprite- runAction(seq);     var mySprite = new cc.Sprite(res.mysprite_png);\nmySprite.setPosition(cc._p(200, 256));\n\n// MoveBy - lets move the sprite by 500 on the x axis over 2 seconds\n// MoveBy is relative - since x = 200 + 200 move = x is now 400 after the move\nvar moveBy = new cc.MoveBy(2, cc._p(500, mySprite.y));\n\n// MoveTo - lets move the new sprite to 300 x 256 over 2 seconds\n// MoveTo is absolute - The sprite gets moved to 300 x 256 regardless of\n// where it is located now.\nvar moveTo = new cc.MoveTo(2, cc._p(300, mySprite.y));\n\n// Delay - create a small delay\nvar delay = new cc.DelayTime(1);\n\nvar seq = new cc.Sequence(moveBy, delay, moveTo);\n\nmySprite.runAction(seq);", 
            "title": "By and To, what is the difference?"
        }, 
        {
            "location": "/programmers-guide/actions/index.html#basic-actions-and-how-to-run-them", 
            "text": "Basic actions are usually a singular action, thus accomplishing a single objective.\nLet's take a look at a few examples:", 
            "title": "Basic Actions and how to run them"
        }, 
        {
            "location": "/programmers-guide/actions/index.html#move", 
            "text": "Move  a  Node  over a set period of time.  \n   \n     C++ \n     Javascript \n    \n     auto mySprite = Sprite::create( mysprite.png );\n\n// Move a sprite to a specific location over 2 seconds.\nauto moveTo = MoveTo::create(2, Vec2(50, 0));\n\nmySprite- runAction(moveTo);\n\n// Move a sprite 50 pixels to the right, and 0 pixels to the top over 2 seconds.\nauto moveBy = MoveBy::create(2, Vec2(50, 0));\n\nmySprite- runAction(moveBy);     var mySprite = new cc.Sprite(res.mysprite_png);\n\n// Move a sprite to a specific location over 2 seconds.\nvar moveTo = new cc.MoveTo(2, cc._p(50, 0));\n\nmySprite.runAction(moveTo);\n\n// Move a sprite 50 pixels to the right, and 0 pixels to the top over 2 seconds.\nvar moveBy = new cc.MoveBy(2, cc._p(50, 0));\n\nmySprite.runAction(moveBy);", 
            "title": "Move"
        }, 
        {
            "location": "/programmers-guide/actions/index.html#rotate", 
            "text": "Rotate  a  Node  clockwise over 2 seconds.  \n   \n     C++ \n     Javascript \n    \n     auto mySprite = Sprite::create( mysprite.png );\n\n// Rotates a Node to the specific angle over 2 seconds\nauto rotateTo = RotateTo::create(2.0f, 40.0f);\nmySprite- runAction(rotateTo);\n\n// Rotates a Node clockwise by 40 degree over 2 seconds\nauto rotateBy = RotateBy::create(2.0f, 40.0f);\nmySprite- runAction(rotateBy);     var mySprite = new cc.Sprite(res.mysprite_png);\n\n// Rotates a Node to the specific angle over 2 seconds\nvar rotateTo = new cc.RotateTo(2.0, 40.0);\nmySprite.runAction(rotateTo);\n\n// Rotates a Node clockwise by 40 degree over 2 seconds\nvar rotateBy = new cc.RotateBy(2.0, 40.0);\nmySprite.runAction(rotateBy);", 
            "title": "Rotate"
        }, 
        {
            "location": "/programmers-guide/actions/index.html#scale", 
            "text": "Scale  a  Node  by 10 over 2 seconds.  \n   \n     C++ \n     Javascript \n    \n     auto mySprite = Sprite::create( mysprite.png );\n\n// Scale uniformly by 3x over 2 seconds\nauto scaleBy = ScaleBy::create(2.0f, 3.0f);\nmySprite- runAction(scaleBy);\n\n// Scale X by 5 and Y by 3x over 2 seconds\nauto scaleBy = ScaleBy::create(2.0f, 3.0f, 3.0f);\nmySprite- runAction(scaleBy);\n\n// Scale to uniformly to 3x over 2 seconds\nauto scaleTo = ScaleTo::create(2.0f, 3.0f);\nmySprite- runAction(scaleTo);\n\n// Scale X to 5 and Y to 3x over 2 seconds\nauto scaleTo = ScaleTo::create(2.0f, 3.0f, 3.0f);\nmySprite- runAction(scaleTo);     var mySprite = new cc.Sprite(res.mysprite_png);\n\n// Scale uniformly by 3x over 2 seconds\nvar scaleBy = new cc.ScaleBy(2.0, 3.0);\nmySprite.runAction(scaleBy);\n\n// Scale X by 5 and Y by 3x over 2 seconds\nvar scaleBy = new cc.ScaleBy(2.0, 3.0, 3.0);\nmySprite.runAction(scaleBy);\n\n// Scale to uniformly to 3x over 2 seconds\nvar scaleTo = new cc.ScaleTo(2.0, 3.0);\nmySprite.runAction(scaleTo);\n\n// Scale X to 5 and Y to 3x over 2 seconds\nvar scaleTo = new cc.ScaleTo(2.0, 3.0, 3.0);\nmySprite.runAction(scaleTo);", 
            "title": "Scale"
        }, 
        {
            "location": "/programmers-guide/actions/index.html#fade-inout", 
            "text": "Fade  a  Node .  It modifies the opacity from 0 to 255. The  reverse  of this action is  FadeOut  \n   \n     C++ \n     Javascript \n    \n     auto mySprite = Sprite::create( mysprite.png );\n\n// fades in the sprite in 1 seconds\nauto fadeIn = FadeIn::create(1.0f);\nmySprite- runAction(fadeIn);\n\n// fades out the sprite in 2 seconds\nauto fadeOut = FadeOut::create(2.0f);\nmySprite- runAction(fadeOut);     var mySprite = new cc.Sprite(res.mysprite_png);\n\n// fades in the sprite in 1 seconds\nvar fadeIn = new cc.FadeIn(1.0);\nmySprite.runAction(fadeIn);\n\n// fades out the sprite in 2 seconds\nvar fadeOut = new cc.FadeOut(2.0);\nmySprite.runAction(fadeOut);", 
            "title": "Fade In/Out"
        }, 
        {
            "location": "/programmers-guide/actions/index.html#tint", 
            "text": "Tint  a  Node  that implements the  NodeRGB  protocol from current the tint to \\\na custom tine.  \n   \n     C++ \n     Javascript \n    \n     auto mySprite = Sprite::create( mysprite.png );\n\n// Tints a node to the specified RGB values\nauto tintTo = TintTo::create(2.0f, 120.0f, 232.0f, 254.0f);\nmySprite- runAction(tintTo);\n\n// Tints a node BY the delta of the specified RGB values.\nauto tintBy = TintBy::create(2.0f, 120.0f, 232.0f, 254.0f);\nmySprite- runAction(tintBy);     var mySprite = new cc.Sprite(res.mysprite_png);\n\n// Tints a node to the specified RGB values\nvar tintTo = new cc.TintTo(2.0, 120.0, 232.0, 254.0);\nmySprite.runAction(tintTo);\n\n// Tints a node BY the delta of the specified RGB values.\nvar tintBy = new cc.TintBy(2.0, 120.0, 232.0, 254.0);\nmySprite.runAction(tintBy);", 
            "title": "Tint"
        }, 
        {
            "location": "/programmers-guide/actions/index.html#animate", 
            "text": "With  Animate  it is possible to do simple  flipbook  animation with your  Sprite \nobjects. This is simply replacing the  display frame  at set intervals for the\nduration of the animation. Let's consider this example:  \n   \n     C++ \n     Javascript \n    \n     auto mySprite = Sprite::create( mysprite.png );\n\n// now lets animate the sprite we moved\nVector SpriteFrame*  animFrames;\nanimFrames.reserve(12);\nanimFrames.pushBack(SpriteFrame::create( Blue_Front1.png , Rect(0,0,65,81)));\nanimFrames.pushBack(SpriteFrame::create( Blue_Front2.png , Rect(0,0,65,81)));\nanimFrames.pushBack(SpriteFrame::create( Blue_Front3.png , Rect(0,0,65,81)));\nanimFrames.pushBack(SpriteFrame::create( Blue_Left1.png , Rect(0,0,65,81)));\nanimFrames.pushBack(SpriteFrame::create( Blue_Left2.png , Rect(0,0,65,81)));\nanimFrames.pushBack(SpriteFrame::create( Blue_Left3.png , Rect(0,0,65,81)));\nanimFrames.pushBack(SpriteFrame::create( Blue_Back1.png , Rect(0,0,65,81)));\nanimFrames.pushBack(SpriteFrame::create( Blue_Back2.png , Rect(0,0,65,81)));\nanimFrames.pushBack(SpriteFrame::create( Blue_Back3.png , Rect(0,0,65,81)));\nanimFrames.pushBack(SpriteFrame::create( Blue_Right1.png , Rect(0,0,65,81)));\nanimFrames.pushBack(SpriteFrame::create( Blue_Right2.png , Rect(0,0,65,81)));\nanimFrames.pushBack(SpriteFrame::create( Blue_Right3.png , Rect(0,0,65,81)));\n\n// create the animation out of the frames\nAnimation* animation = Animation::createWithSpriteFrames(animFrames, 0.1f);\nAnimate* animate = Animate::create(animation);\n\n// run it and repeat it forever\nmySprite- runAction(RepeatForever::create(animate));     var mySprite = new Sprite(res.mysprite_png);\n\n// now lets animate the sprite we moved.\nvar animFrames = new Array();\nanimFrames.push(new cc.SpriteFrame(res.Blue_Front1_png), cc.Rect(0,0,65,81)));\nanimFrames.push(new cc.SpriteFrame(res.Blue_Front2.png), cc.Rect(0,0,65,81)));\nanimFrames.push(new cc.SpriteFrame(res.Blue_Front3.png), cc.Rect(0,0,65,81)));\nanimFrames.push(new cc.SpriteFrame(res.Blue_Left1.png), cc.Rect(0,0,65,81)));\nanimFrames.push(new cc.SpriteFrame(res.Blue_Left2.png), cc.Rect(0,0,65,81)));\nanimFrames.push(new cc.SpriteFrame(res.Blue_Left3.png), cc.Rect(0,0,65,81)));\nanimFrames.push(new cc.SpriteFrame(res.Blue_Back1.png), cc.Rect(0,0,65,81)));\nanimFrames.push(new cc.SpriteFrame(res.Blue_Back2.png), cc.Rect(0,0,65,81)));\nanimFrames.push(new cc.SpriteFrame(res.Blue_Back3.png), cc.Rect(0,0,65,81)));\nanimFrames.push(new cc.SpriteFrame(res.Blue_Right1.png), cc.Rect(0,0,65,81)));\nanimFrames.push(new cc.SpriteFrame(res.Blue_Right2.png), cc.Rect(0,0,65,81)));\nanimFrames.push(new cc.SpriteFrame(res.Blue_Right3.png), cc.Rect(0,0,65,81)));\n\n// create the animation out of the frames\nvar animation = cc.Animation.createWithSpriteFrames(animFrames, 0.1);\nvar animate = new cc.Animate(animation);\n\n// run it and repeat it forever\nmySprite.runAction(cc.RepeatForever(animate));   It's hard to show an animation in text, so please run the example  Programmer\nGuide Sample  code to see this in action!", 
            "title": "Animate"
        }, 
        {
            "location": "/programmers-guide/actions/index.html#easing", 
            "text": "Easing  is animating with a specified acceleration to make the animations smooth.\nA few things to keep in mind is that regardless of speed, ease actions always\nstart and finish at the same time.  Ease  actions are a good way to  fake  physics\nin your game! Perhaps you want a few simulated physics effects but don't want the\noverhead and complexity of adding it all for a few very basic actions. Another\ngood example is to animate menus and buttons.  Here are common easing functions displayed over a graph:   Cocos2d-x supports most of the easing function in the above graph. They are also\nsimple to implement. Lets look at a specific use case. Lets drop a  Sprite  object\nfrom the top of the screen and make it bounce.  \n   \n     C++ \n     Javascript \n    \n     // create a sprite\nauto mySprite = Sprite::create( mysprite.png );\n\n// create a MoveBy Action to where we want the sprite to drop from.\nauto move = MoveBy::create(2, Vec2(200, dirs- getVisibleSize().height -\n newSprite2- getContentSize().height));\nauto move_back = move- reverse();\n\n// create a BounceIn Ease Action\nauto move_ease_in = EaseBounceIn::create(move- clone() );\n\n// create a delay that is run in between sequence events\nauto delay = DelayTime::create(0.25f);\n\n// create the sequence of actions, in the order we want to run them\nauto seq1 = Sequence::create(move_ease_in, delay, move_ease_in_back,\n    delay- clone(), nullptr);\n\n// run the sequence and repeat forever.\nmySprite- runAction(RepeatForever::create(seq1));        Run the example  Programmer Guide Sample  code to see this in action!", 
            "title": "Easing"
        }, 
        {
            "location": "/programmers-guide/actions/index.html#sequences-and-how-to-run-them", 
            "text": "Sequences  are a series of  Action  objects to be executed sequentially. This can\nbe any number of  Action  objects,  Functions  and even another  Sequence .\nFunctions? Yes! Cocos2d-x has a  CallFunc  object that allows you to create a function()  and pass it in to be run in your  Sequence . This allows you to add\nyour own functionality to your  Sequence  objects besides just the stock  Action \nobjects that Cocos2d-x provides. This is what a  Sequence  looks like when executing:", 
            "title": "Sequences and how to run them"
        }, 
        {
            "location": "/programmers-guide/actions/index.html#an-example-sequence", 
            "text": "C++ \n     Javascript \n    \n     auto mySprite = Sprite::create( mysprite.png );\n\n// create a few actions.\nauto jump = JumpBy::create(0.5, Vec2(0, 0), 100, 1);\n\nauto rotate = RotateTo::create(2.0f, 10);\n\n// create a few callbacks\nauto callbackJump = CallFunc::create([](){\n    log( Jumped! );\n});\n\nauto callbackRotate = CallFunc::create([](){\n    log( Rotated! );\n});\n\n// create a sequence with the actions and callbacks\nauto seq = Sequence::create(jump, callbackJump, rotate, callbackRotate, nullptr);\n\n// run it\nmySprite- runAction(seq);        So what does this  Sequence  action do?  It will execute the following actions sequentially:  Jump  -   callbackJump()  -   Rotate  -   callbackRotate()  Run the example  Programmer Guide Sample  code to see this in action!", 
            "title": "An example sequence"
        }, 
        {
            "location": "/programmers-guide/actions/index.html#spawn", 
            "text": "Spawn  is very similar to  Sequence , except that all actions will run at the same\ntime. You can have any number of  Action  objects and even other  Spawn  objects!   Spawn  produces the same result as running multiple consecutive  runAction() \nstatements. However, the benefit of spawn is that you can put it in a  Sequence \nto help achieve specific effects that you cannot otherwise. Combining  Spawn  and Sequence  is a very powerful feature.  Example, given:  \n   \n     C++ \n     Javascript \n    \n     // create 2 actions and run a Spawn on a Sprite\nauto mySprite = Sprite::create( mysprite.png );\n\nauto moveBy = MoveBy::create(10, Vec2(400,100));\nauto fadeTo = FadeTo::create(2.0f, 120.0f);        Using a  Spawn :  \n   \n     C++ \n     Javascript \n    \n     // running the above Actions with Spawn.\nauto mySpawn = Spawn::createWithTwoActions(moveBy, fadeTo);\nmySprite- runAction(mySpawn);        and consecutive  runAction()  statements:  \n   \n     C++ \n     Javascript \n    \n     // running the above Actions with consecutive runAction() statements.\nmySprite- runAction(moveBy);\nmySprite- runAction(fadeTo);        Both would produce the same result. However, one can use  Spawn  in a  Sequence .\nThis flowchart shows how this might look:   \n   \n     C++ \n     Javascript \n    \n     // create a Sprite\nauto mySprite = Sprite::create( mysprite.png );\n\n// create a few Actions\nauto moveBy = MoveBy::create(10, Vec2(400,100));\nauto fadeTo = FadeTo::create(2.0f, 120.0f);\nauto scaleBy = ScaleBy::create(2.0f, 3.0f);\n\n// create a Spawn to use\nauto mySpawn = Spawn::createWithTwoActions(scaleBy, fadeTo);\n\n// tie everything together in a sequence\nauto seq = Sequence::create(moveBy, mySpawn, moveBy, nullptr);\n\n// run it\nmySprite- runAction(seq);        Run the example  Programmer Guide Sample  code to see this in action!", 
            "title": "Spawn"
        }, 
        {
            "location": "/programmers-guide/actions/index.html#clone", 
            "text": "Clone  is exactly like it sounds. If you have an  Action , you can apply it to\nmultiple  Node  objects by using  clone() . Why do you have to clone? Good question. Action  objects have an  internal state . When they run, they are actually\nchanging the  Node  objects properties. Without the use of  clone()  you don't\ntruly have a unique  Action  being applied to the  Node . This will produce\nunexpected results, as you can't know for sure what the properties of the  Action \nare currently set at.  Let's hash through an example, say you have a  heroSprite  and it has a position\nof  (0,0) . If you run an  Action  of:  \n   \n     C++ \n     Javascript \n    \n     MoveBy::create(10, Vec2(400,100));        This will move  heroSprite  from  (0,0)  to  (400, 100)  over the course of 10 seconds .  heroSprite  now has a new position of  (400, 100)  and more\nimportantly the  Action  has this position in it's  internal state . Now, say\nyou have an  emenySprite  with a position of  (200, 200) . If you were to apply\nthis same:  \n   \n     C++ \n     Javascript \n    \n     MoveBy::create(10, Vec2(400,100));        to your  enemySprite , it would end up at a position of  (800, 200)  and not\nwhere you thought it would. Do you see why? It is because the  Action  already\nhad an  internal state  to start from when performing the  MoveBy .  Cloning \nan  Action  prevents this. It ensures you get a unique version  Action  applied\nto your  Node .  Let's also see this in code, first, incorrect.  \n   \n     C++ \n     Javascript \n    \n     // create our Sprites\nauto heroSprite = Sprite::create( herosprite.png );\nauto enemySprite = Sprite::create( enemysprite.png );\n\n// create an Action\nauto moveBy = MoveBy::create(10, Vec2(400,100));\n\n// run it on our hero\nheroSprite- runAction(moveBy);\n\n// run it on our enemy\nenemySprite- runAction(moveBy); // oops, this will not be unique!\n// uses the Actions current internal state as a starting point.        Correctly, using  clone() !:  \n   \n     C++ \n     Javascript \n    \n     // create our Sprites\nauto heroSprite = Sprite::create( herosprite.png );\nauto enemySprite = Sprite::create( enemysprite.png );\n\n// create an Action\nauto moveBy = MoveBy::create(10, Vec2(400,100));\n\n// run it on our hero\nheroSprite- runAction(moveBy);\n\n// run it on our enemy\nenemySprite- runAction(moveBy- clone()); // correct! This will be unique", 
            "title": "Clone"
        }, 
        {
            "location": "/programmers-guide/actions/index.html#reverse", 
            "text": "Reverse  is also exactly like it sounds. If you run a series of actions, you\ncan call  reverse()  to run it, in the opposite order. Otherwise known as, backwards.\nHowever, it is not just simply running the  Action  in reverse order. Calling reverse()  is actually manipulating the properties of the original  Sequence  or Spawn  in reverse too.  Using the  Spawn  example above, reversing is simple.  \n   \n     C++ \n     Javascript \n    \n     // reverse a sequence, spawn or action\nmySprite- runAction(mySpawn- reverse());        Most  Action  and  Sequence  objects are reversible!  It's easy to use, but let's make sure we see what is happening. Given:  \n   \n     C++ \n     Javascript \n    \n     // create a Sprite\nauto mySprite = Sprite::create( mysprite.png );\nmySprite- setPosition(50, 56);\n\n// create a few Actions\nauto moveBy = MoveBy::create(2.0f, Vec2(500,0));\nauto scaleBy = ScaleBy::create(2.0f, 2.0f);\nauto delay = DelayTime::create(2.0f);\n\n// create a sequence\nauto delaySequence = Sequence::create(delay, delay- clone(), delay- clone(),\ndelay- clone(), nullptr);\n\nauto sequence = Sequence::create(moveBy, delay, scaleBy, delaySequence, nullptr);\n\n// run it\nnewSprite2- runAction(sequence);\n\n// reverse it\nnewSprite2- runAction(sequence- reverse());        What is really happening? If we lay out the steps as a list it might be helpful:   mySprite  is created  mySprite  position is set to  (50, 56)  sequence  starts to run  sequence  moves  mySprite  by  500 , over  2 seconds ,  mySprite  new position\n       (550, 56)  sequence  delays for  2 seconds  sequence  scales  mySprite  by  2x  over  2 seconds  sequence  delays for  6  more seconds (notice we run another sequence to\n   accomplish this)  we run a  reverse()  on the sequence so we re-run each action backwards  sequence  is delayed for  6 seconds  sequence  scales  mySprite  by  -2x  over  2 seconds  sequence  delays for  2 seconds  sequence  moves  mySprite  by  -500 , over  2 seconds ,  mySprite  new position\n     (50, 56)   You can see that a  reverse()  is simple for you to use, but not so simple in\nits internal logic. Cocos2d-x does all the heavy lifting!", 
            "title": "Reverse"
        }, 
        {
            "location": "/programmers-guide/scenes/index.html", 
            "text": "Building and Transitioning Scenes\n\n\nWhat is a Scene?\n\n\nA \nScene\n is a container that holds \nSprites\n, \nLabels\n, \nNodes\n and other\nobjects that your game needs. A \nScene\n is responsible for running game logic and\nrendering the content on a per-frame basis. You need at least one \nScene\n to start\nyour game. You can think of this like a movie. The \nScene\n is what is running and\nusers see what is happening in real-time. You can have any number of \nScene\n objects\nin your game and transition through them easily. Cocos2d-x provides \nscene transitions\n\nand you can even have \nscene transitions\n with cool effects.\n\n\nCreating a Scene\n\n\nIt is very easy to create a \nScene\n\n\nauto myScene = Scene::create();\n\n\n\n\nRemember the Scene Graph?\n\n\nIn \nChapter 2\n  of this guide we learned about a \nscene graph\n and how it affects\nthe drawing of our game. The important thing to remember is that this defines\nthe drawing order of the GUI elements. Also remember \nz-order\n!\n\n\nA Simple Scene\n\n\nLets's build a simple \nScene\n. Remember that Cocos2d-x uses a \nright handed\ncoordinate system\n. This means that our \n0,0\n coordinate is at the bottom left\ncorner of the screen/display. When you start positioning your game elements this\nis where you should start your calculations from. Let's create a simple \nScene\n\nand add a few elements to it:\n\n\nauto dirs = Director::getInstance();\nSize visibleSize = dirs-\ngetVisibleSize();\n\nauto myScene = Scene::create();\n\nauto label1 = Label::createWithTTF(\nMy Game\n, \nMarker Felt.ttf\n, 36);\nlabel1-\nsetPosition(Vec2(visibleSize.width / 2, visibleSize.height / 2));\n\nmyScene-\naddChild(label1);\n\nauto sprite1 = Sprite::create(\nmysprite.png\n);\nsprite1-\nsetPosition(Vec2(100, 100));\n\nmyScene-\naddChild(sprite1);\n\n\n\n\nWhen we run this code we shall see a simple \nScene\n that contains a \nLabel\n and\na \nSprite\n. It doesn't do much but it's a start.\n\n\nTransitioning between Scenes\n\n\nYou might need to move between \nScene\n objects in your game. Perhaps starting a\nnew game, changing levels or even ending your game. Cocos2d-x provides a number\nof ways to do \nscene transitions\n.\n\n\nWays to transition between Scenes\n\n\nThere are many ways to transition through your \nscenes\n. Each has specific\nfunctionality. Let's go through them. Given:\n\n\nauto myScene = Scene::create();\n\n\n\n\nrunWithScene()\n - use this for the first scene only. This is the way to start\nyour games first \nScene\n.\n\n\nDirector::getInstance()-\nrunWithScene(myScene);\n\n\n\n\nreplaceScene()\n - replace a scene outright.\n\n\nDirector::getInstance()-\nreplaceScene(myScene);\n\n\n\n\npushScene()\n - suspends the execution of the running scene, pushing it on the\nstack of suspended scenes. Only call this if there is a running scene.\n\n\nDirector::getInstance()-\npushScene(myScene);\n\n\n\n\npopScene()\n - This scene will replace the running one. The running scene will\nbe deleted. Only call this if there is a running scene.\n\n\nDirector::getInstance()-\npopScene(myScene);\n\n\n\n\nTransition Scenes with effects\n\n\nYou can add visual effects to your \nScene\n transitions\n\n\nauto myScene = Scene::create();\n\n// Transition Fade\nDirector::getInstance()-\nreplaceScene(TransitionFade::create(0.5, myScene, Color3B(0,255,255)));\n\n// FlipX\nDirector::getInstance()-\nreplaceScene(TransitionFlipX::create(2, myScene));\n\n// Transition Slide In\nDirector::getInstance()-\nreplaceScene(TransitionSlideInT::create(1, myScene) );", 
            "title": "Scenes"
        }, 
        {
            "location": "/programmers-guide/scenes/index.html#building-and-transitioning-scenes", 
            "text": "", 
            "title": "Building and Transitioning Scenes"
        }, 
        {
            "location": "/programmers-guide/scenes/index.html#what-is-a-scene", 
            "text": "A  Scene  is a container that holds  Sprites ,  Labels ,  Nodes  and other\nobjects that your game needs. A  Scene  is responsible for running game logic and\nrendering the content on a per-frame basis. You need at least one  Scene  to start\nyour game. You can think of this like a movie. The  Scene  is what is running and\nusers see what is happening in real-time. You can have any number of  Scene  objects\nin your game and transition through them easily. Cocos2d-x provides  scene transitions \nand you can even have  scene transitions  with cool effects.", 
            "title": "What is a Scene?"
        }, 
        {
            "location": "/programmers-guide/scenes/index.html#creating-a-scene", 
            "text": "It is very easy to create a  Scene  auto myScene = Scene::create();", 
            "title": "Creating a Scene"
        }, 
        {
            "location": "/programmers-guide/scenes/index.html#remember-the-scene-graph", 
            "text": "In  Chapter 2   of this guide we learned about a  scene graph  and how it affects\nthe drawing of our game. The important thing to remember is that this defines\nthe drawing order of the GUI elements. Also remember  z-order !", 
            "title": "Remember the Scene Graph?"
        }, 
        {
            "location": "/programmers-guide/scenes/index.html#a-simple-scene", 
            "text": "Lets's build a simple  Scene . Remember that Cocos2d-x uses a  right handed\ncoordinate system . This means that our  0,0  coordinate is at the bottom left\ncorner of the screen/display. When you start positioning your game elements this\nis where you should start your calculations from. Let's create a simple  Scene \nand add a few elements to it:  auto dirs = Director::getInstance();\nSize visibleSize = dirs- getVisibleSize();\n\nauto myScene = Scene::create();\n\nauto label1 = Label::createWithTTF( My Game ,  Marker Felt.ttf , 36);\nlabel1- setPosition(Vec2(visibleSize.width / 2, visibleSize.height / 2));\n\nmyScene- addChild(label1);\n\nauto sprite1 = Sprite::create( mysprite.png );\nsprite1- setPosition(Vec2(100, 100));\n\nmyScene- addChild(sprite1);  When we run this code we shall see a simple  Scene  that contains a  Label  and\na  Sprite . It doesn't do much but it's a start.", 
            "title": "A Simple Scene"
        }, 
        {
            "location": "/programmers-guide/scenes/index.html#transitioning-between-scenes", 
            "text": "You might need to move between  Scene  objects in your game. Perhaps starting a\nnew game, changing levels or even ending your game. Cocos2d-x provides a number\nof ways to do  scene transitions .", 
            "title": "Transitioning between Scenes"
        }, 
        {
            "location": "/programmers-guide/scenes/index.html#ways-to-transition-between-scenes", 
            "text": "There are many ways to transition through your  scenes . Each has specific\nfunctionality. Let's go through them. Given:  auto myScene = Scene::create();  runWithScene()  - use this for the first scene only. This is the way to start\nyour games first  Scene .  Director::getInstance()- runWithScene(myScene);  replaceScene()  - replace a scene outright.  Director::getInstance()- replaceScene(myScene);  pushScene()  - suspends the execution of the running scene, pushing it on the\nstack of suspended scenes. Only call this if there is a running scene.  Director::getInstance()- pushScene(myScene);  popScene()  - This scene will replace the running one. The running scene will\nbe deleted. Only call this if there is a running scene.  Director::getInstance()- popScene(myScene);", 
            "title": "Ways to transition between Scenes"
        }, 
        {
            "location": "/programmers-guide/scenes/index.html#transition-scenes-with-effects", 
            "text": "You can add visual effects to your  Scene  transitions  auto myScene = Scene::create();\n\n// Transition Fade\nDirector::getInstance()- replaceScene(TransitionFade::create(0.5, myScene, Color3B(0,255,255)));\n\n// FlipX\nDirector::getInstance()- replaceScene(TransitionFlipX::create(2, myScene));\n\n// Transition Slide In\nDirector::getInstance()- replaceScene(TransitionSlideInT::create(1, myScene) );", 
            "title": "Transition Scenes with effects"
        }, 
        {
            "location": "/programmers-guide/ui_components/index.html", 
            "text": "UI Components\n\n\nTaking a look at the common apps you might use, I bet that you can spot UI\nwidgets without necessarily knowing what they are. They aren't specific to games,\nevery application probably uses a few widgets. What does \nUI\n stand for? What do\n\nUI\n widgets do? Oh so many questions!\n\n\nWidgets, oh, my!\n\n\nUI\n is an abbreviation that stands for \nuser interface\n. You know, things that\nare on the screen. This include items like: \nlabels\n, \nbuttons\n, \nmenus\n,\n\nsliders\n and \nviews\n. Cocos2d-x provides a set of \nUI\n widgets to make it\nsimple to add these controls to your projects. It may sound trivial, but a lot\ngoes in to creating a core class like a \nLabel\n. There are so many aspects of\njust this one. Could you imagine having to write your own custom widget set? Don't\nworry, your needs are covered!\n\n\nLabel\n\n\nCocos2d-x provides a \nLabel\n object that can create labels using \ntrue type\n,\n\nbitmap\n or the built-in system font. This single class can handle all your \nLabel\n\nneeds.\n\n\nLabel BMFont\n\n\nBMFont\n is a label type that uses a bitmap font. The characters in a bitmap font\nare made up of a matrix of \ndots\n. It is very fast and easy to use, but not\nscalable as it requires a separate font for each size character. Each character\nin a \nLabel\n is a separate \nSprite\n. This means that each character can be rotated,\nscaled, tinted, have a different \nanchor point\n and/or most any other property changed.\n\n\nCreating a \nBMFont\n label requires two files: a \n.fnt\n file and an image\nrepresentation of each character in \n.png\n format. If you are using a tool like\n\nGlyph Designer\n these files are created automatically for you. Creating a\n\nLabel\n object from a \nbitmap font\n:\n\n\nauto myLabel = Label::createWithBMFont(\nbitmapRed.fnt\n, \nYour Text\n);\n\n\n\n\n\n\nAll of the characters in the string parameter should be found in the provided\n\n.fnt\n file, otherwise they won't be rendered. If you render a \nLabel\n object and\nit is missing characters, make sure they exist in your \n.fnt\n file.\n\n\nLabel TTF\n\n\nTrue Type Fonts\n are different from the \nbitmap fonts\n we learned about above.\nWith \ntrue type fonts\n the outline of the font is rendered. This is convenient\nas you do not need to have a separate font file for each size and color you might\nwish to use. Creating a \nLabel\n object that uses a \ntrue type font\n is easy. To\ncreate one you need to specify a \n.ttf\n font file name, text string and a size.\nUnlike \nBMFont\n, \nTTF\n can render size changes without the need for a separate\nfont files. Example, using a \ntrue type font\n:\n\n\nauto myLabel = Label::createWithTTF(\nYour Text\n, \nMarker Felt.ttf\n, 24);\n\n\n\n\n\n\nAlthough it is more flexible than a \nbitmap font\n, a \ntrue type font\n is slower\nto render and changing properties like the \nfont face\n and \nsize\n is an expensive\noperation.\n\n\nIf you need several \nLabel\n objects from a \ntrue type font\n that all have the\nsame properties you can create a \nTTFConfig\n object to manage them. A \nTTFConfig\n\nobject allows you to set the properties that all of your labels would have in\ncommon. You can think of this like a \nrecipe\n where all your \nLabel\n objects\nwill use the same ingredients.\n\n\nYou can create a \nTTFConfig\n object for your \nLabels\n in this way:\n\n\n// create a TTFConfig files for labels to share\nTTFConfig labelConfig;\nlabelConfig.fontFilePath = \nmyFont.ttf\n;\nlabelConfig.fontSize = 16;\nlabelConfig.glyphs = GlyphCollection::DYNAMIC;\nlabelConfig.outlineSize = 0;\nlabelConfig.customGlyphs = nullptr;\nlabelConfig.distanceFieldEnabled = false;\n\n// create a TTF Label from the TTFConfig file.\nauto myLabel = Label::createWithTTF(labelConfig, \nMy Label Text\n);\n\n\n\n\n\n\nA \nTTFConfig\n can also be used for displaying Chinese, Japanese and Korean\ncharacters.\n\n\nLabel SystemFont\n\n\nSystemFont\n is a label type that uses the default system font and font size.\nThis is a font that is meant not to have its properties changed. You should think\nof it as \nsystem font, system rules\n. Creating a \nSystemFont\n label:\n\n\nauto myLabel = Label::createWithSystemFont(\nMy Label Text\n, \nArial\n, 16);\n\n\n\n\n\n\nLabel Effects\n\n\nAfter you have your \nLabel\n objects on screen you might want to make them a bit\nprettier. Perhaps they look flat or plain. Thankfully you don't have to create\nyour own custom fonts! \nLabel\n objects can have effects applied to them. Not all\n\nLabel\n objects support all effects. Some effects include \nshadow\n, \noutline\n\nand \nglow\n. You can apply one or more effects to a \nLabel\n object easily:\n\n\nLabel with a \nshadow\n effect:\n\n\nauto myLabel = Label::createWithTTF(\nmyFont.ttf\n, \nMy Label Text\n, 16);\n\n// shadow effect is supported by all Label types\nmyLabel-\nenableShadow();\n\n\n\n\n\n\nLabel with a \noutline\n effect:\n\n\nauto myLabel = Label::createWithTTF(\nmyFont.ttf\n, \nMy Label Text\n, 16);\n\n// outline effect is TTF only, specify the outline color desired\nmyLabel-\nenableOutline(Color4B::WHITE, 1));\n\n\n\n\n\n\nLabel with a \nglow\n effect:\n\n\nauto myLabel = Label::createWithTTF(\nmyFont.ttf\n, \nMy Label Text\n, 16);\n\n// glow effect is TTF only, specify the glow color desired.\nmyLabel-\nenableGlow(Color4B::YELLOW);\n\n\n\n\n\n\nMenu and Menu Items\n\n\nWe are all probably familiar with what a menu is. We see these in every application\nwe use. In your game you would probably use a \nMenu\n object to navigate through\ngame options. Menus often contain \nbuttons\n like \nPlay\n, \nQuit\n, \nSettings\n and\n\nAbout\n, but could also contain other \nMenu\n objects for a nested menu system.\nA \nMenu\n object is a special type of \nNode\n object. You can create an  empty\n\nMenu\n object as a place holder for your \nmenu items\n:\n\n\nauto myMenu = Menu::create();\n\n\n\n\nAs we described options above of \nPlay\n, \nQuit\n, \nSettings\n and\n\nAbout\n, these are your \nmenu items\n. A \nMenu\n without \nmenu items\n makes little\nsense.  Cocos2d-x offers a variety of ways to create your \nmenu items\n including\nby using a \nLabel\n object or specifying an image to display. \nMenu items\n usually\nhave two possible states, a \nnormal\n and a \nselected\n state. When you tap or click\non the \nmenu item\n a \ncallback\n is triggered. You can think of this as a chain\nreaction. You tap/click the \nmenu item\n and it runs the code you specified. A\n\nMenu\n can have just a single item or many items.\n\n\n// creating a menu with a single item\n\n// create a menu item by specifying images\nauto closeItem = MenuItemImage::create(\nCloseNormal.png\n, \nCloseSelected.png\n,\nCC_CALLBACK_1(HelloWorld::menuCloseCallback, this));\n\nauto menu = Menu::create(closeItem, NULL);\nthis-\naddChild(menu, 1);\n\n\n\n\nA menu can also be created by using a \nvector\n of \nMenuItem\n objects:\n\n\n// creating a Menu from a Vector of items\nVector\nMenuItem*\n MenuItems;\n\nauto closeItem = MenuItemImage::create(\nCloseNormal.png\n, \nCloseSelected.png\n,\nCC_CALLBACK_1(HelloWorld::menuCloseCallback, this));\n\nMenuItems.pushBack(closeItem);\n\n/* repeat for as many menu items as needed */\n\nauto menu = Menu::createWithArray(MenuItems);\nthis-\naddChild(menu, 1);\n\n\n\n\nIf you run the sample code for this chapter you will see a \nMenu\n containing\n\nLabel\n objects for \nMenuItems\n:\n\n\n\n\nLambda functions as Menu callbacks\n\n\nAbove we just learned that when you click a \nmenu item\n it triggers a \ncallback\n.\nC++11 offers \nlambda\n functions and therefore Cocos2d-x takes full advantage of\nthem! A \nlambda\n function is a function you write inline in your source code.\n\nLambdas\n are also evaluated at runtime instead of compile time.\n\n\nA simple \nlambda\n:\n\n\n// create a simple Hello World lambda\nauto func = [] () { cout \n \nHello World\n; };\n\n// now call it someplace in code\nfunc();\n\n\n\n\nUsing a \nlambda\n as a \nMenuItem\n callback:\n\n\nauto closeItem = MenuItemImage::create(\nCloseNormal.png\n, \nCloseSelected.png\n,\n[\n](Ref* sender){\n    // your code here\n});\n\n\n\n\nButtons\n\n\nI doubt that we need to explain buttons much. We all know them as those things\nwe click on to make something happen in our games. Perhaps you might use a button\nto change \nscenes\n or to add \nSprite\n objects into your game play.\nA button intercepts a touch event and calls a predefined callback when tapped.\nA \nButton\n has a \nnormal\n and \nselected\n state. The appearance of the \nButton\n can\nchange based upon it's state. Creating a \nButton\n and defining its \ncallback\n\nis simple:\n\n\n#include \nui/CocosGUI.h\n\n\nauto button = Button::create(\nnormal_image.png\n, \nselected_image.png\n, \ndisabled_image.png\n);\n\nbutton-\nsetTitleText(\nButton Text\n);\n\nbutton-\naddTouchEventListener([\n](Ref* sender, Widget::TouchEventType type){\n        switch (type)\n        {\n                case ui::Widget::TouchEventType::BEGAN:\n                        break;\n                case ui::Widget::TouchEventType::ENDED:\n                        std::cout \n \nButton 1 clicked\n \n std::endl;\n                        break;\n                default:\n                        break;\n        }\n});\n\nthis-\naddChild(button);\n\n\n\n\nAs you can see in the above example we specify a \n.png\n image for each of the\npossible states the button can be in. A \nButton\n is made up of 3 graphics that\nmight look like this:\n\n\n \n \n \n\n\n\n\nOn screen a \nButton\n might look like this:\n\n\n\n\nCheckBox\n\n\nWe are all used to filling out \ncheckboxes\n on paper forms like job applications\nand rental agreements. You can also have \ncheckboxes\n in your games. Perhaps, you\nwant to have the ability for your player to make a simple \nyes\n or \nno\n choice.\nYou might also hear this referred to as a \nbinary\n choice (0 and 1). A \nCheckBox\n\npermits the user to make this type of choice. There are 5 different \nstates\n a\n\nCheckbox\n can have: \nnormal\n, \nselected\n and \ndisabled\n. It is simple to create\na \nCheckBox\n:\n\n\n#include \nui/CocosGUI.h\n\n\nauto checkbox = CheckBox::create(\ncheck_box_normal.png\n,\n                                 \ncheck_box_normal_press.png\n,\n                                 \ncheck_box_active.png\n,\n                                 \ncheck_box_normal_disable.png\n,\n                                 \ncheck_box_active_disable.png\n);\n\ncheckbox-\naddTouchEventListener([\n](Ref* sender, Widget::TouchEventType type){\n        switch (type)\n        {\n                case ui::Widget::TouchEventType::BEGAN:\n                        break;\n                case ui::Widget::TouchEventType::ENDED:\n                        std::cout \n \ncheckbox 1 clicked\n \n std::endl;\n                        break;\n                default:\n                        break;\n        }\n});\n\nthis-\naddChild(checkbox);\n\n\n\n\nAs you can see in the above example we specify a \n.png\n image for each of the\npossible states the \nCheckbox\n can be in. Since there are 5 possible states that\na \nCheckBox\n can be in, it is up 5 graphics, one for each of its states. Example\ngraphics:\n\n\n \n \n \n\n\n \n\n\n \n\n\n\n\nOn screen a \nCheckbox\n might look like this:\n\n\n\n\nLoadingBar\n\n\nHave you ever played a game where you had to wait while it loaded up all the\ncontent it needed? It probably showed you a bar, filling in as it made progress\naccomplishing its task. This is often referred to as a \nprogress bar\n, \nstatus bar\n\nor a \nloading bar\n. Creating a \nLoadingBar\n:\n\n\n#include \nui/CocosGUI.h\n\n\nauto loadingBar = LoadingBar::create(\nLoadingBarFile.png\n);\n\n// set the direction of the loading bars progress\nloadingBar-\nsetDirection(LoadingBar::Direction::RIGHT);\n\nthis-\naddChild(loadingBar);\n\n\n\n\nIn the above example a \nloading bar\n is created and we set the direction it\nshould fill towards as progress is made. In this case to the right direction.\nHowever, you probably need to change the percentage of the \nLoadingBar\n. This is\neasily done:\n\n\n#include \nui/CocosGUI.h\n\n\nauto loadingBar = LoadingBar::create(\nLoadingBarFile.png\n);\nloadingBar-\nsetDirection(LoadingBar::Direction::RIGHT);\n\n// something happened, change the percentage of the loading bar\nloadingBar-\nsetPercent(25);\n\n// more things happened, change the percentage again.\nloadingBar-\nsetPercent(35);\n\nthis-\naddChild(loadingBar);\n\n\n\n\nAs you can see in the above example we specify a \n.png\n image for the \nLoadingBar\n\nobjects texture:\n\n\n\n\nOn screen a \nLoadingBar\n might look like this:\n\n\n\n\nSlider\n\n\nSometimes it is necessary to change a value slightly. Perhaps you have a character\nand you want to allow the player to adjust the strength of attacking an enemy.\nA \nSlider\n allows users to set a value by moving an indicator. To create a \nSlider\n:\n\n\n#include \nui/CocosGUI.h\n\n\nauto slider = Slider::create();\nslider-\nloadBarTexture(\nSlider_Back.png\n); // what the slider looks like\nslider-\nloadSlidBallTextures(\nSliderNode_Normal.png\n, \nSliderNode_Press.png\n, \nSliderNode_Disable.png\n);\nslider-\nloadProgressBarTexture(\nSlider_PressBar.png\n);\n\nslider-\naddTouchEventListener([\n](Ref* sender, Widget::TouchEventType type){\n        switch (type)\n        {\n                case ui::Widget::TouchEventType::BEGAN:\n                        break;\n                case ui::Widget::TouchEventType::ENDED:\n                        std::cout \n \nslider moved\n \n std::endl;\n                        break;\n                default:\n                        break;\n        }\n});\n\nthis-\naddChild(slider);\n\n\n\n\nAs you can see in the above example we specify a \n.png\n image for each of the\npossible states the slider can be in. A \nSlider\n is made up of 5 graphics that\nmight look like this:\n\n\n \n \n \n\n\n \n \n \n\n\n\n\nOn screen a \nSlider\n might look like this:\n\n\n\n\nTextField\n\n\nWhat if you wanted the player of your game to type in a special name to call the\nmain character? Where would they type it into? Yes, a \ntext field\n, of course.\nA \nTextField\n widget is used for inputting text. It supports touch event, focus,\npercent positioning and percent content size. To create a \nTextField\n widget:\n\n\n#include \nui/CocosGUI.h\n\n\nauto textField = TextField::create(\n,\nArial\n,30);\n\ntextField-\naddTouchEventListener([\n](Ref* sender, Widget::TouchEventType type){\n                std::cout \n \nediting a TextField\n \n std::endl;\n});\n\nthis-\naddChild(textField);\n\n\n\n\nIn this example a \nTextField\n is created and a \ncallback\n specified.\n\n\nTextField\n objects are versatile and can meet all of your input needs. Would you\nlike the user to enter a secret password? Do you need to limit the number of\ncharacters a user can input? \nTextField\n objects have this all built-it and much\nmore! Let's take a look at an example:\n\n\n#include \nui/CocosGUI.h\n\n\nauto textField = TextField::create(\n,\nArial\n,30);\n\n// make this TextField password enabled\ntextField-\nsetPasswordEnabled(true);\n\n// set the maximum number of characters the user can enter for this TextField\ntextField-\nsetMaxLength(10);\n\ntextField-\naddTouchEventListener([\n](Ref* sender, Widget::TouchEventType type){\n                std::cout \n \nediting a TextField\n \n std::endl;\n});\n\nthis-\naddChild(textField);\n\n\n\n\nOn screen a \nTextField\n might look like this:\n\n\n\n\nWhen you are editing a \nTextField\n, the onscreen keyboard comes up:", 
            "title": "UI"
        }, 
        {
            "location": "/programmers-guide/ui_components/index.html#ui-components", 
            "text": "Taking a look at the common apps you might use, I bet that you can spot UI\nwidgets without necessarily knowing what they are. They aren't specific to games,\nevery application probably uses a few widgets. What does  UI  stand for? What do UI  widgets do? Oh so many questions!", 
            "title": "UI Components"
        }, 
        {
            "location": "/programmers-guide/ui_components/index.html#widgets-oh-my", 
            "text": "UI  is an abbreviation that stands for  user interface . You know, things that\nare on the screen. This include items like:  labels ,  buttons ,  menus , sliders  and  views . Cocos2d-x provides a set of  UI  widgets to make it\nsimple to add these controls to your projects. It may sound trivial, but a lot\ngoes in to creating a core class like a  Label . There are so many aspects of\njust this one. Could you imagine having to write your own custom widget set? Don't\nworry, your needs are covered!", 
            "title": "Widgets, oh, my!"
        }, 
        {
            "location": "/programmers-guide/ui_components/index.html#label", 
            "text": "Cocos2d-x provides a  Label  object that can create labels using  true type , bitmap  or the built-in system font. This single class can handle all your  Label \nneeds.", 
            "title": "Label"
        }, 
        {
            "location": "/programmers-guide/ui_components/index.html#label-bmfont", 
            "text": "BMFont  is a label type that uses a bitmap font. The characters in a bitmap font\nare made up of a matrix of  dots . It is very fast and easy to use, but not\nscalable as it requires a separate font for each size character. Each character\nin a  Label  is a separate  Sprite . This means that each character can be rotated,\nscaled, tinted, have a different  anchor point  and/or most any other property changed.  Creating a  BMFont  label requires two files: a  .fnt  file and an image\nrepresentation of each character in  .png  format. If you are using a tool like Glyph Designer  these files are created automatically for you. Creating a Label  object from a  bitmap font :  auto myLabel = Label::createWithBMFont( bitmapRed.fnt ,  Your Text );   All of the characters in the string parameter should be found in the provided .fnt  file, otherwise they won't be rendered. If you render a  Label  object and\nit is missing characters, make sure they exist in your  .fnt  file.", 
            "title": "Label BMFont"
        }, 
        {
            "location": "/programmers-guide/ui_components/index.html#label-ttf", 
            "text": "True Type Fonts  are different from the  bitmap fonts  we learned about above.\nWith  true type fonts  the outline of the font is rendered. This is convenient\nas you do not need to have a separate font file for each size and color you might\nwish to use. Creating a  Label  object that uses a  true type font  is easy. To\ncreate one you need to specify a  .ttf  font file name, text string and a size.\nUnlike  BMFont ,  TTF  can render size changes without the need for a separate\nfont files. Example, using a  true type font :  auto myLabel = Label::createWithTTF( Your Text ,  Marker Felt.ttf , 24);   Although it is more flexible than a  bitmap font , a  true type font  is slower\nto render and changing properties like the  font face  and  size  is an expensive\noperation.  If you need several  Label  objects from a  true type font  that all have the\nsame properties you can create a  TTFConfig  object to manage them. A  TTFConfig \nobject allows you to set the properties that all of your labels would have in\ncommon. You can think of this like a  recipe  where all your  Label  objects\nwill use the same ingredients.  You can create a  TTFConfig  object for your  Labels  in this way:  // create a TTFConfig files for labels to share\nTTFConfig labelConfig;\nlabelConfig.fontFilePath =  myFont.ttf ;\nlabelConfig.fontSize = 16;\nlabelConfig.glyphs = GlyphCollection::DYNAMIC;\nlabelConfig.outlineSize = 0;\nlabelConfig.customGlyphs = nullptr;\nlabelConfig.distanceFieldEnabled = false;\n\n// create a TTF Label from the TTFConfig file.\nauto myLabel = Label::createWithTTF(labelConfig,  My Label Text );   A  TTFConfig  can also be used for displaying Chinese, Japanese and Korean\ncharacters.", 
            "title": "Label TTF"
        }, 
        {
            "location": "/programmers-guide/ui_components/index.html#label-systemfont", 
            "text": "SystemFont  is a label type that uses the default system font and font size.\nThis is a font that is meant not to have its properties changed. You should think\nof it as  system font, system rules . Creating a  SystemFont  label:  auto myLabel = Label::createWithSystemFont( My Label Text ,  Arial , 16);", 
            "title": "Label SystemFont"
        }, 
        {
            "location": "/programmers-guide/ui_components/index.html#label-effects", 
            "text": "After you have your  Label  objects on screen you might want to make them a bit\nprettier. Perhaps they look flat or plain. Thankfully you don't have to create\nyour own custom fonts!  Label  objects can have effects applied to them. Not all Label  objects support all effects. Some effects include  shadow ,  outline \nand  glow . You can apply one or more effects to a  Label  object easily:  Label with a  shadow  effect:  auto myLabel = Label::createWithTTF( myFont.ttf ,  My Label Text , 16);\n\n// shadow effect is supported by all Label types\nmyLabel- enableShadow();   Label with a  outline  effect:  auto myLabel = Label::createWithTTF( myFont.ttf ,  My Label Text , 16);\n\n// outline effect is TTF only, specify the outline color desired\nmyLabel- enableOutline(Color4B::WHITE, 1));   Label with a  glow  effect:  auto myLabel = Label::createWithTTF( myFont.ttf ,  My Label Text , 16);\n\n// glow effect is TTF only, specify the glow color desired.\nmyLabel- enableGlow(Color4B::YELLOW);", 
            "title": "Label Effects"
        }, 
        {
            "location": "/programmers-guide/ui_components/index.html#menu-and-menu-items", 
            "text": "We are all probably familiar with what a menu is. We see these in every application\nwe use. In your game you would probably use a  Menu  object to navigate through\ngame options. Menus often contain  buttons  like  Play ,  Quit ,  Settings  and About , but could also contain other  Menu  objects for a nested menu system.\nA  Menu  object is a special type of  Node  object. You can create an  empty Menu  object as a place holder for your  menu items :  auto myMenu = Menu::create();  As we described options above of  Play ,  Quit ,  Settings  and About , these are your  menu items . A  Menu  without  menu items  makes little\nsense.  Cocos2d-x offers a variety of ways to create your  menu items  including\nby using a  Label  object or specifying an image to display.  Menu items  usually\nhave two possible states, a  normal  and a  selected  state. When you tap or click\non the  menu item  a  callback  is triggered. You can think of this as a chain\nreaction. You tap/click the  menu item  and it runs the code you specified. A Menu  can have just a single item or many items.  // creating a menu with a single item\n\n// create a menu item by specifying images\nauto closeItem = MenuItemImage::create( CloseNormal.png ,  CloseSelected.png ,\nCC_CALLBACK_1(HelloWorld::menuCloseCallback, this));\n\nauto menu = Menu::create(closeItem, NULL);\nthis- addChild(menu, 1);  A menu can also be created by using a  vector  of  MenuItem  objects:  // creating a Menu from a Vector of items\nVector MenuItem*  MenuItems;\n\nauto closeItem = MenuItemImage::create( CloseNormal.png ,  CloseSelected.png ,\nCC_CALLBACK_1(HelloWorld::menuCloseCallback, this));\n\nMenuItems.pushBack(closeItem);\n\n/* repeat for as many menu items as needed */\n\nauto menu = Menu::createWithArray(MenuItems);\nthis- addChild(menu, 1);  If you run the sample code for this chapter you will see a  Menu  containing Label  objects for  MenuItems :", 
            "title": "Menu and Menu Items"
        }, 
        {
            "location": "/programmers-guide/ui_components/index.html#lambda-functions-as-menu-callbacks", 
            "text": "Above we just learned that when you click a  menu item  it triggers a  callback .\nC++11 offers  lambda  functions and therefore Cocos2d-x takes full advantage of\nthem! A  lambda  function is a function you write inline in your source code. Lambdas  are also evaluated at runtime instead of compile time.  A simple  lambda :  // create a simple Hello World lambda\nauto func = [] () { cout    Hello World ; };\n\n// now call it someplace in code\nfunc();  Using a  lambda  as a  MenuItem  callback:  auto closeItem = MenuItemImage::create( CloseNormal.png ,  CloseSelected.png ,\n[ ](Ref* sender){\n    // your code here\n});", 
            "title": "Lambda functions as Menu callbacks"
        }, 
        {
            "location": "/programmers-guide/ui_components/index.html#buttons", 
            "text": "I doubt that we need to explain buttons much. We all know them as those things\nwe click on to make something happen in our games. Perhaps you might use a button\nto change  scenes  or to add  Sprite  objects into your game play.\nA button intercepts a touch event and calls a predefined callback when tapped.\nA  Button  has a  normal  and  selected  state. The appearance of the  Button  can\nchange based upon it's state. Creating a  Button  and defining its  callback \nis simple:  #include  ui/CocosGUI.h \n\nauto button = Button::create( normal_image.png ,  selected_image.png ,  disabled_image.png );\n\nbutton- setTitleText( Button Text );\n\nbutton- addTouchEventListener([ ](Ref* sender, Widget::TouchEventType type){\n        switch (type)\n        {\n                case ui::Widget::TouchEventType::BEGAN:\n                        break;\n                case ui::Widget::TouchEventType::ENDED:\n                        std::cout    Button 1 clicked    std::endl;\n                        break;\n                default:\n                        break;\n        }\n});\n\nthis- addChild(button);  As you can see in the above example we specify a  .png  image for each of the\npossible states the button can be in. A  Button  is made up of 3 graphics that\nmight look like this:          On screen a  Button  might look like this:", 
            "title": "Buttons"
        }, 
        {
            "location": "/programmers-guide/ui_components/index.html#checkbox", 
            "text": "We are all used to filling out  checkboxes  on paper forms like job applications\nand rental agreements. You can also have  checkboxes  in your games. Perhaps, you\nwant to have the ability for your player to make a simple  yes  or  no  choice.\nYou might also hear this referred to as a  binary  choice (0 and 1). A  CheckBox \npermits the user to make this type of choice. There are 5 different  states  a Checkbox  can have:  normal ,  selected  and  disabled . It is simple to create\na  CheckBox :  #include  ui/CocosGUI.h \n\nauto checkbox = CheckBox::create( check_box_normal.png ,\n                                  check_box_normal_press.png ,\n                                  check_box_active.png ,\n                                  check_box_normal_disable.png ,\n                                  check_box_active_disable.png );\n\ncheckbox- addTouchEventListener([ ](Ref* sender, Widget::TouchEventType type){\n        switch (type)\n        {\n                case ui::Widget::TouchEventType::BEGAN:\n                        break;\n                case ui::Widget::TouchEventType::ENDED:\n                        std::cout    checkbox 1 clicked    std::endl;\n                        break;\n                default:\n                        break;\n        }\n});\n\nthis- addChild(checkbox);  As you can see in the above example we specify a  .png  image for each of the\npossible states the  Checkbox  can be in. Since there are 5 possible states that\na  CheckBox  can be in, it is up 5 graphics, one for each of its states. Example\ngraphics:                On screen a  Checkbox  might look like this:", 
            "title": "CheckBox"
        }, 
        {
            "location": "/programmers-guide/ui_components/index.html#loadingbar", 
            "text": "Have you ever played a game where you had to wait while it loaded up all the\ncontent it needed? It probably showed you a bar, filling in as it made progress\naccomplishing its task. This is often referred to as a  progress bar ,  status bar \nor a  loading bar . Creating a  LoadingBar :  #include  ui/CocosGUI.h \n\nauto loadingBar = LoadingBar::create( LoadingBarFile.png );\n\n// set the direction of the loading bars progress\nloadingBar- setDirection(LoadingBar::Direction::RIGHT);\n\nthis- addChild(loadingBar);  In the above example a  loading bar  is created and we set the direction it\nshould fill towards as progress is made. In this case to the right direction.\nHowever, you probably need to change the percentage of the  LoadingBar . This is\neasily done:  #include  ui/CocosGUI.h \n\nauto loadingBar = LoadingBar::create( LoadingBarFile.png );\nloadingBar- setDirection(LoadingBar::Direction::RIGHT);\n\n// something happened, change the percentage of the loading bar\nloadingBar- setPercent(25);\n\n// more things happened, change the percentage again.\nloadingBar- setPercent(35);\n\nthis- addChild(loadingBar);  As you can see in the above example we specify a  .png  image for the  LoadingBar \nobjects texture:   On screen a  LoadingBar  might look like this:", 
            "title": "LoadingBar"
        }, 
        {
            "location": "/programmers-guide/ui_components/index.html#slider", 
            "text": "Sometimes it is necessary to change a value slightly. Perhaps you have a character\nand you want to allow the player to adjust the strength of attacking an enemy.\nA  Slider  allows users to set a value by moving an indicator. To create a  Slider :  #include  ui/CocosGUI.h \n\nauto slider = Slider::create();\nslider- loadBarTexture( Slider_Back.png ); // what the slider looks like\nslider- loadSlidBallTextures( SliderNode_Normal.png ,  SliderNode_Press.png ,  SliderNode_Disable.png );\nslider- loadProgressBarTexture( Slider_PressBar.png );\n\nslider- addTouchEventListener([ ](Ref* sender, Widget::TouchEventType type){\n        switch (type)\n        {\n                case ui::Widget::TouchEventType::BEGAN:\n                        break;\n                case ui::Widget::TouchEventType::ENDED:\n                        std::cout    slider moved    std::endl;\n                        break;\n                default:\n                        break;\n        }\n});\n\nthis- addChild(slider);  As you can see in the above example we specify a  .png  image for each of the\npossible states the slider can be in. A  Slider  is made up of 5 graphics that\nmight look like this:                 On screen a  Slider  might look like this:", 
            "title": "Slider"
        }, 
        {
            "location": "/programmers-guide/ui_components/index.html#textfield", 
            "text": "What if you wanted the player of your game to type in a special name to call the\nmain character? Where would they type it into? Yes, a  text field , of course.\nA  TextField  widget is used for inputting text. It supports touch event, focus,\npercent positioning and percent content size. To create a  TextField  widget:  #include  ui/CocosGUI.h \n\nauto textField = TextField::create( , Arial ,30);\n\ntextField- addTouchEventListener([ ](Ref* sender, Widget::TouchEventType type){\n                std::cout    editing a TextField    std::endl;\n});\n\nthis- addChild(textField);  In this example a  TextField  is created and a  callback  specified.  TextField  objects are versatile and can meet all of your input needs. Would you\nlike the user to enter a secret password? Do you need to limit the number of\ncharacters a user can input?  TextField  objects have this all built-it and much\nmore! Let's take a look at an example:  #include  ui/CocosGUI.h \n\nauto textField = TextField::create( , Arial ,30);\n\n// make this TextField password enabled\ntextField- setPasswordEnabled(true);\n\n// set the maximum number of characters the user can enter for this TextField\ntextField- setMaxLength(10);\n\ntextField- addTouchEventListener([ ](Ref* sender, Widget::TouchEventType type){\n                std::cout    editing a TextField    std::endl;\n});\n\nthis- addChild(textField);  On screen a  TextField  might look like this:   When you are editing a  TextField , the onscreen keyboard comes up:", 
            "title": "TextField"
        }, 
        {
            "location": "/programmers-guide/other_node_types/index.html", 
            "text": "Other Node Types\n\n\nYou are using \nSprite\n, \nLabel\n and \nAction\n objects in your game and it is making\nprogress. Besides the basic \nNode\n types described in previous chapters, Cocos2d-x also\nprovides more advanced \nNode\n types to help build special functionality. Perhaps\nyou want to make a \ntile-based\n game? Or maybe a \n2d side scroller\n? Or maybe you\nwant to add particle effects to your game? Cocos2d-x provides \nNode\n objects to\nhelp you accomplish these goals!\n\n\nTileMap\n\n\nTileMaps\n are maps made up of \ntiles\n. Each \ntile\n can have independent behavior.\n\nTileMaps\n are stored in an XML-based map format called \nTML\n. \nTMX\n was originally\ndesigned for tile-based maps but is also suitable for more generic game levels\ndue to its support for various object types. \nTMX\n objects are easy to create:\n\n\n// reading in a tiled map.\nauto map = TMXTiledMap::create(\nTileMap.tmx\n);\naddChild(map, 0, 99); // with a tag of '99'\n\n\n\n\nTile-based maps can have many layers, determined by a\n\nz-order\n. You can access a specific layer by it's name:\n\n\n// how to get a specific layer\nauto map = TMXTiledMap::create(\nTileMap.tmx\n);\nauto layer = map-\ngetLayer(\nLayer0\n);\nauto tile = layer-\ngetTileAt(Vec2(1, 63));\n\n\n\n\nEach tile has a unique position and id. This makes it very easy to cherry pick\nspecific tiles. You can access any tile by its id:\n\n\n// to obtain a specific tiles id\nunsigned int gid = layer-\ngetTileGIDAt(Vec2(0, 63));\n\n\n\n\nExample tiled-map layouts:\n\n\n\n\n\n\nHow do you make a tiled-map? There are many tools that do this. \nTiled\n\nis a popular tool. It is actively developed and has a great user community. The\nscreen-shots above are actual \nTiled\n projects.\n\n\nParticle System\n\n\nPerhaps your game needs effects like burning fire, spell casting visuals or explosions.\nHow would you make such complex effects? Is it even possible? Yes, it is. Using\na \nparticle system\n. The term \nparticle system\n refers to a computer graphics\ntechnique that uses a large number of very small sprites or other graphic objects\nto simulate certain kinds of \nfuzzy\n phenomena, which are otherwise very hard\nto reproduce with conventional rendering techniques. Some realistic examples\nmight include highly chaotic systems, natural phenomena, or processes caused by\nchemical reactions. Here are a few examples of \nparticle effects\n:\n\n\n \n \n\n\nTools for creating Particle Effects\n\n\nEven though you can always create \nparticle effects\n by hand, massaging each\nproperty to your liking. There are several third party tools for creating\n\nparticle effects\n. A few of these tools are:\n\n\n\n\nParticle Designer\n: A very powerful particle effects editor on Mac\n\n\nV-play particle editor\n: A cross-platform particle editor for Cocos2d-x\n\n\nParticle2dx\n: An online web particle designer\n\n\n\n\nThese tools usually export a \n.plist\n file that you can read in with Cocos2d-x to\nuse your creation inside your game. Just like with all of the other classes we\nhave worked with so far we use the \ncreate()\n method:\n\n\n// create by plist file\nauto particleSystem = ParticleSystem::create(\nSpinningPeas.plist\n);\n\n\n\n\nBuilt-In Particle Effects\n\n\nAre you ready to add \nparticle effects\n to your game? We hope so! Are you not yet\ncomfortable with creating custom \nparticle effects\n? For ease of convenience there\nare a number of built-in \nparticle effects\n that you can choose from. Take a look\nat this list:\n\n\n\n\n-ParticleFire: Point particle system. Uses Gravity mode.\n\n\n-ParticleFireworks: Point particle system. Uses Gravity mode.\n\n\n-ParticleSun: Point particle system. Uses Gravity mode.\n\n\n-ParticleGalaxy: Point particle system. Uses Gravity mode.\n\n\n-ParticleFlower: Point particle system. Uses Gravity mode.\n\n\n-ParticleMeteor: Point particle system. Uses Gravity mode.\n\n\n-ParticleSpiral: Point particle system. Uses Gravity mode.\n\n\n-ParticleExplosion: Point particle system. Uses Gravity mode.\n\n\n-ParticleSmoke: Point particle system. Uses Gravity mode.\n\n\n-ParticleSnow: Point particle system. Uses Gravity mode.\n\n\n-ParticleRain: Point particle system. Uses Gravity mode.\n\n\n\n\nUsing \nParticleFireworks\n as an example, you can use the built-in effects easily:\n\n\nauto emitter = ParticleFireworks::create();\n\naddChild(emitter, 10);\n\n\n\n\nThe result is a \nparticle effect\n that looks something like:\n\n\n\n\nBut what do you do if your \nparticle effect\n isn't quite the way you want?\nThat's right, you can manually manipulate it! Let's take the same fireworks example\nabove and manipulate it even further by manually changing its properties:\n\n\nauto emitter = ParticleFireworks::create();\n\n// set the duration\nemitter-\nsetDuration(ParticleSystem::DURATION_INFINITY);\n\n// radius mode\nemitter-\nsetEmitterMode(ParticleSystem::Mode::RADIUS);\n\n// radius mode: 100 pixels from center\nemitter-\nsetStartRadius(100);\nemitter-\nsetStartRadiusVar(0);\nemitter-\nsetEndRadius(ParticleSystem::START_RADIUS_EQUAL_TO_END_RADIUS);\nemitter-\nsetEndRadiusVar(0);    // not used when start == end\n\naddChild(emitter, 10);\n\n\n\n\n\n\n\nParallax\n\n\nA \nParallax\n Node is a special \nNode\n type that simulates a \nparallax scroller\n.\nWhat did you say? A \npara\n.. what? Yes, \nparallax\n Simply put you can consider\na \nParallaxNode\n to be a \nspecial effect\n that makes it appear that the position\nor direction of an object appears to differ when viewed from different positions.\nSimple every day examples include looking through the viewfinder and the lens of\na camera. You can think of many games that function this way, Super Mario Bros\nbeing a classic example. \nParallaxNode\n objects can be moved around by a \nSequence\n\nand  also manually by mouse, touch, accelerometer or keyboard events.\n\n\nParallax nodes are a bit more complex than regular nodes. Why? Because they\nrequire the use of multiple nodes to function. A \nParallaxNode\n cannot function\nby itself. You need at least 2 other \nNode\n objects to complete a \nParallaxNode\n.\nAs usual, in true Cocos2d-x fashion, a \nParallaxNode\n is easy to create:\n\n\n// create ParallaxNode\nauto paraNode = ParallaxNode::create();\n\n\n\n\nSince you need multiple \nNode\n objects, they too are easily added:\n\n\n// create ParallaxNode\nauto paraNode = ParallaxNode::create();\n\n// background image is moved at a ratio of 0.4x, 0.5y\nparaNode-\naddChild(background, -1, Vec2(0.4f,0.5f), Vec2::ZERO);\n\n// tiles are moved at a ratio of 2.2x, 1.0y\nparaNode-\naddChild(middle_layer, 1, Vec2(2.2f,1.0f), Vec2(0,-200) );\n\n// top image is moved at a ratio of 3.0x, 2.5y\nparaNode-\naddChild(top layer, 2, Vec2(3.0f,2.5f), Vec2(200,800) );\n\n\n\n\nOK, looks and feels familiar, right? Notice a few items! Each \nNode\n object that\nwas added is given a unique \nz-order\n so that they stack on top of each other.\nAlso notice the additional 2 \nVec2\n type parameters in the \naddChild()\n call. These\nare the \nratio\n and \noffset\n. These parameters can be thought of as the \nratio\n\nof speed to the parent \nNode\n.\n\n\nIt's hard to show a \nParallaxNode\n in text, so please run the example \nProgrammer Guide Sample\n code to see this in action!", 
            "title": "Other Node Types"
        }, 
        {
            "location": "/programmers-guide/other_node_types/index.html#other-node-types", 
            "text": "You are using  Sprite ,  Label  and  Action  objects in your game and it is making\nprogress. Besides the basic  Node  types described in previous chapters, Cocos2d-x also\nprovides more advanced  Node  types to help build special functionality. Perhaps\nyou want to make a  tile-based  game? Or maybe a  2d side scroller ? Or maybe you\nwant to add particle effects to your game? Cocos2d-x provides  Node  objects to\nhelp you accomplish these goals!", 
            "title": "Other Node Types"
        }, 
        {
            "location": "/programmers-guide/other_node_types/index.html#tilemap", 
            "text": "TileMaps  are maps made up of  tiles . Each  tile  can have independent behavior. TileMaps  are stored in an XML-based map format called  TML .  TMX  was originally\ndesigned for tile-based maps but is also suitable for more generic game levels\ndue to its support for various object types.  TMX  objects are easy to create:  // reading in a tiled map.\nauto map = TMXTiledMap::create( TileMap.tmx );\naddChild(map, 0, 99); // with a tag of '99'  Tile-based maps can have many layers, determined by a z-order . You can access a specific layer by it's name:  // how to get a specific layer\nauto map = TMXTiledMap::create( TileMap.tmx );\nauto layer = map- getLayer( Layer0 );\nauto tile = layer- getTileAt(Vec2(1, 63));  Each tile has a unique position and id. This makes it very easy to cherry pick\nspecific tiles. You can access any tile by its id:  // to obtain a specific tiles id\nunsigned int gid = layer- getTileGIDAt(Vec2(0, 63));  Example tiled-map layouts:    How do you make a tiled-map? There are many tools that do this.  Tiled \nis a popular tool. It is actively developed and has a great user community. The\nscreen-shots above are actual  Tiled  projects.", 
            "title": "TileMap"
        }, 
        {
            "location": "/programmers-guide/other_node_types/index.html#particle-system", 
            "text": "Perhaps your game needs effects like burning fire, spell casting visuals or explosions.\nHow would you make such complex effects? Is it even possible? Yes, it is. Using\na  particle system . The term  particle system  refers to a computer graphics\ntechnique that uses a large number of very small sprites or other graphic objects\nto simulate certain kinds of  fuzzy  phenomena, which are otherwise very hard\nto reproduce with conventional rendering techniques. Some realistic examples\nmight include highly chaotic systems, natural phenomena, or processes caused by\nchemical reactions. Here are a few examples of  particle effects :", 
            "title": "Particle System"
        }, 
        {
            "location": "/programmers-guide/other_node_types/index.html#tools-for-creating-particle-effects", 
            "text": "Even though you can always create  particle effects  by hand, massaging each\nproperty to your liking. There are several third party tools for creating particle effects . A few of these tools are:   Particle Designer : A very powerful particle effects editor on Mac  V-play particle editor : A cross-platform particle editor for Cocos2d-x  Particle2dx : An online web particle designer   These tools usually export a  .plist  file that you can read in with Cocos2d-x to\nuse your creation inside your game. Just like with all of the other classes we\nhave worked with so far we use the  create()  method:  // create by plist file\nauto particleSystem = ParticleSystem::create( SpinningPeas.plist );", 
            "title": "Tools for creating Particle Effects"
        }, 
        {
            "location": "/programmers-guide/other_node_types/index.html#built-in-particle-effects", 
            "text": "Are you ready to add  particle effects  to your game? We hope so! Are you not yet\ncomfortable with creating custom  particle effects ? For ease of convenience there\nare a number of built-in  particle effects  that you can choose from. Take a look\nat this list:   -ParticleFire: Point particle system. Uses Gravity mode.  -ParticleFireworks: Point particle system. Uses Gravity mode.  -ParticleSun: Point particle system. Uses Gravity mode.  -ParticleGalaxy: Point particle system. Uses Gravity mode.  -ParticleFlower: Point particle system. Uses Gravity mode.  -ParticleMeteor: Point particle system. Uses Gravity mode.  -ParticleSpiral: Point particle system. Uses Gravity mode.  -ParticleExplosion: Point particle system. Uses Gravity mode.  -ParticleSmoke: Point particle system. Uses Gravity mode.  -ParticleSnow: Point particle system. Uses Gravity mode.  -ParticleRain: Point particle system. Uses Gravity mode.   Using  ParticleFireworks  as an example, you can use the built-in effects easily:  auto emitter = ParticleFireworks::create();\n\naddChild(emitter, 10);  The result is a  particle effect  that looks something like:   But what do you do if your  particle effect  isn't quite the way you want?\nThat's right, you can manually manipulate it! Let's take the same fireworks example\nabove and manipulate it even further by manually changing its properties:  auto emitter = ParticleFireworks::create();\n\n// set the duration\nemitter- setDuration(ParticleSystem::DURATION_INFINITY);\n\n// radius mode\nemitter- setEmitterMode(ParticleSystem::Mode::RADIUS);\n\n// radius mode: 100 pixels from center\nemitter- setStartRadius(100);\nemitter- setStartRadiusVar(0);\nemitter- setEndRadius(ParticleSystem::START_RADIUS_EQUAL_TO_END_RADIUS);\nemitter- setEndRadiusVar(0);    // not used when start == end\n\naddChild(emitter, 10);", 
            "title": "Built-In Particle Effects"
        }, 
        {
            "location": "/programmers-guide/other_node_types/index.html#parallax", 
            "text": "A  Parallax  Node is a special  Node  type that simulates a  parallax scroller .\nWhat did you say? A  para .. what? Yes,  parallax  Simply put you can consider\na  ParallaxNode  to be a  special effect  that makes it appear that the position\nor direction of an object appears to differ when viewed from different positions.\nSimple every day examples include looking through the viewfinder and the lens of\na camera. You can think of many games that function this way, Super Mario Bros\nbeing a classic example.  ParallaxNode  objects can be moved around by a  Sequence \nand  also manually by mouse, touch, accelerometer or keyboard events.  Parallax nodes are a bit more complex than regular nodes. Why? Because they\nrequire the use of multiple nodes to function. A  ParallaxNode  cannot function\nby itself. You need at least 2 other  Node  objects to complete a  ParallaxNode .\nAs usual, in true Cocos2d-x fashion, a  ParallaxNode  is easy to create:  // create ParallaxNode\nauto paraNode = ParallaxNode::create();  Since you need multiple  Node  objects, they too are easily added:  // create ParallaxNode\nauto paraNode = ParallaxNode::create();\n\n// background image is moved at a ratio of 0.4x, 0.5y\nparaNode- addChild(background, -1, Vec2(0.4f,0.5f), Vec2::ZERO);\n\n// tiles are moved at a ratio of 2.2x, 1.0y\nparaNode- addChild(middle_layer, 1, Vec2(2.2f,1.0f), Vec2(0,-200) );\n\n// top image is moved at a ratio of 3.0x, 2.5y\nparaNode- addChild(top layer, 2, Vec2(3.0f,2.5f), Vec2(200,800) );  OK, looks and feels familiar, right? Notice a few items! Each  Node  object that\nwas added is given a unique  z-order  so that they stack on top of each other.\nAlso notice the additional 2  Vec2  type parameters in the  addChild()  call. These\nare the  ratio  and  offset . These parameters can be thought of as the  ratio \nof speed to the parent  Node .  It's hard to show a  ParallaxNode  in text, so please run the example  Programmer Guide Sample  code to see this in action!", 
            "title": "Parallax"
        }, 
        {
            "location": "/programmers-guide/event_dispatch/index.html", 
            "text": "Event Dispatcher\n\n\nWhat is the EventDispatch mechanism?\n\n\nEventDispatch\n is a mechanism for responding to user events.\n\n\nThe basics:\n\n\n\n\nEvent listeners encapsulate your event processing code.\n\n\nEvent dispatcher notifies listeners of user events.\n\n\nEvent objects contain information about the event.\n\n\n\n\n5 types of event listeners.\n\n\nEventListenerTouch\n - responds to touch events\n\n\nEventListenerKeyboard\n - responds to keyboard events\n\n\nEventListenerAcceleration\n - responds to accelerometer events\n\n\nEventListenMouse\n - responds to mouse events\n\n\nEventListenerCustom\n - responds to custom events\n\n\nFixedPriority vs SceneGraphPriority\n\n\nThe \nEventDispatcher\n uses priorities to decide which listeners get delivered an\nevent first.\n\n\nFixed Priority\n is an integer value. Event listeners with lower Priority values\nget to process events before event listeners with higher Priority values.\n\n\nScene Graph Priority\n is a pointer to a \nNode\n. Event listeners whose \nNodes\n have\nhigher \nz-order\n values (that is, are drawn on top) receive events before event\nlisteners whose \nNodes\n have lower \nz-order\n values (that is, are drawn below).\nThis ensures that touch events, for example, get delivered front-to-back, as you\nwould expect.\n\n\nRemember Chapter 2? Where we talked about the \nscene graph\n and we talked about\nthis diagram?\n\n\n\n\nWell, when use \nScene Graph Priority\n you are actually walking this above tree\nbackwards... \nI\n, \nH\n, \nG\n, \nF\n, \nE\n, \nD\n, \nC\n, \nB\n, \nA\n. If\nan event is triggered, \nH\n would take a look and either \nswallow\n it (more\n  on this below) or let is pass through to _I\n. Same thing, \nI\n will either\n  \nconsume\n it or let is pass through to \nG\n and so on until the event either\n  \nswallowed__ it or does not get answered.\n\n\nTouch Events\n\n\nTouch events\n are the most important event in mobile gaming. They are easy to\ncreate and provide versatile functionality. Let's make sure we know what a touch\nevent is. When you touch the screen of your mobile device, it accepts the touch,\nlooks at where you touched and decides what you touched. Your touch is then answered.\nIt is possible that what you touched might not be the responding object but perhaps\nsomething underneath it. Touch events are usually assigned a priority and the\nevent with the highest priority is the one that answers. Here is how you create\na basic touch event listener:\n\n\n//  Create a \none by one\n touch event listener\n// (processes one touch at a time)\nauto listener1 = EventListenerTouchOneByOne::create();\n\n// trigger when you push down\nlistener1-\nonTouchBegan = [](Touch* touch, Event* event){\n    // your code\n    return true; // if you are consuming it\n};\n\n// trigger when moving touch\nlistener1-\nonTouchMoved = [](Touch* touch, Event* event){\n    // your code\n};\n\n// trigger when you let up\nlistener1-\nonTouchEnded = [=](Touch* touch, Event* event){\n    // your code\n};\n\n// Add listener\n_eventDispatcher-\naddEventListenerWithSceneGraphPriority(listener1, this);\n\n\n\n\nAs you can see there are 3 distinct events that you can act upon when using a\ntouch event listener. They each have a distinct time in which they are called.\n\n\nonTouchBegan\n is triggered when you press down.\n\n\nonTouchMoved\n is triggered if you move the object around while still pressing\ndown.\n\n\nonTouchEnded\n is triggered when you let up on the touch.\n\n\nSwallowing Events\n\n\nWhen you have a listener and you want an object to accept the event it was given\nyou must \nswallow\n it. To say it another way, you \nconsume\n it so that it\ndoesn't get passed to other objects in highest to lowest priority. This is easy\nto do.\n\n\n// When \nswallow touches\n is true, then returning 'true' from the\n// onTouchBegan method will \nswallow\n the touch event, preventing\n// other listeners from using it.\nlistener1-\nsetSwallowTouches(true);\n\n// you should also return true in onTouchBegan()\n\nlistener1-\nonTouchBegan = [](Touch* touch, Event* event){\n    // your code\n\n    return true;\n};\n\n\n\n\nCreating a keyboard event\n\n\nFor desktop games, you might want find using keyboard mechanics useful.\nCocos2d-x supports keyboard events. Just like with touch events above,\nkeyboard events are easy to create.\n\n\n// creating a keyboard event listener\nauto listener = EventListenerKeyboard::create();\nlistener-\nonKeyPressed = CC_CALLBACK_2(KeyboardTest::onKeyPressed, this);\nlistener-\nonKeyReleased = CC_CALLBACK_2(KeyboardTest::onKeyReleased, this);\n\n_eventDispatcher-\naddEventListenerWithSceneGraphPriority(listener, this);\n\n// Implementation of the keyboard event callback function prototype\nvoid KeyboardTest::onKeyPressed(EventKeyboard::KeyCode keyCode, Event* event)\n{\n        log(\nKey with keycode %d pressed\n, keyCode);\n}\n\nvoid KeyboardTest::onKeyReleased(EventKeyboard::KeyCode keyCode, Event* event)\n{\n        log(\nKey with keycode %d released\n, keyCode);\n}\n\n\n\n\nCreating an accelerometer event\n\n\nSome mobile devices come equipped with an accelerometer. An accelerometer is a\nsensor that measures g-force as well as changes in direction. A use case would\nbe needing to move your phone back and forth, perhaps to simulate a balancing act.\nCocos2d-x also supports these events and creating them is simple.\nBefore using accelerometer events, you need to enable them on the device:\n\n\nDevice::setAccelerometerEnabled(true);\n\n\n\n\n// creating an accelerometer event\nauto listener = EventListenerAcceleration::create(CC_CALLBACK_2(\nAccelerometerTest::onAcceleration, this));\n\n_eventDispatcher-\naddEventListenerWithSceneGraphPriority(listener, this);\n\n// Implementation of the accelerometer callback function prototype\nvoid AccelerometerTest::onAcceleration(Acceleration* acc, Event* event)\n{\n    //  Processing logic here\n}\n\n\n\n\nCreating a mouse event\n\n\nAs it always has, Cocos2d-x supports mouse events.\n\n\n_mouseListener = EventListenerMouse::create();\n_mouseListener-\nonMouseMove = CC_CALLBACK_1(MouseTest::onMouseMove, this);\n_mouseListener-\nonMouseUp = CC_CALLBACK_1(MouseTest::onMouseUp, this);\n_mouseListener-\nonMouseDown = CC_CALLBACK_1(MouseTest::onMouseDown, this);\n_mouseListener-\nonMouseScroll = CC_CALLBACK_1(MouseTest::onMouseScroll, this);\n\n_eventDispatcher-\naddEventListenerWithSceneGraphPriority(_mouseListener, this);\n\nvoid MouseTest::onMouseDown(Event *event)\n{\n    // to illustrate the event....\n    EventMouse* e = (EventMouse*)event;\n    string str = \nMouse Down detected, Key: \n;\n    str += tostr(e-\ngetMouseButton());\n}\n\nvoid MouseTest::onMouseUp(Event *event)\n{\n    // to illustrate the event....\n    EventMouse* e = (EventMouse*)event;\n    string str = \nMouse Up detected, Key: \n;\n    str += tostr(e-\ngetMouseButton());\n}\n\nvoid MouseTest::onMouseMove(Event *event)\n{\n    // to illustrate the event....\n    EventMouse* e = (EventMouse*)event;\n    string str = \nMousePosition X:\n;\n    str = str + tostr(e-\ngetCursorX()) + \n Y:\n + tostr(e-\ngetCursorY());\n}\n\nvoid MouseTest::onMouseScroll(Event *event)\n{\n    // to illustrate the event....\n    EventMouse* e = (EventMouse*)event;\n    string str = \nMouse Scroll detected, X: \n;\n    str = str + tostr(e-\ngetScrollX()) + \n Y: \n + tostr(e-\ngetScrollY());\n}\n\n\n\n\nCreating a Custom Event\n\n\nThe event types above are defined by the system, and the events (such as touch\nscreen, keyboard response etc) are triggered by the system automatically. In\naddition, you can make your own custom events which are not triggered by the system,\nbut by your code, as follows:\n\n\n_listener = EventListenerCustom::create(\ngame_custom_event1\n, [=](EventCustom* event){\n    std::string str(\nCustom event 1 received, \n);\n    char* buf = static_cast\nchar*\n(event-\ngetUserData());\n    str += buf;\n    str += \n times\n;\n    statusLabel-\nsetString(str.c_str());\n});\n\n_eventDispatcher-\naddEventListenerWithFixedPriority(_listener, 1);\n\n\n\n\nA custom event listener has been defined above, with a response method, and added\nto the event dispatcher. So how is the event handler triggered? Check it out:\n\n\nstatic int count = 0;\n++count;\n\nchar* buf[10];\nsprintf(buf, \n%d\n, count);\n\nEventCustom event(\ngame_custom_event1\n);\nevent.setUserData(buf);\n\n_eventDispatcher-\ndispatchEvent(\nevent);\n\n\n\n\nThe above example creates an EventCustom object and sets its UserData. It is then\ndispatched manually with \n_eventDispatcher-\ndispatchEvent(\nevent)\n. This triggers\nthe event handler defined previously. The handler is called immediately so a local\nstack variable can be used as the UserData.\n\n\nRegistering event with the dispatcher\n\n\nIt is easy to register an event with the \nEvent Dispatcher\n. Taking the sample\ntouch event listener from above:\n\n\n// Add listener\n_eventDispatcher-\naddEventListenerWithSceneGraphPriority(listener1,\nsprite1);\n\n\n\n\nIt is important to note that a touch event can only be registered once per object.\nIf you need to use the same listener for multiple objects you should\nuse \nclone()\n.\n\n\n// Add listener\n_eventDispatcher-\naddEventListenerWithSceneGraphPriority(listener1,\nsprite1);\n\n// Add the same listener to multiple objects.\n_eventDispatcher-\naddEventListenerWithSceneGraphPriority(listener1-\nclone(),\n sprite2);\n\n_eventDispatcher-\naddEventListenerWithSceneGraphPriority(listener1-\nclone(),\n sprite3);\n\n\n\n\nRemoving events from the dispatcher\n\n\nAn added listener can be removed with following method:\n\n\n_eventDispatcher-\nremoveEventListener(listener);\n\n\n\n\nAlthough they may seem special, built-in \nNode\n objects use the \nevent dispatcher\n\nin the same way we have talked out. Makes sense, right? Take \nMenu\n for an example.\nWhen you have a \nMenu\n with \nMenuItems\n when you click them you are dispatching a\nevent. You can also \nremoveEventListener()\n on built-in \nNode\n objects.", 
            "title": "Event Dispatch"
        }, 
        {
            "location": "/programmers-guide/event_dispatch/index.html#event-dispatcher", 
            "text": "", 
            "title": "Event Dispatcher"
        }, 
        {
            "location": "/programmers-guide/event_dispatch/index.html#what-is-the-eventdispatch-mechanism", 
            "text": "EventDispatch  is a mechanism for responding to user events.  The basics:   Event listeners encapsulate your event processing code.  Event dispatcher notifies listeners of user events.  Event objects contain information about the event.", 
            "title": "What is the EventDispatch mechanism?"
        }, 
        {
            "location": "/programmers-guide/event_dispatch/index.html#5-types-of-event-listeners", 
            "text": "EventListenerTouch  - responds to touch events  EventListenerKeyboard  - responds to keyboard events  EventListenerAcceleration  - responds to accelerometer events  EventListenMouse  - responds to mouse events  EventListenerCustom  - responds to custom events", 
            "title": "5 types of event listeners."
        }, 
        {
            "location": "/programmers-guide/event_dispatch/index.html#fixedpriority-vs-scenegraphpriority", 
            "text": "The  EventDispatcher  uses priorities to decide which listeners get delivered an\nevent first.  Fixed Priority  is an integer value. Event listeners with lower Priority values\nget to process events before event listeners with higher Priority values.  Scene Graph Priority  is a pointer to a  Node . Event listeners whose  Nodes  have\nhigher  z-order  values (that is, are drawn on top) receive events before event\nlisteners whose  Nodes  have lower  z-order  values (that is, are drawn below).\nThis ensures that touch events, for example, get delivered front-to-back, as you\nwould expect.  Remember Chapter 2? Where we talked about the  scene graph  and we talked about\nthis diagram?   Well, when use  Scene Graph Priority  you are actually walking this above tree\nbackwards...  I ,  H ,  G ,  F ,  E ,  D ,  C ,  B ,  A . If\nan event is triggered,  H  would take a look and either  swallow  it (more\n  on this below) or let is pass through to _I . Same thing,  I  will either\n   consume  it or let is pass through to  G  and so on until the event either\n   swallowed__ it or does not get answered.", 
            "title": "FixedPriority vs SceneGraphPriority"
        }, 
        {
            "location": "/programmers-guide/event_dispatch/index.html#touch-events", 
            "text": "Touch events  are the most important event in mobile gaming. They are easy to\ncreate and provide versatile functionality. Let's make sure we know what a touch\nevent is. When you touch the screen of your mobile device, it accepts the touch,\nlooks at where you touched and decides what you touched. Your touch is then answered.\nIt is possible that what you touched might not be the responding object but perhaps\nsomething underneath it. Touch events are usually assigned a priority and the\nevent with the highest priority is the one that answers. Here is how you create\na basic touch event listener:  //  Create a  one by one  touch event listener\n// (processes one touch at a time)\nauto listener1 = EventListenerTouchOneByOne::create();\n\n// trigger when you push down\nlistener1- onTouchBegan = [](Touch* touch, Event* event){\n    // your code\n    return true; // if you are consuming it\n};\n\n// trigger when moving touch\nlistener1- onTouchMoved = [](Touch* touch, Event* event){\n    // your code\n};\n\n// trigger when you let up\nlistener1- onTouchEnded = [=](Touch* touch, Event* event){\n    // your code\n};\n\n// Add listener\n_eventDispatcher- addEventListenerWithSceneGraphPriority(listener1, this);  As you can see there are 3 distinct events that you can act upon when using a\ntouch event listener. They each have a distinct time in which they are called.  onTouchBegan  is triggered when you press down.  onTouchMoved  is triggered if you move the object around while still pressing\ndown.  onTouchEnded  is triggered when you let up on the touch.", 
            "title": "Touch Events"
        }, 
        {
            "location": "/programmers-guide/event_dispatch/index.html#swallowing-events", 
            "text": "When you have a listener and you want an object to accept the event it was given\nyou must  swallow  it. To say it another way, you  consume  it so that it\ndoesn't get passed to other objects in highest to lowest priority. This is easy\nto do.  // When  swallow touches  is true, then returning 'true' from the\n// onTouchBegan method will  swallow  the touch event, preventing\n// other listeners from using it.\nlistener1- setSwallowTouches(true);\n\n// you should also return true in onTouchBegan()\n\nlistener1- onTouchBegan = [](Touch* touch, Event* event){\n    // your code\n\n    return true;\n};", 
            "title": "Swallowing Events"
        }, 
        {
            "location": "/programmers-guide/event_dispatch/index.html#creating-a-keyboard-event", 
            "text": "For desktop games, you might want find using keyboard mechanics useful.\nCocos2d-x supports keyboard events. Just like with touch events above,\nkeyboard events are easy to create.  // creating a keyboard event listener\nauto listener = EventListenerKeyboard::create();\nlistener- onKeyPressed = CC_CALLBACK_2(KeyboardTest::onKeyPressed, this);\nlistener- onKeyReleased = CC_CALLBACK_2(KeyboardTest::onKeyReleased, this);\n\n_eventDispatcher- addEventListenerWithSceneGraphPriority(listener, this);\n\n// Implementation of the keyboard event callback function prototype\nvoid KeyboardTest::onKeyPressed(EventKeyboard::KeyCode keyCode, Event* event)\n{\n        log( Key with keycode %d pressed , keyCode);\n}\n\nvoid KeyboardTest::onKeyReleased(EventKeyboard::KeyCode keyCode, Event* event)\n{\n        log( Key with keycode %d released , keyCode);\n}", 
            "title": "Creating a keyboard event"
        }, 
        {
            "location": "/programmers-guide/event_dispatch/index.html#creating-an-accelerometer-event", 
            "text": "Some mobile devices come equipped with an accelerometer. An accelerometer is a\nsensor that measures g-force as well as changes in direction. A use case would\nbe needing to move your phone back and forth, perhaps to simulate a balancing act.\nCocos2d-x also supports these events and creating them is simple.\nBefore using accelerometer events, you need to enable them on the device:  Device::setAccelerometerEnabled(true);  // creating an accelerometer event\nauto listener = EventListenerAcceleration::create(CC_CALLBACK_2(\nAccelerometerTest::onAcceleration, this));\n\n_eventDispatcher- addEventListenerWithSceneGraphPriority(listener, this);\n\n// Implementation of the accelerometer callback function prototype\nvoid AccelerometerTest::onAcceleration(Acceleration* acc, Event* event)\n{\n    //  Processing logic here\n}", 
            "title": "Creating an accelerometer event"
        }, 
        {
            "location": "/programmers-guide/event_dispatch/index.html#creating-a-mouse-event", 
            "text": "As it always has, Cocos2d-x supports mouse events.  _mouseListener = EventListenerMouse::create();\n_mouseListener- onMouseMove = CC_CALLBACK_1(MouseTest::onMouseMove, this);\n_mouseListener- onMouseUp = CC_CALLBACK_1(MouseTest::onMouseUp, this);\n_mouseListener- onMouseDown = CC_CALLBACK_1(MouseTest::onMouseDown, this);\n_mouseListener- onMouseScroll = CC_CALLBACK_1(MouseTest::onMouseScroll, this);\n\n_eventDispatcher- addEventListenerWithSceneGraphPriority(_mouseListener, this);\n\nvoid MouseTest::onMouseDown(Event *event)\n{\n    // to illustrate the event....\n    EventMouse* e = (EventMouse*)event;\n    string str =  Mouse Down detected, Key:  ;\n    str += tostr(e- getMouseButton());\n}\n\nvoid MouseTest::onMouseUp(Event *event)\n{\n    // to illustrate the event....\n    EventMouse* e = (EventMouse*)event;\n    string str =  Mouse Up detected, Key:  ;\n    str += tostr(e- getMouseButton());\n}\n\nvoid MouseTest::onMouseMove(Event *event)\n{\n    // to illustrate the event....\n    EventMouse* e = (EventMouse*)event;\n    string str =  MousePosition X: ;\n    str = str + tostr(e- getCursorX()) +   Y:  + tostr(e- getCursorY());\n}\n\nvoid MouseTest::onMouseScroll(Event *event)\n{\n    // to illustrate the event....\n    EventMouse* e = (EventMouse*)event;\n    string str =  Mouse Scroll detected, X:  ;\n    str = str + tostr(e- getScrollX()) +   Y:   + tostr(e- getScrollY());\n}", 
            "title": "Creating a mouse event"
        }, 
        {
            "location": "/programmers-guide/event_dispatch/index.html#creating-a-custom-event", 
            "text": "The event types above are defined by the system, and the events (such as touch\nscreen, keyboard response etc) are triggered by the system automatically. In\naddition, you can make your own custom events which are not triggered by the system,\nbut by your code, as follows:  _listener = EventListenerCustom::create( game_custom_event1 , [=](EventCustom* event){\n    std::string str( Custom event 1 received,  );\n    char* buf = static_cast char* (event- getUserData());\n    str += buf;\n    str +=   times ;\n    statusLabel- setString(str.c_str());\n});\n\n_eventDispatcher- addEventListenerWithFixedPriority(_listener, 1);  A custom event listener has been defined above, with a response method, and added\nto the event dispatcher. So how is the event handler triggered? Check it out:  static int count = 0;\n++count;\n\nchar* buf[10];\nsprintf(buf,  %d , count);\n\nEventCustom event( game_custom_event1 );\nevent.setUserData(buf);\n\n_eventDispatcher- dispatchEvent( event);  The above example creates an EventCustom object and sets its UserData. It is then\ndispatched manually with  _eventDispatcher- dispatchEvent( event) . This triggers\nthe event handler defined previously. The handler is called immediately so a local\nstack variable can be used as the UserData.", 
            "title": "Creating a Custom Event"
        }, 
        {
            "location": "/programmers-guide/event_dispatch/index.html#registering-event-with-the-dispatcher", 
            "text": "It is easy to register an event with the  Event Dispatcher . Taking the sample\ntouch event listener from above:  // Add listener\n_eventDispatcher- addEventListenerWithSceneGraphPriority(listener1,\nsprite1);  It is important to note that a touch event can only be registered once per object.\nIf you need to use the same listener for multiple objects you should\nuse  clone() .  // Add listener\n_eventDispatcher- addEventListenerWithSceneGraphPriority(listener1,\nsprite1);\n\n// Add the same listener to multiple objects.\n_eventDispatcher- addEventListenerWithSceneGraphPriority(listener1- clone(),\n sprite2);\n\n_eventDispatcher- addEventListenerWithSceneGraphPriority(listener1- clone(),\n sprite3);", 
            "title": "Registering event with the dispatcher"
        }, 
        {
            "location": "/programmers-guide/event_dispatch/index.html#removing-events-from-the-dispatcher", 
            "text": "An added listener can be removed with following method:  _eventDispatcher- removeEventListener(listener);  Although they may seem special, built-in  Node  objects use the  event dispatcher \nin the same way we have talked out. Makes sense, right? Take  Menu  for an example.\nWhen you have a  Menu  with  MenuItems  when you click them you are dispatching a\nevent. You can also  removeEventListener()  on built-in  Node  objects.", 
            "title": "Removing events from the dispatcher"
        }, 
        {
            "location": "/programmers-guide/3d/index.html", 
            "text": "3D\n\n\nYou probably started with Cocos2d-x and know it as a 2D game engine. Starting\nwith version 3, 3D features are being added and refined. 3D gaming is a huge\nmarket and Cocos2d-x is adding all the features you need for 3D development. 3D\ndevelopment might be new to you and use some terminology that you are unfamiliar\nwith. There are also additional software tools that you need to become familiar\nwith. Let's jump right in and get our feet wet.\n\n\nTerminology\n\n\nWhen using 3D, there are some commonly used terms that you should be familiar with:\n\n\n\n\n\n\nMesh\n - vertices that construct a shape and texture with which you are\nrendering.\n\n\n\n\n\n\nModel\n - an object that can be rendered. It is a collection of meshes. In our\nengine \nSprite3D\n.\n\n\n\n\n\n\nTexture\n - All surfaces and vertices of a 3D model can be mapped to a texture.\nIn most cases you will have multiple textures per model, unwrapped in a texture\natlas.\n\n\n\n\n\n\nCamera\n - Since a 3D world is not flat, you need to set a camera to look at\nit. You get different scenes with different camera parameters.\n\n\n\n\n\n\nLight\n - Lightening is applied to make scenes look realistic. To make an object\nlook real, the color should change according to the light. When you face the light\nit is bright and the opposite is dark. \nLightening\n an object means computing the\nobject's color according to the light.\n\n\n\n\n\n\nSprite3D\n\n\nJust like 2D games, 3D games also have \nSprite\n objects. \nSprite\n objects are a\ncore foundation of any game. One of the main differences between \nSprite\n and\n\nSprite3D\n is \nSprite3D\n objects have 3 axes it can be positioned on:\n\nx\n,  \ny\n and \nz\n. \nSprite3D\n works in many ways just like a normal \nSprite\n.\nIt is easy to load and display a \nSprite3D\n object:\n\n\nauto sprite = Sprite3D::create(\nboss.c3b\n); //c3b file, created with the FBX-converter\nsprite-\nsetScale(5.f); //sets the object scale in float\nsprite-\nsetPosition(Vec2(200,200)); //sets sprite position\nscene-\naddChild(sprite,1); //adds sprite to scene, z-index: 1\n\n\n\n\nThis creates and positions a \nSprite3D\n object from \n.c3b\n file. Example:\n\n\n\n\nNow let's rotate the model in a loop. For this we will create an action and run\nit:\n\n\n//rotate around the X axis\nauto rotation = RotateBy::create(15, Vec3(0, 360, 0));\n//our sprite object runs the action\nsprite-\nrunAction(RepeatForever::create(rotation));\n\n\n\n\nTo set an anchor point on the \nSprite\n or \nSprite3D\n use:\n\n\nsprite-\nsetAnchorPoint(Point(0.0f,0.0f));\n\n\n\n\nAttaching 3D models to Sprite3D objects.\n\n\nRecall above that a 3D model is a collection of \nmeshes\n. You can attach 3D models\nto other 3D models to create rich effects. An example would\nbe adding a weapon to a character. To do this you need to find the attachment\npoint where the weapon is to be added. For this use the \ngetAttachNode(attachment_point_name)\n\nfunction. And then we just add the new model to the attachment point as a child\nwith \naddChild()\n. You can think of this as combining multiple simpler 3D models\nto create more complex models. For example adding a model to a \nSprite3D\n object:\n\n\nauto sp = Sprite3D::create(\naxe.c3b\n);\nsprite-\ngetAttachNode(\nBip001 R Hand\n)-\naddChild(sp);\n\n\n\n\n\n\nSwap 3D Model\n\n\nWhen doing 3D development you might want to make dynamic changes to your model.\nPerhaps due to power-ups, costume changes or visual cues to notify the user about\nstatus changes of your model. If your 3D model is comprised from \nmeshes\n you can\naccess the \nmesh data\n using \ngetMeshByIndex()\n and \ngetMeshByName()\n. Using\nthese functions it is possible to achieve effects like swapping a weapon or clothing\nfor a character. Let's take a look at an example of a girl wearing a coat:\n\n\n\n\nWe can change the coat that the girl is wearing by changing the visibility of\nthe \nmesh\n objects we are using. The following example demonstrates how to do\nthis:\n\n\nauto sprite = Sprite3D::create(\nReskinGirl.c3b\n);\n\n// display the first coat\nauto girlTop0 = sprite-\ngetMeshByName(\nGirl_UpperBody01\n);\ngirlTop0-\nsetVisible(true);\n\nauto girlTop1 = sprite-\ngetMeshByName(\nGirl_UpperBody02\n);\ngirlTop1-\nsetVisible(false);\n\n// swap to the second coat\ngirlTop0-\nsetVisible(false);\ngirlTop1-\nsetVisible(true);\n\n\n\n\nThe results:\n\n\n\n\nAnimation\n\n\nSprite3D\n objects are essential to our game! We have learned how to manipulate them.\nHowever, we might want a more rich experience. Enter animation! To run a 3d\nanimation, you can use the \nAnimation3D\n and \nAnimate3D\n objects. You then create\nan \nAnimate3D\n action using the \nAnimation3D\n object. Example:\n\n\n// the animation is contained in the .c3b file\nauto animation = Animation3D::create(\norc.c3b\n);\n\n// creates the Action with Animation object\nauto animate = Animate3D::create(animation);\n\n// runs the animation\nsprite-\nrunAction(RepeatForever::create(animate));\n\n\n\n\nRun the example \nProgrammer Guide Sample\n code to see this in action! Please\nkeep in mind that 3D animations are exactly the same concepts as 2D. Please refer\nto Chapter 4 in this guide.\n\n\nMultiple animations\n\n\nWhat do you do when you want to run multiple \nanimations\n at the same time?\nUsing both the \nanimation start time\n and \nanimation length\n parameters you\ncan create multiple animations. The unit for both parameters is seconds. Example:\n\n\nauto animation = Animation3D::create(fileName);\n\nauto runAnimate = Animate3D::create(animation, 0, 2);\nsprite-\nrunAction(runAnimate);\n\nauto attackAnimate = Animate3D::create(animation, 3, 5);\nsprite-\nrunAction(attackAnimate);\n\n\n\n\nIn the above example there are two animations that get run. The first starts\nimmediately and lasts for \n2 seconds\n. The second starts after \n3 seconds\n and lasts\nfor \n5 seconds\n.\n\n\nAnimation speed\n\n\nThe \nspeed\n of the animation is a positive integer for forward while\na negative speed would be reverse. In this case the speed is set to \n10\n.\nThis means that this animation can be considered to be \n10\n seconds in length.\n\n\nAnimation blending\n\n\nWhen using multiple animations, \nblending\n is automatically applied between each\nanimation. The purpose of \nblending\n is to create a smooth transition between\neffects. Given two animations, A and B, the last few frames of animation A and\nthe first few frames of animation B overlap to make the change in animation look\nnatural.\n\n\nThe default transition time is 0.1 seconds. You can set the transition time by\nusing \nAnimate3D::setTransitionTime\n.\n\n\nCocos2d-x only supports \nlinear interpolation\n between keyframes. This fills in\n\ngaps\n in the curve to ensure a smooth path. If you use other interpolation\nmethods in the model production, our built-in tool, \nfbx-conv\n will\ngenerate additional keyframes to compensate. This compensation is completed in\naccordance with the target frame. For more information on \nfbx-conv\n please refer\nto the section discussing it at the end of this chapter.\n\n\nCamera\n\n\nCamera\n objects are an important aspect of 3D development. Since a 3D world is\nnot flat you need to use a \nCamera\n to look at it and navigate around it. Just\nlike when you are watching a movie and the scene pans to the left or right. This\nsame concept is applied when using a \nCamera\n object. The \nCamera\n object inherits\nfrom \nNode\n and therefore supports most of the same \nAction\n objects. There are two types\nof \nCamera\n objects: \nperspective camera\n and \northographic camera\n.\n\n\nThe \nperspective camera\n is used to see objects having a near to far effect. A\n\nperspective camera\n view might look like this:\n\n\n\n\nAs you can see with a \nperspective camera\n, objects in the \nnear\n are larger and\nobjects in the \nfar\n are smaller.\n\n\nThe \northogonal camera\n is used to see objects as large distance. You can think\nabout it as converting a 3D world to a 2D representation. An \northogonal camera\n\nview might look like this:\n\n\n\n\nAs you can see with an \northogonal camera\n, objects are the same size regardless\nof how far away from the \nCamera\n object they are. \nMini Maps\n in games are\ncommonly rendered with an \northogonal camera\n. Another example would be a top -\ndown view, perhaps in a dungeon style game.\n\n\nCamera Use\n\n\nDon't worry! \nCamera\n objects may sound complicated but Cocos2d-x makes them easy.\nWhen using 3D you don't have to do anything special to create a \nCamera\n object.\nEach \nScene\n automatically creates a default camera, based on the projection\nproperties of the \nDirector\n object. If you need more than one camera, you can\nuse the following code to create one:\n\n\nauto s = Director::getInstance()-\ngetWinSize();\nauto camera = Camera::createPerspective(60, (GLfloat)s.width/s.height, 1, 1000);\n\n// set parameters for camera\ncamera-\nsetPosition3D(Vec3(0, 100, 100));\ncamera-\nlookAt(Vec3(0, 0, 0), Vec3(0, 1, 0));\n\naddChild(camera); //add camera to the scene\n\n\n\n\nCreating orthogonal camera\n\n\nThe default \nCamera\n is a \nperspective camera\n. If you want to create an\n\northogonal camera\n, it's easy to do by calling:\n\n\nCamera::createOrthographic();\n\n\n\n\nExample:\n\n\nauto s = Director::getInstance()-\ngetWinSize();\nauto camera = Camera::createOrthographic(s.width, s.height, 1, 1000);\n\n\n\n\nHiding objects from the camera\n\n\nSometimes you don't want to have all objects visible in a \nCamera\n view. Hiding\nan object from one camera is very easy. Use \nsetCameraMask(CameraFlag)\n on the\n\nNode\n and \nsetCameraFlag(CameraFlag)\n on the \nCamera\n. Example:\n\n\n//Camera\ncamera-\nsetCameraFlag(CameraFlag::USER1);\n\n//Node\nnode-\nsetCameraMask(CameraFlag::USER1);\n\n\n\n\nCubemap Texture\n\n\nA \ncube map texture\n is a collection of six separate square textures that are\nput onto the faces of an imaginary cube. Most often they are used to display\ninfinitely far away reflections on objects, similar to how \nsky box\n displays\nfar away scenery in the background. This is what an expanded cube map might look\nlike:\n\n\n\n\nIn Cocos2d-x,you can create a \ncube map texture\n in this way:\n\n\n// create a textureCube object with six texture assets\nauto _textureCube = TextureCube::create(\nskybox/left.jpg\n,  \nskybox/right.jpg\n,\n\nskybox/top.jpg\n, \nskybox/bottom.jpg\n, \nskybox/front.jpg\n,\nskybox/back.jpg\n);\n\n// set cube map texture parameters\nTexture2D::TexParams tRepeatParams;\ntRepeatParams.magFilter = GL_NEAREST;\ntRepeatParams.minFilter = GL_NEAREST;\ntRepeatParams.wrapS = GL_MIRRORED_REPEAT;\ntRepeatParams.wrapT = GL_MIRRORED_REPEAT;\n_textureCube-\nsetTexParameters(tRepeatParams);\n\n// create and set our custom shader\nauto shader = GLProgram::createWithFilenames(\ncube_map.vert\n,\ncube_map.frag\n);\nauto _state = GLProgramState::create(shader);\n\n// bind cube map texture to uniform\n_state-\nsetUniformTexture(\nu_cubeTex\n, _textureCube);\n\n\n\n\nSkybox\n\n\nSkybox\n is a wrapper around your entire scene that shows what the world looks\nlike beyond your geometry. You might use a \nSkybox\n to simulate infinite sky,\nmountains and other phenomena.\n\n\n\n\nCreating a \nSkybox\n:\n\n\n// create a Skybox object\nauto box = Skybox::create();\n\n// set textureCube for Skybox\nbox-\nsetTexture(_textureCube);\n\n// attached to scene\n_scene-\naddChild(box);\n\n\n\n\nLight\n\n\nLight is really important for building mood and ambiance for a game. There are\ncurrently 4 lighting techniques supported. You would use different lighting\ntechniques depending upon your needs. Each lighting effect achieves a different\nresult.\n\n\nAmbient Light\n\n\nAn \nAmbientLight\n object will apply light evenly for everything in the scene.\nThink of lighting in an office environment. The lights are overhead and when you\nlook at objects around the office you see them in the same light. Example:\n\n\nauto light = AmbientLight::create (Color3B::RED);\naddChild(light);\n\n\n\n\nThis produces:\n\n\n\n\nDirectional Light\n\n\nDirectionalLight\n is often used to simulate a light source such as\nsunlight. When using \nDirectionalLight\n keep in mind that is has the same density\nno matter where you are in relationship to it. Also think about being outside on\na sunny day with the sun beaming down on you. When you look directly at the sun,\nit is an intense light even if you move a few steps in any direction. Example:\n\n\nauto light = DirectionLight::create(Vec3(-1.0f, -1.0f, 0.0f), Color3B::RED);\naddChild(light);\n\n\n\n\nThis produces:\n\n\n\n\nPoint Light\n\n\nPointLight\n is often used to simulate the effect of light bulbs, lamps\nor torches. The direction of a \nPointLight\n is from the lighted position to the\n\nPointLight\n. Keep in mind that the density is different depending upon the\ndistance from the \nPointLight\n. What does this mean? If you are close to the\nstart of the \nPointLight\n it will be really strong. If you are towards the end\nof the \nPointLight\n it will be dim. \nPointLight\n also becomes weaker the larger\nthe distance it is projected. Example:\n\n\nauto light = PointLight::create(Vec3(0.0f, 0.0f, 0.0f), Color3B::RED, 10000.0f);\naddChild(light);\n\n\n\n\nThis produces:\n\n\n\n\nSpot Light\n\n\nA \nSpotLight\n object is often used to simulate a flashlight. This means that it\nis emitted in just one direction in the shape of a cone. Think about the power\ngoing out in your house. You may need to take a flashlight down into your basement\nto reset your circuits. The flashlight produces a cone shaped lighting pattern\nand you can only see objects inside that cone pattern. Another example is in dark,\ndungeon based games where your path is light by torches. You can only see the\nlimited cone shape that those torches emit. Example:\n\n\nauto spotLight = SpotLight::create(Vec3(-1.0f, -1.0f, 0.0f), Vec3(0.0f, 0.0f, 0.0f),\nColor3B::RED, 0.0, 0.5, 10000.0f) ;\naddChild(spotLight);\n\n\n\n\nThis produces:\n\n\n\n\nLight Masking\n\n\nWhat do you use for lights in your kitchen or living room? Probably a few lamps?\nDo you ever notice that perhaps you only use a lamp to light up a certain portion\nof the room? You are essentially applying a \nlighting mask\n!\n\n\nA \nlighting mask\n is used on a \nNode\n to only apply a particular \nlighting source\n\nto it. For example, if you had multiple lights in a \nScene\n, a \nNode\n can only be\nlighted by one of the lights instead of all three. You can use \nsetLightFlag(LightFlag)\n\nto control which \nNode\n objects are effected by the light. It is important to note\nthat all lighting sources are rendered in a single pass. Due to mobile platform\nperformance issues the use of multiple light sources is not recommended. The\ndefault maximum is 1. If you want to open multiple light sources you must define\nthe following keys in \ninfo.plist\n:\n\n\nkey\n cocos2d.x.3d.max_dir_light_in_shader \n/key\n\n\ninteger\n 1 \n/integer\n\n\nkey\n cocos2d.x.3d.max_point_light_in_shader \n/key\n\n\ninteger\n 1 \n/integer\n\n\nkey\n cocos2d.x.3d.max_spot_light_in_shader \n/key\n\n\ninteger\n 1 \n/integer\n\n\n\n\n\nTerrain\n\n\nTerrain\n is an important component in 3D game. A texture is used to stand for the\nheight map. And up to 4 textures can be used to blend the details of the terrain,\ngrass, road, and so on.\n\n\nHeightMap\n\n\nHeightMap\n objects are the core of the terrain. Different from the common image\nthe height map represents the height of vertices. It determines the terrain's\ngeometry shape.\n\n\nDetailMap\n\n\nDetailMap\n objects are a list of textures determining the details of the terrain,\nup to four textures can be used.\n\n\nAlphaMap\n\n\nAlphaMap\n objects are an image whose data is the blend weights of \ndetail maps\n.\nThe blending result is the final terrain's appearance.\n\n\nLOD policy\n\n\nTerrain\n uses an optimization technique called \nLevel Of Detail\n or \nLOD\n.\nThis is a rendering technique that reduces the number of \nverticies\n (or triangles)\nthat are rendered ,for an object,  as its distance from camera increases. Users\ncan set the distance to the \nCamera\n by calling the\n\nTerrain::setLODDistance(float lod1, float lod2, float lod3)\n method.\n\n\nNeighboring chunks of \nTerrain\n objects, which have different \nLOD\n may cause\n the \ncrack\n artifacts. \nTerrain\n provide two functions to avoid them:\n\n\nTerrain::CrackFixedType::SKIRT\n\nTerrain::CrackFixedType::INCREASE_LOWER\n\n\n\n\nTerrain::CrackFixedType::SKIRT\n will generate four, skirt-like meshes at each\nedge of the chunk.\n\n\nTerrain::CrackFixedType::INCREASE_LOWER\n will dynamically adjust each chunks\n\nindices\n to seamlessly connect them.\n\n\nHow to create a terrain\n\n\nCreating a \nTerrain\n takes a few steps. Example:\n\n\nThe following code snippet is creating a player and place it on the terrain:\n\n\nauto player = Sprite3D::create(\nchapter9/orc.c3b\n);\nplayer-\nsetScale(0.08);\nplayer-\nsetPositionY(terrain-\ngetHeight(player-\ngetPositionX(),player-\ngetPositionZ()));\n\n\n\n\n\n\n\n\ncreate all \nDetailMap\n objects (up to four), you need pass the \nDetailMap\n\nobjects to the \nTerrain::DetailMap\n struct:\n\n\n\n\n  Terrain::DetailMap r(\ndirt.dds\n);\n  Terrain::DetailMap g(\ngrass.dds\n);\n  Terrain::DetailMap b(\nroad.dds\n);\n  Terrain::DetailMap a(\ngreenSkin.jpg\n);\n\n\n\n\n\n\nto create a \nTerrainData\n variable with \ndetail maps\n, you need to specify\nthe terrain's \nheight map\n file path and \nalpha map\n file path:\n\n\n\n\nTerrain::TerrainData data(\nchapter9/heightmap16.jpg\n,\nTerrainTest/alphamap.png\n, r, g, b, a);\n\n\n\n\n\n\npass the \nTerrainData\n object to \nTerrain::create\n, the last parameter determines\nthe LOD policy (as talked about above). Example:\n\n\n\n\n_terrain = Terrain::create(data, Terrain::CrackFixedType::SKIRT);\n\n\n\n\n\n\nIf you set a \nTerrain\n objects \ncamera mask\n and add it to a \nNode\n or a\n\nScene\n, be careful. When \nTerrain\n is added into a \nNode\n or a \nScene\n, you can\nnot use \ntransform(translate, scale)\n on it anymore. If you do this after calling\n\naddChild()\n, some of the terrain's methods may calculate wrong results.\n\n\n\n\nGet Terrain Height\n\n\nUse the method \nTerrain::getHeight(float x, float z, Vec3 * normal= nullptr)\n to\nget the specified position's height. This method is very useful when you want to\nput a \nSprite3D\n object or any \nNode\n on the terrain's surface.\n\n\nRay-Terrain intersection test\n\n\nA \nRay-Terrain\n intersection test will calculate the intersection point by giving\na specified position.\n\n\nTerrain::CrackFixedType::SKIRT\n will generate four skirt-like meshes at each\nchunks edge.\n\n\nTerrain::CrackFixedType::INCREASE_LOWER\n will dynamically adjust each chunks\nindex to seamlessly connect them.\n\n\n3D Software Packages\n\n\n3D Editors\n\n\n3D editors are collections of tools that you use to build your 3D graphics. There\nare both commercial and free tools available. These are the most popular editors:\n\n\n\n\nBlender (Free)\n\n\n3DS Max\n\n\nCinema4D\n\n\nMaya\n\n\n\n\nMost 3D editors usually save files in a common collection of formats for easy\nuse within other editors as well as a standard way for game engines to import\nyour files for use.\n\n\nCocos2d-x Provided Tools\n\n\nCocos2d-x provides tools to help with converting your 3D models to formats that\nCocos2d-x uses to provide access to all aspects of your 3D files.\n\n\nfbx-conv command-line tool\n\n\nfbx-conv\n allows the conversion of an FBX file into the Cocos2d-x proprietary\nformats. FBX is the most popular 3D file format and is being supported by all\nthe major editors. \nfbx-conv\n exports to \n.c3b\n by default. It is simple to use\nwith just a few parameters:\n\n\nfbx-conv [-a|-b|-t] FBXFile\n\n\n\n\nThe possible switches are:\n\n\n\n\n-?: show help\n\n\n-a: export both text and binary format\n\n\n-b: export binary format\n\n\n-t: export text format\n\n\n\n\nExample:\n\n\nfbx-conv -a boss.FBX\n\n\n\n\nThere are a few things to note about \nfbx-conv\n:\n\n The model needs to have a material that contains at least one texture\n\n it only supports skeletal animation.\n\n it only supports one skeleton object no multiple skeleton support yet.\n\n You can create a 3d scene by exporting multiple static model\n* The maximum amount of vertices or indices a mesh is 32767\n\n\n3D File Formats\n\n\nCocos2d-x currently supports two 3d file formats:\n\n\n\n\nWavefront Object\n files:\n\n.obj\n files\n\n\nCocos2d-x 3d ad-hoc format:\nc3t\n, \nc3b\n files.\n\n\n\n\nThe \nWavefront\n file format is supported because it has been widely adopted by\n3D editors and it is extremely easy to parse. It is, however, limited and\ndoesn't support advanced features like animations.\n\n\nOn the other hand, \nc3t\n and \nc3b\n are Cocos2d-x proprietary file formats that\nwere created to allow animations, materials and other advanced 3d features.\nThe suffix \nt\n means \ntext\n, while the suffix \nb\n means \nbinary\n. Developers\nmust use \nc3b\n for production because it is more efficient. In case you want to\ndebug the file and track its changes in Git or any other version control system,\nyou should \nc3t\n instead. Also, \nAnimation3D\n objects can be created with \nc3b\n\nor \nc3t\n files as it is not possible to animate \nobj\n files.\n\n\nAdvanced Topics\n\n\nBillBoard\n\n\nYou may not have heard of a \nBillBoard\n before. No, I'm not talking about an\nadvertisement on the side of a highway. Rather, \nBillboard\n is a special \nSprite\n\nthat always faces the \nCamera\n. As you rotate the \nCamera\n, \nBillboard\n objects\nalso rotate. Using a\nBillBoard\n is a very common rendering technique. Take for\nexample a downhill skiing game. Any trees, rocks or other objects that are in\nthe way of the skier are \nBillboard\n objects.\n\n\nThis is how \nCamera\n and \nBillboard\n objects relate to each other.\n\n\n\n\nBillboard\n objects are easy to create. \nBillBoard\n is derived from \nSprite\n, so\nit supports most of the features as a \nSprite\n object. We can create one using the\nfollowing create method:\n\n\nauto billboard = BillBoard::create(\nBlue_Front1.png\n, BillBoard::Mode::VIEW_POINT_ORIENTED);\n\n\n\n\nYou can also create a \nBillboard\n object for the camera XOY plane (like the plane\n  of a floor) by changing the \nBillBoard\n objects mode:\n\n\nauto billboard = BillBoard::create(\nBlue_Front1.png\n, BillBoard::Mode::VIEW_PLANE_ORIENTED);\n\n\n\n\nThese \ncreate\n methods look a little different since an additional parameter of\n\nBillBoard::Mode\n is passed in. There are two \nBillBoard::Mode\n types,\n\nVIEW_POINT_ORIENTED\n and \nVIEW_PLANE_ORIENTED\n.\n\n\nVIEW_POINT_ORIENTED\n is where the \nBillBoard\n object is oriented to the\n\nCamera\n. Example:\n\n\n\n\nVIEW_PLANE_ORIENTED\n is where the \nBillBoard\n is oriented towards the XOY plane\n of the \nCamera\n. Example:\n\n\n\n\nYou can also set properties for a \nBillBoard\n just like with any other \nNode\n.\nThese include, but are not limited to: \nscale\n, \nposition\n, \nrotation\n.\nExamples:\n\n\nbillboard-\nsetScale(0.5f);\nbillboard-\nsetPosition3D(Vec3(0.0f, 0.0f, 0.0f));\nbillboard-\nsetBlendFunc(BlendFunc::ALPHA_NON_PREMULTIPLIED);\naddChild(billboard);\n\n\n\n\nParticleSystem3D\n\n\nIn Chapter 7, you learned about 2D particles and how to use them. When you use 3D\nyou might also want to use a 3D particle system for rich, advanced effects. Many\nof the same concepts apply for a 3D particle system as they did with a 2D particle\nsystem. Cocos2d-x currently supports \nParticle Universe\n (http://www.fxpression.com/)\nfor particle system construction. \nParticle Universe\n provides a special particle\neditor that allows you to quickly and easily set up a variety of effects, such as\nexplosions, fire, blood and other special effects. This editor uses a \npu\n file\nextension when saving or exporting.\n\n\nWhen you are happy with your particle and ready to use it in code, exporting to\nits built-in format of \npu\n is enough! Cocos2d-x supports this format directly.\nAlso, as \nParticleSystem3D\n is derived from \nNode\n, it supports most of the\nfeatures that \nNode\n supports. \nPUParticleSystem3D\n is an object type specifically\nfor dealing with \nParticle Universe\n particles. \nPUParticleSystem3D\n offers two\nways for creating particles.\n\n\nThe first way is to build a particle by passing in a \nParticle Universe\n file\nand its corresponding \nmaterial file\n. Remember from Chapter 7 that a\n\nmaterial file\n is what describes the particle. This is required. Example:\n\n\nauto ps = PUParticleSystem3D::create(\nlineStreak.pu\n, \npu_mediapack_01.material\n);\nps-\nstartParticleSystem();\nthis-\naddChild(ps);\n\n\n\n\nThe second way is to build the particle system only by passing a \nparticle universe\n\nfile. When you create a particle this way, besides loading the particle, all\n\nmaterial files\n in the same folder as the particle file will automatically be\nloaded. Here is an example:\n\n\nauto ps = PUParticleSystem3D::create(\nelectricBeamSystem.pu\n);\nps-\nstartParticleSystem();\n\nthis-\naddChild(ps);\n\n\n\n\nNote:\n using this method will result in an increase in loading times and\nconsumes more memory since everything will be loaded. If you know what \nmaterial\n\nyou want to use and don't need to load everything, using the first method would\nbe preferred.\n\n\nIn these images below, on the left is the particle in \nparticle universe\n, while\non the right is the effect running in Cocos2d-x:\n\n\n \n\n\nOnce you have your particle, you can interact with it it fairly obvious ways. You\ncan interact with with the \nparticle system\n as a whole, starting, stopping,\npausing, resuming and obtaining the total number of particles:\n\n\nvirtual void startParticleSystem() override;\nvirtual void stopParticleSystem() override;\nvirtual void pauseParticleSystem() override;\nvirtual void resumeParticleSystem() override;\nvirtual int getAliveParticleCount() const override;\n\n\n\n\nAs \nPUParticleSystem3D\n is derived from \nNode\n you can run \nAction\n and \nSequence\n\nobjects on your particles! Example:\n\n\nauto ps = PUParticleSystem3D::create(\nblackHole.pu\n, \npu_mediapack_01.material\n);\nps-\nsetPosition(-25.0f, 0.0f);\n\nauto moveby = MoveBy::create(2.0f, Vec2(50.0f, 0.0f));\nauto moveby1 = MoveBy::create(2.0f, Vec2(-50.0f, 0.0f));\n\nps-\nrunAction(RepeatForever::create(Sequence::create(moveby, moveby1, nullptr)));\nps-\nstartParticleSystem();\n\n\n\n\nCombining \nAction\n and \nSequence\n objects could produce an interesting black hole\neffect:\n\n\n\n\nJust like with other 3D objects you can also combine 3D objects using \nAttachNode\n.\nThis allows for creating rich models. Example:\n\n\nauto sprite3d = Sprite3D::create(\norc.c3b\n);\nsprite3d-\nsetPosition3D(Vec3(0.0f, 0.0f, 0.0f));\nsprite3d-\nsetRotation3D(Vec3(0.0f, 180.0f, 0.0f));\n\nauto animation = Animation3D::create(\norc.c3b\n);\nif (animation)\n{\n    auto animate = Animate3D::create(animation);\n    sprite3d-\nrunAction(RepeatForever::create(animate));\n}\n\nauto handler = PUParticleSystem3D::create(\nlightningBolt.pu\n);\nhandler-\nstartParticleSystem();\nsprite3d-\ngetAttachNode(\nBip001 L Hand\n)-\naddChild(handler);\n\nthis-\naddChild(sprite3d);", 
            "title": "3D"
        }, 
        {
            "location": "/programmers-guide/3d/index.html#3d", 
            "text": "You probably started with Cocos2d-x and know it as a 2D game engine. Starting\nwith version 3, 3D features are being added and refined. 3D gaming is a huge\nmarket and Cocos2d-x is adding all the features you need for 3D development. 3D\ndevelopment might be new to you and use some terminology that you are unfamiliar\nwith. There are also additional software tools that you need to become familiar\nwith. Let's jump right in and get our feet wet.", 
            "title": "3D"
        }, 
        {
            "location": "/programmers-guide/3d/index.html#terminology", 
            "text": "When using 3D, there are some commonly used terms that you should be familiar with:    Mesh  - vertices that construct a shape and texture with which you are\nrendering.    Model  - an object that can be rendered. It is a collection of meshes. In our\nengine  Sprite3D .    Texture  - All surfaces and vertices of a 3D model can be mapped to a texture.\nIn most cases you will have multiple textures per model, unwrapped in a texture\natlas.    Camera  - Since a 3D world is not flat, you need to set a camera to look at\nit. You get different scenes with different camera parameters.    Light  - Lightening is applied to make scenes look realistic. To make an object\nlook real, the color should change according to the light. When you face the light\nit is bright and the opposite is dark.  Lightening  an object means computing the\nobject's color according to the light.", 
            "title": "Terminology"
        }, 
        {
            "location": "/programmers-guide/3d/index.html#sprite3d", 
            "text": "Just like 2D games, 3D games also have  Sprite  objects.  Sprite  objects are a\ncore foundation of any game. One of the main differences between  Sprite  and Sprite3D  is  Sprite3D  objects have 3 axes it can be positioned on: x ,   y  and  z .  Sprite3D  works in many ways just like a normal  Sprite .\nIt is easy to load and display a  Sprite3D  object:  auto sprite = Sprite3D::create( boss.c3b ); //c3b file, created with the FBX-converter\nsprite- setScale(5.f); //sets the object scale in float\nsprite- setPosition(Vec2(200,200)); //sets sprite position\nscene- addChild(sprite,1); //adds sprite to scene, z-index: 1  This creates and positions a  Sprite3D  object from  .c3b  file. Example:   Now let's rotate the model in a loop. For this we will create an action and run\nit:  //rotate around the X axis\nauto rotation = RotateBy::create(15, Vec3(0, 360, 0));\n//our sprite object runs the action\nsprite- runAction(RepeatForever::create(rotation));  To set an anchor point on the  Sprite  or  Sprite3D  use:  sprite- setAnchorPoint(Point(0.0f,0.0f));", 
            "title": "Sprite3D"
        }, 
        {
            "location": "/programmers-guide/3d/index.html#attaching-3d-models-to-sprite3d-objects", 
            "text": "Recall above that a 3D model is a collection of  meshes . You can attach 3D models\nto other 3D models to create rich effects. An example would\nbe adding a weapon to a character. To do this you need to find the attachment\npoint where the weapon is to be added. For this use the  getAttachNode(attachment_point_name) \nfunction. And then we just add the new model to the attachment point as a child\nwith  addChild() . You can think of this as combining multiple simpler 3D models\nto create more complex models. For example adding a model to a  Sprite3D  object:  auto sp = Sprite3D::create( axe.c3b );\nsprite- getAttachNode( Bip001 R Hand )- addChild(sp);", 
            "title": "Attaching 3D models to Sprite3D objects."
        }, 
        {
            "location": "/programmers-guide/3d/index.html#swap-3d-model", 
            "text": "When doing 3D development you might want to make dynamic changes to your model.\nPerhaps due to power-ups, costume changes or visual cues to notify the user about\nstatus changes of your model. If your 3D model is comprised from  meshes  you can\naccess the  mesh data  using  getMeshByIndex()  and  getMeshByName() . Using\nthese functions it is possible to achieve effects like swapping a weapon or clothing\nfor a character. Let's take a look at an example of a girl wearing a coat:   We can change the coat that the girl is wearing by changing the visibility of\nthe  mesh  objects we are using. The following example demonstrates how to do\nthis:  auto sprite = Sprite3D::create( ReskinGirl.c3b );\n\n// display the first coat\nauto girlTop0 = sprite- getMeshByName( Girl_UpperBody01 );\ngirlTop0- setVisible(true);\n\nauto girlTop1 = sprite- getMeshByName( Girl_UpperBody02 );\ngirlTop1- setVisible(false);\n\n// swap to the second coat\ngirlTop0- setVisible(false);\ngirlTop1- setVisible(true);  The results:", 
            "title": "Swap 3D Model"
        }, 
        {
            "location": "/programmers-guide/3d/index.html#animation", 
            "text": "Sprite3D  objects are essential to our game! We have learned how to manipulate them.\nHowever, we might want a more rich experience. Enter animation! To run a 3d\nanimation, you can use the  Animation3D  and  Animate3D  objects. You then create\nan  Animate3D  action using the  Animation3D  object. Example:  // the animation is contained in the .c3b file\nauto animation = Animation3D::create( orc.c3b );\n\n// creates the Action with Animation object\nauto animate = Animate3D::create(animation);\n\n// runs the animation\nsprite- runAction(RepeatForever::create(animate));  Run the example  Programmer Guide Sample  code to see this in action! Please\nkeep in mind that 3D animations are exactly the same concepts as 2D. Please refer\nto Chapter 4 in this guide.", 
            "title": "Animation"
        }, 
        {
            "location": "/programmers-guide/3d/index.html#multiple-animations", 
            "text": "What do you do when you want to run multiple  animations  at the same time?\nUsing both the  animation start time  and  animation length  parameters you\ncan create multiple animations. The unit for both parameters is seconds. Example:  auto animation = Animation3D::create(fileName);\n\nauto runAnimate = Animate3D::create(animation, 0, 2);\nsprite- runAction(runAnimate);\n\nauto attackAnimate = Animate3D::create(animation, 3, 5);\nsprite- runAction(attackAnimate);  In the above example there are two animations that get run. The first starts\nimmediately and lasts for  2 seconds . The second starts after  3 seconds  and lasts\nfor  5 seconds .", 
            "title": "Multiple animations"
        }, 
        {
            "location": "/programmers-guide/3d/index.html#animation-speed", 
            "text": "The  speed  of the animation is a positive integer for forward while\na negative speed would be reverse. In this case the speed is set to  10 .\nThis means that this animation can be considered to be  10  seconds in length.", 
            "title": "Animation speed"
        }, 
        {
            "location": "/programmers-guide/3d/index.html#animation-blending", 
            "text": "When using multiple animations,  blending  is automatically applied between each\nanimation. The purpose of  blending  is to create a smooth transition between\neffects. Given two animations, A and B, the last few frames of animation A and\nthe first few frames of animation B overlap to make the change in animation look\nnatural.  The default transition time is 0.1 seconds. You can set the transition time by\nusing  Animate3D::setTransitionTime .  Cocos2d-x only supports  linear interpolation  between keyframes. This fills in gaps  in the curve to ensure a smooth path. If you use other interpolation\nmethods in the model production, our built-in tool,  fbx-conv  will\ngenerate additional keyframes to compensate. This compensation is completed in\naccordance with the target frame. For more information on  fbx-conv  please refer\nto the section discussing it at the end of this chapter.", 
            "title": "Animation blending"
        }, 
        {
            "location": "/programmers-guide/3d/index.html#camera", 
            "text": "Camera  objects are an important aspect of 3D development. Since a 3D world is\nnot flat you need to use a  Camera  to look at it and navigate around it. Just\nlike when you are watching a movie and the scene pans to the left or right. This\nsame concept is applied when using a  Camera  object. The  Camera  object inherits\nfrom  Node  and therefore supports most of the same  Action  objects. There are two types\nof  Camera  objects:  perspective camera  and  orthographic camera .  The  perspective camera  is used to see objects having a near to far effect. A perspective camera  view might look like this:   As you can see with a  perspective camera , objects in the  near  are larger and\nobjects in the  far  are smaller.  The  orthogonal camera  is used to see objects as large distance. You can think\nabout it as converting a 3D world to a 2D representation. An  orthogonal camera \nview might look like this:   As you can see with an  orthogonal camera , objects are the same size regardless\nof how far away from the  Camera  object they are.  Mini Maps  in games are\ncommonly rendered with an  orthogonal camera . Another example would be a top -\ndown view, perhaps in a dungeon style game.", 
            "title": "Camera"
        }, 
        {
            "location": "/programmers-guide/3d/index.html#camera-use", 
            "text": "Don't worry!  Camera  objects may sound complicated but Cocos2d-x makes them easy.\nWhen using 3D you don't have to do anything special to create a  Camera  object.\nEach  Scene  automatically creates a default camera, based on the projection\nproperties of the  Director  object. If you need more than one camera, you can\nuse the following code to create one:  auto s = Director::getInstance()- getWinSize();\nauto camera = Camera::createPerspective(60, (GLfloat)s.width/s.height, 1, 1000);\n\n// set parameters for camera\ncamera- setPosition3D(Vec3(0, 100, 100));\ncamera- lookAt(Vec3(0, 0, 0), Vec3(0, 1, 0));\n\naddChild(camera); //add camera to the scene", 
            "title": "Camera Use"
        }, 
        {
            "location": "/programmers-guide/3d/index.html#creating-orthogonal-camera", 
            "text": "The default  Camera  is a  perspective camera . If you want to create an orthogonal camera , it's easy to do by calling:  Camera::createOrthographic();  Example:  auto s = Director::getInstance()- getWinSize();\nauto camera = Camera::createOrthographic(s.width, s.height, 1, 1000);", 
            "title": "Creating orthogonal camera"
        }, 
        {
            "location": "/programmers-guide/3d/index.html#hiding-objects-from-the-camera", 
            "text": "Sometimes you don't want to have all objects visible in a  Camera  view. Hiding\nan object from one camera is very easy. Use  setCameraMask(CameraFlag)  on the Node  and  setCameraFlag(CameraFlag)  on the  Camera . Example:  //Camera\ncamera- setCameraFlag(CameraFlag::USER1);\n\n//Node\nnode- setCameraMask(CameraFlag::USER1);", 
            "title": "Hiding objects from the camera"
        }, 
        {
            "location": "/programmers-guide/3d/index.html#cubemap-texture", 
            "text": "A  cube map texture  is a collection of six separate square textures that are\nput onto the faces of an imaginary cube. Most often they are used to display\ninfinitely far away reflections on objects, similar to how  sky box  displays\nfar away scenery in the background. This is what an expanded cube map might look\nlike:   In Cocos2d-x,you can create a  cube map texture  in this way:  // create a textureCube object with six texture assets\nauto _textureCube = TextureCube::create( skybox/left.jpg ,   skybox/right.jpg , skybox/top.jpg ,  skybox/bottom.jpg ,  skybox/front.jpg , skybox/back.jpg );\n\n// set cube map texture parameters\nTexture2D::TexParams tRepeatParams;\ntRepeatParams.magFilter = GL_NEAREST;\ntRepeatParams.minFilter = GL_NEAREST;\ntRepeatParams.wrapS = GL_MIRRORED_REPEAT;\ntRepeatParams.wrapT = GL_MIRRORED_REPEAT;\n_textureCube- setTexParameters(tRepeatParams);\n\n// create and set our custom shader\nauto shader = GLProgram::createWithFilenames( cube_map.vert , cube_map.frag );\nauto _state = GLProgramState::create(shader);\n\n// bind cube map texture to uniform\n_state- setUniformTexture( u_cubeTex , _textureCube);", 
            "title": "Cubemap Texture"
        }, 
        {
            "location": "/programmers-guide/3d/index.html#skybox", 
            "text": "Skybox  is a wrapper around your entire scene that shows what the world looks\nlike beyond your geometry. You might use a  Skybox  to simulate infinite sky,\nmountains and other phenomena.   Creating a  Skybox :  // create a Skybox object\nauto box = Skybox::create();\n\n// set textureCube for Skybox\nbox- setTexture(_textureCube);\n\n// attached to scene\n_scene- addChild(box);", 
            "title": "Skybox"
        }, 
        {
            "location": "/programmers-guide/3d/index.html#light", 
            "text": "Light is really important for building mood and ambiance for a game. There are\ncurrently 4 lighting techniques supported. You would use different lighting\ntechniques depending upon your needs. Each lighting effect achieves a different\nresult.", 
            "title": "Light"
        }, 
        {
            "location": "/programmers-guide/3d/index.html#ambient-light", 
            "text": "An  AmbientLight  object will apply light evenly for everything in the scene.\nThink of lighting in an office environment. The lights are overhead and when you\nlook at objects around the office you see them in the same light. Example:  auto light = AmbientLight::create (Color3B::RED);\naddChild(light);  This produces:", 
            "title": "Ambient Light"
        }, 
        {
            "location": "/programmers-guide/3d/index.html#directional-light", 
            "text": "DirectionalLight  is often used to simulate a light source such as\nsunlight. When using  DirectionalLight  keep in mind that is has the same density\nno matter where you are in relationship to it. Also think about being outside on\na sunny day with the sun beaming down on you. When you look directly at the sun,\nit is an intense light even if you move a few steps in any direction. Example:  auto light = DirectionLight::create(Vec3(-1.0f, -1.0f, 0.0f), Color3B::RED);\naddChild(light);  This produces:", 
            "title": "Directional Light"
        }, 
        {
            "location": "/programmers-guide/3d/index.html#point-light", 
            "text": "PointLight  is often used to simulate the effect of light bulbs, lamps\nor torches. The direction of a  PointLight  is from the lighted position to the PointLight . Keep in mind that the density is different depending upon the\ndistance from the  PointLight . What does this mean? If you are close to the\nstart of the  PointLight  it will be really strong. If you are towards the end\nof the  PointLight  it will be dim.  PointLight  also becomes weaker the larger\nthe distance it is projected. Example:  auto light = PointLight::create(Vec3(0.0f, 0.0f, 0.0f), Color3B::RED, 10000.0f);\naddChild(light);  This produces:", 
            "title": "Point Light"
        }, 
        {
            "location": "/programmers-guide/3d/index.html#spot-light", 
            "text": "A  SpotLight  object is often used to simulate a flashlight. This means that it\nis emitted in just one direction in the shape of a cone. Think about the power\ngoing out in your house. You may need to take a flashlight down into your basement\nto reset your circuits. The flashlight produces a cone shaped lighting pattern\nand you can only see objects inside that cone pattern. Another example is in dark,\ndungeon based games where your path is light by torches. You can only see the\nlimited cone shape that those torches emit. Example:  auto spotLight = SpotLight::create(Vec3(-1.0f, -1.0f, 0.0f), Vec3(0.0f, 0.0f, 0.0f),\nColor3B::RED, 0.0, 0.5, 10000.0f) ;\naddChild(spotLight);  This produces:", 
            "title": "Spot Light"
        }, 
        {
            "location": "/programmers-guide/3d/index.html#light-masking", 
            "text": "What do you use for lights in your kitchen or living room? Probably a few lamps?\nDo you ever notice that perhaps you only use a lamp to light up a certain portion\nof the room? You are essentially applying a  lighting mask !  A  lighting mask  is used on a  Node  to only apply a particular  lighting source \nto it. For example, if you had multiple lights in a  Scene , a  Node  can only be\nlighted by one of the lights instead of all three. You can use  setLightFlag(LightFlag) \nto control which  Node  objects are effected by the light. It is important to note\nthat all lighting sources are rendered in a single pass. Due to mobile platform\nperformance issues the use of multiple light sources is not recommended. The\ndefault maximum is 1. If you want to open multiple light sources you must define\nthe following keys in  info.plist :  key  cocos2d.x.3d.max_dir_light_in_shader  /key  integer  1  /integer  key  cocos2d.x.3d.max_point_light_in_shader  /key  integer  1  /integer  key  cocos2d.x.3d.max_spot_light_in_shader  /key  integer  1  /integer", 
            "title": "Light Masking"
        }, 
        {
            "location": "/programmers-guide/3d/index.html#terrain", 
            "text": "Terrain  is an important component in 3D game. A texture is used to stand for the\nheight map. And up to 4 textures can be used to blend the details of the terrain,\ngrass, road, and so on.", 
            "title": "Terrain"
        }, 
        {
            "location": "/programmers-guide/3d/index.html#heightmap", 
            "text": "HeightMap  objects are the core of the terrain. Different from the common image\nthe height map represents the height of vertices. It determines the terrain's\ngeometry shape.", 
            "title": "HeightMap"
        }, 
        {
            "location": "/programmers-guide/3d/index.html#detailmap", 
            "text": "DetailMap  objects are a list of textures determining the details of the terrain,\nup to four textures can be used.", 
            "title": "DetailMap"
        }, 
        {
            "location": "/programmers-guide/3d/index.html#alphamap", 
            "text": "AlphaMap  objects are an image whose data is the blend weights of  detail maps .\nThe blending result is the final terrain's appearance.", 
            "title": "AlphaMap"
        }, 
        {
            "location": "/programmers-guide/3d/index.html#lod-policy", 
            "text": "Terrain  uses an optimization technique called  Level Of Detail  or  LOD .\nThis is a rendering technique that reduces the number of  verticies  (or triangles)\nthat are rendered ,for an object,  as its distance from camera increases. Users\ncan set the distance to the  Camera  by calling the Terrain::setLODDistance(float lod1, float lod2, float lod3)  method.  Neighboring chunks of  Terrain  objects, which have different  LOD  may cause\n the  crack  artifacts.  Terrain  provide two functions to avoid them:  Terrain::CrackFixedType::SKIRT\n\nTerrain::CrackFixedType::INCREASE_LOWER  Terrain::CrackFixedType::SKIRT  will generate four, skirt-like meshes at each\nedge of the chunk.  Terrain::CrackFixedType::INCREASE_LOWER  will dynamically adjust each chunks indices  to seamlessly connect them.", 
            "title": "LOD policy"
        }, 
        {
            "location": "/programmers-guide/3d/index.html#how-to-create-a-terrain", 
            "text": "Creating a  Terrain  takes a few steps. Example:  The following code snippet is creating a player and place it on the terrain:  auto player = Sprite3D::create( chapter9/orc.c3b );\nplayer- setScale(0.08);\nplayer- setPositionY(terrain- getHeight(player- getPositionX(),player- getPositionZ()));    create all  DetailMap  objects (up to four), you need pass the  DetailMap \nobjects to the  Terrain::DetailMap  struct:     Terrain::DetailMap r( dirt.dds );\n  Terrain::DetailMap g( grass.dds );\n  Terrain::DetailMap b( road.dds );\n  Terrain::DetailMap a( greenSkin.jpg );   to create a  TerrainData  variable with  detail maps , you need to specify\nthe terrain's  height map  file path and  alpha map  file path:   Terrain::TerrainData data( chapter9/heightmap16.jpg , TerrainTest/alphamap.png , r, g, b, a);   pass the  TerrainData  object to  Terrain::create , the last parameter determines\nthe LOD policy (as talked about above). Example:   _terrain = Terrain::create(data, Terrain::CrackFixedType::SKIRT);   If you set a  Terrain  objects  camera mask  and add it to a  Node  or a Scene , be careful. When  Terrain  is added into a  Node  or a  Scene , you can\nnot use  transform(translate, scale)  on it anymore. If you do this after calling addChild() , some of the terrain's methods may calculate wrong results.", 
            "title": "How to create a terrain"
        }, 
        {
            "location": "/programmers-guide/3d/index.html#get-terrain-height", 
            "text": "Use the method  Terrain::getHeight(float x, float z, Vec3 * normal= nullptr)  to\nget the specified position's height. This method is very useful when you want to\nput a  Sprite3D  object or any  Node  on the terrain's surface.", 
            "title": "Get Terrain Height"
        }, 
        {
            "location": "/programmers-guide/3d/index.html#ray-terrain-intersection-test", 
            "text": "A  Ray-Terrain  intersection test will calculate the intersection point by giving\na specified position.  Terrain::CrackFixedType::SKIRT  will generate four skirt-like meshes at each\nchunks edge.  Terrain::CrackFixedType::INCREASE_LOWER  will dynamically adjust each chunks\nindex to seamlessly connect them.", 
            "title": "Ray-Terrain intersection test"
        }, 
        {
            "location": "/programmers-guide/3d/index.html#3d-software-packages", 
            "text": "", 
            "title": "3D Software Packages"
        }, 
        {
            "location": "/programmers-guide/3d/index.html#3d-editors", 
            "text": "3D editors are collections of tools that you use to build your 3D graphics. There\nare both commercial and free tools available. These are the most popular editors:   Blender (Free)  3DS Max  Cinema4D  Maya   Most 3D editors usually save files in a common collection of formats for easy\nuse within other editors as well as a standard way for game engines to import\nyour files for use.", 
            "title": "3D Editors"
        }, 
        {
            "location": "/programmers-guide/3d/index.html#cocos2d-x-provided-tools", 
            "text": "Cocos2d-x provides tools to help with converting your 3D models to formats that\nCocos2d-x uses to provide access to all aspects of your 3D files.", 
            "title": "Cocos2d-x Provided Tools"
        }, 
        {
            "location": "/programmers-guide/3d/index.html#fbx-conv-command-line-tool", 
            "text": "fbx-conv  allows the conversion of an FBX file into the Cocos2d-x proprietary\nformats. FBX is the most popular 3D file format and is being supported by all\nthe major editors.  fbx-conv  exports to  .c3b  by default. It is simple to use\nwith just a few parameters:  fbx-conv [-a|-b|-t] FBXFile  The possible switches are:   -?: show help  -a: export both text and binary format  -b: export binary format  -t: export text format   Example:  fbx-conv -a boss.FBX  There are a few things to note about  fbx-conv :  The model needs to have a material that contains at least one texture  it only supports skeletal animation.  it only supports one skeleton object no multiple skeleton support yet.  You can create a 3d scene by exporting multiple static model\n* The maximum amount of vertices or indices a mesh is 32767", 
            "title": "fbx-conv command-line tool"
        }, 
        {
            "location": "/programmers-guide/3d/index.html#3d-file-formats", 
            "text": "Cocos2d-x currently supports two 3d file formats:   Wavefront Object  files: .obj  files  Cocos2d-x 3d ad-hoc format: c3t ,  c3b  files.   The  Wavefront  file format is supported because it has been widely adopted by\n3D editors and it is extremely easy to parse. It is, however, limited and\ndoesn't support advanced features like animations.  On the other hand,  c3t  and  c3b  are Cocos2d-x proprietary file formats that\nwere created to allow animations, materials and other advanced 3d features.\nThe suffix  t  means  text , while the suffix  b  means  binary . Developers\nmust use  c3b  for production because it is more efficient. In case you want to\ndebug the file and track its changes in Git or any other version control system,\nyou should  c3t  instead. Also,  Animation3D  objects can be created with  c3b \nor  c3t  files as it is not possible to animate  obj  files.", 
            "title": "3D File Formats"
        }, 
        {
            "location": "/programmers-guide/3d/index.html#advanced-topics", 
            "text": "", 
            "title": "Advanced Topics"
        }, 
        {
            "location": "/programmers-guide/3d/index.html#billboard", 
            "text": "You may not have heard of a  BillBoard  before. No, I'm not talking about an\nadvertisement on the side of a highway. Rather,  Billboard  is a special  Sprite \nthat always faces the  Camera . As you rotate the  Camera ,  Billboard  objects\nalso rotate. Using a BillBoard  is a very common rendering technique. Take for\nexample a downhill skiing game. Any trees, rocks or other objects that are in\nthe way of the skier are  Billboard  objects.  This is how  Camera  and  Billboard  objects relate to each other.   Billboard  objects are easy to create.  BillBoard  is derived from  Sprite , so\nit supports most of the features as a  Sprite  object. We can create one using the\nfollowing create method:  auto billboard = BillBoard::create( Blue_Front1.png , BillBoard::Mode::VIEW_POINT_ORIENTED);  You can also create a  Billboard  object for the camera XOY plane (like the plane\n  of a floor) by changing the  BillBoard  objects mode:  auto billboard = BillBoard::create( Blue_Front1.png , BillBoard::Mode::VIEW_PLANE_ORIENTED);  These  create  methods look a little different since an additional parameter of BillBoard::Mode  is passed in. There are two  BillBoard::Mode  types, VIEW_POINT_ORIENTED  and  VIEW_PLANE_ORIENTED .  VIEW_POINT_ORIENTED  is where the  BillBoard  object is oriented to the Camera . Example:   VIEW_PLANE_ORIENTED  is where the  BillBoard  is oriented towards the XOY plane\n of the  Camera . Example:   You can also set properties for a  BillBoard  just like with any other  Node .\nThese include, but are not limited to:  scale ,  position ,  rotation .\nExamples:  billboard- setScale(0.5f);\nbillboard- setPosition3D(Vec3(0.0f, 0.0f, 0.0f));\nbillboard- setBlendFunc(BlendFunc::ALPHA_NON_PREMULTIPLIED);\naddChild(billboard);", 
            "title": "BillBoard"
        }, 
        {
            "location": "/programmers-guide/3d/index.html#particlesystem3d", 
            "text": "In Chapter 7, you learned about 2D particles and how to use them. When you use 3D\nyou might also want to use a 3D particle system for rich, advanced effects. Many\nof the same concepts apply for a 3D particle system as they did with a 2D particle\nsystem. Cocos2d-x currently supports  Particle Universe  (http://www.fxpression.com/)\nfor particle system construction.  Particle Universe  provides a special particle\neditor that allows you to quickly and easily set up a variety of effects, such as\nexplosions, fire, blood and other special effects. This editor uses a  pu  file\nextension when saving or exporting.  When you are happy with your particle and ready to use it in code, exporting to\nits built-in format of  pu  is enough! Cocos2d-x supports this format directly.\nAlso, as  ParticleSystem3D  is derived from  Node , it supports most of the\nfeatures that  Node  supports.  PUParticleSystem3D  is an object type specifically\nfor dealing with  Particle Universe  particles.  PUParticleSystem3D  offers two\nways for creating particles.  The first way is to build a particle by passing in a  Particle Universe  file\nand its corresponding  material file . Remember from Chapter 7 that a material file  is what describes the particle. This is required. Example:  auto ps = PUParticleSystem3D::create( lineStreak.pu ,  pu_mediapack_01.material );\nps- startParticleSystem();\nthis- addChild(ps);  The second way is to build the particle system only by passing a  particle universe \nfile. When you create a particle this way, besides loading the particle, all material files  in the same folder as the particle file will automatically be\nloaded. Here is an example:  auto ps = PUParticleSystem3D::create( electricBeamSystem.pu );\nps- startParticleSystem();\n\nthis- addChild(ps);  Note:  using this method will result in an increase in loading times and\nconsumes more memory since everything will be loaded. If you know what  material \nyou want to use and don't need to load everything, using the first method would\nbe preferred.  In these images below, on the left is the particle in  particle universe , while\non the right is the effect running in Cocos2d-x:     Once you have your particle, you can interact with it it fairly obvious ways. You\ncan interact with with the  particle system  as a whole, starting, stopping,\npausing, resuming and obtaining the total number of particles:  virtual void startParticleSystem() override;\nvirtual void stopParticleSystem() override;\nvirtual void pauseParticleSystem() override;\nvirtual void resumeParticleSystem() override;\nvirtual int getAliveParticleCount() const override;  As  PUParticleSystem3D  is derived from  Node  you can run  Action  and  Sequence \nobjects on your particles! Example:  auto ps = PUParticleSystem3D::create( blackHole.pu ,  pu_mediapack_01.material );\nps- setPosition(-25.0f, 0.0f);\n\nauto moveby = MoveBy::create(2.0f, Vec2(50.0f, 0.0f));\nauto moveby1 = MoveBy::create(2.0f, Vec2(-50.0f, 0.0f));\n\nps- runAction(RepeatForever::create(Sequence::create(moveby, moveby1, nullptr)));\nps- startParticleSystem();  Combining  Action  and  Sequence  objects could produce an interesting black hole\neffect:   Just like with other 3D objects you can also combine 3D objects using  AttachNode .\nThis allows for creating rich models. Example:  auto sprite3d = Sprite3D::create( orc.c3b );\nsprite3d- setPosition3D(Vec3(0.0f, 0.0f, 0.0f));\nsprite3d- setRotation3D(Vec3(0.0f, 180.0f, 0.0f));\n\nauto animation = Animation3D::create( orc.c3b );\nif (animation)\n{\n    auto animate = Animate3D::create(animation);\n    sprite3d- runAction(RepeatForever::create(animate));\n}\n\nauto handler = PUParticleSystem3D::create( lightningBolt.pu );\nhandler- startParticleSystem();\nsprite3d- getAttachNode( Bip001 L Hand )- addChild(handler);\n\nthis- addChild(sprite3d);", 
            "title": "ParticleSystem3D"
        }, 
        {
            "location": "/programmers-guide/scripting/index.html", 
            "text": "Scripting\n\n\nScript component\n\n\nScript component\n is used to extend c++ \nNode\n objects. You can add a\n\nscript component\n to a \nNode\n, then the \nscript component\n will receive\n\nonEnter\n, \nonExit\n and \nupdate\n events.\n\n\nScript component\n supports both JavaScript and LUA. You should use the proper\n\nscript component\n type for the language you are developing with. If you are\ndeveloping with JavaScript, you would use \nComponentJS\n, if you are developing\nwith Lua, you would use \nComponentLUA\n. But, you cannot mix them or use them in\na c++ project! This is because the proper bindings for that language are required\nand these bindings are only available in their respective project types.\n\n\nExample with Lua:\n\n\n// create a Sprite and add a LUA component\nauto player = Sprite::create(\nplayer.png\n);\n\nauto luaComponent = ComponentLua::create(\nplayer.lua\n);\nplayer-\naddComponent(luaComponent);\n\n\n\n\n-- player.lua\n\nlocal player = {\n    onEnter = function(self)\n        -- do some things in onEnter\n    end,\n\n    onExit = function(self)\n        -- do some things in onExit\n    end,\n\n    update = function(self)\n        -- do some things every frame\n    end\n}\n\n-- it is needed to return player to let c++ nodes know it\nreturn player\n\n\n\n\nExample with JavaScript:\n\n\n// create a Sprite and add a LUA component\nauto player = Sprite::create(\nplayer.png\n);\n\nauto jsComponent = ComponentJS::create(\nplayer.js\n);\nplayer-\naddComponent(jsComponent);\n\n\n\n\n// player.js\nPlayer = cc.ComponentJS.extend({\n    generateProjectile: function (x, y) {\n        var projectile = new cc.Sprite(\ncomponents/Projectile.png\n, cc.rect(0, 0, 20, 20));\n        var scriptComponent = new cc.ComponentJS(\nsrc/ComponentTest/projectile.js\n);\n        projectile.addComponent(scriptComponent);\n        this.getOwner().getParent().addChild(projectile);\n\n        // set position\n        var winSize = cc.director.getVisibleSize();\n        var visibleOrigin = cc.director.getVisibleOrigin();\n        projectile.setPosition(cc.p(visibleOrigin.x + 20, visibleOrigin.y + winSize.height/2));\n\n        // run action\n        var posX = projectile.getPositionX();\n        var posY = projectile.getPositionY();\n        var offX = x - posX;\n        var offY = y - posY;\n\n        if (offX \n= 0) {\n            return;\n        }\n\n        var contentSize = projectile.getContentSize();\n        var realX = visibleOrigin.x + winSize.width + contentSize.width/2;\n        var ratio = offY / offX;\n        var realY = (realX * ratio) + posY;\n        var realDest = cc.p(realX, realY);\n\n        var offRealX = realX - posX;\n        var offRealY = realY - posY;\n        var length = Math.sqrt((offRealX * offRealX) + (offRealY * offRealY));\n        var velocity = 960;\n        var realMoveDuration = length / velocity;\n\n        projectile.runAction(cc.moveTo(realMoveDuration, realDest));\n    },\n\n    onEnter: function() {\n        var owner = this.getOwner();\n        owner.playerComponent = this;\n        cc.eventManager.addListener({\n            event: cc.EventListener.TOUCH_ALL_AT_ONCE,\n            onTouchesEnded: function (touches, event) {\n                var target = event.getCurrentTarget();\n                if (target.playerComponent) {\n                    var location = touches[0].getLocation();\n                    target.playerComponent.generateProjectile(location.x, location.y);\n                    jsb.AudioEngine.play2d(\npew-pew-lei.wav\n);\n                }\n            }\n        }, owner);\n    }\n});\n\n\n\n\nOne difference to keep in mind, between JavaScript and LUA components, is you\nshould return the \nobject\n in LUA component, in JavaScript, you only have to\nextend \ncc.ComponentJS\n\n\nFor more detailed usage, please refer to tests projects: \ntests/lua-tests/src/ComponentTest\n and\n\ntests/js-tests/src/ComponentTest\n.", 
            "title": "Scripting"
        }, 
        {
            "location": "/programmers-guide/scripting/index.html#scripting", 
            "text": "", 
            "title": "Scripting"
        }, 
        {
            "location": "/programmers-guide/scripting/index.html#script-component", 
            "text": "Script component  is used to extend c++  Node  objects. You can add a script component  to a  Node , then the  script component  will receive onEnter ,  onExit  and  update  events.  Script component  supports both JavaScript and LUA. You should use the proper script component  type for the language you are developing with. If you are\ndeveloping with JavaScript, you would use  ComponentJS , if you are developing\nwith Lua, you would use  ComponentLUA . But, you cannot mix them or use them in\na c++ project! This is because the proper bindings for that language are required\nand these bindings are only available in their respective project types.  Example with Lua:  // create a Sprite and add a LUA component\nauto player = Sprite::create( player.png );\n\nauto luaComponent = ComponentLua::create( player.lua );\nplayer- addComponent(luaComponent);  -- player.lua\n\nlocal player = {\n    onEnter = function(self)\n        -- do some things in onEnter\n    end,\n\n    onExit = function(self)\n        -- do some things in onExit\n    end,\n\n    update = function(self)\n        -- do some things every frame\n    end\n}\n\n-- it is needed to return player to let c++ nodes know it\nreturn player  Example with JavaScript:  // create a Sprite and add a LUA component\nauto player = Sprite::create( player.png );\n\nauto jsComponent = ComponentJS::create( player.js );\nplayer- addComponent(jsComponent);  // player.js\nPlayer = cc.ComponentJS.extend({\n    generateProjectile: function (x, y) {\n        var projectile = new cc.Sprite( components/Projectile.png , cc.rect(0, 0, 20, 20));\n        var scriptComponent = new cc.ComponentJS( src/ComponentTest/projectile.js );\n        projectile.addComponent(scriptComponent);\n        this.getOwner().getParent().addChild(projectile);\n\n        // set position\n        var winSize = cc.director.getVisibleSize();\n        var visibleOrigin = cc.director.getVisibleOrigin();\n        projectile.setPosition(cc.p(visibleOrigin.x + 20, visibleOrigin.y + winSize.height/2));\n\n        // run action\n        var posX = projectile.getPositionX();\n        var posY = projectile.getPositionY();\n        var offX = x - posX;\n        var offY = y - posY;\n\n        if (offX  = 0) {\n            return;\n        }\n\n        var contentSize = projectile.getContentSize();\n        var realX = visibleOrigin.x + winSize.width + contentSize.width/2;\n        var ratio = offY / offX;\n        var realY = (realX * ratio) + posY;\n        var realDest = cc.p(realX, realY);\n\n        var offRealX = realX - posX;\n        var offRealY = realY - posY;\n        var length = Math.sqrt((offRealX * offRealX) + (offRealY * offRealY));\n        var velocity = 960;\n        var realMoveDuration = length / velocity;\n\n        projectile.runAction(cc.moveTo(realMoveDuration, realDest));\n    },\n\n    onEnter: function() {\n        var owner = this.getOwner();\n        owner.playerComponent = this;\n        cc.eventManager.addListener({\n            event: cc.EventListener.TOUCH_ALL_AT_ONCE,\n            onTouchesEnded: function (touches, event) {\n                var target = event.getCurrentTarget();\n                if (target.playerComponent) {\n                    var location = touches[0].getLocation();\n                    target.playerComponent.generateProjectile(location.x, location.y);\n                    jsb.AudioEngine.play2d( pew-pew-lei.wav );\n                }\n            }\n        }, owner);\n    }\n});  One difference to keep in mind, between JavaScript and LUA components, is you\nshould return the  object  in LUA component, in JavaScript, you only have to\nextend  cc.ComponentJS  For more detailed usage, please refer to tests projects:  tests/lua-tests/src/ComponentTest  and tests/js-tests/src/ComponentTest .", 
            "title": "Script component"
        }, 
        {
            "location": "/programmers-guide/physics/index.html", 
            "text": "Physics\n\n\nYour game is coming along nicely. You have \nSprite\n objects, gameplay mechanics\nand your coding efforts are paying off. You are starting to feel like your game\nis playable. What do you do when you realize your game needs to simulate real\nworld situations? You know, \ncollision detection\n, \ngravity\n, \nelasticity\n and\n\nfriction\n. Yes, you guessed it! This chapter is on \nphysics\n and the use of a\n\nphysics engine\n. Let's explore the \nwhen\n, \nwheres\n and \nwhys\n of using a\n\nphysics engine\n.\n\n\nPhysics is scary, do I really need it? Please tell me no!\n\n\nPlease don't run away there are no physics monsters under your bed! Your needs\nmight be simple enough to not need to use a \nphysics engine\n. Perhaps a combination\nof using a \nNode\n objects \nupdate()\n function, \nRect\n objects and a combination\nof the \ncontainsPoint()\n or \nintersectsRect()\n functions might be enough for\nyou? Example:\n\n\nvoid update(float dt)\n{\n  auto p = touch-\ngetLocation();\n  auto rect = this-\ngetBoundingBox();\n\n  if(rect.containsPoint(p))\n  {\n      // do something, intersection\n  }\n}\n\n\n\n\nThis mechanism works for \nvery simple\n needs, but doesn't scale. What if you had\n100 \nSprite\n objects all continuously updating to check for intersections with\nother objects? It could be done but the the CPU usage and \nframerate\n would suffer\nseverely. Your game would be unplayable. A \nphysics engine\n solves these concerns\nfor us in a scalable and CPU friendly way. Even though this might look foreign,\nlet's take a look at a simple example and then nut and bolt the example,\nterminology and best practice together.\n\n\n// create a static PhysicsBody\nauto physicsBody = PhysicsBody::createBox(Size(65.0f , 81.0f ), PhysicsMaterial(0.1f, 1.0f, 0.0f));\nphysicsBody-\nsetDynamic(false);\n\n// create a sprite\nauto sprite = Sprite::create(\nwhiteSprite.png\n);\nsprite-\nsetPosition(Vec2(400, 400));\n\n// sprite will use physicsBody\nsprite-\naddComponent(physicsBody);\n\n//add contact event listener\nauto contactListener = EventListenerPhysicsContact::create();\ncontactListener-\nonContactBegin = CC_CALLBACK_1(onContactBegin, this);\n_eventDispatcher-\naddEventListenerWithSceneGraphPriority(contactListener, this);\n\n\n\n\nEven though this example is simple, it looks complicated and scary. It really\nisn't if we look closely. Here are the steps that are happening:\n\n A \nPhysicsBody\n object is created.\n\n A \nSprite\n object is created.\n\n The \nSprite\n object applies the properties of the \nPhysicsBody\n object.\n\n A listener is created to respond to an \nonContactBegin()\n event.\n\n\nOnce we look step by step the concept starts to make sense. To better understand\nall the details of a \nphysics engine\n you should understand the following terms\nand concepts:\n\n\nPhysics terminology and concepts\n\n\nBodies\n\n\nA \nPhysicsBody\n holds the physical properties of an object. These include \nmass\n,\n\nposition\n, \nrotation\n, \nvelocity\n and \ndamping\n. \nPhysicsBody\n objects\nare the backbone for shapes. A \nPhysicsBody\n does not have a shape until you attach\na shape to it.\n\n\nMaterial\n\n\nMaterials describe material attributes\uff1a\n\n\n\n\n-density\uff1aIt is used to compute the mass properties of the parent body.\n\n\n-friction\uff1aIt is used to make objects slide along each other realistically.\n\n\n-restitution\uff1aIt is used to make objects bounce. The restitution value is\n usually set to be between 0 and 1. 0 means no bouncing while 1 means perfect\n bouncing.\n\n\n\n\nShapes\n\n\nShapes describe collision geometry. By attaching shapes to bodies, you define a\nbody\u2019s shape. You can attach as many shapes to a single body as you need in order\nto define a complex shape. Each shape relates to a \nPhysicsMaterial\n object and\ncontains the following attributes: \ntype\n, \narea\n, \nmass\n, \nmoment\n, \noffset\n and\n\ntag\n. Some of these you might not be familiar with:\n\n\n\n\n-\ntype\n\uff1adescribes the categories of shapes, such as circle, box, polygon, etc.\n\n\n-\narea\n: used to compute the mass properties of the body. The density and area\ngives the mass.\n\n\n-\nmass\n: the quantity of matter that a body contains, as measured by its\nacceleration under a given force or by the force exerted on it by a gravitational\nfield.\n\n\n-\nmoment\n: determines the torque needed for a desired angular acceleration.\n\n\n-\noffset\n: offset from the body\u2019s center of gravity in body local coordinates.\n\n\n-\ntag\n: used to identify the shape easily for developers.\u200b You probably remember\nthat you can assign all \nNode\n objects a tag for identification and easy access.\n\n\n\n\nWe describe the various \nshapes\n as:\n\n\n\n\n-\nPhysicsShape\n: Shapes implement the \nPhysicsShape\n base class.\n\n\n-\nPhysicsShapeCircle\n: Circles are solid. You cannot make a hollow circle\n using the circle shape.\n\n\n-\nPhysicsShapePolygon\n: Polygon shapes are solid convex polygons.\n\n\n-\nPhysicsShapeBox\n: Box shape is one kind of convex polygon.\n\n\n-\nPhysicsShapeEdgeSegment\n: A segment shape.\n\n\n-\nPhysicsShapeEdgePolygon\n: Hollow polygon shapes. A edge-polygon shape consists\n of multiple segment shapes.\n\n\n-\nPhysicsShapeEdgeBox\n\uff1aHollow box shapes. A edge-box shape consists of four\n segment shapes.\n\n\n-\nPhysicsShapeEdgeChain\n: The chain shape provides an efficient way to connect\n many edges together.\n\n\n\n\nContacts/Joints\n\n\nContacts\n and \njoint\n objects describe how bodies are attached to each other.\n\n\nWorld\n\n\nA \nworld\n container is what your physics bodies are added to and where they are\nsimulated. You add \nbodies\n, \nshapes\n and \nconstraints\n to a world and then\nupdate the world as a whole. The \nworld\n controls how all of these items interact\ntogether. Much of the interaction with the physics API will be with a \nPhysicsWorld\n\nobject.\n\n\nThere is a lot to remember here, keep these terms handy to refer back to them as\nneeded.\n\n\nPhysics World and Physics Body\n\n\nPhysicsWorld\n\n\nA \nPhysicsWorld\n object is the core item used when simulating physics. Just like\nthe world we live in, a \nPhysicsWorld\n has a lot of things happening at once.\n\nPhysicsWorld\n integrates deeply at the \nScene\n level because of it's many facets.\nLet's use a simple example that we can all relate to. Does your residence have a\nkitchen? Think of this as your \nphysics world\n! Now your world has \nPhysicsBody\n\nobjects, like food, knives, appliances! These bodies interact with each other\ninside the world. These objects touch and also react to those touches. Example:\nuse a knife to cut food and put it in an appliance. Does the knife cut\nthe food? Maybe. Maybe not. Perhaps it isn't the correct type of knife for the\njob.\n\n\nYou can create a \nScene\n that contains a \nPhysicsWorld\n using:\n\n\nauto scene = Scene::createWithPhysics();\n\n\n\n\nEvery \nPhysicsWorld\n has properties associated with it:\n\n\n\n\n-gravity: Global gravity applied to the world. Defaults to Vec2(0.0f, -98.0f).\n\n\n-speed: Set the speed of physics world, speed is the rate at which the simulation\n executes. Defaults to 1.0.\n\n\n-updateRate: set the update rate of physics world, update rate is the value of\n EngineUpdateTimes/PhysicsWorldUpdateTimes.\n\n\n-substeps: set the number of substeps in an update of the physics world.\n\n\n\n\nThe process of updating a \nPhysicsWorld\n is called \nstepping\n. By default, the\n\nPhysicsWorld\n \nupdates through time\n automatically. This is called \nauto stepping\n.\nIt automatically happens for you, each frame. You can disable \nauto steping\n of\nthe \nPhysicsWorld\n by setting \nsetAutoStep(false)\n. If you do this, you would \nstep\n\nthe \nPhysicsWorld\n manually by setting \nstep(time)\n. \nSubsteps\n are used\nto step the \nPhysicsWorld\n forward multiple times using a more precise time\nincrement than a single frame. This allows for finer grained control of the\n\nstepping\n process including more fluid movements.\n\n\nPhysicsBody\n\n\nPhysicsBody\n objects have \nposition\n and \nvelocity\n. You can apply \nforces\n,\n\nmovement\n, \ndamping\n and \nimpulses\n (as well as more) to \nPhysicsBody\n objects.\n\nPhysicsBody\n can be \nstatic\n or \ndynamic\n. A \nstatic\n body does not move under\nsimulation and behaves as if it has infinite \nmass\n. A \ndynamic\n body is fully\nsimulated. They can be moved manually by the user, but normally they move according\nto forces. A dynamic body can collide with all body types. \nNode\n provides\n\nsetPhysicsBody()\n to associate a \nPhysicsBody\n to a \nNode\n object.\n\n\nLets create a static and 5 dynamic \nPhysicsBody\n objects that are a box shape:\n\n\nauto physicsBody = PhysicsBody::createBox(Size(65.0f, 81.0f),\n                        PhysicsMaterial(0.1f, 1.0f, 0.0f));\nphysicsBody-\nsetDynamic(false);\n\n//create a sprite\nauto sprite = Sprite::create(\nwhiteSprite.png\n);\nsprite-\nsetPosition(s_centre);\naddChild(sprite);\n\n//apply physicsBody to the sprite\nsprite-\naddComponent(physicsBody);\n\n//add five dynamic bodies\nfor (int i = 0; i \n 5; ++i)\n{\n    physicsBody = PhysicsBody::createBox(Size(65.0f, 81.0f),\n                    PhysicsMaterial(0.1f, 1.0f, 0.0f));\n\n    //set the body isn't affected by the physics world's gravitational force\n    physicsBody-\nsetGravityEnable(false);\n\n    //set initial velocity of physicsBody\n    physicsBody-\nsetVelocity(Vec2(cocos2d::random(-500,500),\n                cocos2d::random(-500,500)));\n    physicsBody-\nsetTag(DRAG_BODYS_TAG);\n\n    sprite = Sprite::create(\nblueSprite.png\n);\n    sprite-\nsetPosition(Vec2(s_centre.x + cocos2d::random(-300,300),\n                s_centre.y + cocos2d::random(-300,300)));\n    sprite-\naddComponent(physicsBody);\n\n    addChild(sprite);\n}\n\n\n\n\nThe result is a stationary \nPhysicsBody\n with 5 additional \nPhysicsBody\n objects\ncolliding around it.\n\n\n\n\nCollision\n\n\nHave you ever been in a car accident? What did you collide with? Just like with\ncars, \nPhysicBody\n objects can come in contact. \nCollisions\n are what happens when\n\nPhysicBody\n objects come in contact with each other. When a \ncollision\n takes\nplace it can be ignored or it can trigger events to be fired.\n\n\nFiltering Collisions\n\n\nCollision filtering allows you to enable or prevent collisions between shapes.\nThis \nphysics engine\n supports collision filtering using \ncategory and group bitmasks\n.\n\n\nThere are 32 supported collision categories. For each shape you can specify which\ncategory it belongs to. You can also specify what other categories this shape can\ncollide with. This is done with masking bits. For example:\n\n\nauto sprite1 = addSpriteAtPosition(Vec2(s_centre.x - 150,s_centre.y));\nsprite1-\ngetPhysicsBody()-\nsetCategoryBitmask(0x02);    // 0010\nsprite1-\ngetPhysicsBody()-\nsetCollisionBitmask(0x01);   // 0001\n\nsprite1 = addSpriteAtPosition(Vec2(s_centre.x - 150,s_centre.y + 100));\nsprite1-\ngetPhysicsBody()-\nsetCategoryBitmask(0x02);    // 0010\nsprite1-\ngetPhysicsBody()-\nsetCollisionBitmask(0x01);   // 0001\n\nauto sprite2 = addSpriteAtPosition(Vec2(s_centre.x + 150,s_centre.y),1);\nsprite2-\ngetPhysicsBody()-\nsetCategoryBitmask(0x01);    // 0001\nsprite2-\ngetPhysicsBody()-\nsetCollisionBitmask(0x02);   // 0010\n\nauto sprite3 = addSpriteAtPosition(Vec2(s_centre.x + 150,s_centre.y + 100),2);\nsprite3-\ngetPhysicsBody()-\nsetCategoryBitmask(0x03);    // 0011\nsprite3-\ngetPhysicsBody()-\nsetCollisionBitmask(0x03);   // 0011\n\n\n\n\nYou can check for collisions by checking and comparing \ncategory\n and \ncollision\n\nbitmasks like:\n\n\nif ((shapeA-\ngetCategoryBitmask() \n shapeB-\ngetCollisionBitmask()) == 0\n   || (shapeB-\ngetCategoryBitmask() \n shapeA-\ngetCollisionBitmask()) == 0)\n{\n   // shapes can't collide\n   ret = false;\n}\n\n\n\n\n\n\nCollision groups let you specify an integral group index. You can have all shapes\nwith the same group index always collide (positive index) or never collide (negative\nindex and zero index). Collisions between shapes of different group indices are\nfiltered according the category and mask bits. In other words, group filtering has\nhigher precedence than category filtering.\n\n\nContacts/Joints\n\n\nRecall from the terminology above that \njoints\n are how contact points are connected\nto each other. Yes, you can think of it just like \njoints\n on your own body.\nEach joint type has a definition that derives from \nPhysicsJoint\n. All joints are\nconnected between two different bodies. One body may be static. You can prevent the\nattached bodies from colliding with each other by \njoint-\nsetCollisionEnable(false)\n.\nMany joint definitions require that you provide some geometric data. Often a joint\nwill be defined by anchor points. The rest of the joint definition data depends\non the joint type.\n\n\n\n\n-PhysicsJointFixed: A fixed joint fuses the two bodies together at a reference\n point. Fixed joints are useful for creating complex shapes that can be broken\n apart later.\n\n\n-PhysicsJointLimit: A limit joint imposes a maximum distance between the two\n bodies, as if they were connected by a rope.\n\n\n-PhysicsJointPin: A pin joint allows the two bodies to independently rotate\n around the anchor point as if pinned together.\n\n\n-PhysicsJointDistance: Set the fixed distance with two bodies\n\n\n-PhysicsJointSpring: Connecting two physics bodies together with a spring\n\n\n-PhysicsJointGroove: Attach body a to a line, and attach body b to a dot\n\n\n-PhysicsJointRotarySpring: Likes a spring joint, but works with rotary\n\n\n-PhysicsJointRotaryLimit: Likes a limit joint, but works with rotary\n\n\n-PhysicsJointRatchet: Works like a socket wrench\n\n\n-PhysicsJointGear: Keeps the angular velocity ratio of a pair of bodies constant\n\n\n-PhysicsJointMotor: Keeps the relative angular velocity of a pair of bodies\n constant\n\n\n\n\n\n\nCollision detection\n\n\nContacts are objects created by the \nphysics engine\n to manage the collision\nbetween two shapes. \nContact\n objects are not created by the user, they are\ncreated automatically. There are a few terms associated with contacts.\n\n\n\n\n-contact point: A contact point is a point where two shapes touch.\n\n\n-contact normal: A contact normal is a unit vector that points from one shape\n to another.\n\n\n\n\nYou can get the \nPhysicsShape\n from a \ncontact\n. From those you can get the bodies.\n\n\nbool onContactBegin(PhysicsContact\n contact)\n{\n    auto bodyA = contact.getShapeA()-\ngetBody();\n    auto bodyB = contact.getShapeB()-\ngetBody();\n    return true;\n}\n\n\n\n\nYou can get access to \ncontacts\n by implementing a \ncontact listener\n. The \ncontact\nlistener\n supports several events: \nbegin\n, \npre-solve\n, \npost-solve\n and \nseparate\n.\n\n\n\n\n-begin: Two shapes just started touching for the first time this step. Return\ntrue from the callback to process the collision normally or false to cause physics\nengine to ignore the collision entirely. If you return false, the \npreSolve()\n and\n\npostSolve()\n callbacks will never be run, but you will still receive a separate\nevent when the shapes stop overlapping.\n\n\n-pre-solve: Two shapes are touching during this step. Return false from the callback\n to make physics engine ignore the collision this step or true to process it normally.\n Additionally, you may override collision values using \nsetRestitution()\n, \nsetFriction()\n\n or \nsetSurfaceVelocity()\n to provide custom restitution, friction, or surface velocity\n values.\n\n\n-post-solve: Two shapes are touching and their collision response has been\n processed.\n\n\n-separate: Two shapes have just stopped touching for the first time this step.\n\n\n\n\nYou also can use \nEventListenerPhysicsContactWithBodies\n,\n\nEventListenerPhysicsContactWithShapes\n, \nEventListenerPhysicsContactWithGroup\n\nto listen for the event you're interested with bodies, shapes or groups. Besides this you\nalso need to set the physics contact related bitmask value, as the contact event\nwon't be received by default, even if you create the relative \nEventListener\n.\n\n\nFor example:\n\n\nbool init()\n{\n    //create a static PhysicsBody\n    auto sprite = addSpriteAtPosition(s_centre,1);\n    sprite-\nsetTag(10);\n    sprite-\ngetPhysicsBody()-\nsetContactTestBitmask(0xFFFFFFFF);\n    sprite-\ngetPhysicsBody()-\nsetDynamic(false);\n\n    //adds contact event listener\n    auto contactListener = EventListenerPhysicsContact::create();\n    contactListener-\nonContactBegin = CC_CALLBACK_1(PhysicsDemoCollisionProcessing::onContactBegin, this);\n    _eventDispatcher-\naddEventListenerWithSceneGraphPriority(contactListener, this);\n\n    schedule(CC_SCHEDULE_SELECTOR(PhysicsDemoCollisionProcessing::tick), 0.3f);\n    return true;\n\n    return false;\n}\n\nvoid tick(float dt)\n{\n    auto sprite1 = addSpriteAtPosition(Vec2(s_centre.x + cocos2d::random(-300,300),\n      s_centre.y + cocos2d::random(-300,300)));\n    auto physicsBody = sprite1-\ngetPhysicsBody();\n    physicsBody-\nsetVelocity(Vec2(cocos2d::random(-500,500),cocos2d::random(-500,500)));\n    physicsBody-\nsetContactTestBitmask(0xFFFFFFFF);\n}\n\nbool onContactBegin(PhysicsContact\n contact)\n{\n    auto nodeA = contact.getShapeA()-\ngetBody()-\ngetNode();\n    auto nodeB = contact.getShapeB()-\ngetBody()-\ngetNode();\n\n    if (nodeA \n nodeB)\n    {\n        if (nodeA-\ngetTag() == 10)\n        {\n            nodeB-\nremoveFromParentAndCleanup(true);\n        }\n        else if (nodeB-\ngetTag() == 10)\n        {\n            nodeA-\nremoveFromParentAndCleanup(true);\n        }\n    }\n\n    //bodies can collide\n    return true;\n}\n\n\n\n\n\n\nQueries\n\n\nHave you ever stood in one position and looked around? You see things \nnear\n to\nyou and \nfar\n from you. You can gauge how close things are to you. \nPhysics engines\n\nprovide this same type of \nspatial query\n. \nPhysicsWorld\n objects currently support\n\npoint queryies\n, \nray casts\n and \nrect queries\n.\n\n\nPoint Queries\n\n\nWhen you touch something, say your desk, you can think of this as a \npoint query\n.\nThey allow you to check if there are shapes within a certain distance of a point.\n\nPoint queries\n are useful for things like \nmouse picking\n and \nsimple sensors\n.\nYou can also find the closest point on a shape to a given point or find the closest\nshape to a point.\n\n\nRay Cast\n\n\nIf you are looking around, some object within your sight is bound to catch your\nattention. You have essentially performed a \nray cast\n here. You scanned until\nyou found something interesting to make you stop scanning. You can \nray cast\n at\na shape to get the point of first intersection. For example:\n\n\nvoid tick(float dt)\n{\n    Vec2 d(300 * cosf(_angle), 300 * sinf(_angle));\n    Vec2 point2 = s_centre + d;\n    if (_drawNode)\n    {\n        removeChild(_drawNode);\n    }\n    _drawNode = DrawNode::create();\n\n    Vec2 points[5];\n    int num = 0;\n    auto func = [\npoints, \nnum](PhysicsWorld\n world,\n        const PhysicsRayCastInfo\n info, void* data)-\nbool\n    {\n        if (num \n 5)\n        {\n            points[num++] = info.contact;\n        }\n        return true;\n    };\n\n    s_currScene-\ngetPhysicsWorld()-\nrayCast(func, s_centre, point2, nullptr);\n\n    _drawNode-\ndrawSegment(s_centre, point2, 1, Color4F::RED);\n    for (int i = 0; i \n num; ++i)\n    {\n        _drawNode-\ndrawDot(points[i], 3, Color4F(1.0f, 1.0f, 1.0f, 1.0f));\n    }\n    addChild(_drawNode);\n\n    _angle += 1.5f * (float)M_PI / 180.0f;\n}\n\n\n\n\n\n\nRect Queries\n\n\nRect queries\n provide a fast way to check roughly which shapes are in an area.\nIt is pretty easy to implement:\n\n\nauto func = [](PhysicsWorld\n world, PhysicsShape\n shape, void* userData)-\nbool\n{\n    //Return true from the callback to continue rect queries\n    return true;\n}\n\nscene-\ngetPhysicsWorld()-\nqueryRect(func, Rect(0,0,200,200), nullptr);\n\n\n\n\nA few examples of using a \nrect query\n while doing a \nlogo smash\n:\n\n\n\n\n\n\nDebugging Physics Body and Shapes\n\n\nIf you ever wish to have red boxes drawn around your \nphysics bodies\n to aid\nin debugging, simple add these 2 lines to your core, where it makes sense to you.\nPerhaps \nAppDelegate\n is a good place. \n\n\nDirector::getInstance()-\ngetRunningScene()-\ngetPhysics3DWorld()-\nsetDebugDrawEnable(true);\nDirector::getInstance()-\ngetRunningScene()-\nsetPhysics3DDebugCamera(cameraObjecct);\n\n\n\n\nDisabling Physics\n\n\nUsing the built-in \nphysics engine\n is a good idea. It is solid and advanced.\nHowever, if you wish to use an alternative \nphysics engine\n you can. All you need\nto do is disabling \nCC_USE_PHYSICS\n in \nbase/ccConfig.h\n.", 
            "title": "Physics"
        }, 
        {
            "location": "/programmers-guide/physics/index.html#physics", 
            "text": "Your game is coming along nicely. You have  Sprite  objects, gameplay mechanics\nand your coding efforts are paying off. You are starting to feel like your game\nis playable. What do you do when you realize your game needs to simulate real\nworld situations? You know,  collision detection ,  gravity ,  elasticity  and friction . Yes, you guessed it! This chapter is on  physics  and the use of a physics engine . Let's explore the  when ,  wheres  and  whys  of using a physics engine .", 
            "title": "Physics"
        }, 
        {
            "location": "/programmers-guide/physics/index.html#physics-is-scary-do-i-really-need-it-please-tell-me-no", 
            "text": "Please don't run away there are no physics monsters under your bed! Your needs\nmight be simple enough to not need to use a  physics engine . Perhaps a combination\nof using a  Node  objects  update()  function,  Rect  objects and a combination\nof the  containsPoint()  or  intersectsRect()  functions might be enough for\nyou? Example:  void update(float dt)\n{\n  auto p = touch- getLocation();\n  auto rect = this- getBoundingBox();\n\n  if(rect.containsPoint(p))\n  {\n      // do something, intersection\n  }\n}  This mechanism works for  very simple  needs, but doesn't scale. What if you had\n100  Sprite  objects all continuously updating to check for intersections with\nother objects? It could be done but the the CPU usage and  framerate  would suffer\nseverely. Your game would be unplayable. A  physics engine  solves these concerns\nfor us in a scalable and CPU friendly way. Even though this might look foreign,\nlet's take a look at a simple example and then nut and bolt the example,\nterminology and best practice together.  // create a static PhysicsBody\nauto physicsBody = PhysicsBody::createBox(Size(65.0f , 81.0f ), PhysicsMaterial(0.1f, 1.0f, 0.0f));\nphysicsBody- setDynamic(false);\n\n// create a sprite\nauto sprite = Sprite::create( whiteSprite.png );\nsprite- setPosition(Vec2(400, 400));\n\n// sprite will use physicsBody\nsprite- addComponent(physicsBody);\n\n//add contact event listener\nauto contactListener = EventListenerPhysicsContact::create();\ncontactListener- onContactBegin = CC_CALLBACK_1(onContactBegin, this);\n_eventDispatcher- addEventListenerWithSceneGraphPriority(contactListener, this);  Even though this example is simple, it looks complicated and scary. It really\nisn't if we look closely. Here are the steps that are happening:  A  PhysicsBody  object is created.  A  Sprite  object is created.  The  Sprite  object applies the properties of the  PhysicsBody  object.  A listener is created to respond to an  onContactBegin()  event.  Once we look step by step the concept starts to make sense. To better understand\nall the details of a  physics engine  you should understand the following terms\nand concepts:", 
            "title": "Physics is scary, do I really need it? Please tell me no!"
        }, 
        {
            "location": "/programmers-guide/physics/index.html#physics-terminology-and-concepts", 
            "text": "", 
            "title": "Physics terminology and concepts"
        }, 
        {
            "location": "/programmers-guide/physics/index.html#bodies", 
            "text": "A  PhysicsBody  holds the physical properties of an object. These include  mass , position ,  rotation ,  velocity  and  damping .  PhysicsBody  objects\nare the backbone for shapes. A  PhysicsBody  does not have a shape until you attach\na shape to it.", 
            "title": "Bodies"
        }, 
        {
            "location": "/programmers-guide/physics/index.html#material", 
            "text": "Materials describe material attributes\uff1a   -density\uff1aIt is used to compute the mass properties of the parent body.  -friction\uff1aIt is used to make objects slide along each other realistically.  -restitution\uff1aIt is used to make objects bounce. The restitution value is\n usually set to be between 0 and 1. 0 means no bouncing while 1 means perfect\n bouncing.", 
            "title": "Material"
        }, 
        {
            "location": "/programmers-guide/physics/index.html#shapes", 
            "text": "Shapes describe collision geometry. By attaching shapes to bodies, you define a\nbody\u2019s shape. You can attach as many shapes to a single body as you need in order\nto define a complex shape. Each shape relates to a  PhysicsMaterial  object and\ncontains the following attributes:  type ,  area ,  mass ,  moment ,  offset  and tag . Some of these you might not be familiar with:   - type \uff1adescribes the categories of shapes, such as circle, box, polygon, etc.  - area : used to compute the mass properties of the body. The density and area\ngives the mass.  - mass : the quantity of matter that a body contains, as measured by its\nacceleration under a given force or by the force exerted on it by a gravitational\nfield.  - moment : determines the torque needed for a desired angular acceleration.  - offset : offset from the body\u2019s center of gravity in body local coordinates.  - tag : used to identify the shape easily for developers.\u200b You probably remember\nthat you can assign all  Node  objects a tag for identification and easy access.   We describe the various  shapes  as:   - PhysicsShape : Shapes implement the  PhysicsShape  base class.  - PhysicsShapeCircle : Circles are solid. You cannot make a hollow circle\n using the circle shape.  - PhysicsShapePolygon : Polygon shapes are solid convex polygons.  - PhysicsShapeBox : Box shape is one kind of convex polygon.  - PhysicsShapeEdgeSegment : A segment shape.  - PhysicsShapeEdgePolygon : Hollow polygon shapes. A edge-polygon shape consists\n of multiple segment shapes.  - PhysicsShapeEdgeBox \uff1aHollow box shapes. A edge-box shape consists of four\n segment shapes.  - PhysicsShapeEdgeChain : The chain shape provides an efficient way to connect\n many edges together.", 
            "title": "Shapes"
        }, 
        {
            "location": "/programmers-guide/physics/index.html#contactsjoints", 
            "text": "Contacts  and  joint  objects describe how bodies are attached to each other.", 
            "title": "Contacts/Joints"
        }, 
        {
            "location": "/programmers-guide/physics/index.html#world", 
            "text": "A  world  container is what your physics bodies are added to and where they are\nsimulated. You add  bodies ,  shapes  and  constraints  to a world and then\nupdate the world as a whole. The  world  controls how all of these items interact\ntogether. Much of the interaction with the physics API will be with a  PhysicsWorld \nobject.  There is a lot to remember here, keep these terms handy to refer back to them as\nneeded.", 
            "title": "World"
        }, 
        {
            "location": "/programmers-guide/physics/index.html#physics-world-and-physics-body", 
            "text": "", 
            "title": "Physics World and Physics Body"
        }, 
        {
            "location": "/programmers-guide/physics/index.html#physicsworld", 
            "text": "A  PhysicsWorld  object is the core item used when simulating physics. Just like\nthe world we live in, a  PhysicsWorld  has a lot of things happening at once. PhysicsWorld  integrates deeply at the  Scene  level because of it's many facets.\nLet's use a simple example that we can all relate to. Does your residence have a\nkitchen? Think of this as your  physics world ! Now your world has  PhysicsBody \nobjects, like food, knives, appliances! These bodies interact with each other\ninside the world. These objects touch and also react to those touches. Example:\nuse a knife to cut food and put it in an appliance. Does the knife cut\nthe food? Maybe. Maybe not. Perhaps it isn't the correct type of knife for the\njob.  You can create a  Scene  that contains a  PhysicsWorld  using:  auto scene = Scene::createWithPhysics();  Every  PhysicsWorld  has properties associated with it:   -gravity: Global gravity applied to the world. Defaults to Vec2(0.0f, -98.0f).  -speed: Set the speed of physics world, speed is the rate at which the simulation\n executes. Defaults to 1.0.  -updateRate: set the update rate of physics world, update rate is the value of\n EngineUpdateTimes/PhysicsWorldUpdateTimes.  -substeps: set the number of substeps in an update of the physics world.   The process of updating a  PhysicsWorld  is called  stepping . By default, the PhysicsWorld   updates through time  automatically. This is called  auto stepping .\nIt automatically happens for you, each frame. You can disable  auto steping  of\nthe  PhysicsWorld  by setting  setAutoStep(false) . If you do this, you would  step \nthe  PhysicsWorld  manually by setting  step(time) .  Substeps  are used\nto step the  PhysicsWorld  forward multiple times using a more precise time\nincrement than a single frame. This allows for finer grained control of the stepping  process including more fluid movements.", 
            "title": "PhysicsWorld"
        }, 
        {
            "location": "/programmers-guide/physics/index.html#physicsbody", 
            "text": "PhysicsBody  objects have  position  and  velocity . You can apply  forces , movement ,  damping  and  impulses  (as well as more) to  PhysicsBody  objects. PhysicsBody  can be  static  or  dynamic . A  static  body does not move under\nsimulation and behaves as if it has infinite  mass . A  dynamic  body is fully\nsimulated. They can be moved manually by the user, but normally they move according\nto forces. A dynamic body can collide with all body types.  Node  provides setPhysicsBody()  to associate a  PhysicsBody  to a  Node  object.  Lets create a static and 5 dynamic  PhysicsBody  objects that are a box shape:  auto physicsBody = PhysicsBody::createBox(Size(65.0f, 81.0f),\n                        PhysicsMaterial(0.1f, 1.0f, 0.0f));\nphysicsBody- setDynamic(false);\n\n//create a sprite\nauto sprite = Sprite::create( whiteSprite.png );\nsprite- setPosition(s_centre);\naddChild(sprite);\n\n//apply physicsBody to the sprite\nsprite- addComponent(physicsBody);\n\n//add five dynamic bodies\nfor (int i = 0; i   5; ++i)\n{\n    physicsBody = PhysicsBody::createBox(Size(65.0f, 81.0f),\n                    PhysicsMaterial(0.1f, 1.0f, 0.0f));\n\n    //set the body isn't affected by the physics world's gravitational force\n    physicsBody- setGravityEnable(false);\n\n    //set initial velocity of physicsBody\n    physicsBody- setVelocity(Vec2(cocos2d::random(-500,500),\n                cocos2d::random(-500,500)));\n    physicsBody- setTag(DRAG_BODYS_TAG);\n\n    sprite = Sprite::create( blueSprite.png );\n    sprite- setPosition(Vec2(s_centre.x + cocos2d::random(-300,300),\n                s_centre.y + cocos2d::random(-300,300)));\n    sprite- addComponent(physicsBody);\n\n    addChild(sprite);\n}  The result is a stationary  PhysicsBody  with 5 additional  PhysicsBody  objects\ncolliding around it.", 
            "title": "PhysicsBody"
        }, 
        {
            "location": "/programmers-guide/physics/index.html#collision", 
            "text": "Have you ever been in a car accident? What did you collide with? Just like with\ncars,  PhysicBody  objects can come in contact.  Collisions  are what happens when PhysicBody  objects come in contact with each other. When a  collision  takes\nplace it can be ignored or it can trigger events to be fired.", 
            "title": "Collision"
        }, 
        {
            "location": "/programmers-guide/physics/index.html#filtering-collisions", 
            "text": "Collision filtering allows you to enable or prevent collisions between shapes.\nThis  physics engine  supports collision filtering using  category and group bitmasks .  There are 32 supported collision categories. For each shape you can specify which\ncategory it belongs to. You can also specify what other categories this shape can\ncollide with. This is done with masking bits. For example:  auto sprite1 = addSpriteAtPosition(Vec2(s_centre.x - 150,s_centre.y));\nsprite1- getPhysicsBody()- setCategoryBitmask(0x02);    // 0010\nsprite1- getPhysicsBody()- setCollisionBitmask(0x01);   // 0001\n\nsprite1 = addSpriteAtPosition(Vec2(s_centre.x - 150,s_centre.y + 100));\nsprite1- getPhysicsBody()- setCategoryBitmask(0x02);    // 0010\nsprite1- getPhysicsBody()- setCollisionBitmask(0x01);   // 0001\n\nauto sprite2 = addSpriteAtPosition(Vec2(s_centre.x + 150,s_centre.y),1);\nsprite2- getPhysicsBody()- setCategoryBitmask(0x01);    // 0001\nsprite2- getPhysicsBody()- setCollisionBitmask(0x02);   // 0010\n\nauto sprite3 = addSpriteAtPosition(Vec2(s_centre.x + 150,s_centre.y + 100),2);\nsprite3- getPhysicsBody()- setCategoryBitmask(0x03);    // 0011\nsprite3- getPhysicsBody()- setCollisionBitmask(0x03);   // 0011  You can check for collisions by checking and comparing  category  and  collision \nbitmasks like:  if ((shapeA- getCategoryBitmask()   shapeB- getCollisionBitmask()) == 0\n   || (shapeB- getCategoryBitmask()   shapeA- getCollisionBitmask()) == 0)\n{\n   // shapes can't collide\n   ret = false;\n}   Collision groups let you specify an integral group index. You can have all shapes\nwith the same group index always collide (positive index) or never collide (negative\nindex and zero index). Collisions between shapes of different group indices are\nfiltered according the category and mask bits. In other words, group filtering has\nhigher precedence than category filtering.", 
            "title": "Filtering Collisions"
        }, 
        {
            "location": "/programmers-guide/physics/index.html#contactsjoints_1", 
            "text": "Recall from the terminology above that  joints  are how contact points are connected\nto each other. Yes, you can think of it just like  joints  on your own body.\nEach joint type has a definition that derives from  PhysicsJoint . All joints are\nconnected between two different bodies. One body may be static. You can prevent the\nattached bodies from colliding with each other by  joint- setCollisionEnable(false) .\nMany joint definitions require that you provide some geometric data. Often a joint\nwill be defined by anchor points. The rest of the joint definition data depends\non the joint type.   -PhysicsJointFixed: A fixed joint fuses the two bodies together at a reference\n point. Fixed joints are useful for creating complex shapes that can be broken\n apart later.  -PhysicsJointLimit: A limit joint imposes a maximum distance between the two\n bodies, as if they were connected by a rope.  -PhysicsJointPin: A pin joint allows the two bodies to independently rotate\n around the anchor point as if pinned together.  -PhysicsJointDistance: Set the fixed distance with two bodies  -PhysicsJointSpring: Connecting two physics bodies together with a spring  -PhysicsJointGroove: Attach body a to a line, and attach body b to a dot  -PhysicsJointRotarySpring: Likes a spring joint, but works with rotary  -PhysicsJointRotaryLimit: Likes a limit joint, but works with rotary  -PhysicsJointRatchet: Works like a socket wrench  -PhysicsJointGear: Keeps the angular velocity ratio of a pair of bodies constant  -PhysicsJointMotor: Keeps the relative angular velocity of a pair of bodies\n constant", 
            "title": "Contacts/Joints"
        }, 
        {
            "location": "/programmers-guide/physics/index.html#collision-detection", 
            "text": "Contacts are objects created by the  physics engine  to manage the collision\nbetween two shapes.  Contact  objects are not created by the user, they are\ncreated automatically. There are a few terms associated with contacts.   -contact point: A contact point is a point where two shapes touch.  -contact normal: A contact normal is a unit vector that points from one shape\n to another.   You can get the  PhysicsShape  from a  contact . From those you can get the bodies.  bool onContactBegin(PhysicsContact  contact)\n{\n    auto bodyA = contact.getShapeA()- getBody();\n    auto bodyB = contact.getShapeB()- getBody();\n    return true;\n}  You can get access to  contacts  by implementing a  contact listener . The  contact\nlistener  supports several events:  begin ,  pre-solve ,  post-solve  and  separate .   -begin: Two shapes just started touching for the first time this step. Return\ntrue from the callback to process the collision normally or false to cause physics\nengine to ignore the collision entirely. If you return false, the  preSolve()  and postSolve()  callbacks will never be run, but you will still receive a separate\nevent when the shapes stop overlapping.  -pre-solve: Two shapes are touching during this step. Return false from the callback\n to make physics engine ignore the collision this step or true to process it normally.\n Additionally, you may override collision values using  setRestitution() ,  setFriction() \n or  setSurfaceVelocity()  to provide custom restitution, friction, or surface velocity\n values.  -post-solve: Two shapes are touching and their collision response has been\n processed.  -separate: Two shapes have just stopped touching for the first time this step.   You also can use  EventListenerPhysicsContactWithBodies , EventListenerPhysicsContactWithShapes ,  EventListenerPhysicsContactWithGroup \nto listen for the event you're interested with bodies, shapes or groups. Besides this you\nalso need to set the physics contact related bitmask value, as the contact event\nwon't be received by default, even if you create the relative  EventListener .  For example:  bool init()\n{\n    //create a static PhysicsBody\n    auto sprite = addSpriteAtPosition(s_centre,1);\n    sprite- setTag(10);\n    sprite- getPhysicsBody()- setContactTestBitmask(0xFFFFFFFF);\n    sprite- getPhysicsBody()- setDynamic(false);\n\n    //adds contact event listener\n    auto contactListener = EventListenerPhysicsContact::create();\n    contactListener- onContactBegin = CC_CALLBACK_1(PhysicsDemoCollisionProcessing::onContactBegin, this);\n    _eventDispatcher- addEventListenerWithSceneGraphPriority(contactListener, this);\n\n    schedule(CC_SCHEDULE_SELECTOR(PhysicsDemoCollisionProcessing::tick), 0.3f);\n    return true;\n\n    return false;\n}\n\nvoid tick(float dt)\n{\n    auto sprite1 = addSpriteAtPosition(Vec2(s_centre.x + cocos2d::random(-300,300),\n      s_centre.y + cocos2d::random(-300,300)));\n    auto physicsBody = sprite1- getPhysicsBody();\n    physicsBody- setVelocity(Vec2(cocos2d::random(-500,500),cocos2d::random(-500,500)));\n    physicsBody- setContactTestBitmask(0xFFFFFFFF);\n}\n\nbool onContactBegin(PhysicsContact  contact)\n{\n    auto nodeA = contact.getShapeA()- getBody()- getNode();\n    auto nodeB = contact.getShapeB()- getBody()- getNode();\n\n    if (nodeA   nodeB)\n    {\n        if (nodeA- getTag() == 10)\n        {\n            nodeB- removeFromParentAndCleanup(true);\n        }\n        else if (nodeB- getTag() == 10)\n        {\n            nodeA- removeFromParentAndCleanup(true);\n        }\n    }\n\n    //bodies can collide\n    return true;\n}", 
            "title": "Collision detection"
        }, 
        {
            "location": "/programmers-guide/physics/index.html#queries", 
            "text": "Have you ever stood in one position and looked around? You see things  near  to\nyou and  far  from you. You can gauge how close things are to you.  Physics engines \nprovide this same type of  spatial query .  PhysicsWorld  objects currently support point queryies ,  ray casts  and  rect queries .", 
            "title": "Queries"
        }, 
        {
            "location": "/programmers-guide/physics/index.html#point-queries", 
            "text": "When you touch something, say your desk, you can think of this as a  point query .\nThey allow you to check if there are shapes within a certain distance of a point. Point queries  are useful for things like  mouse picking  and  simple sensors .\nYou can also find the closest point on a shape to a given point or find the closest\nshape to a point.", 
            "title": "Point Queries"
        }, 
        {
            "location": "/programmers-guide/physics/index.html#ray-cast", 
            "text": "If you are looking around, some object within your sight is bound to catch your\nattention. You have essentially performed a  ray cast  here. You scanned until\nyou found something interesting to make you stop scanning. You can  ray cast  at\na shape to get the point of first intersection. For example:  void tick(float dt)\n{\n    Vec2 d(300 * cosf(_angle), 300 * sinf(_angle));\n    Vec2 point2 = s_centre + d;\n    if (_drawNode)\n    {\n        removeChild(_drawNode);\n    }\n    _drawNode = DrawNode::create();\n\n    Vec2 points[5];\n    int num = 0;\n    auto func = [ points,  num](PhysicsWorld  world,\n        const PhysicsRayCastInfo  info, void* data)- bool\n    {\n        if (num   5)\n        {\n            points[num++] = info.contact;\n        }\n        return true;\n    };\n\n    s_currScene- getPhysicsWorld()- rayCast(func, s_centre, point2, nullptr);\n\n    _drawNode- drawSegment(s_centre, point2, 1, Color4F::RED);\n    for (int i = 0; i   num; ++i)\n    {\n        _drawNode- drawDot(points[i], 3, Color4F(1.0f, 1.0f, 1.0f, 1.0f));\n    }\n    addChild(_drawNode);\n\n    _angle += 1.5f * (float)M_PI / 180.0f;\n}", 
            "title": "Ray Cast"
        }, 
        {
            "location": "/programmers-guide/physics/index.html#rect-queries", 
            "text": "Rect queries  provide a fast way to check roughly which shapes are in an area.\nIt is pretty easy to implement:  auto func = [](PhysicsWorld  world, PhysicsShape  shape, void* userData)- bool\n{\n    //Return true from the callback to continue rect queries\n    return true;\n}\n\nscene- getPhysicsWorld()- queryRect(func, Rect(0,0,200,200), nullptr);  A few examples of using a  rect query  while doing a  logo smash :", 
            "title": "Rect Queries"
        }, 
        {
            "location": "/programmers-guide/physics/index.html#debugging-physics-body-and-shapes", 
            "text": "If you ever wish to have red boxes drawn around your  physics bodies  to aid\nin debugging, simple add these 2 lines to your core, where it makes sense to you.\nPerhaps  AppDelegate  is a good place.   Director::getInstance()- getRunningScene()- getPhysics3DWorld()- setDebugDrawEnable(true);\nDirector::getInstance()- getRunningScene()- setPhysics3DDebugCamera(cameraObjecct);", 
            "title": "Debugging Physics Body and Shapes"
        }, 
        {
            "location": "/programmers-guide/physics/index.html#disabling-physics", 
            "text": "Using the built-in  physics engine  is a good idea. It is solid and advanced.\nHowever, if you wish to use an alternative  physics engine  you can. All you need\nto do is disabling  CC_USE_PHYSICS  in  base/ccConfig.h .", 
            "title": "Disabling Physics"
        }, 
        {
            "location": "/programmers-guide/audio/index.html", 
            "text": "Audio\n\n\nYour game will surely need sound! Cocos2d-x provides an audio engine called\n\nSimpleAudioEngine\n. It can be used to play background\nmusic as well as sound effects through out your game play. \nSimpleAudioEngine\n\nis a shared singleton object so you can simple call it from anywhere in your code.\nWhen creating a sample \nHelloWorld\n project we do all the setup required for you,\nout of the box. It also supports a variety of formats, including \nmp3\n\nand \nCore Audio Format\n\n\nGetting Started\n\n\nThe \nSimpleAudioEngine\n API is very easy to use.\n\n\nPlay background music\n\n\nPlay an audio file for use as background music. This can be repeated\ncontinuously.\n\n\nauto audio = SimpleAudioEngine::getInstance();\n\n// set the background music and continuously play it.\naudio-\nplayBackgroundMusic(\nmymusic.mp3\n, true);\n\n// set the background music and play it just once.\naudio-\nplayBackgroundMusic(\nmymusic.mp3\n, false);\n\n\n\n\nPlay a sound effect.\n\n\nPlay a sound effect.\n\n\nauto audio = SimpleAudioEngine::getInstance();\n\n// play a sound effect, just once.\naudio-\nplayEffect(\nmyEffect.mp3\n, false, 1.0f, 1.0f, 1.0f);\n\n\n\n\nPausing, stopping, resuming music and sound effects\n\n\nAfter you start to play music and sound effects you might need to pause,\nstop or resume after certain operations. This can be done easily.\n\n\nPause\n\n\nauto audio = SimpleAudioEngine::getInstance();\n\n// pause background music.\naudio-\npauseBackgroundMusic();\n\n// pause a sound effect.\naudio-\npauseEffect();\n\n// pause all sound effects.\naudio-\npauseAllEffects();\n\n\n\n\nStop\n\n\nauto audio = SimpleAudioEngine::getInstance();\n\n// stop background music.\naudio-\nstopBackgroundMusic();\n\n// stop a sound effect.\naudio-\nstopEffect();\n\n// stops all running sound effects.\naudio-\nstopAllEffects();\n\n\n\n\nResume\n\n\nauto audio = SimpleAudioEngine::getInstance();\n\n// resume background music.\naudio-\nresumeBackgroundMusic();\n\n// resume a sound effect.\naudio-\nresumeEffect();\n\n// resume all sound effects.\naudio-\nresumeAllEffects();\n\n\n\n\nAdvanced audio functionality\n\n\nSetup\n\n\nIt is easy to get started using the \nSimpleAudioEngine\n API. There are\nconsiderations to keep in mind when using audio in your game. Mostly\nwhen operating on mobile devices such as phones and tablets. What happens when\nyou multi-task on your phone and are switching between apps? Or when a phone\ncall comes in? You need to handle these exceptions in your game. Fortunately, we\nhelp you here.\n\n\nIn \nAppDelegate.cpp\n, notice the following methods:\n\n\n// This function will be called when the app is inactive. When comes a phone call,\n// it's be invoked too\nvoid AppDelegate::applicationDidEnterBackground() {\n    Director::getInstance()-\nstopAnimation();\n\n    // if you use SimpleAudioEngine, it must be pause\n    // SimpleAudioEngine::getInstance()-\npauseBackgroundMusic();\n}\n\n// this function will be called when the app is active again\nvoid AppDelegate::applicationWillEnterForeground() {\n    Director::getInstance()-\nstartAnimation();\n\n    // if you use SimpleAudioEngine, it must resume here\n    // SimpleAudioEngine::getInstance()-\nresumeBackgroundMusic();\n}\n\n\n\n\nNotice the commented out lines for \nSimpleAudioEngine\n? Make sure to uncomment these\nlines out if you are using audio for background sounds and sound effects.\n\n\nPre-loading sound\n\n\nWhen your game starts you might want to pre-load the music and effects so they\nare ready when you need them.\n\n\nauto audio = SimpleAudioEngine::getInstance();\n\n// pre-loading background music and effects. You could pre-load\n// effects, perhaps on app startup so they are already loaded\n// when you want to use them.\naudio-\npreloadBackgroundMusic(\nmyMusic1.mp3\n);\naudio-\npreloadBackgroundMusic(\nmyMusic2.mp3\n);\n\naudio-\npreloadEffect(\nmyEffect1.mp3\n);\naudio-\npreloadEffect(\nmyEffect2.mp3\n);\n\n// unload a sound from cache. If you are finished with a sound and\n// you wont use it anymore in your game. unload it to free up\n// resources.\naudio-\nunloadEffect(\nmyEffect1.mp3\n);\n\n\n\n\nVolume\n\n\nYou can increase and decrease the volume of your sounds and music programmatically.\n\n\nauto audio = SimpleAudioEngine::getInstance();\n\n// setting the volume specifying value as a float\naudio-\nsetEffectsVolume(5.0f);", 
            "title": "Audio"
        }, 
        {
            "location": "/programmers-guide/audio/index.html#audio", 
            "text": "Your game will surely need sound! Cocos2d-x provides an audio engine called SimpleAudioEngine . It can be used to play background\nmusic as well as sound effects through out your game play.  SimpleAudioEngine \nis a shared singleton object so you can simple call it from anywhere in your code.\nWhen creating a sample  HelloWorld  project we do all the setup required for you,\nout of the box. It also supports a variety of formats, including  mp3 \nand  Core Audio Format", 
            "title": "Audio"
        }, 
        {
            "location": "/programmers-guide/audio/index.html#getting-started", 
            "text": "The  SimpleAudioEngine  API is very easy to use.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/programmers-guide/audio/index.html#play-background-music", 
            "text": "Play an audio file for use as background music. This can be repeated\ncontinuously.  auto audio = SimpleAudioEngine::getInstance();\n\n// set the background music and continuously play it.\naudio- playBackgroundMusic( mymusic.mp3 , true);\n\n// set the background music and play it just once.\naudio- playBackgroundMusic( mymusic.mp3 , false);", 
            "title": "Play background music"
        }, 
        {
            "location": "/programmers-guide/audio/index.html#play-a-sound-effect", 
            "text": "Play a sound effect.  auto audio = SimpleAudioEngine::getInstance();\n\n// play a sound effect, just once.\naudio- playEffect( myEffect.mp3 , false, 1.0f, 1.0f, 1.0f);", 
            "title": "Play a sound effect."
        }, 
        {
            "location": "/programmers-guide/audio/index.html#pausing-stopping-resuming-music-and-sound-effects", 
            "text": "After you start to play music and sound effects you might need to pause,\nstop or resume after certain operations. This can be done easily.", 
            "title": "Pausing, stopping, resuming music and sound effects"
        }, 
        {
            "location": "/programmers-guide/audio/index.html#pause", 
            "text": "auto audio = SimpleAudioEngine::getInstance();\n\n// pause background music.\naudio- pauseBackgroundMusic();\n\n// pause a sound effect.\naudio- pauseEffect();\n\n// pause all sound effects.\naudio- pauseAllEffects();", 
            "title": "Pause"
        }, 
        {
            "location": "/programmers-guide/audio/index.html#stop", 
            "text": "auto audio = SimpleAudioEngine::getInstance();\n\n// stop background music.\naudio- stopBackgroundMusic();\n\n// stop a sound effect.\naudio- stopEffect();\n\n// stops all running sound effects.\naudio- stopAllEffects();", 
            "title": "Stop"
        }, 
        {
            "location": "/programmers-guide/audio/index.html#resume", 
            "text": "auto audio = SimpleAudioEngine::getInstance();\n\n// resume background music.\naudio- resumeBackgroundMusic();\n\n// resume a sound effect.\naudio- resumeEffect();\n\n// resume all sound effects.\naudio- resumeAllEffects();", 
            "title": "Resume"
        }, 
        {
            "location": "/programmers-guide/audio/index.html#advanced-audio-functionality", 
            "text": "", 
            "title": "Advanced audio functionality"
        }, 
        {
            "location": "/programmers-guide/audio/index.html#setup", 
            "text": "It is easy to get started using the  SimpleAudioEngine  API. There are\nconsiderations to keep in mind when using audio in your game. Mostly\nwhen operating on mobile devices such as phones and tablets. What happens when\nyou multi-task on your phone and are switching between apps? Or when a phone\ncall comes in? You need to handle these exceptions in your game. Fortunately, we\nhelp you here.  In  AppDelegate.cpp , notice the following methods:  // This function will be called when the app is inactive. When comes a phone call,\n// it's be invoked too\nvoid AppDelegate::applicationDidEnterBackground() {\n    Director::getInstance()- stopAnimation();\n\n    // if you use SimpleAudioEngine, it must be pause\n    // SimpleAudioEngine::getInstance()- pauseBackgroundMusic();\n}\n\n// this function will be called when the app is active again\nvoid AppDelegate::applicationWillEnterForeground() {\n    Director::getInstance()- startAnimation();\n\n    // if you use SimpleAudioEngine, it must resume here\n    // SimpleAudioEngine::getInstance()- resumeBackgroundMusic();\n}  Notice the commented out lines for  SimpleAudioEngine ? Make sure to uncomment these\nlines out if you are using audio for background sounds and sound effects.", 
            "title": "Setup"
        }, 
        {
            "location": "/programmers-guide/audio/index.html#pre-loading-sound", 
            "text": "When your game starts you might want to pre-load the music and effects so they\nare ready when you need them.  auto audio = SimpleAudioEngine::getInstance();\n\n// pre-loading background music and effects. You could pre-load\n// effects, perhaps on app startup so they are already loaded\n// when you want to use them.\naudio- preloadBackgroundMusic( myMusic1.mp3 );\naudio- preloadBackgroundMusic( myMusic2.mp3 );\n\naudio- preloadEffect( myEffect1.mp3 );\naudio- preloadEffect( myEffect2.mp3 );\n\n// unload a sound from cache. If you are finished with a sound and\n// you wont use it anymore in your game. unload it to free up\n// resources.\naudio- unloadEffect( myEffect1.mp3 );", 
            "title": "Pre-loading sound"
        }, 
        {
            "location": "/programmers-guide/audio/index.html#volume", 
            "text": "You can increase and decrease the volume of your sounds and music programmatically.  auto audio = SimpleAudioEngine::getInstance();\n\n// setting the volume specifying value as a float\naudio- setEffectsVolume(5.0f);", 
            "title": "Volume"
        }, 
        {
            "location": "/programmers-guide/vr/index.html", 
            "text": "Virtual Reality (VR)\n\n\nYou have probably heard the term \nVirtual Reality\n or \nVR\n used before.\n\nVR\n isn't new. Its roots can be traced back to earlier than the 1970's. The\noriginal goal of \nVR\n was to take an environment or situation, both realistic\nand unrealistic and let the user feel what it is like to experience it by simulating\ntheir physical presence in the environment. You can think of it as \ntransporting\n\nthe user to another experience, all the while never leaving their physical surroundings.\nYou might even associate \nVR\n with wearing a \nhead-mounted display\n or special\ngloves or even taking place on a special platform.\n\n\n\n\nModern \nVR\n is focused around \ngames\n and \nimmersive video\n.\n\n\nIs VR production ready?\n\n\nNo, \nVR\n is still in the early phases of development. Please consider it \nexperimental\n!\nIn fact, we are providing a \ngeneric renderer\n implementation to use as a\nproof-of-concept. You can use this in a simulator or with a \nGoogle Cardboard\n\n\nhead-mounted display\n. You cannot trust the \ngeneric renderer\n to produce 100%\ncorrect results. It is always necessary to test with a supported SDK and\nsupported hardware.\n\n\nWe support the popular \nVR SDKs\n:\n\n\n\n\n\n\n\n\nSDK\n\n\nCompany\n\n\nRuntime Platform\n\n\n\n\n\n\n\n\n\n\nGearVR\n\n\nSamsung\n\n\nGalaxy Note 5/S6/S6 Edge/S6 Edge+\n\n\n\n\n\n\nGVR(Cardboard And Daydream)\n\n\nGoogle\n\n\nAndroid 4.4 (KitKat) or higher\n\n\n\n\n\n\nDeepoonVR\n\n\nDeepoon\n\n\nGalaxy Note 5/S6/S6 Edge/S6 Edge+\n\n\n\n\n\n\nOculusVR\n\n\nOculus\n\n\nOculus Rift(Windows 7+)\n\n\n\n\n\n\n\n\nIs your game a good VR candidate?\n\n\nIf, late on a Friday evening, after a night of dinner, dance and drink, you find\nyourself thinking \nlet me take my current game and turn it into a VR game\n.\nPause... longer... and make sure you are not dreaming! Seriously, you need to stop\nand ask yourself a few questions:\n\n\n\n\nHow do I interact with the game currently? Touch? Gamepad? Keyboard?\n\n\nIn 2d games: what does moving the camera mean? 2d games are not usually made\n  in the \nfirst person\n.\n\n\nIs your game done in a \nfirst person\n scenario? \nFirst person\n games can be\n  made into \nVR\n games easier than others types of games.\n\n\nIs my 2D or 3D game a good candidate for a VR game after answering the above\n  questions?\n\n\n\n\nWhen using \nVR\n it is important to note the following items:\n\n\n\n\nTouch events don't work as expected when developing for \nVR\n. In fact,\n  touch events should be disabled in \nVR\n games.\n\n\nVR\n games should be configured to use a gamepad and/or another external\n  input device, such as a \nhead-mounted display\n.\n\n\n\n\nWith this knowledge and a \ncan do\n attitude, get started...\n\n\nHow to get started\n\n\nFirst, it is important to double check your hardware to make sure your device\nsupports \nVR\n. VR needs two things:\n\n\n\n\n\n\nStereo rendering (distortion mesh): available on every platform\n\n\n\n\n\n\n\n\nheadset input: available only on iOS and Android\n\n\n\n\n\n\nImporting VR\n\n\nSecond, use the \nCocos Package Manager\n, which is part\nof the \nCocos Command-Line Tool\n to add \nVR\n to your project:\n\n\nYou always need to \nimport\n the \nvrsdkbase\n. This step takes care of modifying your projects\nto support \nVR\n.\n\n\n$ cocos package import -v -b vrsdkbase --anysdk\n\n\n\n\nNotice in \nAppDelegate.cpp\n code has been added to enable \nVR\n:\n\n\n// VR_PLATFORM_SOURCES_BEGIN\nauto vrImpl = new VRGenericRenderer;\nglview-\nsetVR(vrImpl);\n// VR_PLATFORM_SOURCES_END\n\n\n\n\nImport the \nVR SDK\n that you need. Currently, \nGear\n, \nDeepoon\n, \nGVR\n and \nOculus\n\nare supported.\n\n\n$ cocos package import -v -b SDK_NAME --anysdk\n\n\n\n\nExamples:\n\n\n# add the GearVR package\n$ cocos package import -v -b gearvr --anysdk\n\n# add the Deepoon VR package\n$ cocos package import -v -b deepoon --anysdk\n\n# add the Google VR package\n$ cocos package import -v -b gvr --anysdk\n\n# add the Oculus VR package\n$ cocos package import -v -b oculus --anysdk\n\n\n\n\nCompiling and Running with VR\n\n\nIOS\n\n\nIf you are running iOS, you are limited to running the \ngeneric renderer\n on\nhardware only, you can use \ncocos compile\n \ncocos run\n as you typically would.\n\n\nAndroid\n\n\nIf you are running on \nAndroid\n and planning on targeting a specific \nVR SDK\n\nyou need to perform a few additional steps. Running \nswitchVRPlatform.py\n from\nyour projects root directory will take care of everything. Here is an example for\ninstalling \nGearVR\n in C++, JavaScript and Lua:\n\n\n## in C++\n\n# first, install vrsdkbase\n$ cocos package import -v -b vrsdkbase --anysdk\n\n# second, install GearVR\n$ cocos package import -v -b gearvr --anysdk\n\n# third, switch to using GearVR\n$ python vrsdks/switchVRPlatform.py -p gearvr-sdk\n\n\n\n\n\n## in JavaScript and Lua\n\n# first, install vrsdkbase\n$ cocos package import -v -b vrsdkbase --anysdk\n\n# second, install GearVR\n$ cocos package import -v -b gearvr --anysdk\n\n# third, switch to using GearVR\n$ python frameworks/runtime-src/vrsdks/switchVRPlatform.py -p gearvr-sdk\n\n\n\n\nAttention:\n you should using \n$ python vrsdks/switchVRPlatform.py -h\n to check the name of SDK, here is \ngearvr-sdk\n.\n\n\n\n\nFor Android there is also a few special steps that must happen. These are dependent\nupon your \nRuntime Platform\n. Please refer to the table at the start of this document.\n\n\nGearVR/Deepoon VR/GVR Compilation and Running.\n\n\nRunning \nGearVR\n, \nDeepoon VR\n or \nGoogle VR\n on \nAndroid\n requires a change\nin compile flags. Example:\n\n\n# from a command-line\n$ cocos run -p android --app-abi armeabi-v7a\n\n# using Android Studio\n$ cocos run -p android --android-studio --app-abi armeabi-v7a\n\n\n\n\nAttention:\n All mobile VRSDK(GearVR/Deepoon VR/GVR) only support armeabi-v7a architecture. GVR only support Android Studio. So it can only use the second command to compilation. \n\n\nIf \nGearVR\n or \nDeepoon VR\n crashes at runtime, please check to ensure you have an\n\nOculus signature file\n in \nassets\n folder.\n\n\nOculus Compilation\n\n\nOculusVR\n is for the desktop PC platform. This requires \nVisual Studio 2015\n.\n\n\nFirst, import \nliboculus.vcxproj\n into your project(in \noculus-sdk/oculus/proj.win32/\n folder)\nand add a reference to it:\n\n\n\n\n\n\nSecond, import the \nCCVROculusRenderer\n and \nCCVROculusHeadTracker\n classes(in \noculus-sdk/\n folder):\n\n\n\n\nFinally, add the search path of VR-SDK (\n..\\vrsdks\n) to your project:\n\n\n\n\nIf \nOculus\n crashes at runtime, please check your installation of the \nOculus Rift Runtime\n.", 
            "title": "VR"
        }, 
        {
            "location": "/programmers-guide/vr/index.html#virtual-reality-vr", 
            "text": "You have probably heard the term  Virtual Reality  or  VR  used before. VR  isn't new. Its roots can be traced back to earlier than the 1970's. The\noriginal goal of  VR  was to take an environment or situation, both realistic\nand unrealistic and let the user feel what it is like to experience it by simulating\ntheir physical presence in the environment. You can think of it as  transporting \nthe user to another experience, all the while never leaving their physical surroundings.\nYou might even associate  VR  with wearing a  head-mounted display  or special\ngloves or even taking place on a special platform.   Modern  VR  is focused around  games  and  immersive video .", 
            "title": "Virtual Reality (VR)"
        }, 
        {
            "location": "/programmers-guide/vr/index.html#is-vr-production-ready", 
            "text": "No,  VR  is still in the early phases of development. Please consider it  experimental !\nIn fact, we are providing a  generic renderer  implementation to use as a\nproof-of-concept. You can use this in a simulator or with a  Google Cardboard  head-mounted display . You cannot trust the  generic renderer  to produce 100%\ncorrect results. It is always necessary to test with a supported SDK and\nsupported hardware.  We support the popular  VR SDKs :     SDK  Company  Runtime Platform      GearVR  Samsung  Galaxy Note 5/S6/S6 Edge/S6 Edge+    GVR(Cardboard And Daydream)  Google  Android 4.4 (KitKat) or higher    DeepoonVR  Deepoon  Galaxy Note 5/S6/S6 Edge/S6 Edge+    OculusVR  Oculus  Oculus Rift(Windows 7+)", 
            "title": "Is VR production ready?"
        }, 
        {
            "location": "/programmers-guide/vr/index.html#is-your-game-a-good-vr-candidate", 
            "text": "If, late on a Friday evening, after a night of dinner, dance and drink, you find\nyourself thinking  let me take my current game and turn it into a VR game .\nPause... longer... and make sure you are not dreaming! Seriously, you need to stop\nand ask yourself a few questions:   How do I interact with the game currently? Touch? Gamepad? Keyboard?  In 2d games: what does moving the camera mean? 2d games are not usually made\n  in the  first person .  Is your game done in a  first person  scenario?  First person  games can be\n  made into  VR  games easier than others types of games.  Is my 2D or 3D game a good candidate for a VR game after answering the above\n  questions?   When using  VR  it is important to note the following items:   Touch events don't work as expected when developing for  VR . In fact,\n  touch events should be disabled in  VR  games.  VR  games should be configured to use a gamepad and/or another external\n  input device, such as a  head-mounted display .   With this knowledge and a  can do  attitude, get started...", 
            "title": "Is your game a good VR candidate?"
        }, 
        {
            "location": "/programmers-guide/vr/index.html#how-to-get-started", 
            "text": "First, it is important to double check your hardware to make sure your device\nsupports  VR . VR needs two things:    Stereo rendering (distortion mesh): available on every platform     headset input: available only on iOS and Android", 
            "title": "How to get started"
        }, 
        {
            "location": "/programmers-guide/vr/index.html#importing-vr", 
            "text": "Second, use the  Cocos Package Manager , which is part\nof the  Cocos Command-Line Tool  to add  VR  to your project:  You always need to  import  the  vrsdkbase . This step takes care of modifying your projects\nto support  VR .  $ cocos package import -v -b vrsdkbase --anysdk  Notice in  AppDelegate.cpp  code has been added to enable  VR :  // VR_PLATFORM_SOURCES_BEGIN\nauto vrImpl = new VRGenericRenderer;\nglview- setVR(vrImpl);\n// VR_PLATFORM_SOURCES_END  Import the  VR SDK  that you need. Currently,  Gear ,  Deepoon ,  GVR  and  Oculus \nare supported.  $ cocos package import -v -b SDK_NAME --anysdk  Examples:  # add the GearVR package\n$ cocos package import -v -b gearvr --anysdk\n\n# add the Deepoon VR package\n$ cocos package import -v -b deepoon --anysdk\n\n# add the Google VR package\n$ cocos package import -v -b gvr --anysdk\n\n# add the Oculus VR package\n$ cocos package import -v -b oculus --anysdk", 
            "title": "Importing VR"
        }, 
        {
            "location": "/programmers-guide/vr/index.html#compiling-and-running-with-vr", 
            "text": "", 
            "title": "Compiling and Running with VR"
        }, 
        {
            "location": "/programmers-guide/vr/index.html#ios", 
            "text": "If you are running iOS, you are limited to running the  generic renderer  on\nhardware only, you can use  cocos compile   cocos run  as you typically would.", 
            "title": "IOS"
        }, 
        {
            "location": "/programmers-guide/vr/index.html#android", 
            "text": "If you are running on  Android  and planning on targeting a specific  VR SDK \nyou need to perform a few additional steps. Running  switchVRPlatform.py  from\nyour projects root directory will take care of everything. Here is an example for\ninstalling  GearVR  in C++, JavaScript and Lua:  ## in C++\n\n# first, install vrsdkbase\n$ cocos package import -v -b vrsdkbase --anysdk\n\n# second, install GearVR\n$ cocos package import -v -b gearvr --anysdk\n\n# third, switch to using GearVR\n$ python vrsdks/switchVRPlatform.py -p gearvr-sdk  \n## in JavaScript and Lua\n\n# first, install vrsdkbase\n$ cocos package import -v -b vrsdkbase --anysdk\n\n# second, install GearVR\n$ cocos package import -v -b gearvr --anysdk\n\n# third, switch to using GearVR\n$ python frameworks/runtime-src/vrsdks/switchVRPlatform.py -p gearvr-sdk  Attention:  you should using  $ python vrsdks/switchVRPlatform.py -h  to check the name of SDK, here is  gearvr-sdk .   For Android there is also a few special steps that must happen. These are dependent\nupon your  Runtime Platform . Please refer to the table at the start of this document.", 
            "title": "Android"
        }, 
        {
            "location": "/programmers-guide/vr/index.html#gearvrdeepoon-vrgvr-compilation-and-running", 
            "text": "Running  GearVR ,  Deepoon VR  or  Google VR  on  Android  requires a change\nin compile flags. Example:  # from a command-line\n$ cocos run -p android --app-abi armeabi-v7a\n\n# using Android Studio\n$ cocos run -p android --android-studio --app-abi armeabi-v7a  Attention:  All mobile VRSDK(GearVR/Deepoon VR/GVR) only support armeabi-v7a architecture. GVR only support Android Studio. So it can only use the second command to compilation.   If  GearVR  or  Deepoon VR  crashes at runtime, please check to ensure you have an Oculus signature file  in  assets  folder.", 
            "title": "GearVR/Deepoon VR/GVR Compilation and Running."
        }, 
        {
            "location": "/programmers-guide/vr/index.html#oculus-compilation", 
            "text": "OculusVR  is for the desktop PC platform. This requires  Visual Studio 2015 .  First, import  liboculus.vcxproj  into your project(in  oculus-sdk/oculus/proj.win32/  folder)\nand add a reference to it:    Second, import the  CCVROculusRenderer  and  CCVROculusHeadTracker  classes(in  oculus-sdk/  folder):   Finally, add the search path of VR-SDK ( ..\\vrsdks ) to your project:   If  Oculus  crashes at runtime, please check your installation of the  Oculus Rift Runtime .", 
            "title": "Oculus Compilation"
        }, 
        {
            "location": "/programmers-guide/advanced_topics/index.html", 
            "text": "Advanced Topics\n\n\nWow! You are on the last chapter. Good Job! By now you should feel comfortable\ncreating your games with Cocos2d-x. However, please realize there is no limit to\nwhat you can create. This chapter covers \nadvanced\n concepts. Note that this\nchapter gets more technical in its content and format.\n\n\nFile System Access\n\n\nEven though you can use functions in \nstdio.h\n to access files it can be\ninconvenient for a few reasons:\n\n You need to invoke system specific API to get full path of a file.\n\n Resources are packed into .apk file on Android after installing.\n* You want to load a resource (such as a picture) based on resolution automatically.\n\n\nThe \nFileUtils\n class has been created to resolve these issues. \nFileUtils\n is a\nhelper class to access files under the location of your \nResources\n directory.\nThis includes reading data from a file and checking file existence.\n\n\nFunctions to read file content\n\n\nThese functions will read different type of files and will return different data\ntypes:\n\n\n\n \n\n  \nfunction name\n\n  \nreturn type\n\n  \nsupport path type\n\n \n\n \n\n  \ngetStringFromFile\n\n  \nstd::string\n\n  \nrelative path and absolute path\n\n \n\n \n\n  \ngetDataFromFile\n\n  \ncocos2d::Data\n\n  \nrelative path and absolute path\n\n \n\n \n\n  \ngetFileDataFromZip\n\n  \nunsigned char*\n\n  \nabsolute path\n\n \n\n \n\n  \ngetValueMapFromFile\n\n  \ncocos2d::ValueMap\n\n  \nrelative path and absolute path\n\n \n\n \n\n  \ngetValueVectorFromFile\n\n  \nstd::string\n\n  \ncocos2d::ValueVector\n\n \n\n\n \n\n\n\nFunctions to manage files or directories\n\n\nThese functions will manage a file or a directory:\n\n\n\n \n\n  \nfunction name\n\n  \nsupport path type\n\n \n\n \n\n  \nisFileExist\n\n  \nrelative path and absolute path\n\n \n\n \n\n  \nisDirectoryExist\n\n  \nrelative path and absolute path\n\n \n\n \n\n  \ncreateDirectory\n\n  \nabsolute path\n\n \n\n \n\n  \nremoveDirectory\n\n  \nabsolute path\n\n \n\n \n\n  \nremoveFile\n\n  \nabsolute path\n\n \n\n \n\n  \nrenameFile\n\n  \nabsolute path\n\n \n\n \n\n  \ngetFileSize\n\n  \nrelative path and absolute path\n\n \n\n \n\n\n\nNetworking with HTTP\n\n\nSometimes it might be helpful to obtain resources or data from another source.\nOne common way of doing this is by using an \nHTTP\n request.\n\n\nHTTP networking has three steps:\n   1. Create an \nHttpRequest\n\n   2. Create a \nsetResponseCallback()\n callback function for replying to requests.\n   3. Send \nHttpRequest\n by \nHttpClient\n\n\nHttpRequest\n can have four types:  \nPOST\n, \nPUT\n, \nDELETE\n, \nUNKNOWN\n. Unless\nspecified the default type is \nUNKNOWN\n. The \nHTTPClient\n object controls sending the\n\nrequest\n and receiving the data on a \ncallback\n.\n\n\nWorking with an \nHTTPRequest\n is quite simple:\n\n\nHttpRequest* request = new (std :: nothrow) HttpRequest();\nrequest-\nsetUrl(\nhttp://just-make-this-request-failed.com\n);\nrequest-\nsetRequestType(HttpRequest::Type::GET);\nrequest-\nsetResponseCallback(CC_CALLBACK_2 (HttpClientTest::onHttpRequestCompleted, this));\n\nHttpClient::getInstance()-\nsendImmediate(request);\n\nrequest-\nrelease();\n\n\n\n\nNotice that we specified a \nsetResponseCallback()\n method for when a response is\nreceived. By doing this we can look at the data returned and use it how we might\nneed to. Again, this process is simple and we can do it with ease:\n\n\nvoid HttpClientTest::onHttpRequestCompleted(HttpClient* sender, HttpResponse* response)\n{\n  if (!response)\n  {\n    return;\n  }\n\n  // Dump the data\n  std::vector\nchar\n* buffer = response-\ngetResponseData();\n\n  for (unsigned int i = 0; i \nbuffer-\n size (); i ++)\n  {\n    log (\n% c\n, (* buffer) [i]);\n  }\n}\n\n\n\n\nShaders and Materials\n\n\nWhat is a Shader\n\n\nFrom wikipedia:\n\n\nIn the field of computer graphics, a shader is a computer program that is used\nto do shading: the production of appropriate levels of color within an image,\nor, in the modern era, also to produce special effects or do video post-processing.\nA definition in layman's terms might be given as \"a program that tells a computer\nhow to draw something in a specific and unique way\".\n\n\nIn other words, it is a piece of code that runs on the GPU (not CPU) to draw the\ndifferent Cocos2d-x Nodes.\n\n\nCocos2d-x uses the \nOpenGL ES Shading Language v1.0\n\nfor the shaders. But describing the GLSL language is outside the scope of this\ndocument. In order to learn more about the language, please refer to:\n\nOpenGL ES Shading Language v1.0 Spec\n.\n\n\nIn Cocos2d-x, all \nNode\n objects that are \nrenderable\n use shaders. As an example\n\nSprite\n uses optimized shaders for 2d sprites, \nSprite3D\n uses optimized shaders\nfor 3d objects, and so on.\n\n\nCustomizing Shaders\n\n\nUsers can change the predefined shaders from any Cocos2d-x \nNode\n by calling:\n\n\nsprite-\nsetGLProgramState(programState);\nsprite3d-\nsetGLProgramState(programState);\n\n\n\n\nThe \nGLProgramState\n object contains two important things:\n\n\n\n\nA \nGLProgram\n: Basically this is \nthe\n shader. It contains a vertex and fragment shader.\n\n\nAnd the \nstate\n, which basically are the uniforms of the shader.\n\n\n\n\nIn case you are not familiar with the term \nuniform\n and why it is needed, please\nrefer to the \nOpenGL Shading Language Specification\n\n\nSetting uniforms to a \nGLProgramState\n is as easy as this:\n\n\nglProgramState-\nsetUniformFloat(\nu_progress\n, 0.9);\nglProgramState-\nsetUniformVec2(\nu_position\n, Vec2(x,y));\nglProgramState-\nsetUniformMat4(\nu_transform\n, matrix);\n\n\n\n\nYou can even set callbacks as a uniform value:\n\n\nglProgramState-\nsetUniformCallback(\nu_progress\n, [](GLProgram* glProgram, Uniform* uniform)\n  {\n      float random = CCRANDOM_0_1();\n      glProgram-\nsetUniformLocationWith1f(uniform-\nlocation, random);\n  }\n);\n\n\n\n\nAnd although it is possible to set \nGLProgramState\n objects manually, an easier\nway to do it is by using \nMaterial\n objects.\n\n\nWhat is a Material\n\n\nAssume that you want to draw a sphere like this one:\n\n\n\n\nThe first thing that you have to do is to define its geometry, something like this:\n\n\n\n\n...and then define the brick texture, like:\n\n\n\n\n\n\nBut what if you want to use a lower quality texture when the sphere is far away\nfrom the camera?\n\n\nor what if you want to apply a blur effect to the bricks?\n\n\nor what if you want to enable or disable lighting in the sphere ?\n\n\n\n\nThe answer is to use a \nMaterial\n instead of just a plain and simple texture. In fact,\nwith \nMaterial\n you can have more than one texture, and much more features like multi-pass rendering.\n\n\nMaterial\n objects are created from \n.material\n files, which contain the following information:\n\n\n\n\nMaterial\n can have one or more \nTechnique\n objects\n\n\neach \nTechnique\n can have one more \nPass\n objects\n\n\neach \nPass\n object has:\n\n\na \nRenderState\n object,\n\n\na \nShader\n object including the uniforms\n\n\n\n\nAs an example, this is how a material file looks like:\n\n\n// A \nMaterial\n file can contain one or more materials\nmaterial spaceship\n{\n    // A Material contains one or more Techniques.\n    // In case more than one Technique is present, the first one will be the default one\n    // A \nTechnique\n describes how the material is going to be renderer\n    // Techniques could:\n    //  - define the render quality of the model: high quality, low quality, etc.\n    //  - lit or unlit an object\n    // etc...\n    technique normal\n    {\n        // A technique can contain one or more passes\n        // A \nPass\n describes the \ndraws\n that will be needed\n        //   in order to achieve the desired technique\n        // The 3 properties of the Passes are shader, renderState and sampler\n        pass 0\n        {\n            // shader: responsible for the vertex and frag shaders, and its uniforms\n            shader\n            {\n                vertexShader = Shaders3D/3d_position_tex.vert\n                fragmentShader = Shaders3D/3d_color_tex.frag\n\n                // uniforms, including samplers go here\n                u_color = 0.9,0.8,0.7\n                // sampler: the id is the uniform name\n                sampler u_sampler0\n                {\n                    path = Sprite3DTest/boss.png\n                    mipmap = true\n                    wrapS = CLAMP\n                    wrapT = CLAMP\n                    minFilter = NEAREST_MIPMAP_LINEAR\n                    magFilter = LINEAR\n                }\n            }\n            // renderState: responsible for depth buffer, cullface, stencil, blending, etc.\n            renderState\n            {\n                cullFace = true\n                cullFaceSide = FRONT\n                depthTest = true\n            }\n        }\n    }\n}\n\n\n\n\nAnd this is how to set a \nMaterial\n to a \nSprite3D\n:\n\n\nMaterial* material = Material::createWithFilename(\nMaterials/3d_effects.material\n);\nsprite3d-\nsetMaterial(material);\n\n\n\n\nAnd if you want to change between different \nTechnique\ns, you have to do:\n\n\nmaterial-\nsetTechnique(\nnormal\n);\n\n\n\n\nTechniques\n\n\nSince you can bind only one \nMaterial\n per \nSprite3D\n, an additional feature\nis supported that's designed to make it quick and easy to change the way you\nrender the parts at runtime. You can define multiple techniques by giving them\ndifferent names. Each one can have a completely different rendering technique,\nand you can even change the technique being applied at runtime by using\n\nMaterial::setTechnique(const std::string\n name)\n. When a material is loaded,\nall the techniques are loaded ahead too. This is a practical way of handling\ndifferent light combinations or having lower-quality rendering techniques, such\nas disabling bump mapping, when the object being rendered is far away from the\ncamera.\n\n\nPasses\n\n\nA \nTechnique\n can have one or more \npasses\n That is, multi-pass rendering.\nAnd each \nPass\n has two main objects:\n\n\n\n\nRenderState\n: contains the GPU state information, like \ndepthTest\n, \ncullFace\n,\n    \nstencilTest\n, etc.\n\n\nGLProgramState\n: contains the shader (\nGLProgram\n) that is going to be used, including\n    its uniforms.\n\n\n\n\nMaterial file format in detail\n\n\nMaterial uses a file format  optimized to create Material files.\nThis file format is very similar to other existing Material file formats, like\nGamePlay3D's and OGRE3D's.\n\n\nNotes\n:\n\n\n\n\nMaterial file extensions do not matter. Although it is recommended to use\n\n.material\n as extension\n\n\nid\n is optional for material, technique and pass\n\n\nMaterials can inherit values from another material by optionally setting a\n\nparent_material_id\n\n\nVertex and fragment shader file extensions do not matter. The convention in\nCocos2d-x is to use \n.vert\n and \nfrag\n\n\n\n\n// When the .material file contains one material\nsprite3D-\nsetMaterial(\nMaterials/box.material\n);\n// When the .material file contains multiple materials\nsprite3D-\nsetMaterial(\nMaterials/circle.material#wood\n);\n\n\n\n\n\n \n\n  \nmaterial\n \nmaterial_id\n : \nparent_material_id\n\n  \n\n  \n\n \n\n \n\n  \n{\n\n  \n\n  \n\n \n\n \n\n  \n\u00a0 renderState {}\n\n  \n[0..1]\n\n  \nblock\n\n \n\n \n\n  \n\u00a0 technique \nid \n{}\n\n  \n[0..*]\n\n  \nblock\n\n \n\n \n\n  \n}\n\n  \n\n  \n\n \n\n\n\n\n\n\n \n\n  \ntechnique\n \ntechnique_id\n\n  \n\n  \n\n \n\n \n\n  \n{\n\n  \n\n  \n\n \n\n \n\n  \n\u00a0 renderState {}\n\n  \n[0..1]\n\n  \nblock\n\n \n\n \n\n  \n\u00a0 pass \nid \n{}\n\n  \n[0..*]\n\n  \nblock\n\n \n\n \n\n  \n}\n\n  \n\n  \n\n \n\n\n\n\n\n\n \n\n  \npass \npass_id\n\n  \n\n  \n\n \n\n \n\n  \n{\n\n  \n\n  \n\n \n\n \n\n  \n\u00a0 renderState {}\n\n  \n[0..1]\n\n  \nblock\n\n \n\n \n\n  \n\u00a0 shader {}\n\n  \n[0..1]\n\n  \nblock\n\n \n\n \n\n  \n}\n\n  \n\n  \n\n \n\n\n\n\n\n\n \n\n  \nrenderState\n\n  \n\n  \n\n \n\n \n\n  \n{\n\n  \n\n  \n\n \n\n \n\n  \n\u00a0 blend = \nfalse\n\n  \n[0..1]\n\n  \nbool\n\n \n\n \n\n  \n\u00a0 blendSrc = \nBLEND_ENUM\n\n  \n[0..1]\n\n  \nenum\n\n \n\n \n\n  \n\u00a0 blendDst = \nBLEND_ENUM\n\n  \n[0..1]\n\n  \nenum\n\n \n\n \n\n  \n\u00a0 cullFace = \nfalse\n\n  \n[0..1]\n\n  \nbool\n\n \n\n \n\n  \n\u00a0 depthTest = \nfalse\n\n  \n[0..1]\n\n  \nbool\n\n \n\n \n\n  \n\u00a0 depthWrite = \nfalse\n\n  \n[0..1]\n\n  \nbool\n\n \n\n \n\n  \n}\n\n  \n\n  \n\n \n\n \n\n  \n frontFace = \nCW | CCW\n\n  \n[0..1]\n\n  \nenum\n\n \n\n \n\n  \n depthTest = \nfalse\n\n  \n[0..1]\n\n  \nbool\n\n \n\n \n\n  \n depthWrite = \nfalse\n\n  \n[0..1]\n\n  \nbool\n\n \n\n \n\n  \n depthFunc = \nFUNC_ENUM\n\n  \n[0..1]\n\n  \nenum\n\n  \n\n \n\n  \n stencilTest = \nfalse\n\n  \n[0..1]\n\n  \nbool\n\n \n\n \n\n  \n stencilWrite = \n4294967295\n\n  \n[0..1]\n\n  \nuint\n\n \n\n\n\n\n stencilFunc = \nFUNC_ENUM\n\n\n[0..1]\n\n\nenum\n\n\n\n\n\n\n stencilFuncRef = \n0\n\n\n[0..1]\n\n\nint\n\n\n\n\n\n\n stencilFuncMask = \n4294967295\n\n\n[0..1]\n\n\nuint\n\n\n\n\n\n\n stencilOpSfail = \nSTENCIL_OPERATION_ENUM\n\n\n[0..1]\n\n\nenum\n\n\n\n\n\n\n stencilOpDpfail = \nSTENCIL_OPERATION_ENUM\n \n\n\n[0..1]\n\n\nenum\n\n\n\n\n\n\n stencilOpDppass = \nSTENCIL_OPERATION_ENUM\n\n\n[0..1]\n\n\nenum\n\n\n\n\n\n\n\n\n \n\n  \nshader\nshader_id\n\n  \n\n  \n\n \n\n \n\n  \n{\n\n  \n\n  \n\n \n\n \n\n  \n\u00a0 vertexShader = \nres/colored.vert\n\n  \n[0..1]\n\n  \nfile path\n\n \n\n \n\n  \n\u00a0 fragmentShader = \nres/colored.frag\n\n  \n[0..1]\n\n  \nfile path\n\n \n\n \n\n  \n\u00a0 defines = \nsemicolon separated list\n\n  \n[0..1]\n\n  \nstring\n\n \n\n \n\n  \n\n  \n\n  \n\n \n\n \n\n  \n\u00a0 uniform_name \n=\n \nscalar\n | \nvector\n\n  \n[0..*]\n\n  \nuniform\n\n \n\n \n\n  \n\u00a0 \nuniform_name \n= \nAUTO_BIND_ENUM\n\n  \n[0..*]\n\n  \nenum\n\n \n\n \n\n  \n\u00a0 sampler \nuniform_name \n{}\n\n  \n[0..*]\n\n  \nblock\n\n \n\n \n\n  \n}\n\n  \n\n  \n\n \n\n\n\n\n\n\n \n\n  \nsampler\n \nuniform_name\n\n  \n\n  \n\n \n\n \n\n  \n{\n\n  \n\n  \n\n \n\n \n\n  \n\u00a0 path = \nres/wood.png | @wood\n\n  \n[0..1]\n\n  \nimage path\n\n \n\n \n\n  \n\u00a0 mipmap = \nbool\n\n  \n[0..1]\n\n  \nbool\n\n \n\n \n\n  \n\u00a0 wrapS = \nREPEAT | CLAMP\n\n  \n[0..1]\n\n  \nenum\n\n \n\n \n\n  \n\u00a0 wrapT = \nREPEAT | CLAMP\n\n  \n[0..1]\n\n  \nenum\n\n \n\n \n\n  \n\u00a0minFilter = \nTEXTURE_MIN_FILTER_ENUM\n\n  \n[0..1]\n\n  \nenum\n\n \n\n \n\n  \n\u00a0 magFilter = \nTEXTURE_MAG_FILTER_ENUM\n\n  \n[0..1]\n\n  \nenum\n\n \n\n \n\n  \n}\n\n  \n\n  \n\n \n\n\n\n\n\nEnums\n:\n\n\n\n \n\n  \nTEXTURE_MIN_FILTER_ENUM\n\n  \n\n \n\n \n\n  \nNEAREST\n\n  \nLowest quality non-mipmapped\n\n \n\n \n\n  \nLINEAR\n\n  \nBetter quality non-mipmapped\n\n \n\n \n\n  \nNEAREST_MIPMAP_NEAREST\n\n  \nFast but low quality mipmapping\n\n \n\n \n\n  \nLINEAR_MIPMAP_NEAREST\n\n  \n\n \n\n \n\n  \nNEAREST_MIPMAP_LINEAR\n\n  \n\n \n\n \n\n  \nLINEAR_MIPMAP_LINEAR\n\n  \nBest quality mipmapping\n\n \n\n\n\n\n\n\n \n\n  \nTEXTURE_MAG_FILTER_ENUM\n\n  \n\n \n\n \n\n  \nNEAREST\n\n  \nLowest quality\n\n \n\n \n\n  \nLINEAR\n\n  \nBetter quality\n\n \n\n\n\n\n\n\n \n\n  \nBLEND_ENUM\n\n  \n\n \n\n \n\n  \nZERO\n\n  \nONE_MINUS_DST_ALPHA\n\n \n\n \n\n  \nONE\n\n  \nCONSTANT_ALPHA\n\n \n\n \n\n  \nSRC_ALPHA\n\n  \nONE_MINUS_CONSTANT_ALPHA\n\n \n\n \n\n  \nONE_MINUS_SRC_ALPHA\n\n  \nSRC_ALPHA_SATURATE\n\n \n\n \n\n  \nDST_ALPHA\n\n  \n\n \n\n\n\n\n\n\n \n\n  \nCULL_FACE_SIDE_ENUM\n\n \n\n \n\n  \nBACK\n\n  \nCull back-facing polygons.\n\n \n\n \n\n  \nFRONT\n\n  \nCull front-facing polygons.\n\n \n\n \n\n  \nFRONT_AND_BACK\n\n  \nCull front and back-facing polygons.\n\n \n\n\n\n\n\n\n \n\n  \nFUNC_ENUM\n\n  \n\n \n\n \n\n  \nNEVER\n\n  \nALWAYS\n\n \n\n \n\n  \nLESS\n\n  \nGREATER\n\n \n\n \n\n  \nEQUAL\n\n  \nNOTEQUAL\n\n \n\n \n\n  \nLEQUAL\n\n  \nGEQUAL\n\n \n\n\n\n\n\n\n \n\n  \nSTENCIL_OPERATION_ENUM\n\n  \n\n \n\n \n\n  \nKEEP\n\n  \nREPLACE\n\n \n\n \n\n  \nZERO\n\n  \nINVERT\n\n \n\n \n\n  \nINCR\n\n  \nDECR\n\n \n\n \n\n  \nINCR_WRAP\n\n  \nDECR_WRAP\n\n \n\n\n\n\n\nTypes\n:\n\n\n\n \nscalar\n \nis\n     float, int or bool.\n\n \nvector\n \nis a comma separated list of floats.\n\n\n\n\n\nPredefined uniforms\n\n\nThe following are predefined uniforms used by Cocos2d-x that can be used in\nyour shaders:\n\n\n\n\nCC_PMatrix\n: A \nmat4\n with the projection matrix\n\n\nCC_MVMatrix\n: A \nmat4\n with the Model View matrix\n\n\nCC_MVPMatrix\n: A \nmat4\n with the Model View Projection matrix\n\n\nCC_NormalMatrix\n: A \nmat4\n with Normal Matrix\n\n\nCC_Time\n: a \nvec4\n with the elapsed time since the game was started\n\n\nCC_Time[0] = time / 10;\n\n\nCC_Time[1] = time;\n\n\nCC_Time[2] = time * 2;\n\n\nCC_Time[3] = time * 4;\n\n\nCC_SinTime\n: a \nvec4\n with the elapsed time since the game was started:\n\n\nCC_SinTime[0] = time / 8;\n\n\nCC_SinTime[1] = time / 4;\n\n\nCC_SinTime[2] = time / 2;\n\n\nCC_SinTime[3] = sinf(time);\n\n\nCC_CosTime\n: a \nvec4\n with the elapsed time since the game was started:\n\n\nCC_CosTime[0] = time / 8;\n\n\nCC_CosTime[1] = time / 4;\n\n\nCC_CosTime[2] = time / 2;\n\n\nCC_CosTime[3] = cosf(time);\n\n\nCC_Random01\n: A \nvec4\n with four random numbers between 0.0f and 1.0f\n\n\nCC_Texture0\n: A \nsampler2D\n\n\nCC_Texture1\n: A \nsampler2D\n\n\nCC_Texture2\n: A \nsampler2D\n\n\nCC_Texture3\n: A \nsampler2D\n\n\n\n\nHow to optimize the graphics performance of your Cocos2d-x games\n\n\nGolden rules\n\n\nKnow the bottlenecks and optimize the bottlenecks.\n\n\nWhen doing optimization, we should always stick to this rule. Only 20% code in your system contribute to the 80% performance issue.\n\n\nAlways use tools to profile the bottleneck, don't guess randomly.\n\n\nThere are many tools available now for profiling the graphics performance.\nThough we are optimize the performance of Android games, but XCode could also be helpful to debugging.\n\n\n\n\nXcode: https://github.com/rstrahl/rudistrahl.me/blob/master/entries/Debugging-OpenGL-ES-With-Xcode-Profile-Tools.md\nand the official document: https://developer.apple.com/library/ios/documentation/3DDrawing/Conceptual/OpenGLES_ProgrammingGuide/ToolsOverview/ToolsOverview.html\n\n\n\n\nThere are three major mobile GPU vendors nowadays and they provide decent graphics profiling tools:\n\n\n\n\nFor ARM Mali GPU: http://malideveloper.arm.com/resources/tools/mali-graphics-debugger/\n\n\nFor Imagination PowerVR GPU: https://community.imgtec.com/developers/powervr/tools/pvrtune/\n\n\nFor Qualcomm Adreno GPU: https://developer.qualcomm.com/software/adreno-gpu-profiler\n\n\n\n\nUse these tools when you suffer from graphics issues. \nBut not at the first beginning, usually the bottleneck resides on CPU.\n\n\nKnow your target device and your game engine\n\n\nKnow the CPU/GPU family of your target device  which is important when sometimes the performance issues\nonly occurs on certain kind of devices. And you will find they share the same kind of GPU(ARM or PowerVR or Mali).\n\n\nKnow the limitations of your currently used game engine is also important. If you know how your engine organize the graphics command,\nhow your engine do batch drawing. You could avoid many common pitfalls during coding.\n\n\nThe principle of \"Good enough\".\n\n\n(\u201cIf the viewer cannot tell the difference between differently rendered images always use the cheaper implementation\".)\nAs we know a PNG with RGBA444 pixel format has lower graphics quality than the one with RGBA888 pixel format.\nBut if we can't tell the difference between the two, we should stick to RGBA4444 pixel format.\nThe RGBA444 format use less memory and it will less likely to cause the memory issue and bandwidth issue.\n\n\nIt is the same goes for the audio sample rate.\n\n\nCommon Bottlenecks\n\n\nAs a rules of thumb, your game will suffer CPU bottlenecks easily than graphics bottlenecks.\n\n\nThe CPU is often limited by the number of draw calls and the heavy compute operations in your game loop\n\n\nTry to minimize the total draw calls of your game. We should use batch draw as much as possible.\nCocos2d-x 3.x has auto batch support, but it needs some effort to make it work.\n\n\nAlso try avoid IO operations when players are playing your game. Try to preload your spritesheets, audios, TTF fonts etc.\n\n\nAlso don't do heavy compute operations in your game loop which means don't let the heavy operations called 60 times per frame.\n\n\nNever!\n\n\nThe GPU is often limited by the overdraw(fillrate) and bandwidth.\n\n\nIf you are creating a 2D game and you don't write complex shaders, you might won't suffer GPU issues.\nBut the overdraw problem still has trouble and it will slow your graphics performance with too much bandwidth consumption.\n\n\nThough modern mobile GPU have TBDR(Tiled-based Defered Rendering) architecture, but only PowerVR's HSR(Hidden Surface Removal)\ncould reduce the overdraw problem significantly. Other GPU vendors only implement a TBDR + early-z testing, it only reduce the overdraw\nproblem when you submit your opaque geometry with the order(font to back). And Cocos2d-x always submit rendering commands ordered from back to front.\nBecause in 2D, we might have many transparency images and only in this order the blending effect is correct.\n\n\nNote: By using poly triangles, we could improve the fillrate.  Please refer to this article for more information:\nhttps://www.codeandweb.com/texturepacker/tutorials/cocos2d-x-performance-optimization\n\n\nBut don't worry too much of this issue, it doesn't perform too bad in practice.\n\n\nSimple checklist to make your Cocos2d-x game faster\n\n\n\n\nAlways use batch drawing. Package sprite images in the same layer into a large atlas(Texture packer could help).\n\n\nAs rule of thumb, try to keep your draw call below 50. In other words, try to minimize your draw call number.\n\n\nPrefer 16bit(RGBA4444+dithering) over raw 32bit(RGBA8888) textures.\n\n\nUse compressed textures: In iOS use PVRTC texture. In Android platform, use ETC1. but ETC1 doesn't has alpha,\nyou might need to write a custom shader and provide a separate ETC1 image for the alpha channel.\n\n\nDon't use system font as your game score counter. It's slow. Try to use TTF or BMFont, BMfont is better.\n\n\nTry to preload audio and other game objects before usage.\n\n\nUse armeabi-v7a to build Android native code and it will enable neon instructors which is very fast.\n\n\nBake the lighting rather than using the dynamic light.\n\n\nAvoid using complex pixel shaders.\n\n\nAvoid using \ndiscard\n and alpha test in your pixel shader, it will break the HSR(Hidden surface removal). Only use it when necessary.", 
            "title": "Advanced Topics"
        }, 
        {
            "location": "/programmers-guide/advanced_topics/index.html#advanced-topics", 
            "text": "Wow! You are on the last chapter. Good Job! By now you should feel comfortable\ncreating your games with Cocos2d-x. However, please realize there is no limit to\nwhat you can create. This chapter covers  advanced  concepts. Note that this\nchapter gets more technical in its content and format.", 
            "title": "Advanced Topics"
        }, 
        {
            "location": "/programmers-guide/advanced_topics/index.html#file-system-access", 
            "text": "Even though you can use functions in  stdio.h  to access files it can be\ninconvenient for a few reasons:  You need to invoke system specific API to get full path of a file.  Resources are packed into .apk file on Android after installing.\n* You want to load a resource (such as a picture) based on resolution automatically.  The  FileUtils  class has been created to resolve these issues.  FileUtils  is a\nhelper class to access files under the location of your  Resources  directory.\nThis includes reading data from a file and checking file existence.", 
            "title": "File System Access"
        }, 
        {
            "location": "/programmers-guide/advanced_topics/index.html#functions-to-read-file-content", 
            "text": "These functions will read different type of files and will return different data\ntypes:  \n  \n   function name \n   return type \n   support path type \n  \n  \n   getStringFromFile \n   std::string \n   relative path and absolute path \n  \n  \n   getDataFromFile \n   cocos2d::Data \n   relative path and absolute path \n  \n  \n   getFileDataFromZip \n   unsigned char* \n   absolute path \n  \n  \n   getValueMapFromFile \n   cocos2d::ValueMap \n   relative path and absolute path \n  \n  \n   getValueVectorFromFile \n   std::string \n   cocos2d::ValueVector", 
            "title": "Functions to read file content"
        }, 
        {
            "location": "/programmers-guide/advanced_topics/index.html#functions-to-manage-files-or-directories", 
            "text": "These functions will manage a file or a directory:  \n  \n   function name \n   support path type \n  \n  \n   isFileExist \n   relative path and absolute path \n  \n  \n   isDirectoryExist \n   relative path and absolute path \n  \n  \n   createDirectory \n   absolute path \n  \n  \n   removeDirectory \n   absolute path \n  \n  \n   removeFile \n   absolute path \n  \n  \n   renameFile \n   absolute path \n  \n  \n   getFileSize \n   relative path and absolute path", 
            "title": "Functions to manage files or directories"
        }, 
        {
            "location": "/programmers-guide/advanced_topics/index.html#networking-with-http", 
            "text": "Sometimes it might be helpful to obtain resources or data from another source.\nOne common way of doing this is by using an  HTTP  request.  HTTP networking has three steps:\n   1. Create an  HttpRequest \n   2. Create a  setResponseCallback()  callback function for replying to requests.\n   3. Send  HttpRequest  by  HttpClient  HttpRequest  can have four types:   POST ,  PUT ,  DELETE ,  UNKNOWN . Unless\nspecified the default type is  UNKNOWN . The  HTTPClient  object controls sending the request  and receiving the data on a  callback .  Working with an  HTTPRequest  is quite simple:  HttpRequest* request = new (std :: nothrow) HttpRequest();\nrequest- setUrl( http://just-make-this-request-failed.com );\nrequest- setRequestType(HttpRequest::Type::GET);\nrequest- setResponseCallback(CC_CALLBACK_2 (HttpClientTest::onHttpRequestCompleted, this));\n\nHttpClient::getInstance()- sendImmediate(request);\n\nrequest- release();  Notice that we specified a  setResponseCallback()  method for when a response is\nreceived. By doing this we can look at the data returned and use it how we might\nneed to. Again, this process is simple and we can do it with ease:  void HttpClientTest::onHttpRequestCompleted(HttpClient* sender, HttpResponse* response)\n{\n  if (!response)\n  {\n    return;\n  }\n\n  // Dump the data\n  std::vector char * buffer = response- getResponseData();\n\n  for (unsigned int i = 0; i  buffer-  size (); i ++)\n  {\n    log ( % c , (* buffer) [i]);\n  }\n}", 
            "title": "Networking with HTTP"
        }, 
        {
            "location": "/programmers-guide/advanced_topics/index.html#shaders-and-materials", 
            "text": "", 
            "title": "Shaders and Materials"
        }, 
        {
            "location": "/programmers-guide/advanced_topics/index.html#what-is-a-shader", 
            "text": "From wikipedia:  In the field of computer graphics, a shader is a computer program that is used\nto do shading: the production of appropriate levels of color within an image,\nor, in the modern era, also to produce special effects or do video post-processing.\nA definition in layman's terms might be given as \"a program that tells a computer\nhow to draw something in a specific and unique way\".  In other words, it is a piece of code that runs on the GPU (not CPU) to draw the\ndifferent Cocos2d-x Nodes.  Cocos2d-x uses the  OpenGL ES Shading Language v1.0 \nfor the shaders. But describing the GLSL language is outside the scope of this\ndocument. In order to learn more about the language, please refer to: OpenGL ES Shading Language v1.0 Spec .  In Cocos2d-x, all  Node  objects that are  renderable  use shaders. As an example Sprite  uses optimized shaders for 2d sprites,  Sprite3D  uses optimized shaders\nfor 3d objects, and so on.", 
            "title": "What is a Shader"
        }, 
        {
            "location": "/programmers-guide/advanced_topics/index.html#customizing-shaders", 
            "text": "Users can change the predefined shaders from any Cocos2d-x  Node  by calling:  sprite- setGLProgramState(programState);\nsprite3d- setGLProgramState(programState);  The  GLProgramState  object contains two important things:   A  GLProgram : Basically this is  the  shader. It contains a vertex and fragment shader.  And the  state , which basically are the uniforms of the shader.   In case you are not familiar with the term  uniform  and why it is needed, please\nrefer to the  OpenGL Shading Language Specification  Setting uniforms to a  GLProgramState  is as easy as this:  glProgramState- setUniformFloat( u_progress , 0.9);\nglProgramState- setUniformVec2( u_position , Vec2(x,y));\nglProgramState- setUniformMat4( u_transform , matrix);  You can even set callbacks as a uniform value:  glProgramState- setUniformCallback( u_progress , [](GLProgram* glProgram, Uniform* uniform)\n  {\n      float random = CCRANDOM_0_1();\n      glProgram- setUniformLocationWith1f(uniform- location, random);\n  }\n);  And although it is possible to set  GLProgramState  objects manually, an easier\nway to do it is by using  Material  objects.", 
            "title": "Customizing Shaders"
        }, 
        {
            "location": "/programmers-guide/advanced_topics/index.html#what-is-a-material", 
            "text": "Assume that you want to draw a sphere like this one:   The first thing that you have to do is to define its geometry, something like this:   ...and then define the brick texture, like:    But what if you want to use a lower quality texture when the sphere is far away\nfrom the camera?  or what if you want to apply a blur effect to the bricks?  or what if you want to enable or disable lighting in the sphere ?   The answer is to use a  Material  instead of just a plain and simple texture. In fact,\nwith  Material  you can have more than one texture, and much more features like multi-pass rendering.  Material  objects are created from  .material  files, which contain the following information:   Material  can have one or more  Technique  objects  each  Technique  can have one more  Pass  objects  each  Pass  object has:  a  RenderState  object,  a  Shader  object including the uniforms   As an example, this is how a material file looks like:  // A  Material  file can contain one or more materials\nmaterial spaceship\n{\n    // A Material contains one or more Techniques.\n    // In case more than one Technique is present, the first one will be the default one\n    // A  Technique  describes how the material is going to be renderer\n    // Techniques could:\n    //  - define the render quality of the model: high quality, low quality, etc.\n    //  - lit or unlit an object\n    // etc...\n    technique normal\n    {\n        // A technique can contain one or more passes\n        // A  Pass  describes the  draws  that will be needed\n        //   in order to achieve the desired technique\n        // The 3 properties of the Passes are shader, renderState and sampler\n        pass 0\n        {\n            // shader: responsible for the vertex and frag shaders, and its uniforms\n            shader\n            {\n                vertexShader = Shaders3D/3d_position_tex.vert\n                fragmentShader = Shaders3D/3d_color_tex.frag\n\n                // uniforms, including samplers go here\n                u_color = 0.9,0.8,0.7\n                // sampler: the id is the uniform name\n                sampler u_sampler0\n                {\n                    path = Sprite3DTest/boss.png\n                    mipmap = true\n                    wrapS = CLAMP\n                    wrapT = CLAMP\n                    minFilter = NEAREST_MIPMAP_LINEAR\n                    magFilter = LINEAR\n                }\n            }\n            // renderState: responsible for depth buffer, cullface, stencil, blending, etc.\n            renderState\n            {\n                cullFace = true\n                cullFaceSide = FRONT\n                depthTest = true\n            }\n        }\n    }\n}  And this is how to set a  Material  to a  Sprite3D :  Material* material = Material::createWithFilename( Materials/3d_effects.material );\nsprite3d- setMaterial(material);  And if you want to change between different  Technique s, you have to do:  material- setTechnique( normal );", 
            "title": "What is a Material"
        }, 
        {
            "location": "/programmers-guide/advanced_topics/index.html#techniques", 
            "text": "Since you can bind only one  Material  per  Sprite3D , an additional feature\nis supported that's designed to make it quick and easy to change the way you\nrender the parts at runtime. You can define multiple techniques by giving them\ndifferent names. Each one can have a completely different rendering technique,\nand you can even change the technique being applied at runtime by using Material::setTechnique(const std::string  name) . When a material is loaded,\nall the techniques are loaded ahead too. This is a practical way of handling\ndifferent light combinations or having lower-quality rendering techniques, such\nas disabling bump mapping, when the object being rendered is far away from the\ncamera.", 
            "title": "Techniques"
        }, 
        {
            "location": "/programmers-guide/advanced_topics/index.html#passes", 
            "text": "A  Technique  can have one or more  passes  That is, multi-pass rendering.\nAnd each  Pass  has two main objects:   RenderState : contains the GPU state information, like  depthTest ,  cullFace ,\n     stencilTest , etc.  GLProgramState : contains the shader ( GLProgram ) that is going to be used, including\n    its uniforms.", 
            "title": "Passes"
        }, 
        {
            "location": "/programmers-guide/advanced_topics/index.html#material-file-format-in-detail", 
            "text": "Material uses a file format  optimized to create Material files.\nThis file format is very similar to other existing Material file formats, like\nGamePlay3D's and OGRE3D's.  Notes :   Material file extensions do not matter. Although it is recommended to use .material  as extension  id  is optional for material, technique and pass  Materials can inherit values from another material by optionally setting a parent_material_id  Vertex and fragment shader file extensions do not matter. The convention in\nCocos2d-x is to use  .vert  and  frag   // When the .material file contains one material\nsprite3D- setMaterial( Materials/box.material );\n// When the .material file contains multiple materials\nsprite3D- setMaterial( Materials/circle.material#wood );  \n  \n   material   material_id  :  parent_material_id \n   \n   \n  \n  \n   { \n   \n   \n  \n  \n   \u00a0 renderState {} \n   [0..1] \n   block \n  \n  \n   \u00a0 technique  id  {} \n   [0..*] \n   block \n  \n  \n   } \n   \n   \n    \n  \n   technique   technique_id \n   \n   \n  \n  \n   { \n   \n   \n  \n  \n   \u00a0 renderState {} \n   [0..1] \n   block \n  \n  \n   \u00a0 pass  id  {} \n   [0..*] \n   block \n  \n  \n   } \n   \n   \n    \n  \n   pass  pass_id \n   \n   \n  \n  \n   { \n   \n   \n  \n  \n   \u00a0 renderState {} \n   [0..1] \n   block \n  \n  \n   \u00a0 shader {} \n   [0..1] \n   block \n  \n  \n   } \n   \n   \n    \n  \n   renderState \n   \n   \n  \n  \n   { \n   \n   \n  \n  \n   \u00a0 blend =  false \n   [0..1] \n   bool \n  \n  \n   \u00a0 blendSrc =  BLEND_ENUM \n   [0..1] \n   enum \n  \n  \n   \u00a0 blendDst =  BLEND_ENUM \n   [0..1] \n   enum \n  \n  \n   \u00a0 cullFace =  false \n   [0..1] \n   bool \n  \n  \n   \u00a0 depthTest =  false \n   [0..1] \n   bool \n  \n  \n   \u00a0 depthWrite =  false \n   [0..1] \n   bool \n  \n  \n   } \n   \n   \n  \n  \n    frontFace =  CW | CCW \n   [0..1] \n   enum \n  \n  \n    depthTest =  false \n   [0..1] \n   bool \n  \n  \n    depthWrite =  false \n   [0..1] \n   bool \n  \n  \n    depthFunc =  FUNC_ENUM \n   [0..1] \n   enum \n   \n  \n    stencilTest =  false \n   [0..1] \n   bool \n  \n  \n    stencilWrite =  4294967295 \n   [0..1] \n   uint \n     stencilFunc =  FUNC_ENUM  [0..1]  enum     stencilFuncRef =  0  [0..1]  int     stencilFuncMask =  4294967295  [0..1]  uint     stencilOpSfail =  STENCIL_OPERATION_ENUM  [0..1]  enum     stencilOpDpfail =  STENCIL_OPERATION_ENUM    [0..1]  enum     stencilOpDppass =  STENCIL_OPERATION_ENUM  [0..1]  enum    \n  \n   shader shader_id \n   \n   \n  \n  \n   { \n   \n   \n  \n  \n   \u00a0 vertexShader =  res/colored.vert \n   [0..1] \n   file path \n  \n  \n   \u00a0 fragmentShader =  res/colored.frag \n   [0..1] \n   file path \n  \n  \n   \u00a0 defines =  semicolon separated list \n   [0..1] \n   string \n  \n  \n   \n   \n   \n  \n  \n   \u00a0 uniform_name  =   scalar  |  vector \n   [0..*] \n   uniform \n  \n  \n   \u00a0  uniform_name  =  AUTO_BIND_ENUM \n   [0..*] \n   enum \n  \n  \n   \u00a0 sampler  uniform_name  {} \n   [0..*] \n   block \n  \n  \n   } \n   \n   \n    \n  \n   sampler   uniform_name \n   \n   \n  \n  \n   { \n   \n   \n  \n  \n   \u00a0 path =  res/wood.png | @wood \n   [0..1] \n   image path \n  \n  \n   \u00a0 mipmap =  bool \n   [0..1] \n   bool \n  \n  \n   \u00a0 wrapS =  REPEAT | CLAMP \n   [0..1] \n   enum \n  \n  \n   \u00a0 wrapT =  REPEAT | CLAMP \n   [0..1] \n   enum \n  \n  \n   \u00a0minFilter =  TEXTURE_MIN_FILTER_ENUM \n   [0..1] \n   enum \n  \n  \n   \u00a0 magFilter =  TEXTURE_MAG_FILTER_ENUM \n   [0..1] \n   enum \n  \n  \n   } \n   \n   \n    Enums :  \n  \n   TEXTURE_MIN_FILTER_ENUM \n   \n  \n  \n   NEAREST \n   Lowest quality non-mipmapped \n  \n  \n   LINEAR \n   Better quality non-mipmapped \n  \n  \n   NEAREST_MIPMAP_NEAREST \n   Fast but low quality mipmapping \n  \n  \n   LINEAR_MIPMAP_NEAREST \n   \n  \n  \n   NEAREST_MIPMAP_LINEAR \n   \n  \n  \n   LINEAR_MIPMAP_LINEAR \n   Best quality mipmapping \n    \n  \n   TEXTURE_MAG_FILTER_ENUM \n   \n  \n  \n   NEAREST \n   Lowest quality \n  \n  \n   LINEAR \n   Better quality \n    \n  \n   BLEND_ENUM \n   \n  \n  \n   ZERO \n   ONE_MINUS_DST_ALPHA \n  \n  \n   ONE \n   CONSTANT_ALPHA \n  \n  \n   SRC_ALPHA \n   ONE_MINUS_CONSTANT_ALPHA \n  \n  \n   ONE_MINUS_SRC_ALPHA \n   SRC_ALPHA_SATURATE \n  \n  \n   DST_ALPHA \n   \n    \n  \n   CULL_FACE_SIDE_ENUM \n  \n  \n   BACK \n   Cull back-facing polygons. \n  \n  \n   FRONT \n   Cull front-facing polygons. \n  \n  \n   FRONT_AND_BACK \n   Cull front and back-facing polygons. \n    \n  \n   FUNC_ENUM \n   \n  \n  \n   NEVER \n   ALWAYS \n  \n  \n   LESS \n   GREATER \n  \n  \n   EQUAL \n   NOTEQUAL \n  \n  \n   LEQUAL \n   GEQUAL \n    \n  \n   STENCIL_OPERATION_ENUM \n   \n  \n  \n   KEEP \n   REPLACE \n  \n  \n   ZERO \n   INVERT \n  \n  \n   INCR \n   DECR \n  \n  \n   INCR_WRAP \n   DECR_WRAP \n    Types :  \n  scalar   is\n     float, int or bool. \n  vector   is a comma separated list of floats.", 
            "title": "Material file format in detail"
        }, 
        {
            "location": "/programmers-guide/advanced_topics/index.html#predefined-uniforms", 
            "text": "The following are predefined uniforms used by Cocos2d-x that can be used in\nyour shaders:   CC_PMatrix : A  mat4  with the projection matrix  CC_MVMatrix : A  mat4  with the Model View matrix  CC_MVPMatrix : A  mat4  with the Model View Projection matrix  CC_NormalMatrix : A  mat4  with Normal Matrix  CC_Time : a  vec4  with the elapsed time since the game was started  CC_Time[0] = time / 10;  CC_Time[1] = time;  CC_Time[2] = time * 2;  CC_Time[3] = time * 4;  CC_SinTime : a  vec4  with the elapsed time since the game was started:  CC_SinTime[0] = time / 8;  CC_SinTime[1] = time / 4;  CC_SinTime[2] = time / 2;  CC_SinTime[3] = sinf(time);  CC_CosTime : a  vec4  with the elapsed time since the game was started:  CC_CosTime[0] = time / 8;  CC_CosTime[1] = time / 4;  CC_CosTime[2] = time / 2;  CC_CosTime[3] = cosf(time);  CC_Random01 : A  vec4  with four random numbers between 0.0f and 1.0f  CC_Texture0 : A  sampler2D  CC_Texture1 : A  sampler2D  CC_Texture2 : A  sampler2D  CC_Texture3 : A  sampler2D", 
            "title": "Predefined uniforms"
        }, 
        {
            "location": "/programmers-guide/advanced_topics/index.html#how-to-optimize-the-graphics-performance-of-your-cocos2d-x-games", 
            "text": "", 
            "title": "How to optimize the graphics performance of your Cocos2d-x games"
        }, 
        {
            "location": "/programmers-guide/advanced_topics/index.html#golden-rules", 
            "text": "", 
            "title": "Golden rules"
        }, 
        {
            "location": "/programmers-guide/advanced_topics/index.html#know-the-bottlenecks-and-optimize-the-bottlenecks", 
            "text": "When doing optimization, we should always stick to this rule. Only 20% code in your system contribute to the 80% performance issue.", 
            "title": "Know the bottlenecks and optimize the bottlenecks."
        }, 
        {
            "location": "/programmers-guide/advanced_topics/index.html#always-use-tools-to-profile-the-bottleneck-dont-guess-randomly", 
            "text": "There are many tools available now for profiling the graphics performance.\nThough we are optimize the performance of Android games, but XCode could also be helpful to debugging.   Xcode: https://github.com/rstrahl/rudistrahl.me/blob/master/entries/Debugging-OpenGL-ES-With-Xcode-Profile-Tools.md\nand the official document: https://developer.apple.com/library/ios/documentation/3DDrawing/Conceptual/OpenGLES_ProgrammingGuide/ToolsOverview/ToolsOverview.html   There are three major mobile GPU vendors nowadays and they provide decent graphics profiling tools:   For ARM Mali GPU: http://malideveloper.arm.com/resources/tools/mali-graphics-debugger/  For Imagination PowerVR GPU: https://community.imgtec.com/developers/powervr/tools/pvrtune/  For Qualcomm Adreno GPU: https://developer.qualcomm.com/software/adreno-gpu-profiler   Use these tools when you suffer from graphics issues.  But not at the first beginning, usually the bottleneck resides on CPU.", 
            "title": "Always use tools to profile the bottleneck, don't guess randomly."
        }, 
        {
            "location": "/programmers-guide/advanced_topics/index.html#know-your-target-device-and-your-game-engine", 
            "text": "Know the CPU/GPU family of your target device  which is important when sometimes the performance issues\nonly occurs on certain kind of devices. And you will find they share the same kind of GPU(ARM or PowerVR or Mali).  Know the limitations of your currently used game engine is also important. If you know how your engine organize the graphics command,\nhow your engine do batch drawing. You could avoid many common pitfalls during coding.", 
            "title": "Know your target device and your game engine"
        }, 
        {
            "location": "/programmers-guide/advanced_topics/index.html#the-principle-of-good-enough", 
            "text": "(\u201cIf the viewer cannot tell the difference between differently rendered images always use the cheaper implementation\".)\nAs we know a PNG with RGBA444 pixel format has lower graphics quality than the one with RGBA888 pixel format.\nBut if we can't tell the difference between the two, we should stick to RGBA4444 pixel format.\nThe RGBA444 format use less memory and it will less likely to cause the memory issue and bandwidth issue.  It is the same goes for the audio sample rate.", 
            "title": "The principle of \"Good enough\"."
        }, 
        {
            "location": "/programmers-guide/advanced_topics/index.html#common-bottlenecks", 
            "text": "As a rules of thumb, your game will suffer CPU bottlenecks easily than graphics bottlenecks.", 
            "title": "Common Bottlenecks"
        }, 
        {
            "location": "/programmers-guide/advanced_topics/index.html#the-cpu-is-often-limited-by-the-number-of-draw-calls-and-the-heavy-compute-operations-in-your-game-loop", 
            "text": "Try to minimize the total draw calls of your game. We should use batch draw as much as possible.\nCocos2d-x 3.x has auto batch support, but it needs some effort to make it work.  Also try avoid IO operations when players are playing your game. Try to preload your spritesheets, audios, TTF fonts etc.  Also don't do heavy compute operations in your game loop which means don't let the heavy operations called 60 times per frame.  Never!", 
            "title": "The CPU is often limited by the number of draw calls and the heavy compute operations in your game loop"
        }, 
        {
            "location": "/programmers-guide/advanced_topics/index.html#the-gpu-is-often-limited-by-the-overdrawfillrate-and-bandwidth", 
            "text": "If you are creating a 2D game and you don't write complex shaders, you might won't suffer GPU issues.\nBut the overdraw problem still has trouble and it will slow your graphics performance with too much bandwidth consumption.  Though modern mobile GPU have TBDR(Tiled-based Defered Rendering) architecture, but only PowerVR's HSR(Hidden Surface Removal)\ncould reduce the overdraw problem significantly. Other GPU vendors only implement a TBDR + early-z testing, it only reduce the overdraw\nproblem when you submit your opaque geometry with the order(font to back). And Cocos2d-x always submit rendering commands ordered from back to front.\nBecause in 2D, we might have many transparency images and only in this order the blending effect is correct.  Note: By using poly triangles, we could improve the fillrate.  Please refer to this article for more information:\nhttps://www.codeandweb.com/texturepacker/tutorials/cocos2d-x-performance-optimization  But don't worry too much of this issue, it doesn't perform too bad in practice.", 
            "title": "The GPU is often limited by the overdraw(fillrate) and bandwidth."
        }, 
        {
            "location": "/programmers-guide/advanced_topics/index.html#simple-checklist-to-make-your-cocos2d-x-game-faster", 
            "text": "Always use batch drawing. Package sprite images in the same layer into a large atlas(Texture packer could help).  As rule of thumb, try to keep your draw call below 50. In other words, try to minimize your draw call number.  Prefer 16bit(RGBA4444+dithering) over raw 32bit(RGBA8888) textures.  Use compressed textures: In iOS use PVRTC texture. In Android platform, use ETC1. but ETC1 doesn't has alpha,\nyou might need to write a custom shader and provide a separate ETC1 image for the alpha channel.  Don't use system font as your game score counter. It's slow. Try to use TTF or BMFont, BMfont is better.  Try to preload audio and other game objects before usage.  Use armeabi-v7a to build Android native code and it will enable neon instructors which is very fast.  Bake the lighting rather than using the dynamic light.  Avoid using complex pixel shaders.  Avoid using  discard  and alpha test in your pixel shader, it will break the HSR(Hidden surface removal). Only use it when necessary.", 
            "title": "Simple checklist to make your Cocos2d-x game faster"
        }, 
        {
            "location": "/editors_and_tools/cocosCLTool/index.html", 
            "text": "Cocos command-line tool\n\n\nWhat is the \ncocos\n command-line tool?\n\n\nCocos2d-x comes with a command-line tool called \ncocos\n. It is a cross-platform\ntool that allows you to create new Cocos2d-x applications as well as \nrun\n them\nand \ndeploy\n them. \ncocos\n works for all cocos2d-x supported platforms, which\ninclude: \nios\n, \nandroid\n, \nmac\n, \nlinux\n, \nwin32\n, \nwp8_1\n, \nwp10\n\nand \nweb\n. You don't need to use an IDE unless you want to. It has many options,\nso let's go through them grouped by function.\n\n\nSetting up \ncocos\n\n\nit is a good idea to run \n/setup.py\n to properly setup your\n\nPATH\n. Doing so ensures that you can run Cocos2d-x and its related tools. Example:\n\n\n# Option 1\n\n ./setup.py\n\n# Option 2\n\n python setup.py\n\n\n\n\nOn OS X, it is also a good idea to add a few lines to your \n~/.bash_profile\n to\nensure your character encoding is set to \nUTF-8\n. Example:\n\n\nexport LC_ALL=en_US.UTF-8\nexport LANG=en_US.UTF-8\n\n\n\n\nAfter adding these lines, it is necessary to run \nsource ~/.bash_profile\n or\nrestart your shell.\n\n\nTesting your path for \ncocos\n\n\nIt is necessary for \ncocos\n to be in your path or to specify the complete path\nto it when using it. An easy test:\n\n\n cocos -v\n\n\n\n\nIf you see output like \n1.2\n you are all set. If you see anything else you need\nto either add the location to your \nPATH\n.\n\n\nOn \nOS X\n run \nsource ~/.bash_profile\n after updating your \nPATH\n or\nspecify the full path to \n\\tools\\cocos2d-console\\bin\n.\n\n\nCreating a new project\n\n\nTo create a new project you use the \ncocos new\n command. The command is formatted\nas:\n\n\ncocos new \ngame name\n -p \npackage identifier\n -l \nlanguage\n -d \nlocation\n\n\n\n\n\nExamples:\n\n\ncocos new MyGame -p com.MyCompany.MyGame -l cpp -d ~/MyCompany\n\ncocos new MyGame -p com.MyCompany.MyGame -l lua -d ~/MyCompany\n\ncocos new MyGame -p com.MyCompany.MyGame -l js -d ~/MyCompany\n\n\n\n\nIn the above examples, a new project is created using the Cocos2d-x source code.\nIf you want to create a new project using the pre-built libraries you need to pass\nan additional flag of \n-t binary\n. Example:\n\n\ncocos new MyGame -p com.MyCompany.MyGame -l cpp -d ~/MyCompany -t binary\n\n\n\n\nIf you haven't generated the pre-built libraries, please see the section below on\ndoing so.\n\n\nYou can run \ncocos new --help\n to see even more options as well as platform\nspecific options.\n\n\nCompiling a project\n\n\nAs you make changes to your code it is necessary to compile it. We all know this\nhas to happen, let's go through it. The command is formatted as:\n\n\ncocos compile -s \npath to your project\n -p \nplatform\n -m \nmode\n -o \noutput directory\n\n\n\n\n\nExamples:\n\n\ncocos compile -s ~/MyCompany/MyGame -p ios -m release -o ~/MyCompany/MyGame/bin\n\ncocos compile -s ~/MyCompany/MyGame -p android -m release -o ~/MyCompany/MyGame/bin\n\ncocos compile -s c:\\MyCompany\\MyGame -p win32 -m release -o c:\\MyCompany\\MyGame\\bin\n\n\n\n\nThere is a lot going on here so let's go over the finer points. \n-p\n is the \nplatform\n\nyou are compiling for. \n-m\n is mode, \ndebug\n or \nrelease\n with the default\nbeing \ndebug\n if this parameter is not specified.\n\n\nAlso, it is important to know that the \n-s\n and \n-o\n parameters are optional as\nwell as long as you are already in your project's working directory. Taking the\nexample above if you are already in \n~/MyCompany/MyGame\n then the \ncocos compile\n\ncommand can be shortened:\n\n\ncocos compile . -p ios -m release\n\n\n\n\nYou can also specify an optional parameter \n-q\n for \nquiet\n. This lessens the\noutput that is outputted to the console. Taking an example from above:\n\n\ncocos compile -q -s ~/MyCompany/MyGame -p ios -m release -o ~/MyCompany/MyGame/bin\n\n\n\n\nAs \ncocos\n supports a lot of platforms there are also platform specific options\nwhich allow you to fine tune targeting specific SDK versions, signing code, lua\noptions as well as web specific options. You can run \ncocos compile --help\n to see\nall available options broken down by platform.\n\n\nAndroid compiling could require specifying an API level.\n\n\nIf you are compiling for Android, the \ncocos\n command is flexible and allows developers\nto compile using specific Android API versions. You may have \nAndroid-22\n installed on \nyour system (or any other version). You will want to add \n--ap android-api-version\n to \nthe end of the \ncocos\n command to specify. Example:\n\n\ncocos compile -p android --ap android-22\n\n\n\n\nYou can always check \nproject.properties\n to see what api-version is being targetted. For \nmore info, please read out \nRelease Notes\n.\n\n\nRunning a project\n\n\nOnce you have created a project you can run it right from the command-line. \ncocos\n\ntakes care of launching the environment you specify. The command is formatted as:\n\n\ncocos run -s \npath to your project\n -p \nplatform\n\n\n\n\n\nExamples:\n\n\ncocos run -s ~/MyCompany/MyGame -p ios\n\ncocos run -s ~/MyCompany/MyGame -p android\n\ncocos run -s c:\\MyCompany\\MyGame -p win32\n\n\n\n\nYou can also specify to run in \ndebug\n or \nrelease\n mode using the optional\n\n-m\n parameter. Excluding this parameter defaults to \ndebug\n.\n\n\ncocos run -s ~/MyCompany/MyGame -p ios -m release\n\n\n\n\nAs with the \ncocos compile\n command above, it is important to know that the\n\n-s\n and \n-o\n parameters are optional as well as long as you are already in your\nproject's working directory. Taking the example above if you are already in\n\n~/MyCompany/MyGame\n then the \ncocos run\n command can be shortened:\n\n\ncocos run . -p ios -m release\n\n\n\n\nWhen running for the \nweb\n there are additional parameters that allow you to\nspecify what web browser you want to run in. You can also specify ip address and\nport. This, again is done via command-line parameters. Examples, specifying\nGoogle Chrome:\n\n\ncocos run -s ~/MyCompany/MyGame -p web -b /Applications/Google\\ Chrome.app\n\ncocos run -s ~/MyCompany/MyGame -p web -b C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\n\ncocos run -s ~/MyCompany/MyGame -p web -b /usr/local/bin/chrome\n\n\n\n\nYou can run \ncocos run --help\n to see all available options broken down by platform.\n\n\nDeploy a project\n\n\nOnce you are ready to ship your game \ncocos\n provides an easy mechanism for\ndeploying it. Just like with the commands above you specify what want to do. The\ncommand is formatted as:\n\n\ncocos deploy -s \npath to your project\n -p \nplatform\n -m \nmode\n\n\n\n\n\nExamples:\n\n\ncocos deploy -s ~/MyCompany/MyGame -p ios -m release\n\ncocos deploy -s ~/MyCompany/MyGame -p android -m release\n\ncocos deploy -s c:\\MyCompany\\MyGame -p win32 -m release\n\n\n\n\nYou can also specify an optional parameter \n-q\n for \nquiet\n. This reduces the\noutput that is logged to the console. Taking an example from above:\n\n\ncocos deploy -q -s ~/MyCompany/MyGame -p ios -m release\n\n\n\n\nYou can run \ncocos deploy --help\n to see all available options broken down by\nplatform.\n\n\nCreating pre-built libraries to use instead of source code.\n\n\nCocos2d-x is available to use as both source code and pre-built libraries. Using\nthe source allows developers to see \nunder the hood\n what the engine is doing.\nUsing the source increases compilation time. To decrease compilation time, by a\ngreat deal, you can create \npre-built\n  (or \nstatic\n) libraries from the source. These are static\nlibraries you can add to your project to use Cocos2d-x. This is the same as saying: \"I won't touch the \nengine, just build on top if it\". Compiling the \npre-built\n\nlibraries with the \ncocos\n tool is easy. Examples:\n\n\n# remove the 'prebuilt' folder\n# without the -m flag, this builds for release mode\n# generates libraries for every platform\ncocos gen-templates\ncocos gen-libs -c\n\n# remove the 'prebuilt' folder\n# without the -m flag, this builds for release mode\n# generates libraries for just ios\ncocos gen-templates\ncocos gen-libs -c -p ios\n\n# remove the 'prebuilt' folder\n# without the -m flag, this builds for release mode\n# generates libraries for just ios and android\ncocos gen-templates\ncocos gen-libs -c -p ios -p android\n\n# remove the 'prebuilt' folder\n# with the -m flag, this builds for debug\n# generates libraries for just ios and android\ncocos gen-templates\ncocos gen-libs -c -p ios -m debug\n\n\n\n\nYou can run \ncocos gen-libs --help\n to see all available options broken down by platform.\n\n\nUsing the pre-built libraries in your projects.\n\n\nOnce you have built the pre-built libraries, you can tell \ncocos\n to use them when creating a \nnew project. You may have heard developers refer to using \nstatic libraries\n. This is exactly \nwhat you have created by running the \ncocos gen-libs\n command above. Doing this you have told the\ncompilation process that \nthese files don't need to be compiled again, just use them\n. Using \n\nstatic libraries\n will speed up your compilation time. To create a new project and have it use\n\nstatic libraries\n rather than the \nraw engine source\n you specify the \n-t binary\n flag to your \ncocos new ...\n\ncommand. Example:\n\n\ncocos new ProjectName -p projectname.com.name -l cpp -t binary\n\n\n\n\nInstalling additional plugins\n\n\nUsing the \nCocos Package Manager\n you can easily add additional functionality to your games,\nincluding \nVR\n and \nSDKBOX\n. There are a variety of commands to assist with this. Examples:\n\n\n# list available packages\ncocos package list\n\n# show all packages imported into your project\ncocos package info\n\n# update installed packages to the latest versions\ncocos package update\n\n\n\n\nYou can run \ncocos package --help\n to see all available options broken down by platform.\n\n\nInstalling VR\n\n\nVR\n is easily added to your project! Every \nVR\n project needs \nvrsdkbase\n, it takes care\nof setting up your project to use \nVR\n. It is easy to import:\n\n\n$ cocos package import -v -b vrsdkbase --anysdk\n\n\n\n\nIf you are using a supported \nVR SDK\n make sure to import it. Examples:\n\n\n# add the GearVR package\n$ cocos package import -v -b gearvr --anysdk\n\n# add the Deepoon VR package\n$ cocos package import -v -b deepoon --anysdk\n\n# add the Google VR package\n$ cocos package import -v -b gvr --anysdk\n\n# add the Oculus VR package\n$ cocos package import -v -b oculus --anysdk\n\n\n\n\nFor more information, please see our chapter on \nVR\n.\n\n\nInstalling SDKBOX plugins\n\n\nSDKBOX\n plugins can be installed using the \nCocos Package Manager\n. Example:\n\n\n# install a package, in this example, Facebook\ncocos package import facebook\n\n\n\n\nUnique command-line options\n\n\ncocos\n has a number of unique options you can use to help build your games. To see all of these options, please run \ncocos --help\n. Let's us talk about these optios.\n\n\n\n\n\n\n\n\nCommand\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nno-apk\n\n\ncompile without building an apk.\n\n\n\n\n\n\nluacompile\n\n\nEncrypt the lua scripts in your game. This is invoked once \ncocos compile\n is invoked with the \n-m release\n argument. Developers can invoke this manually for encrypting their scripts.\n\n\n\n\n\n\njscompile\n\n\nEncrypt the JavaScript scripts in your game. This is invoked once \ncocos compile\n is invoked with the \n-m release\n argument. Developers can invoke this manually for encrypting their scripts.\n\n\n\n\n\n\ngen-simulator\n\n\nThe simulator powers the  \npreview\n function in Cocos Creator.\n\n\n\n\n\n\ngen-templates\n\n\nis used for generating the binary templates you can use to get started on a project that uses the \npre-built libraries\n. Binary templates are required by Cocos Bundle package and also Cocos Creator.", 
            "title": "Command-line tool"
        }, 
        {
            "location": "/editors_and_tools/cocosCLTool/index.html#cocos-command-line-tool", 
            "text": "", 
            "title": "Cocos command-line tool"
        }, 
        {
            "location": "/editors_and_tools/cocosCLTool/index.html#what-is-the-cocos-command-line-tool", 
            "text": "Cocos2d-x comes with a command-line tool called  cocos . It is a cross-platform\ntool that allows you to create new Cocos2d-x applications as well as  run  them\nand  deploy  them.  cocos  works for all cocos2d-x supported platforms, which\ninclude:  ios ,  android ,  mac ,  linux ,  win32 ,  wp8_1 ,  wp10 \nand  web . You don't need to use an IDE unless you want to. It has many options,\nso let's go through them grouped by function.", 
            "title": "What is the cocos command-line tool?"
        }, 
        {
            "location": "/editors_and_tools/cocosCLTool/index.html#setting-up-cocos", 
            "text": "it is a good idea to run  /setup.py  to properly setup your PATH . Doing so ensures that you can run Cocos2d-x and its related tools. Example:  # Option 1  ./setup.py\n\n# Option 2  python setup.py  On OS X, it is also a good idea to add a few lines to your  ~/.bash_profile  to\nensure your character encoding is set to  UTF-8 . Example:  export LC_ALL=en_US.UTF-8\nexport LANG=en_US.UTF-8  After adding these lines, it is necessary to run  source ~/.bash_profile  or\nrestart your shell.", 
            "title": "Setting up cocos"
        }, 
        {
            "location": "/editors_and_tools/cocosCLTool/index.html#testing-your-path-for-cocos", 
            "text": "It is necessary for  cocos  to be in your path or to specify the complete path\nto it when using it. An easy test:   cocos -v  If you see output like  1.2  you are all set. If you see anything else you need\nto either add the location to your  PATH .  On  OS X  run  source ~/.bash_profile  after updating your  PATH  or\nspecify the full path to  \\tools\\cocos2d-console\\bin .", 
            "title": "Testing your path for cocos"
        }, 
        {
            "location": "/editors_and_tools/cocosCLTool/index.html#creating-a-new-project", 
            "text": "To create a new project you use the  cocos new  command. The command is formatted\nas:  cocos new  game name  -p  package identifier  -l  language  -d  location   Examples:  cocos new MyGame -p com.MyCompany.MyGame -l cpp -d ~/MyCompany\n\ncocos new MyGame -p com.MyCompany.MyGame -l lua -d ~/MyCompany\n\ncocos new MyGame -p com.MyCompany.MyGame -l js -d ~/MyCompany  In the above examples, a new project is created using the Cocos2d-x source code.\nIf you want to create a new project using the pre-built libraries you need to pass\nan additional flag of  -t binary . Example:  cocos new MyGame -p com.MyCompany.MyGame -l cpp -d ~/MyCompany -t binary  If you haven't generated the pre-built libraries, please see the section below on\ndoing so.  You can run  cocos new --help  to see even more options as well as platform\nspecific options.", 
            "title": "Creating a new project"
        }, 
        {
            "location": "/editors_and_tools/cocosCLTool/index.html#compiling-a-project", 
            "text": "As you make changes to your code it is necessary to compile it. We all know this\nhas to happen, let's go through it. The command is formatted as:  cocos compile -s  path to your project  -p  platform  -m  mode  -o  output directory   Examples:  cocos compile -s ~/MyCompany/MyGame -p ios -m release -o ~/MyCompany/MyGame/bin\n\ncocos compile -s ~/MyCompany/MyGame -p android -m release -o ~/MyCompany/MyGame/bin\n\ncocos compile -s c:\\MyCompany\\MyGame -p win32 -m release -o c:\\MyCompany\\MyGame\\bin  There is a lot going on here so let's go over the finer points.  -p  is the  platform \nyou are compiling for.  -m  is mode,  debug  or  release  with the default\nbeing  debug  if this parameter is not specified.  Also, it is important to know that the  -s  and  -o  parameters are optional as\nwell as long as you are already in your project's working directory. Taking the\nexample above if you are already in  ~/MyCompany/MyGame  then the  cocos compile \ncommand can be shortened:  cocos compile . -p ios -m release  You can also specify an optional parameter  -q  for  quiet . This lessens the\noutput that is outputted to the console. Taking an example from above:  cocos compile -q -s ~/MyCompany/MyGame -p ios -m release -o ~/MyCompany/MyGame/bin  As  cocos  supports a lot of platforms there are also platform specific options\nwhich allow you to fine tune targeting specific SDK versions, signing code, lua\noptions as well as web specific options. You can run  cocos compile --help  to see\nall available options broken down by platform.", 
            "title": "Compiling a project"
        }, 
        {
            "location": "/editors_and_tools/cocosCLTool/index.html#android-compiling-could-require-specifying-an-api-level", 
            "text": "If you are compiling for Android, the  cocos  command is flexible and allows developers\nto compile using specific Android API versions. You may have  Android-22  installed on \nyour system (or any other version). You will want to add  --ap android-api-version  to \nthe end of the  cocos  command to specify. Example:  cocos compile -p android --ap android-22  You can always check  project.properties  to see what api-version is being targetted. For \nmore info, please read out  Release Notes .", 
            "title": "Android compiling could require specifying an API level."
        }, 
        {
            "location": "/editors_and_tools/cocosCLTool/index.html#running-a-project", 
            "text": "Once you have created a project you can run it right from the command-line.  cocos \ntakes care of launching the environment you specify. The command is formatted as:  cocos run -s  path to your project  -p  platform   Examples:  cocos run -s ~/MyCompany/MyGame -p ios\n\ncocos run -s ~/MyCompany/MyGame -p android\n\ncocos run -s c:\\MyCompany\\MyGame -p win32  You can also specify to run in  debug  or  release  mode using the optional -m  parameter. Excluding this parameter defaults to  debug .  cocos run -s ~/MyCompany/MyGame -p ios -m release  As with the  cocos compile  command above, it is important to know that the -s  and  -o  parameters are optional as well as long as you are already in your\nproject's working directory. Taking the example above if you are already in ~/MyCompany/MyGame  then the  cocos run  command can be shortened:  cocos run . -p ios -m release  When running for the  web  there are additional parameters that allow you to\nspecify what web browser you want to run in. You can also specify ip address and\nport. This, again is done via command-line parameters. Examples, specifying\nGoogle Chrome:  cocos run -s ~/MyCompany/MyGame -p web -b /Applications/Google\\ Chrome.app\n\ncocos run -s ~/MyCompany/MyGame -p web -b C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\n\ncocos run -s ~/MyCompany/MyGame -p web -b /usr/local/bin/chrome  You can run  cocos run --help  to see all available options broken down by platform.", 
            "title": "Running a project"
        }, 
        {
            "location": "/editors_and_tools/cocosCLTool/index.html#deploy-a-project", 
            "text": "Once you are ready to ship your game  cocos  provides an easy mechanism for\ndeploying it. Just like with the commands above you specify what want to do. The\ncommand is formatted as:  cocos deploy -s  path to your project  -p  platform  -m  mode   Examples:  cocos deploy -s ~/MyCompany/MyGame -p ios -m release\n\ncocos deploy -s ~/MyCompany/MyGame -p android -m release\n\ncocos deploy -s c:\\MyCompany\\MyGame -p win32 -m release  You can also specify an optional parameter  -q  for  quiet . This reduces the\noutput that is logged to the console. Taking an example from above:  cocos deploy -q -s ~/MyCompany/MyGame -p ios -m release  You can run  cocos deploy --help  to see all available options broken down by\nplatform.", 
            "title": "Deploy a project"
        }, 
        {
            "location": "/editors_and_tools/cocosCLTool/index.html#creating-pre-built-libraries-to-use-instead-of-source-code", 
            "text": "Cocos2d-x is available to use as both source code and pre-built libraries. Using\nthe source allows developers to see  under the hood  what the engine is doing.\nUsing the source increases compilation time. To decrease compilation time, by a\ngreat deal, you can create  pre-built   (or  static ) libraries from the source. These are static\nlibraries you can add to your project to use Cocos2d-x. This is the same as saying: \"I won't touch the \nengine, just build on top if it\". Compiling the  pre-built \nlibraries with the  cocos  tool is easy. Examples:  # remove the 'prebuilt' folder\n# without the -m flag, this builds for release mode\n# generates libraries for every platform\ncocos gen-templates\ncocos gen-libs -c\n\n# remove the 'prebuilt' folder\n# without the -m flag, this builds for release mode\n# generates libraries for just ios\ncocos gen-templates\ncocos gen-libs -c -p ios\n\n# remove the 'prebuilt' folder\n# without the -m flag, this builds for release mode\n# generates libraries for just ios and android\ncocos gen-templates\ncocos gen-libs -c -p ios -p android\n\n# remove the 'prebuilt' folder\n# with the -m flag, this builds for debug\n# generates libraries for just ios and android\ncocos gen-templates\ncocos gen-libs -c -p ios -m debug  You can run  cocos gen-libs --help  to see all available options broken down by platform.", 
            "title": "Creating pre-built libraries to use instead of source code."
        }, 
        {
            "location": "/editors_and_tools/cocosCLTool/index.html#using-the-pre-built-libraries-in-your-projects", 
            "text": "Once you have built the pre-built libraries, you can tell  cocos  to use them when creating a \nnew project. You may have heard developers refer to using  static libraries . This is exactly \nwhat you have created by running the  cocos gen-libs  command above. Doing this you have told the\ncompilation process that  these files don't need to be compiled again, just use them . Using  static libraries  will speed up your compilation time. To create a new project and have it use static libraries  rather than the  raw engine source  you specify the  -t binary  flag to your  cocos new ... \ncommand. Example:  cocos new ProjectName -p projectname.com.name -l cpp -t binary", 
            "title": "Using the pre-built libraries in your projects."
        }, 
        {
            "location": "/editors_and_tools/cocosCLTool/index.html#installing-additional-plugins", 
            "text": "Using the  Cocos Package Manager  you can easily add additional functionality to your games,\nincluding  VR  and  SDKBOX . There are a variety of commands to assist with this. Examples:  # list available packages\ncocos package list\n\n# show all packages imported into your project\ncocos package info\n\n# update installed packages to the latest versions\ncocos package update  You can run  cocos package --help  to see all available options broken down by platform.", 
            "title": "Installing additional plugins"
        }, 
        {
            "location": "/editors_and_tools/cocosCLTool/index.html#installing-vr", 
            "text": "VR  is easily added to your project! Every  VR  project needs  vrsdkbase , it takes care\nof setting up your project to use  VR . It is easy to import:  $ cocos package import -v -b vrsdkbase --anysdk  If you are using a supported  VR SDK  make sure to import it. Examples:  # add the GearVR package\n$ cocos package import -v -b gearvr --anysdk\n\n# add the Deepoon VR package\n$ cocos package import -v -b deepoon --anysdk\n\n# add the Google VR package\n$ cocos package import -v -b gvr --anysdk\n\n# add the Oculus VR package\n$ cocos package import -v -b oculus --anysdk  For more information, please see our chapter on  VR .", 
            "title": "Installing VR"
        }, 
        {
            "location": "/editors_and_tools/cocosCLTool/index.html#installing-sdkbox-plugins", 
            "text": "SDKBOX  plugins can be installed using the  Cocos Package Manager . Example:  # install a package, in this example, Facebook\ncocos package import facebook", 
            "title": "Installing SDKBOX plugins"
        }, 
        {
            "location": "/editors_and_tools/cocosCLTool/index.html#unique-command-line-options", 
            "text": "cocos  has a number of unique options you can use to help build your games. To see all of these options, please run  cocos --help . Let's us talk about these optios.     Command  Description      no-apk  compile without building an apk.    luacompile  Encrypt the lua scripts in your game. This is invoked once  cocos compile  is invoked with the  -m release  argument. Developers can invoke this manually for encrypting their scripts.    jscompile  Encrypt the JavaScript scripts in your game. This is invoked once  cocos compile  is invoked with the  -m release  argument. Developers can invoke this manually for encrypting their scripts.    gen-simulator  The simulator powers the   preview  function in Cocos Creator.    gen-templates  is used for generating the binary templates you can use to get started on a project that uses the  pre-built libraries . Binary templates are required by Cocos Bundle package and also Cocos Creator.", 
            "title": "Unique command-line options"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html", 
            "text": "Cocos Creator\n\n\nCocos Creator, a free cross-platform game development editor supporting Cocos2d-js,\nhelps developers build 2D and 3D game scenes, edit game UI and other game resources\nquickly and efficiency.\n\n\nGetting Started\n\n\nGetting Started\n\n\nIntroduction\n\n\nInstall\n\n\nDashboard\n\n\nHello World\n\n\nQuick Start\n\n\nCocos2d-x Guide\n\n\nUnity Guide\n\n\nProject Structure\n\n\nSupport\n\n\nThe Basics\n\n\nGetting Started\n\n\nEditor Overview\n\n\nAssets\n\n\nScene\n\n\nHierarchy\n\n\nInspector\n\n\nConsole\n\n\nToolbar\n\n\nLayout\n\n\nAsset Workflow\n\n\nGetting Started\n\n\nScene Managing\n\n\nSprite\n\n\nAtlas\n\n\nFont\n\n\nParticle\n\n\nAudio Asset\n\n\nPrefab\n\n\nContent Workflow\n\n\nGetting Started\n\n\nNode Component\n\n\nTransform\n\n\nNode Tree\n\n\nScene Editing\n\n\nUI\n\n\nGetting Started\n\n\nSliced Sprite\n\n\nMulti-Resolution\n\n\nWidget Align\n\n\nLabel Layout\n\n\nUI Components\n\n\nAuto Layout\n\n\nList With Data\n\n\nAnimation\n\n\nGetting Started\n\n\nAnimation\n\n\nAnimation Clip\n\n\nAnimation Curve\n\n\nSprite Animation\n\n\nTime Curve\n\n\nAnimation Event\n\n\nScripting Animation\n\n\nComponents\n\n\nGetting Started\n\n\nSprite\n\n\nLabel\n\n\nAnimation\n\n\nCanvas\n\n\nWidget\n\n\nProgress\n\n\nButton\n\n\nMask\n\n\nScrollview\n\n\nScrollbar\n\n\nLayout\n\n\nScripting\n\n\nGetting Started\n\n\nUse Component\n\n\nProperties\n\n\nAccess Node Component\n\n\nLife Cycle Callbacks\n\n\nCreate Destroy\n\n\nEvents\n\n\nInternal Events\n\n\nActions\n\n\nAction List\n\n\nScheduler\n\n\nExecution Order\n\n\nNetwork\n\n\nPooling\n\n\nLoad Assets\n\n\nModular Script\n\n\nThird Party Module\n\n\nWeb Debug Scripts\n\n\nJavaScript Primer\n\n\nAttributes\n\n\nPublishing\n\n\nGetting Started\n\n\nPublish --\n Web\n\n\nCocos Framework\n\n\nPublish --\n Native\n\n\nAdvanced Topics\n\n\nGetting Started\n\n\nBuild To Lua", 
            "title": "Cocos Creator"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#cocos-creator", 
            "text": "Cocos Creator, a free cross-platform game development editor supporting Cocos2d-js,\nhelps developers build 2D and 3D game scenes, edit game UI and other game resources\nquickly and efficiency.", 
            "title": "Cocos Creator"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#getting-started", 
            "text": "", 
            "title": "Getting Started"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#getting-started_1", 
            "text": "", 
            "title": "&emsp;&emsp;Getting Started"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#introduction", 
            "text": "", 
            "title": "&emsp;&emsp;Introduction"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#install", 
            "text": "", 
            "title": "&emsp;&emsp;Install"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#dashboard", 
            "text": "", 
            "title": "&emsp;&emsp;Dashboard"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#hello-world", 
            "text": "", 
            "title": "&emsp;&emsp;Hello World"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#quick-start", 
            "text": "", 
            "title": "&emsp;&emsp;Quick Start"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#cocos2d-x-guide", 
            "text": "", 
            "title": "&emsp;&emsp;Cocos2d-x Guide"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#unity-guide", 
            "text": "", 
            "title": "&emsp;&emsp;Unity Guide"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#project-structure", 
            "text": "", 
            "title": "&emsp;&emsp;Project Structure"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#support", 
            "text": "", 
            "title": "&emsp;&emsp;Support"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#the-basics", 
            "text": "", 
            "title": "The Basics"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#getting-started_2", 
            "text": "", 
            "title": "&emsp;&emsp;Getting Started"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#editor-overview", 
            "text": "", 
            "title": "&emsp;&emsp;Editor Overview"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#assets", 
            "text": "", 
            "title": "&emsp;&emsp;Assets"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#scene", 
            "text": "", 
            "title": "&emsp;&emsp;Scene"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#hierarchy", 
            "text": "", 
            "title": "&emsp;&emsp;Hierarchy"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#inspector", 
            "text": "", 
            "title": "&emsp;&emsp;Inspector"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#console", 
            "text": "", 
            "title": "&emsp;&emsp;Console"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#toolbar", 
            "text": "", 
            "title": "&emsp;&emsp;Toolbar"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#layout", 
            "text": "", 
            "title": "&emsp;&emsp;Layout"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#asset-workflow", 
            "text": "", 
            "title": "Asset Workflow"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#getting-started_3", 
            "text": "", 
            "title": "&emsp;&emsp;Getting Started"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#scene-managing", 
            "text": "", 
            "title": "&emsp;&emsp;Scene Managing"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#sprite", 
            "text": "", 
            "title": "&emsp;&emsp;Sprite"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#atlas", 
            "text": "", 
            "title": "&emsp;&emsp;Atlas"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#font", 
            "text": "", 
            "title": "&emsp;&emsp;Font"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#particle", 
            "text": "", 
            "title": "&emsp;&emsp;Particle"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#audio-asset", 
            "text": "", 
            "title": "&emsp;&emsp;Audio Asset"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#prefab", 
            "text": "", 
            "title": "&emsp;&emsp;Prefab"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#content-workflow", 
            "text": "", 
            "title": "Content Workflow"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#getting-started_4", 
            "text": "", 
            "title": "&emsp;&emsp;Getting Started"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#node-component", 
            "text": "", 
            "title": "&emsp;&emsp;Node Component"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#transform", 
            "text": "", 
            "title": "&emsp;&emsp;Transform"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#node-tree", 
            "text": "", 
            "title": "&emsp;&emsp;Node Tree"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#scene-editing", 
            "text": "", 
            "title": "&emsp;&emsp;Scene Editing"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#ui", 
            "text": "", 
            "title": "UI"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#getting-started_5", 
            "text": "", 
            "title": "&emsp;&emsp;Getting Started"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#sliced-sprite", 
            "text": "", 
            "title": "&emsp;&emsp;Sliced Sprite"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#multi-resolution", 
            "text": "", 
            "title": "&emsp;&emsp;Multi-Resolution"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#widget-align", 
            "text": "", 
            "title": "&emsp;&emsp;Widget Align"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#label-layout", 
            "text": "", 
            "title": "&emsp;&emsp;Label Layout"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#ui-components", 
            "text": "", 
            "title": "&emsp;&emsp;UI Components"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#auto-layout", 
            "text": "", 
            "title": "&emsp;&emsp;Auto Layout"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#list-with-data", 
            "text": "", 
            "title": "&emsp;&emsp;List With Data"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#animation", 
            "text": "", 
            "title": "Animation"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#getting-started_6", 
            "text": "", 
            "title": "&emsp;&emsp;Getting Started"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#animation_1", 
            "text": "", 
            "title": "&emsp;&emsp;Animation"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#animation-clip", 
            "text": "", 
            "title": "&emsp;&emsp;Animation Clip"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#animation-curve", 
            "text": "", 
            "title": "&emsp;&emsp;Animation Curve"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#sprite-animation", 
            "text": "", 
            "title": "&emsp;&emsp;Sprite Animation"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#time-curve", 
            "text": "", 
            "title": "&emsp;&emsp;Time Curve"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#animation-event", 
            "text": "", 
            "title": "&emsp;&emsp;Animation Event"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#scripting-animation", 
            "text": "", 
            "title": "&emsp;&emsp;Scripting Animation"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#components", 
            "text": "", 
            "title": "Components"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#getting-started_7", 
            "text": "", 
            "title": "&emsp;&emsp;Getting Started"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#sprite_1", 
            "text": "", 
            "title": "&emsp;&emsp;Sprite"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#label", 
            "text": "", 
            "title": "&emsp;&emsp;Label"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#animation_2", 
            "text": "", 
            "title": "&emsp;&emsp;Animation"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#canvas", 
            "text": "", 
            "title": "&emsp;&emsp;Canvas"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#widget", 
            "text": "", 
            "title": "&emsp;&emsp;Widget"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#progress", 
            "text": "", 
            "title": "&emsp;&emsp;Progress"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#button", 
            "text": "", 
            "title": "&emsp;&emsp;Button"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#mask", 
            "text": "", 
            "title": "&emsp;&emsp;Mask"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#scrollview", 
            "text": "", 
            "title": "&emsp;&emsp;Scrollview"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#scrollbar", 
            "text": "", 
            "title": "&emsp;&emsp;Scrollbar"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#layout_1", 
            "text": "", 
            "title": "&emsp;&emsp;Layout"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#scripting", 
            "text": "", 
            "title": "Scripting"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#getting-started_8", 
            "text": "", 
            "title": "&emsp;&emsp;Getting Started"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#use-component", 
            "text": "", 
            "title": "&emsp;&emsp;Use Component"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#properties", 
            "text": "", 
            "title": "&emsp;&emsp;Properties"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#access-node-component", 
            "text": "", 
            "title": "&emsp;&emsp;Access Node Component"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#life-cycle-callbacks", 
            "text": "", 
            "title": "&emsp;&emsp;Life Cycle Callbacks"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#create-destroy", 
            "text": "", 
            "title": "&emsp;&emsp;Create Destroy"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#events", 
            "text": "", 
            "title": "&emsp;&emsp;Events"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#internal-events", 
            "text": "", 
            "title": "&emsp;&emsp;Internal Events"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#actions", 
            "text": "", 
            "title": "&emsp;&emsp;Actions"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#action-list", 
            "text": "", 
            "title": "&emsp;&emsp;Action List"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#scheduler", 
            "text": "", 
            "title": "&emsp;&emsp;Scheduler"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#execution-order", 
            "text": "", 
            "title": "&emsp;&emsp;Execution Order"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#network", 
            "text": "", 
            "title": "&emsp;&emsp;Network"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#pooling", 
            "text": "", 
            "title": "&emsp;&emsp;Pooling"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#load-assets", 
            "text": "", 
            "title": "&emsp;&emsp;Load Assets"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#modular-script", 
            "text": "", 
            "title": "&emsp;&emsp;Modular Script"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#third-party-module", 
            "text": "", 
            "title": "&emsp;&emsp;Third Party Module"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#web-debug-scripts", 
            "text": "", 
            "title": "&emsp;&emsp;Web Debug Scripts"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#javascript-primer", 
            "text": "", 
            "title": "&emsp;&emsp;JavaScript Primer"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#attributes", 
            "text": "", 
            "title": "&emsp;&emsp;Attributes"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#publishing", 
            "text": "", 
            "title": "Publishing"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#getting-started_9", 
            "text": "", 
            "title": "&emsp;&emsp;Getting Started"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#publish-web", 
            "text": "", 
            "title": "&emsp;&emsp;Publish --&gt; Web"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#cocos-framework", 
            "text": "", 
            "title": "&emsp;&emsp;Cocos Framework"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#publish-native", 
            "text": "", 
            "title": "&emsp;&emsp;Publish --&gt; Native"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#advanced-topics", 
            "text": "", 
            "title": "Advanced Topics"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#getting-started_10", 
            "text": "", 
            "title": "&emsp;&emsp;Getting Started"
        }, 
        {
            "location": "/editors_and_tools/creator/index.html#build-to-lua", 
            "text": "", 
            "title": "&emsp;&emsp;Build To Lua"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/index.html", 
            "text": "Cocos Creator User Manual\n\n\nWelcome to the Cocos Creator User Manual! This User Manual provides detailed instructions, workflows for users with different roles and a step-by-step guide for beginners, which can help you learn how to use Cocos Creator to develop cross-platform games quickly.\n\n\nGeneral Introduction\n\n\n\n\nBasics\n\n\nAsset Workflow\n\n\nContent Workflow\n\n\nScripting\n\n\nAnimation\n\n\nUI\n\n\nComponents\n\n\nPublishing\n\n\nExtensions", 
            "title": "_Getting Started"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/index.html#cocos-creator-user-manual", 
            "text": "Welcome to the Cocos Creator User Manual! This User Manual provides detailed instructions, workflows for users with different roles and a step-by-step guide for beginners, which can help you learn how to use Cocos Creator to develop cross-platform games quickly.", 
            "title": "Cocos Creator User Manual"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/index.html#general-introduction", 
            "text": "Basics  Asset Workflow  Content Workflow  Scripting  Animation  UI  Components  Publishing  Extensions", 
            "title": "General Introduction"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/introduction/index.html", 
            "text": "About Cocos Creator\n\n\n\n\nQ\n: Is Cocos Creator a game engine?\n\n\n\n\nA\n: It's a complete game development solution, which includes the JavaScript realization of Cocos2d-x(no need to learn a new engine), and various kinds of graph interface tools that can help you develop games more quickly.\n\n\n\n\n\n\nQ\n: What kind of editor does Cocos Creator have?\n\n\n\n\n\n\nA\n: It's completely customized for the engine. It's an all-in-one editor that can serve the whole workflow from design, development, preview, adjustment to release.\n\n\n\n\n\n\nQ\n: Can I use Cocos Creator even if I don't know how to write a program?\n\n\n\n\n\n\nA\n: Of course! Cocos Creator editor provides two kinds of workflows: one design-oriented and one develop-oriented, and a simple and smooth cooperative method(with an appropriate division of labor).\n\n\n\n\n\n\nQ\n: Which platform can the games developed by Cocos Creator support?\n\n\n\n\nA\n: Currently, Cocos Creator can release games on Web, Android, iOS, and the click\nplay Cocos Play smartphone web-based game platform with original functions. It can truly achieve the goal of one development for all platforms.\n\n\n\n\nProduct positioning\n\n\nCocos Creator is a game development tool focused on content creation, which has realized features like thorough scriptability, componentization and data driven, etc. on the basis of Cocos2d-x.\n\n\nFramework features\n\n\nCocos Creator contains a whole set of functions needed for game development like a game engine, resource management, scene editing, game preview and release, etc. It has assembled all the functions and tool in a unified application program.\n\n\nIt makes data driven and componentization the core game development methods, and seamlessly integrates the mature JavaScript API system of the Cocos engine. It can adapt to the user habits of the Cocos engine developer on one hand, and provide an unprecedented level of content creation and realtime preview\ntest environment for artworkers and directors on the other.\n\n\nThe editor provides not only strong and complete toolchains, but also an open plugin framework. Developers can use generic front end technologies like Html + JavaScript, etc. to conveniently extend functions of the editor and customize personalized workflows.\n\n\n\n\nWhat the combination of engine and editor brings is the functional development method of data driven and componentization, and the perfect cooperation (with an appropriate division of labor) of designers and programmers:\n\n\n\n\nDesigners build the image performance of scenes in scene editor\n\n\nProgrammers develop functional components that can be mounted to any object in the scene\n\n\nDesigners are responsible for mounting components to objects that need to perform a particular action and improving each parameter by adjustment\n\n\nProgrammers develop the data structure and resources needed for the game\n\n\nDesigners set up all the data and resources using the graphic interface\n\n\n(In this way, from the simple to the complex, all the workflows that you can imagine can be realized)\n\n\n\n\nThe development idea that focused on workflows can help developers of different duties quickly find the breakthrough point to maximize their function at work and smoothly cooperate with other group members.\n\n\nWorkflow introduction\n\n\nIn the development phase, Cocos Creator has already been able to greatly improve efficiency and creativity for users. But the workflows we provided are not limited to a development level. For a successful game, not only the whole set of workflows that form development and adjustment, the assembly of commercialized SDK, multi-platform release, test to going online can't lose a part, but also these workflows need iterations of lots of times.\n\n\n\n\nCocos Creator integrates the whole set of smartphone web-based games of Cocos Play into editor tools, so there is no need to switch between various softwares. Just open the Cocos Creator editor, various one-click automatic flows can solve all the above problems with the least time and energy. Therefore developers can focus on the development phase, and improve the competitiveness and creativity of products!\n\n\nFunctional features\n\n\nThe essential functional features of Cocos Creator include:\n\n\n\n\nData properties that can be adjusted in the editor at anytime can be easily declared in the script. The adjustments to parameters can be independently finished by designers.\n\n\nA UI system that supports smart canvas adaptation and spares the alignment of coding elements can perfectly adapt to device screens of any resolution.\n\n\nAnimation system that is specially made for 2D games supports animation trajectory preview and editing of complicated curves.\n\n\nScriptable development supported by a dynamic language makes dynamic adjustment and the remote adjustment of mobile devices amazingly easy.\n\n\nBy using the Cocos2d-x engine, when enjoying the convenience of scriptable development, you can also release games on various desktop platforms and mobile terminal platforms with one-click, with their superb features on the original level preserved.\n\n\nComponentization of script and open plugin system provides developers with methods of customizing workflows at different depths. The editor can be adjusted on a large scale to adapt to the needs of different groups and projects.\n\n\n\n\nUsage instructions\n\n\nCocos Creator is an applicable program that supports cross-platform operation between Windows and Mac, which can be started with one double click. Comparing to traditional Cocos2d-x workflows, it completely spares the requirements of setting up a development environment. After running, developers can immediately start game content creation or functional development.\n\n\nOn the basis of data driven workflows, the creation and editing of the scene has become the core of game development. The design work and functional development can be done synchronously and cooperated seamlessly. Regardless if your teammates are artworkers, directors or programmers, they can all click the Preview button at anytime in the production process to test the latest form of the game in browsers, mobile device simulators or mobile devices.\n\n\nProgrammers and designers now can realize various kinds of cooperative methods. No matter building the scene before adding functions or creating functional modules to let designers assemble and adjust them, Cocos Creator can always meet the needs of the development group. Features defined in the script can present themselves in the editor with the most suitable visual effects, which provides convenience for content creators.\n\n\nContent resources outside the scene can be imported in, such as: photo, sound, altas, skeleton animation, etc. Moreover, we are continuously improving the editor's ability of creating resources, which include the currently finished animation editor. Designers can use this tool to make very exquisite and vivid animation resources, and preview the animation in the scene at anytime.\n\n\nIn the end, the finished game can be released on various platforms by using the on-click in the graph tool. From design and development to test and release, Cocos Creator can handle them all for you.\n\n\n\n\nContinue on to read about \nInstallation\n.", 
            "title": "_Introduction"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/introduction/index.html#about-cocos-creator", 
            "text": "Q : Is Cocos Creator a game engine?   A : It's a complete game development solution, which includes the JavaScript realization of Cocos2d-x(no need to learn a new engine), and various kinds of graph interface tools that can help you develop games more quickly.    Q : What kind of editor does Cocos Creator have?    A : It's completely customized for the engine. It's an all-in-one editor that can serve the whole workflow from design, development, preview, adjustment to release.    Q : Can I use Cocos Creator even if I don't know how to write a program?    A : Of course! Cocos Creator editor provides two kinds of workflows: one design-oriented and one develop-oriented, and a simple and smooth cooperative method(with an appropriate division of labor).    Q : Which platform can the games developed by Cocos Creator support?   A : Currently, Cocos Creator can release games on Web, Android, iOS, and the click play Cocos Play smartphone web-based game platform with original functions. It can truly achieve the goal of one development for all platforms.", 
            "title": "About Cocos Creator"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/introduction/index.html#product-positioning", 
            "text": "Cocos Creator is a game development tool focused on content creation, which has realized features like thorough scriptability, componentization and data driven, etc. on the basis of Cocos2d-x.", 
            "title": "Product positioning"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/introduction/index.html#framework-features", 
            "text": "Cocos Creator contains a whole set of functions needed for game development like a game engine, resource management, scene editing, game preview and release, etc. It has assembled all the functions and tool in a unified application program.  It makes data driven and componentization the core game development methods, and seamlessly integrates the mature JavaScript API system of the Cocos engine. It can adapt to the user habits of the Cocos engine developer on one hand, and provide an unprecedented level of content creation and realtime preview test environment for artworkers and directors on the other.  The editor provides not only strong and complete toolchains, but also an open plugin framework. Developers can use generic front end technologies like Html + JavaScript, etc. to conveniently extend functions of the editor and customize personalized workflows.   What the combination of engine and editor brings is the functional development method of data driven and componentization, and the perfect cooperation (with an appropriate division of labor) of designers and programmers:   Designers build the image performance of scenes in scene editor  Programmers develop functional components that can be mounted to any object in the scene  Designers are responsible for mounting components to objects that need to perform a particular action and improving each parameter by adjustment  Programmers develop the data structure and resources needed for the game  Designers set up all the data and resources using the graphic interface  (In this way, from the simple to the complex, all the workflows that you can imagine can be realized)   The development idea that focused on workflows can help developers of different duties quickly find the breakthrough point to maximize their function at work and smoothly cooperate with other group members.", 
            "title": "Framework features"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/introduction/index.html#workflow-introduction", 
            "text": "In the development phase, Cocos Creator has already been able to greatly improve efficiency and creativity for users. But the workflows we provided are not limited to a development level. For a successful game, not only the whole set of workflows that form development and adjustment, the assembly of commercialized SDK, multi-platform release, test to going online can't lose a part, but also these workflows need iterations of lots of times.   Cocos Creator integrates the whole set of smartphone web-based games of Cocos Play into editor tools, so there is no need to switch between various softwares. Just open the Cocos Creator editor, various one-click automatic flows can solve all the above problems with the least time and energy. Therefore developers can focus on the development phase, and improve the competitiveness and creativity of products!", 
            "title": "Workflow introduction"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/introduction/index.html#functional-features", 
            "text": "The essential functional features of Cocos Creator include:   Data properties that can be adjusted in the editor at anytime can be easily declared in the script. The adjustments to parameters can be independently finished by designers.  A UI system that supports smart canvas adaptation and spares the alignment of coding elements can perfectly adapt to device screens of any resolution.  Animation system that is specially made for 2D games supports animation trajectory preview and editing of complicated curves.  Scriptable development supported by a dynamic language makes dynamic adjustment and the remote adjustment of mobile devices amazingly easy.  By using the Cocos2d-x engine, when enjoying the convenience of scriptable development, you can also release games on various desktop platforms and mobile terminal platforms with one-click, with their superb features on the original level preserved.  Componentization of script and open plugin system provides developers with methods of customizing workflows at different depths. The editor can be adjusted on a large scale to adapt to the needs of different groups and projects.", 
            "title": "Functional features"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/introduction/index.html#usage-instructions", 
            "text": "Cocos Creator is an applicable program that supports cross-platform operation between Windows and Mac, which can be started with one double click. Comparing to traditional Cocos2d-x workflows, it completely spares the requirements of setting up a development environment. After running, developers can immediately start game content creation or functional development.  On the basis of data driven workflows, the creation and editing of the scene has become the core of game development. The design work and functional development can be done synchronously and cooperated seamlessly. Regardless if your teammates are artworkers, directors or programmers, they can all click the Preview button at anytime in the production process to test the latest form of the game in browsers, mobile device simulators or mobile devices.  Programmers and designers now can realize various kinds of cooperative methods. No matter building the scene before adding functions or creating functional modules to let designers assemble and adjust them, Cocos Creator can always meet the needs of the development group. Features defined in the script can present themselves in the editor with the most suitable visual effects, which provides convenience for content creators.  Content resources outside the scene can be imported in, such as: photo, sound, altas, skeleton animation, etc. Moreover, we are continuously improving the editor's ability of creating resources, which include the currently finished animation editor. Designers can use this tool to make very exquisite and vivid animation resources, and preview the animation in the scene at anytime.  In the end, the finished game can be released on various platforms by using the on-click in the graph tool. From design and development to test and release, Cocos Creator can handle them all for you.   Continue on to read about  Installation .", 
            "title": "Usage instructions"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/install/index.html", 
            "text": "Installation and Start\n\n\nIf you haven't downloaded and started Cocos Creator already, please start it according to the following steps.\n\n\nDownload Cocos Creator\n\n\nYou can visit the download link on \nCocos Creator products homepage\n to obtain the zip file of Cocos Creator.\n\n\nDirectly decompress it to any location on the HDD after downloading.\n\n\nRun Cocos Creator\n\n\nOn the Windows operating system, double click the \nCocosCreator.exe\n document in the decompressed folder to start Cocos Creator.\n\n\nOn the Mac operating system, double click the decompressed \nCocosCreator.app\n icon to start Cocos Creator.\n\n\nYou can set up quick start, Dock or a shortcut according to your preference for starting up the program, allowing you to run it at any time.\n\n\nUse Cocos developer account to login\n\n\nIf you don't need to release games on original platforms, the above two simple steps can prepare for you a full developing environment for developing games using Cocos Creator.\n\n\nAfter starting Cocos Creator, you will access the login interface for Cocos developer accounts. After logging in, you can enjoy various kinds of online services, product upgrade information and various developer benefits provided for developers.\n\n\nIf you don't have a Cocos developer account, you can use the \nsign up\n button in the login interface to sign in to the Cocos developer center, or you can directly use the link below:\n\n\nhttps://passport.cocos.com/auth/signup\n\n\nAfter signing up, you can go back to the login interface of Cocos Creator to complete the login! After verifying your identity, you will be able to access the Dashboard interface. In situations other than manual log out or the expiration of login information, the information saved in the local session will be used for auto login.\n\n\n\n\nContinue on to read about \nDashboard\n.", 
            "title": "_Install"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/install/index.html#installation-and-start", 
            "text": "If you haven't downloaded and started Cocos Creator already, please start it according to the following steps.", 
            "title": "Installation and Start"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/install/index.html#download-cocos-creator", 
            "text": "You can visit the download link on  Cocos Creator products homepage  to obtain the zip file of Cocos Creator.  Directly decompress it to any location on the HDD after downloading.", 
            "title": "Download Cocos Creator"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/install/index.html#run-cocos-creator", 
            "text": "On the Windows operating system, double click the  CocosCreator.exe  document in the decompressed folder to start Cocos Creator.  On the Mac operating system, double click the decompressed  CocosCreator.app  icon to start Cocos Creator.  You can set up quick start, Dock or a shortcut according to your preference for starting up the program, allowing you to run it at any time.", 
            "title": "Run Cocos Creator"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/install/index.html#use-cocos-developer-account-to-login", 
            "text": "If you don't need to release games on original platforms, the above two simple steps can prepare for you a full developing environment for developing games using Cocos Creator.  After starting Cocos Creator, you will access the login interface for Cocos developer accounts. After logging in, you can enjoy various kinds of online services, product upgrade information and various developer benefits provided for developers.  If you don't have a Cocos developer account, you can use the  sign up  button in the login interface to sign in to the Cocos developer center, or you can directly use the link below:  https://passport.cocos.com/auth/signup  After signing up, you can go back to the login interface of Cocos Creator to complete the login! After verifying your identity, you will be able to access the Dashboard interface. In situations other than manual log out or the expiration of login information, the information saved in the local session will be used for auto login.   Continue on to read about  Dashboard .", 
            "title": "Use Cocos developer account to login"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/dashboard/index.html", 
            "text": "Dashboard\n\n\nAfter starting Cocos Creator and logging in with your Cocos developer account, the Dashboard interface will open. You can create a new project, open an existing project or obtain helpful information here.\n\n\nOverview of the interface\n\n\n\n\nWhat is listed above is the dashboard interface of Cocos Creator, which includes the following types of tabs:\n\n\n\n\nRecently Opened Projects\n: List projects that have been opened recently. When running Cocos Creator for the first time, this list is blank and a 'Create a new project' button will appear.\n\n\nCreate a New Project\n: By clicking this tab, you can access the guide interface for creating a new project in Cocos Creator.\n\n\nOpen Other Projects\n: If your project is not in the list of recently opened projects, you can click this button to browse and choose the project you want to open.\n\n\nHelp\n: Help information, which is a static page that includes various pieces of helpful information and guides for beginners and documents.\n\n\nQuick Start\n: Shows a video tutorial that can help you start using Cocos Creator to develop games quickly.\n\n\n\n\nNext, we will introduce these subpages one by one.\n\n\nRecently Opened Projects\n\n\nYou can quickly access projects that have been opened recently by using \nRecently Opened Projects\n. When running Cocos Creator for the first time, this list is blank and a 'Create a new project' button will appear on the interface. You can come back here after\nhaving created some projects. And you will see the newly created project appearing on this list.\n\n\n\n\nWhen you hover your mouse over the article of a recently opened project, the available operations on this article will appear:\n\n\n\n\nClick \nOpen\n and open this project in Cocos Creator editor\n\n\nClick \nClose\n and remove this project from the list of recently opened projects. This operation will not delete the actual project folder.\n\n\n\n\nAlso, when you click or hover over a project, you can see the path of this project in the status bar underneath the Dashboard.\n\n\n\n\nCreate a New Project\n\n\nYou can create a new Cocos Creator project with the \nCreate a New Project\n tab.\n\n\nIn the \nCreate a New Project\n page, we first need to choose a project template. The project template includes various kinds of basic game frameworks and sample resources and scripts for learning, which can help you start creative work quicker.\n\n\nNote: The early Cocos Creator edition doesn't include multiple optional project templates. Along with the improvement of Cocos Creator's functions, we will gradually add more templates to provide convenience for users.\n\n\nClick a template, and you will see descriptions of this template at the bottom of the page.\n\n\n\n\nAt the bottom of the page, you will see the project name and the path that it's going to be saved to. You can manually input the project path and project name in the input field of project path. The last section of the path is project name.\n\n\nYou can also click the \nBrowse\n button to open the input field of the browsing path. You can choose a place in your local file system to store the new project.\n\n\nAfter everything is set up, you can click the \nCreate a New Project\n button to finish creating the project. The Dashboard interface will be closed, and the newly created project will be opened in the main window of Cocos Creator editor.\n\n\nOpen Other Projects\n\n\nIf you can't find your project on the \nRecently Opened Projects\n page, or if you just downloaded a project that you have never opened before, you can\nbrowse and open the project in the local file system by clicking the \nOpen Other Projects\n button.\n\n\nAfter clicking \nOpen Other Projects\n, a selective input field of the local file system will pop up. Choose your project folder in this input field and click \"Open\" and then you can open the project.\n\n\nNote: Cocos Creator uses a particularly structured folder as legitimate project marking, but not it is not a construction document. You only need to click the project folder when choosing the project.\n\n\nHelp\n\n\nYou can visit Cocos Creator User Manual and other helping documents by clicking the \nHelp\n page.\n\n\n\n\n\n\nContinue on to read about \nHello World!\n.", 
            "title": "_Dashboard"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/dashboard/index.html#dashboard", 
            "text": "After starting Cocos Creator and logging in with your Cocos developer account, the Dashboard interface will open. You can create a new project, open an existing project or obtain helpful information here.", 
            "title": "Dashboard"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/dashboard/index.html#overview-of-the-interface", 
            "text": "What is listed above is the dashboard interface of Cocos Creator, which includes the following types of tabs:   Recently Opened Projects : List projects that have been opened recently. When running Cocos Creator for the first time, this list is blank and a 'Create a new project' button will appear.  Create a New Project : By clicking this tab, you can access the guide interface for creating a new project in Cocos Creator.  Open Other Projects : If your project is not in the list of recently opened projects, you can click this button to browse and choose the project you want to open.  Help : Help information, which is a static page that includes various pieces of helpful information and guides for beginners and documents.  Quick Start : Shows a video tutorial that can help you start using Cocos Creator to develop games quickly.   Next, we will introduce these subpages one by one.", 
            "title": "Overview of the interface"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/dashboard/index.html#recently-opened-projects", 
            "text": "You can quickly access projects that have been opened recently by using  Recently Opened Projects . When running Cocos Creator for the first time, this list is blank and a 'Create a new project' button will appear on the interface. You can come back here after\nhaving created some projects. And you will see the newly created project appearing on this list.   When you hover your mouse over the article of a recently opened project, the available operations on this article will appear:   Click  Open  and open this project in Cocos Creator editor  Click  Close  and remove this project from the list of recently opened projects. This operation will not delete the actual project folder.   Also, when you click or hover over a project, you can see the path of this project in the status bar underneath the Dashboard.", 
            "title": "Recently Opened Projects"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/dashboard/index.html#create-a-new-project", 
            "text": "You can create a new Cocos Creator project with the  Create a New Project  tab.  In the  Create a New Project  page, we first need to choose a project template. The project template includes various kinds of basic game frameworks and sample resources and scripts for learning, which can help you start creative work quicker.  Note: The early Cocos Creator edition doesn't include multiple optional project templates. Along with the improvement of Cocos Creator's functions, we will gradually add more templates to provide convenience for users.  Click a template, and you will see descriptions of this template at the bottom of the page.   At the bottom of the page, you will see the project name and the path that it's going to be saved to. You can manually input the project path and project name in the input field of project path. The last section of the path is project name.  You can also click the  Browse  button to open the input field of the browsing path. You can choose a place in your local file system to store the new project.  After everything is set up, you can click the  Create a New Project  button to finish creating the project. The Dashboard interface will be closed, and the newly created project will be opened in the main window of Cocos Creator editor.", 
            "title": "Create a New Project"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/dashboard/index.html#open-other-projects", 
            "text": "If you can't find your project on the  Recently Opened Projects  page, or if you just downloaded a project that you have never opened before, you can\nbrowse and open the project in the local file system by clicking the  Open Other Projects  button.  After clicking  Open Other Projects , a selective input field of the local file system will pop up. Choose your project folder in this input field and click \"Open\" and then you can open the project.  Note: Cocos Creator uses a particularly structured folder as legitimate project marking, but not it is not a construction document. You only need to click the project folder when choosing the project.", 
            "title": "Open Other Projects"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/dashboard/index.html#help", 
            "text": "You can visit Cocos Creator User Manual and other helping documents by clicking the  Help  page.    Continue on to read about  Hello World! .", 
            "title": "Help"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/hello-world/index.html", 
            "text": "Hello World\n\n\nAfter understanding how to use the Dashboard, let's see how to create and open a Hello World project now.\n\n\nCreate a New Project\n\n\nIn the Dashboard, open the \nCreate a New Project\n tab and choose the \nHello World\n project template.\n\n\n\n\nThen appoint the path of the new project in the project path bar below. The last section of the path is the project folder.\n\n\nAfter finishing inputting the path, click the \nCreate a New Project\n button at the bottom right corner, the project will be automatically created from the Hello World project template and will be opened.\n\n\nOpen the scene and start working\n\n\nThe Workflow cores of Cocos Creator are data driven. When opening a project for the first time, no scene will open by default. To view the content of the Hello World template, we need to first open a scene resource document.\n\n\n\n\nDouble click the \nHello World\n scene document indicated by the arrow in the \nResource Manager\n. All the scene documents in Cocos Creator use ![../asset-workflow/index/scene.png] as their icon.\n\n\nHello World project decomposition\n\n\nAfter opening the \nHello World\n scene, we can see all the contents of this template project.\n\n\n\n\nThe content of the scene will respectively appear in four core panels \nresource manager, arrangement manager, scene editor and property checker\n according to workflows. Introductions to the editor interface and main panel will be shown in detail in the following \nEditor Overview\n section.\n\n\nPreview scene\n\n\nTo see a preview of the game scene, please click the\npreview game\n button at the top of the editor window.\n\n\n\n\nCocos Creator will use your default browser to run the current game scene. The effect is as illustrated below:\n\n\n\n\nClick the drop down menu in the top left corner of the preview window and from here you can choose the preview effects for different device screens.\n\n\nModifying the welcome message\n\n\nThe initial embodiment of Cocos Creator's focusing on data driven is that when we need to change the welcome message of Hello Word, we don't need to edit the script code any more, but can directly modify properties of the words that are saved in the scene.\n\n\nFirstly click the \nCanvas\n node in the \narrangement manager\n, to which our \nHello World\n component script is attached.\n\n\nNext, find the \nHello World\n component property at the bottom of the \nproperty checker\n, and change the text in the \nText\n property into \nHello, world!\n:\n\n\n\n\nWhen running the preview again, we will see that the welcome message has been updated:\n\n\n\n\nSummary\n\n\nThe content of this section lets us know how to start the workflows of Cocos Creator from the scene. And by modifying the welcome message, it gives a brief introduction to the working methods of data driven. Next, we will lead you to finish a relatively complete leisure game through a step by step process. We believe that you will have a more comprehensive understanding Cocos Creator's workflows after this.\n\n\n\n\nContinue on to read about \nQuick Start\n.", 
            "title": "_Hello World"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/hello-world/index.html#hello-world", 
            "text": "After understanding how to use the Dashboard, let's see how to create and open a Hello World project now.", 
            "title": "Hello World"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/hello-world/index.html#create-a-new-project", 
            "text": "In the Dashboard, open the  Create a New Project  tab and choose the  Hello World  project template.   Then appoint the path of the new project in the project path bar below. The last section of the path is the project folder.  After finishing inputting the path, click the  Create a New Project  button at the bottom right corner, the project will be automatically created from the Hello World project template and will be opened.", 
            "title": "Create a New Project"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/hello-world/index.html#open-the-scene-and-start-working", 
            "text": "The Workflow cores of Cocos Creator are data driven. When opening a project for the first time, no scene will open by default. To view the content of the Hello World template, we need to first open a scene resource document.   Double click the  Hello World  scene document indicated by the arrow in the  Resource Manager . All the scene documents in Cocos Creator use ![../asset-workflow/index/scene.png] as their icon.", 
            "title": "Open the scene and start working"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/hello-world/index.html#hello-world-project-decomposition", 
            "text": "After opening the  Hello World  scene, we can see all the contents of this template project.   The content of the scene will respectively appear in four core panels  resource manager, arrangement manager, scene editor and property checker  according to workflows. Introductions to the editor interface and main panel will be shown in detail in the following  Editor Overview  section.", 
            "title": "Hello World project decomposition"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/hello-world/index.html#preview-scene", 
            "text": "To see a preview of the game scene, please click the preview game  button at the top of the editor window.   Cocos Creator will use your default browser to run the current game scene. The effect is as illustrated below:   Click the drop down menu in the top left corner of the preview window and from here you can choose the preview effects for different device screens.", 
            "title": "Preview scene"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/hello-world/index.html#modifying-the-welcome-message", 
            "text": "The initial embodiment of Cocos Creator's focusing on data driven is that when we need to change the welcome message of Hello Word, we don't need to edit the script code any more, but can directly modify properties of the words that are saved in the scene.  Firstly click the  Canvas  node in the  arrangement manager , to which our  Hello World  component script is attached.  Next, find the  Hello World  component property at the bottom of the  property checker , and change the text in the  Text  property into  Hello, world! :   When running the preview again, we will see that the welcome message has been updated:", 
            "title": "Modifying the welcome message"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/hello-world/index.html#summary", 
            "text": "The content of this section lets us know how to start the workflows of Cocos Creator from the scene. And by modifying the welcome message, it gives a brief introduction to the working methods of data driven. Next, we will lead you to finish a relatively complete leisure game through a step by step process. We believe that you will have a more comprehensive understanding Cocos Creator's workflows after this.   Continue on to read about  Quick Start .", 
            "title": "Summary"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/quick-start/index.html", 
            "text": "Quick Start\uff1aCreating your first game\n\n\nThe document you are reading now includes systematic introductions of the editor panel, functions and workflows of Cocos Creator. However, if you want to quickly learn the general flow and method of developing games by Cocos Creator, this chapter will meet your needs. After finishing the tutorial in this chapter, you might obtain enough information for creating games. But we still recommend you to continue reading this guide to understand the details of each functional block and the complete workflows.\n\n\nNow, let's begin! Following the tutorial, we will create a deceiving game that is named \nPick Up the Stars\n. Players of this game need to manipulate an \nobtuse\n monster that never stops jumping to touch the continuously appearing stars. The dazzling acceleration will bring great challenges to players. Play with your friends and see who can obtain the most stars!\n\n\nThe completed form of this game can be experienced here:\n\n\nhttp://fbdemos.avosapps.com/star-catcher/\n\n\nPrepare project and resources\n\n\nWe have prepared for you all the resources needed for creating this game. Download \nOriginal Project\n and decompress it to the location you want. Then we can start:\n\n\nDownload the original project\n\n\nYou can also download the completed project. If there is any confusion when following the tutorial to create the game, you can open the completed project for reference:\n\n\nDownload the completed project\n\n\nOpen the original project\n\n\nIf you still don't know how to obtain and start Cocos Creator, please read the \nInstall\n section.\n\n\n\n\nFirstly, start Cocos Creator, and choose \nOpen other projects\n\n\nIn the pop up input field for selecting folder, choose \nstart_project\n that has just been downloaded and decompressed, and click the \nOpen\n button\n\n\nThe main window of Cocos Creator editor will be opened, and you will see the project status as follows\n\n\n\n\n\n\nCheck game resources\n\n\nOur original project has included all the game resources needed; therefore, you don't need to import any other resources. For details on importing resources, please read content related to \nAsset Workflow\n.\n\n\nNext, let's get to know the resources of the project. Please pay attention to a panel named \nAssets\n, on which all the resource allocation graphs of the project are shown.\n\n\nWe can see that the root directory of the project resources is named as \nassets\n, which is in accordance with the \nassets\n directory in the decompressed original project. Only resources under this directory can be imported by Cocos Creator into the project and be managed.\n\n\nThe \nAssets\n panel can display the directory structure of any hierarchy. An icon like \n represents a folder. Clicking the triangle icon on the left side of the folder, you can unfold the contents of the folder. After completely unfolding the folder, the \nAssets\n panel will present itself as illustrated below.\n\n\n\n\nEvery resource is a document, which, after being imported into the project, will be recognized as different types of resources according to the differences in extension name. Its icon will be differentiated too. Next, let's take a look at the respective types and usages of the resources in the project.\n\n\n\n\n audio document, which is an mp3 document generally. Audio documents named as \njump\n and \nscore\n will be played respectively when the character jumps and scores.\n\n\n bitmap font, which is jointly formed by a fnt document and png document. Bitmap font is a commonly used font resource in game development. For detailed information, please read \nFont\n\n\nThere are various kinds of abbreviated icons, all of which are image resources, normally a png or jpg document. After being imported into the project, the image document will be crudely processed into the resource of \ntexture\n type. Then these resources can be dragged into scenes or component properties for use.\n\n\n\n\nCreating a game scene\n\n\nIn Cocos Creator, the game scene is the core of organizing the game contents when developing games, which is also the carrier for all the game contents presented to players. The game scene will normally include the following contents:\n\n\n\n\nScene images and words (Sprite, Label)\n\n\nCharacters\n\n\nGame logic scripts attached to scene nodes in the form of components\n\n\n\n\nWhen players run the game, the game scene will be loaded. After that, the game scripts of included components will automatically run to realize various kinds of logic functions set up by developers. Therefore, apart from resources, the game scene is the foundation of all content creation. Now let's create a new scene.\n\n\n\n\nClick the \nassets\n directory in the \nAssets\n panel, making sure the scene will be created under this directory\n\n\nClick the plus sign on the top left corner of the \nAssets\n panel, and choose \nScene\n in the pop up menu\n\n\n\nWe created a scene document named as \nNew Scene\n. Right click it and choose \nRename\n to rename it as \ngame\n.\n\n\nDouble click \ngame\n and the scene will be opened in the \nscene editor\n and the \nNode Tree\n.\n\n\n\n\nTo understand Canvas\n\n\nAfter opening the scene, all the nodes (and their hierarchical relations) of the current scene will be shown in the the \nNode Tree\n. The newly created scene has only one node called \nCanvas\n. \nCanvas\n can be called the canvas node or rendering root node. Click \nCanvas\n, its properties will display in the \nProperties\n panel.\n\n\n\n\nThe \nDesign Resolution\n property here stipulates the design resolution of the game. \nFit Height\n and \nFit Width\n stipulate how we should zoom \nCanvas\n to adjust to different resolutions when running on screens of different sizes.\n\n\nBeing provided with the function of adjusting to different resolutions, we will normally put all the nodes in charge of image display in the scene under \nCanvas\n. In this way, when the \nscale\n property of \nCanvas\n changes, all the images, as its subnodes, will zoom together to adjust to the sizes of different screens.\n\n\nFor more detailed information, please read \nCanvas\n. Currently, we only need to know that the scene images added next will all be put under the \nCanvas\n node.\n\n\nSetting up a scene image\n\n\nAdding a background\n\n\nFirst, find the background image resource according to the path of \nassets/textures/background\n in the \nAssets\n panel. Click and drag this resource to the \nCanvas\n node in \nArrangement editor\n. Don't release the mouse until the \nCanvas\n node is highlighted orange, which means a subnode using \nbackground\n as the image resource will be added.\n\n\n\n\nNow you can release the mouse button, and you will see a node named \nbackground\n has been added under \nCanvas\n. When we use the way of dragging a resource to add a node, the node will be automatically named as the name of the image resource.\n\n\nWhen we edit and modify the scene, we can promptly save our modifications by main menu \ndocument-\nsave scene\n. Or we can save by shortcut keys: \nCtrl+S\n\uff08Windows\uff09or \nCmd + S\n\uff08Mac\uff09.\n\n\nModify background size\n\n\n\n\nIn \nscene editor\n, the newly added background images can be seen. Next we will modify the size of the background image to make it cover the whole screen.\n\n\nFirstly, click the \nbackground\n node, and click the fourth \nrectangle tool\n at the top left corner of the main window:\n\n\n\n\nBy using this tool we can conveniently modify the size of the image node. Move the mouse to rest on the left side of \nbackground\n in \nscene editor\n, click and drag it to the left until the left side of \nbackground\n exceeds the blue frame that represents the design resolution. Then we can drag the right side of \nbackground\n to the right using the same method.\n\n\n\n\nThen we need to drag the upper and lower sides to make the size of the background image fully cover the frame of the designing resolution.\n\n\n\n\nWhen using \nrectangle tool\n to modify the size of the background image, we can see the \nSize\n property of \nNode\n in the \nProperties\n panel is changing accordingly. After completion, the size of the background image is approximately \n(1360, 760)\n. You can also directly input a numeric value into the input field of the \nSize\n property, which will achieve the same effect as that of using \nrectangle tool\n. A background image of this size can cover the whole screen of all the phones on the market, with no exceptions.\n\n\nAdd ground\n\n\nOur main character needs a ground that it can jump on. We will add one instantly. By the same method of adding a background image, drag the \nassets/textures/ground\n resource in the \nAssets\n panel to \nCanvas\n in the \nNode Tree\n. When dragging, we can choose the order relation of newly added nodes and \nbackground\n nodes. When in the state of dragging the resource, move the mouse pointer to the bottom of the \nbackground\n node until a highlighted orange frame appears on \nCanvas\n and a green line representing the insert position appears below \nbackground\n, and then release the mouse. In this way, \nground\n will be put under the \nbackground\n in the scene hierarchy, which is also a subnode of \nCanvas\n.\n\n\nIn the \nNode Tree\n, the render order of nodes shown below will follow that of nodes shown above. We can see the \nground\n object at the bottom is the first to appear in \nscene editor\n. Besides, the subnode will permanently display before the parent node. We can adjust the hierarchical order and relation of nodes at anytime to control their show order.\n\n\nAccording to the method of modifying the background, we can also use \nrectangle tool\n to set a suitable size for the ground node. When activating \nrectangle tool\n, by dragging the vertices and the parts other than the four sides of nodes, we can change the position of nodes. The state of set ground nodes is as illustrated below:\n\n\n\n\nApart from \nrectangle tool\n, we can also use \nmove tool\n \n to change the positions of the nodes. Try to hold down the arrow of \nmove tool\n shown on the node and drag it, then we can change the position of the node on a single coordinate axis at one time.\n\n\nWhen setting up the position and size of the background and ground, we don't need precise numeric values and can drag them by guessing. If you prefer whole numbers, you can directly input numeric values of \nposition\n and \nsize\n according to the screenshot.\n\n\nAdding a main character\n\n\nNext our main character the little monster will make its debut. Drag \nassets/texture/PurpleMonster\n from the \nAssets\n panel and put it under \nCanvas\n in the \nNode Tree\n, and make sure its position is below \nground\n, in this way our main character will be shown at the very front.\n\n\nTo highlight the aura of the main character in the scene nodes, we right click the newly added \nPurpleMonster\n node, choose \nrename\n and rename it as \nPlayer\n.\n\n\nNext we will set up the properties of the main character. First, we change the position of \nAnchor\n. The anchor point of any node will be at the center of itself by default, which means the position of the center of the node is the position of the node. We hope to manipulate the position of the base of the main character to simulate the effect of jumping on the ground; therefore, we need to set up the anchor point of the main character under its foot now. Find \nAnchor\n property in the \nProperties\n panel and set up the value of \ny\n as \n0\n. We will see that in \nscene editor\n, the arrow of the \nmove tool\n that represents the position of the main character appears under the foot of the main character.\n\n\nNext, drag \nPlayer\n from \nscene editor\n and put it on the ground. The effect is as illustrated below:\n\n\n\n\nIn this way our scene's basic artistic content is set up. In the next section we will write code to vivify the contents of the game.\n\n\nWriting the main character's script\n\n\nOne of the core ideas of developing games by Cocos Creator is to let the content creation and function development undergo parallel cooperation smoothly. In the last section we focused on artistic content. Next we will write script to develop the flow of functions, and we will see that the finished program script can be used by content creators easily.\n\n\nEven if you have never written a program before, there's no need to worry. We will provide all the necessary codes in the tutorial. You only need to copy and paste them to the correct position. Then in this part you can ask your programmer partners for help. Next let's start creating script that drives the main character to act.\n\n\nCreate script\n\n\n\n\nFirst, right click the \nassets\n folder in the \nAssets\n panel and choose \nCreate-\nfolder\n \n\n\nRight click \nNew Folder\n, choose \nRename\n and rename it as \nscripts\n, under which all our scripts will be saved.\n\n\nRight click the \nscripts\n folder, choose \nCreate-\nJavaScript\n and create a JavaScript script\n\n\nRename the newly created script as \nPlayer\n. Double click this script and open the code editor.\n\n\n\n\nWriting component property\n\n\nThe opened script already has some preset code blocks. These codes are the structure needed for writing a component script. Scripts of such a structure are the components in Cocos creator, which can be mounted on the nodes in the scene and provide various functions that manipulate nodes. First, we will set up some properties and see how to adjust them in the scene.\n\n\nFind the portion of \nproperties\n in the \nPlayer\n script in \ncode editor\n, change it to the following content and press \nCtrl + S\n\uff08Windows\uff09or \nCmd + S\n\uff08Mac\uff09to save it:\n\n\n// Player.js\n    //...\n    properties: {\n        // main character's jump height\n        jumpHeight: 0,\n        // main character's jump duration\n        jumpDuration: 0,\n        // maximal movement speed\n        maxMoveSpeed: 0,\n        // acceleration\n        accel: 0,\n    },\n    //...\n\n\n\n\nThese newly added properties will stipulate the movement of the main character. In code, we don't have to care about how much these numeric values are, because we will directly set up these numeric values in the \nProperties\n panel later.\n\n\nNow we can add the \nPlayer\n component to the node of the main character. Choose the \nPlayer\n node in the \nNode Tree\n, click the \nadd component\n button in the \nProperties\n panel and choose \nadd user's script component-\nPlayer\n to add the \nPlayer\n component to the node of the main character.\n\n\n\n\nNow we can see the newly added \nPlayer\n component in the \nProperties\n panel of the \nPlayer\n node. Set up properties related to the jumping and movement of the main character according to the image below:\n\n\n\n\nOnly jumpDuration's unit is seconds. The unit of the other values is pixels. According to the current setting of the \nPlayer\n component: Our main character will have a jump height of 200 pixels. The time needed for jumping to the highest point is 0.3 seconds. Its maximum horizontal movement speed is 400 pixels per second. Its horizontal acceleration is 350 pixels per second.\n\n\nAll these numeric values are suggestions. Later when the game is running, you can modify these numeric values in the \nProperties\n panel at anytime according to your preference, no need to change any codes. How convenient it is, right?\n\n\nWriting code for jumping and movement\n\n\nNext we will add a method to make the main character jump. Add a method called \nsetJumpAction\n and put it below the \nproperties: {...},\n code block:\n\n\n// Player.js\n    properties: {\n        //...\n    },\n\n    setJumpAction: function () {\n        // jump up\n        var jumpUp = cc.moveBy(this.jumpDuration, cc.p(0, this.jumpHeight)).easing(cc.easeCubicActionOut());\n        // jump down\n        var jumpDown = cc.moveBy(this.jumpDuration, cc.p(0, -this.jumpHeight)).easing(cc.easeCubicActionIn());\n        // repeat\n        return cc.repeatForever(cc.sequence(jumpUp, jumpDown));\n    },\n\n\n\n\nHere some Action in the Cocos2d-js engine is used to realize the jumping animation of the main character. For detailed information, please check \nCocos2d-js API\n.\n\n\nNext invoke the newly added \nsetJumpAction\n method in the \nonLoad\n method and implement \nrunAction\n to start action:\n\n\n// Player.js\n    onLoad: function () {\n        // initialize jump action\n        this.jumpAction = this.setJumpAction();\n        this.node.runAction(this.jumpAction);\n    },\n\n\n\n\nThe \nonLoad\n method will be immediately implemented after loading the scene. So we will put operations and logic concerning initialization into it.\n\n\nAfter the script is saved, we can start running the game for the first time!\n\n\nClick the \npreview\n button at the top of Cocos Creator editor, which looks like a \"play\" button. Cocos Creator will automatically open your default browser and run the game in it. Now we should see the main character --- a purple monster jumping lively and continuously in the scene.\n\n\n\n\nManipulation of movement\n\n\nA main character that can only jump foolishly up and down on the same spot is not very promising. Let us add keyboard input for the main character, using \nA\n and \nD\n to manipulate its jump direction. Below the \nsetJumpAction\n method, add a new \nsetInputControl\n method:\n\n\n// Player.js\n    setJumpAction: function () {\n        //...\n    },\n\n    setInputControl: function () {\n        var self = this;\n        // add keyboard event listener\n        cc.eventManager.addListener({\n            event: cc.EventListener.KEYBOARD,\n            // When there is a key being pressed down, judge if it's the designated directional button and set up acceleration in the corresponding direction\n            onKeyPressed: function(keyCode, event) {\n                switch(keyCode) {\n                    case cc.KEY.a:\n                        self.accLeft = true;\n                        self.accRight = false;\n                        break;\n                    case cc.KEY.d:\n                        self.accLeft = false;\n                        self.accRight = true;\n                        break;\n                }\n            },\n            // when releasing the button, stop acceleration in this direction\n            onKeyReleased: function(keyCode, event) {\n                switch(keyCode) {\n                    case cc.KEY.a:\n                        self.accLeft = false;\n                        break;\n                    case cc.KEY.d:\n                        self.accRight = false;\n                        break;\n                }\n            }\n        }, self.node);\n    },\n\n\n\n\nThen modify the \nonLoad\n method, into which we add the switch of accelerating to the left/right and the current horizontal speed of the main character. Then invoke the newly added \nsetInputControl\n method. Start monitoring keyboard input after loading the scene:\n\n\n// Player.js\n    onLoad: function () {\n        // initialize jump action\n        this.jumpAction = this.setJumpAction();\n        this.node.runAction(this.jumpAction);\n\n        // switch of acceleration direction\n        this.accLeft = false;\n        this.accRight = false;\n        // current horizontal speed of main character\n        this.xSpeed = 0;\n\n        // initialize keyboard input listener\n        this.setInputControl();\n    },\n\n\n\n\nFinally, modify the content of the \nupdate\n method by adding settings for the acceleration, speed and the current position of the main character:\n\n\n// Player.js\n    update: function (dt) {\n        // update speed of each frame according to the current acceleration direction\n        if (this.accLeft) {\n            this.xSpeed -= this.accel * dt;\n        } else if (this.accRight) {\n            this.xSpeed += this.accel * dt;\n        }\n        // restrict the movement speed of the main character to the maximum movement speed\n        if ( Math.abs(this.xSpeed) \n this.maxMoveSpeed ) {\n            // if speed reaches its limit, use the max speed with current direction\n            this.xSpeed = this.maxMoveSpeed * this.xSpeed / Math.abs(this.xSpeed);\n        }\n\n        // update the position of the main character according to the current speed\n        this.node.x += this.xSpeed * dt;\n    },\n\n\n\n\nupdate\n will be invoked once for each frame after loading the scene. We normally put the logic contents that need to be frequently calculated or timely updated here. In our game, after obtaining the acceleration direction by keyboard input, we need to calculate the speed and position of the main character in \nupdate\n for each frame.\n\n\nAfter saving the script, you can brew a cup of tea and click \npreview\n to check the latest outcome. After opening the preview in your browser, click the game scene with the mouse (due to the restrictions of browsers, keyboard input can only be accepted after clicking the game scene) , then you can press the \nA\n and \nD\n buttons to manipulate the main character to move to the left/right!\n\n\nIs the movement a little bit too slow? Does the main character not jump high enough? Hope to extend jump duration? No problem! All these can be adjusted at anytime. Just set up different property values for the \nPlayer\n component, then you can adjust the game at your will. Here is a set of settings for reference:\n\n\nJump Height: 150\nJump Duration: 0.3\nMax Move Speed: 400\nAccel: 1000\n\n\n\n\nThis set of property settings will make the main character as agile as possible. As for how to choose the values, it all depends on what style of game you want.\n\n\nMaking stars\n\n\nThe main character can jump freely now so we need to set up a goal for players. The stars will appear continuously in the scene and players need to manipulate the monster to touch the stars to collect points. The star touched by the main character will disappear and a new one will be immediately re-created at a random position.\n\n\nCreate Prefab\n\n\nAs for the nodes that need to be created repeatedly, we can save it as a \nPrefab\n resource, which can be a template for the dynamic generation of nodes. For more information about \nPrefab\n, please read \nPrefab\n.\n\n\nFirstly, drag the \nassets/textures/star\n resource from the \nAssets\n panel into the scene. Anywhere in the \nNode Tree\n is fine. We only need the scene to be the operating platform for creating Prefab. After creation we will delete this node from the scene.\n\n\nWe don't need to modify the position of the stars or its render properties. But to make the stars disappear after being touched by the main character, we need to add a special component to the star. By the same method of adding the \nPlayer\n script, add a JavaScript script named \nStar\n to \nassets/scripts/\n (in the \nProperties\n panel of the \nstar\n, select \nAdd component\n and then \nAdd custom component\n and then \nStar\n).\n\n\n\n\nNext, double click this script to start editing. Only one property is needed for the star component to stipulate the distance for collecting points by the main character. Modify \nproperties\n and add the following content:\n\n\n// Star.js\n    properties: {\n        // When the distance between the star and main character is less than this value, collection of the point will be completed\n        pickRadius: 0\n    },\n\n\n\n\nAfter saving the script, add this script to the newly created \nstar\n node. Then set up the property value of \nPick Radius\n in the \nProperties\n panel as \n60\n:\n\n\n\n\nThe settings needed by Star Prefab are now finished. Now drag the \nstar\n node from the \nNode Tree\n and drop it into the \nassets\n folder in the \nAssets\n panel. This should generate a Prefab resource named \nstar\n, as shown below.\n\n\n\n\nNow the \nstar\n node can be deleted from the scene. We can dynamically use the Prefab resource of stars in the script to generate stars.\n\n\nAdding game control script\n\n\nThe generation of stars is a part of the game's main logic. Therefore we need to add a script named \nGame\n and make it the script of the game's main logic. Logic concerning scoring, failure and restarting will be added to this script later.\n\n\nAdd a new \nGame\n script inside the \nassets/scripts\n folder (next to \nStar\n and \nPlayer\n). Double click to open the script. First, add the properties needed for generating stars:\n\n\n// Game.js\n    properties: {\n        // this property quotes the PreFab resource of stars\n        starPrefab: {\n            default: null,\n            type: cc.Prefab\n        },\n        // the random scale of disappearing time for stars\n        maxStarDuration: 0,\n        minStarDuration: 0,\n        // ground node for confirming the height of the generated star's position\n        ground: {\n            default: null,\n            type: cc.Node\n        },\n        // player node for obtaining the jump height of the main character and controlling the movement switch of the main character\n        player: {\n            default: null,\n            type: cc.Node\n        }\n    },\n\n\n\n\nAfter saving the script, add the \nGame\n component to the \nCanvas\n node in the \nNode Tree\n (after choosing the \nCanvas\n node, drag the script to the \nProperties\n panel or click the \nAdd component\n button in the \nProperties\n panel and choose \nGame\n in \nAdd Custom Component\n).\n\n\nNext, drag the \nstar\n Prefab resource from the \nAssets\n panel into the \nStar Prefab\n property of the newly created \nGame\n component. This is the first time we have set up a quotation for the property. Only when setting \ntype\n as quote type when declaring a property (such as the \ncc.Prefab\n type written here) can an asset or a node be dragged to the property.)\n\n\nThen, drag the \nground\n and \nPlayer\n nodes from the \nNode Tree\n to properties of the same name in the component, to finish the node quotation.\n\n\nFinally, set the values of the \nMin Star Duration\n and \nMax Star Duration\n properties as \n3\n and \n5\n. Later when generating stars, we will choose a random value between these two values, for the duration of each star.\n\n\nGenerate stars at a random position\n\n\nNext, we will continue to modify the \nGame\n script by adding the logic of generating stars and putting it after the \nonLoad\n method:\n\n\n// Game.js\n    onLoad: function () {\n        // obtain the anchor point of ground level on the y axis\n        this.groundY = this.ground.y + this.ground.height/2;   // this.ground.top may also work\n        // generate a new star\n        this.spawnNewStar();\n    },\n\n    spawnNewStar: function() {\n        // generate a new node in the scene with a preset template\n        var newStar = cc.instantiate(this.starPrefab);\n        // put the newly added node under the Canvas node\n        this.node.addChild(newStar);\n        // set up a random position for the star\n        newStar.setPosition(this.getNewStarPosition());\n    },\n\n    getNewStarPosition: function () {\n        var randX = 0;\n        // According to the position of the ground level and the main character's jump height, randomly obtain an anchor point of the star on the y axis\n        var randY = this.groundY + cc.random0To1() * this.player.getComponent('Player').jumpHeight + 50;\n        // according to the width of the screen, randomly obtain an anchor point of star on the x axis\n        var maxX = this.node.width/2;\n        randX = cc.randomMinus1To1() * maxX;\n        // return to the anchor point of the star\n        return cc.p(randX, randY);\n    }\n\n\n\n\nAfter saving the script, click the \npreview\n button. Then in the browser you will see that a star is dynamically generated after the game is started! By the same method, you can dynamically generate any preset node with a Prefab template in the game.\n\n\n\n\nAdding the action of the main character's touching and collecting of stars\n\n\nNow we will add the action logic of the main character's collecting of stars. The essential point here lies in the fact that the star needs to obtain the position of the main character's node at any time to judge if the distance between them is shorter than the collectable distance. How do we obtain the quotation of the main character's node? Don't forget that we have done two things before:\n\n\n\n\nThere is a property named \nplayer\n in the \nGame\n component, which saved the quotation of the main character's node.\n\n\nEach star is dynamically generated in the \nGame\n script.\n\n\n\n\nTherefore, we only need to deliver the concrete example in the \nGame\n component into a star and save it after the concrete example of the \nStar\n node is generated in the \nGame\n script. Then we can visit the main character's node by \ngame.player\n at anytime. Let's open the \nGame\n script, and add the following code to the end of the \nspawnNewStar\n method:\n\n\n// Game.js\n    spawnNewStar: function() {\n        // ...\n        // deliver the concrete example of the Game component into the star component\n        newStar.getComponent('Star').game = this;\n    },\n\n\n\n\nOpen the \nStar\n script after saving, now we can use the \nplayer\n node quoted in the \nGame\n component to judge the distance. Add the methods named \ngetPlayerDistance\n and \nonPicked\n and put them below the \nonLoad\n method:\n\n\n// Star.js\n    getPlayerDistance: function () {\n        // judge the distance according to the position of the player node\n        var playerPos = this.game.player.getPosition();\n        // calculate the distance between two nodes according to their positions\n        var dist = cc.pDistance(this.node.position, playerPos);\n        return dist;\n    },\n\n    onPicked: function() {\n        // When the stars are being collected, invoke the interface in the Game script to generate a new star\n        this.game.spawnNewStar();\n        // then destroy the current star's node\n        this.node.destroy();\n    },\n\n\n\n\nThen add the judging distance for each frame to the \nupdate\n method. If the distance is shorter than the collectable distance set by the \npickRadius\n property, implement collecting behavior:\n\n\n// Star.js\n    update: function (dt) {\n        // judge if the distance between the star and main character is shorter than the collecting distance for each frame\n        if (this.getPlayerDistance() \n this.pickRadius) {\n            // invoke collecting behavior\n            this.onPicked();\n            return;\n        }\n    },\n\n\n\n\nSave the script, then preview and test again. You will see that when the main character gets close to the star, the star will disappear and a new one will be generated at a random position!\n\n\nAdding score\n\n\nThe little monster makes a great effort to collect the stars. But how come it receives no reward? Now, let's add the logic and display of scoring when collecting stars.\n\n\nAdding a score label\uff08Label\uff09\n\n\nThe score will start from 0 when the game is started. 1 point will be added for 1 star collected. To display the score, we should first create a \nLabel\n node. Choose the \nCanvas\n node in the \nNode Tree\n, right click and choose \nCreate -\n Create Renderer Nodes -\n Node With Label\n. A new Label node will be created under \nCanvas\n, and it will be located at the bottom. Next we will use the following steps to set up this Label node:\n\n\n\n\nChange the node's name to \nscore\n.\n\n\nSelect the \nscore\n node, and set the X,Y of the \nposition\n property to \n(0, 180)\n.\n\n\n\nEdit the \nString\n property of the \nLabel\n component and input \nScore: 0\n.\n\n\nSet the \nFont Size\n property of the \nLabel\n component to \n50\n.\n\n\nDrag the \nassets/mikado_outline_shadow\n bitmap font resource from the \nAssets\n panel\uff08pay attention! the icon is \n\uff09into the \nFont\n property of the \nLabel\n component, to change the font used to render the score.\n\n\n\n\nThe completed effect is as illustrated below (don't worry about the \nSize\n):\n\n\n\n\nAdding scoring logic to Game script\n\n\nWe will put the logic of scoring and updating the score display in the \nGame\n script. Open the \nGame\n script to start editing. First, add a reference property of the score display Label to the end of the \nproperties\n block:\n\n\n// Game.js\n    properties: {\n        // ...\n        // quotation of score label\n        scoreDisplay: {\n            default: null,\n            type: cc.Label\n        }\n    },\n\n\n\n\nNext, add the initialization of variables for scoring in the \nonLoad\n method:\n\n\n// Game.js\n    onLoad: function () {\n        // ...\n        // initialize scoring\n        this.score = 0;\n    },\n\n\n\n\nThen add a new method named \ngainScore\n to the back of the \nupdate\n method:\n\n\n// Game.js\n    gainScore: function () {\n        this.score += 1;\n        // update the words of the scoreDisplay Label\n        this.scoreDisplay.string = 'Score: ' + this.score.toString();\n    },\n\n\n\n\nInvoke the scoring logic of the Game in Star script\n\n\nOpen the \nStar\n script after saving the \nGame\n script. Add the invoking of \ngainScore\n to the \nonPicked\n method:\n\n\n// Star.js\n    onPicked: function() {\n        // when the stars are being collected, invoke the interface in the Game script to generate a new star\n        this.game.spawnNewStar();\n        // invoke the scoring method of the Game script\n        this.game.gainScore();\n        // then destroy the current star's node\n        this.node.destroy();\n    },\n\n\n\n\nPreview after saving. You will see that when collecting stars, the scores displayed at the top of screen will increase now!\n\n\n\n\nJudgement of failure and restarting\n\n\nNow our game has taken shape. But no matter how many scores one may get, a game without the possibility of failure won't give players any fulfillment. Now let's add the action of the stars' regular disappearance. And if all the stars disappear, the game will be viewed as failed. In other words, players need to finish collecting the star before the star disappears and repeat this procedure unceasingly to finish the loop of the play method.\n\n\nAdding the logic of disappearing in a limited time to the star\n\n\nOpen the \nGame\n script, and add the variable declaration needed for counting time before invoking \nspawnNewStar\n of the \nonLoad\n method:\n\n\n// Game.js\n    onLoad: function () {\n        // ...\n        // initialize timer\n        this.timer = 0;\n        this.starDuration = 0;\n        // generate a new star\n        this.spawnNewStar();\n        // initialize scoring\n        this.score = 0;\n    },\n\n\n\n\nThen add the logic of resetting the timer to the end of the \nspawnNewStar\n method, in which \nthis.minStarDuration\n and \nthis.maxStarDuration\n are properties of the \nGame\n component that was declared at the beginning. They are used to stipulate the random scale of star duration:\n\n\n// Game.js\n    spawnNewStar: function() {\n        // ...\n        // reset timer, randomly choose a value according the scale of star duration\n        this.starDuration = this.minStarDuration + cc.random0To1() * (this.maxStarDuration - this.minStarDuration);\n        this.timer = 0;\n    },\n\n\n\n\nAdd the logic of updating the timer and judgement of exceeding the duration to the \nupdate\n method:\n\n\n// Game.js\n    update: function (dt) {\n        // update timer for each frame, when a new star is not generated after exceeding duration\n        // invoke the logic of game failure\n        if (this.timer \n this.starDuration) {\n            this.gameOver();\n            return;\n        }\n        this.timer += dt;\n    },\n\n\n\n\nIn the end, add the \ngameOver\n method. Reload the scene when failure occurs.\n\n\n// Game.js\n    gameOver: function () {\n        this.player.stopAllActions(); // stop the jumping action of the player node\n        cc.director.loadScene('game');\n    }\n\n\n\n\nModification of the \nGame\n script is now finished. Save the script and open the \nStar\n script, because we need to add a simple visual prompt effect to the star that is about to disappear. Add the following code to the end of the \nupdate\n method:\n\n\n// Star.js\n    update: function() {\n        // ...\n        // update the transparency of the star according to the timer in the Game script\n        var opacityRatio = 1 - this.game.timer/this.game.starDuration;\n        var minOpacity = 50;\n        this.node.opacity = minOpacity + Math.floor(opacityRatio * (255 - minOpacity));\n    }\n\n\n\n\nSave the \nStar\n script, and the logic of this game's play method will now be completely finished. Now click the \npreview\n button, we will see a qualified game with a core play method, incentive mechanism and failure mechanism in the browser.\n\n\nAdding sound effects\n\n\nAlthough lots of people will ignore sound when playing smartphone games, for the completeness of the workflow presented in this tutorial, we still have to supplement the task of adding sound effects.\n\n\nJumping sound effect\n\n\nFirstly, add the jumping sound effect. Open the \nPlayer\n script and add the \njumpAudio\n property that quotes the sound document resource:\n\n\n// Player.js\n    properties: {\n        // ...\n        // jumping sound effect resource\n        jumpAudio: {\n            default: null,\n            url: cc.AudioClip\n        },\n    },\n\n\n\n\nThen rewrite the \nsetJumpAction\n method, insert the callback of playing the sound effect and play the sound by adding the \nplayJumpSound\n method:\n\n\n// Player.js\n    setJumpAction: function () {\n        // jump up\n        var jumpUp = cc.moveBy(this.jumpDuration, cc.p(0, this.jumpHeight)).easing(cc.easeCubicActionOut());\n        // jump down\n        var jumpDown = cc.moveBy(this.jumpDuration, cc.p(0, -this.jumpHeight)).easing(cc.easeCubicActionIn());\n        // add a callback function to invoke other defined methods after the action is finished\n        var callback = cc.callFunc(this.playJumpSound, this);\n        // repeat unceasingly, and invoke callback to play sound after landing each time\n        return cc.repeatForever(cc.sequence(jumpUp, jumpDown, callback));\n    },\n\n    playJumpSound: function () {\n        // invoke sound engine to play the sound\n        cc.audioEngine.playEffect(this.jumpAudio, false);\n    },\n\n\n\n\nScoring sound effect\n\n\nAfter saving the \nPlayer\n script, open the \nGame\n script to add the scoring sound effect. Firstly, we still add a property to \nproperties\n to quote the sound document resource:\n\n\n// Game.js\n    properties: {\n        // ...\n        // scoring sound effect resource\n        scoreAudio: {\n            default: null,\n            url: cc.AudioClip\n        }\n    },\n\n\n\n\nThen insert the code of playing the sound into the \ngainScore\n method:\n\n\n// Game.js\n    gainScore: function () {\n        this.score += 1;\n        // update the words of the scoreDisplay Label\n        this.scoreDisplay.string = 'Score: ' + this.score.toString();\n        // play the scoring sound effect\n        cc.audioEngine.playEffect(this.scoreAudio, false);\n    },\n\n\n\n\nSave the script. Go back to the \nNode Tree\n, choose the \nPlayer\n node, and drag the \nassets/audio/jump\n resource from the \nAssets\n panel to the \nJump Audio\n property of the \nPlayer\n component.\n\n\nThen choose the \nCanvas\n node, drag the \nassets/audio/score\n resource to the \nScore Audio\n property of the \nGame\n component.\n\n\nNow it's done! The scene hierarchy of the completed form and properties of each key component are as follows:\n\n\n \n \n\n\nNow we can fully enjoy the newly created game. How many scores can you get? Don't forget that you can modify game parameters like movement control and star duration, etc. in the \nPlayer\n and \nGame\n components at anytime to quickly adjust the game's degree of difficulty. The scene needs to be saved after modifications of component properties. Only the saved values can be recorded.\n\n\nSummary\n\n\nCongratulations! You have finished the first game created by Cocos Creator. We hope this quick start tutorial for beginners can help you understand the basic concepts and workflows in the game development process of Cocos Creator. If you are not interested in writing and learning script programming, you can directly copy and paste the completed script from the completed project.\n\n\nNext, you can continue to perfect this game. The following are some recommended improving methods:\n\n\n\n\nAdd a simple start menu, display a start button when the game starts running. Only after clicking the button will the game start\n\n\nAdd a simple menu interface for the failure of the game. Only after clicking the button will the game restart after failure\n\n\nRestrict the movement of the main character to the window's boundaries\n\n\nAdd more exquisite animation performance to the jumping action of the main character\n\n\nAdd a countdown progress bar to the state when a star disappears\n\n\nAdd more gorgeous effects when collecting stars\n\n\nAdd input controls for touch screen devices\n\n\n\n\nFor editions that have been improved in all the above aspects, you can download \nevolution edition project\n for reference and learning, which will not be discussed in detail here.\n\n\nMoreover, if you want to release the completed game on a server to share with your friends, you can read the content of the \nPreview Build\n section.\n\n\nToday's tutorial ends here. You can immediately start creating your second Cocos Creator game or continue reading this guide. For any questions on this quick start tutorial, you can send feedback on \nWarehouse of this tutorial on Github\n.\n\n\n\n\nAccording to your experience of using the engine, you can continue to read:\n\n\n\n\nCocos2d-x User Guide\n\n\nUnity User Guide", 
            "title": "_Quick Start"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/quick-start/index.html#quick-startcreating-your-first-game", 
            "text": "The document you are reading now includes systematic introductions of the editor panel, functions and workflows of Cocos Creator. However, if you want to quickly learn the general flow and method of developing games by Cocos Creator, this chapter will meet your needs. After finishing the tutorial in this chapter, you might obtain enough information for creating games. But we still recommend you to continue reading this guide to understand the details of each functional block and the complete workflows.  Now, let's begin! Following the tutorial, we will create a deceiving game that is named  Pick Up the Stars . Players of this game need to manipulate an  obtuse  monster that never stops jumping to touch the continuously appearing stars. The dazzling acceleration will bring great challenges to players. Play with your friends and see who can obtain the most stars!  The completed form of this game can be experienced here:  http://fbdemos.avosapps.com/star-catcher/", 
            "title": "Quick Start\uff1aCreating your first game"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/quick-start/index.html#prepare-project-and-resources", 
            "text": "We have prepared for you all the resources needed for creating this game. Download  Original Project  and decompress it to the location you want. Then we can start:  Download the original project  You can also download the completed project. If there is any confusion when following the tutorial to create the game, you can open the completed project for reference:  Download the completed project", 
            "title": "Prepare project and resources"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/quick-start/index.html#open-the-original-project", 
            "text": "If you still don't know how to obtain and start Cocos Creator, please read the  Install  section.   Firstly, start Cocos Creator, and choose  Open other projects  In the pop up input field for selecting folder, choose  start_project  that has just been downloaded and decompressed, and click the  Open  button  The main window of Cocos Creator editor will be opened, and you will see the project status as follows", 
            "title": "Open the original project"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/quick-start/index.html#check-game-resources", 
            "text": "Our original project has included all the game resources needed; therefore, you don't need to import any other resources. For details on importing resources, please read content related to  Asset Workflow .  Next, let's get to know the resources of the project. Please pay attention to a panel named  Assets , on which all the resource allocation graphs of the project are shown.  We can see that the root directory of the project resources is named as  assets , which is in accordance with the  assets  directory in the decompressed original project. Only resources under this directory can be imported by Cocos Creator into the project and be managed.  The  Assets  panel can display the directory structure of any hierarchy. An icon like   represents a folder. Clicking the triangle icon on the left side of the folder, you can unfold the contents of the folder. After completely unfolding the folder, the  Assets  panel will present itself as illustrated below.   Every resource is a document, which, after being imported into the project, will be recognized as different types of resources according to the differences in extension name. Its icon will be differentiated too. Next, let's take a look at the respective types and usages of the resources in the project.    audio document, which is an mp3 document generally. Audio documents named as  jump  and  score  will be played respectively when the character jumps and scores.   bitmap font, which is jointly formed by a fnt document and png document. Bitmap font is a commonly used font resource in game development. For detailed information, please read  Font  There are various kinds of abbreviated icons, all of which are image resources, normally a png or jpg document. After being imported into the project, the image document will be crudely processed into the resource of  texture  type. Then these resources can be dragged into scenes or component properties for use.", 
            "title": "Check game resources"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/quick-start/index.html#creating-a-game-scene", 
            "text": "In Cocos Creator, the game scene is the core of organizing the game contents when developing games, which is also the carrier for all the game contents presented to players. The game scene will normally include the following contents:   Scene images and words (Sprite, Label)  Characters  Game logic scripts attached to scene nodes in the form of components   When players run the game, the game scene will be loaded. After that, the game scripts of included components will automatically run to realize various kinds of logic functions set up by developers. Therefore, apart from resources, the game scene is the foundation of all content creation. Now let's create a new scene.   Click the  assets  directory in the  Assets  panel, making sure the scene will be created under this directory  Click the plus sign on the top left corner of the  Assets  panel, and choose  Scene  in the pop up menu  We created a scene document named as  New Scene . Right click it and choose  Rename  to rename it as  game .  Double click  game  and the scene will be opened in the  scene editor  and the  Node Tree .", 
            "title": "Creating a game scene"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/quick-start/index.html#to-understand-canvas", 
            "text": "After opening the scene, all the nodes (and their hierarchical relations) of the current scene will be shown in the the  Node Tree . The newly created scene has only one node called  Canvas .  Canvas  can be called the canvas node or rendering root node. Click  Canvas , its properties will display in the  Properties  panel.   The  Design Resolution  property here stipulates the design resolution of the game.  Fit Height  and  Fit Width  stipulate how we should zoom  Canvas  to adjust to different resolutions when running on screens of different sizes.  Being provided with the function of adjusting to different resolutions, we will normally put all the nodes in charge of image display in the scene under  Canvas . In this way, when the  scale  property of  Canvas  changes, all the images, as its subnodes, will zoom together to adjust to the sizes of different screens.  For more detailed information, please read  Canvas . Currently, we only need to know that the scene images added next will all be put under the  Canvas  node.", 
            "title": "To understand Canvas"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/quick-start/index.html#setting-up-a-scene-image", 
            "text": "", 
            "title": "Setting up a scene image"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/quick-start/index.html#adding-a-background", 
            "text": "First, find the background image resource according to the path of  assets/textures/background  in the  Assets  panel. Click and drag this resource to the  Canvas  node in  Arrangement editor . Don't release the mouse until the  Canvas  node is highlighted orange, which means a subnode using  background  as the image resource will be added.   Now you can release the mouse button, and you will see a node named  background  has been added under  Canvas . When we use the way of dragging a resource to add a node, the node will be automatically named as the name of the image resource.  When we edit and modify the scene, we can promptly save our modifications by main menu  document- save scene . Or we can save by shortcut keys:  Ctrl+S \uff08Windows\uff09or  Cmd + S \uff08Mac\uff09.", 
            "title": "Adding a background"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/quick-start/index.html#modify-background-size", 
            "text": "In  scene editor , the newly added background images can be seen. Next we will modify the size of the background image to make it cover the whole screen.  Firstly, click the  background  node, and click the fourth  rectangle tool  at the top left corner of the main window:   By using this tool we can conveniently modify the size of the image node. Move the mouse to rest on the left side of  background  in  scene editor , click and drag it to the left until the left side of  background  exceeds the blue frame that represents the design resolution. Then we can drag the right side of  background  to the right using the same method.   Then we need to drag the upper and lower sides to make the size of the background image fully cover the frame of the designing resolution.   When using  rectangle tool  to modify the size of the background image, we can see the  Size  property of  Node  in the  Properties  panel is changing accordingly. After completion, the size of the background image is approximately  (1360, 760) . You can also directly input a numeric value into the input field of the  Size  property, which will achieve the same effect as that of using  rectangle tool . A background image of this size can cover the whole screen of all the phones on the market, with no exceptions.", 
            "title": "Modify background size"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/quick-start/index.html#add-ground", 
            "text": "Our main character needs a ground that it can jump on. We will add one instantly. By the same method of adding a background image, drag the  assets/textures/ground  resource in the  Assets  panel to  Canvas  in the  Node Tree . When dragging, we can choose the order relation of newly added nodes and  background  nodes. When in the state of dragging the resource, move the mouse pointer to the bottom of the  background  node until a highlighted orange frame appears on  Canvas  and a green line representing the insert position appears below  background , and then release the mouse. In this way,  ground  will be put under the  background  in the scene hierarchy, which is also a subnode of  Canvas .  In the  Node Tree , the render order of nodes shown below will follow that of nodes shown above. We can see the  ground  object at the bottom is the first to appear in  scene editor . Besides, the subnode will permanently display before the parent node. We can adjust the hierarchical order and relation of nodes at anytime to control their show order.  According to the method of modifying the background, we can also use  rectangle tool  to set a suitable size for the ground node. When activating  rectangle tool , by dragging the vertices and the parts other than the four sides of nodes, we can change the position of nodes. The state of set ground nodes is as illustrated below:   Apart from  rectangle tool , we can also use  move tool    to change the positions of the nodes. Try to hold down the arrow of  move tool  shown on the node and drag it, then we can change the position of the node on a single coordinate axis at one time.  When setting up the position and size of the background and ground, we don't need precise numeric values and can drag them by guessing. If you prefer whole numbers, you can directly input numeric values of  position  and  size  according to the screenshot.", 
            "title": "Add ground"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/quick-start/index.html#adding-a-main-character", 
            "text": "Next our main character the little monster will make its debut. Drag  assets/texture/PurpleMonster  from the  Assets  panel and put it under  Canvas  in the  Node Tree , and make sure its position is below  ground , in this way our main character will be shown at the very front.  To highlight the aura of the main character in the scene nodes, we right click the newly added  PurpleMonster  node, choose  rename  and rename it as  Player .  Next we will set up the properties of the main character. First, we change the position of  Anchor . The anchor point of any node will be at the center of itself by default, which means the position of the center of the node is the position of the node. We hope to manipulate the position of the base of the main character to simulate the effect of jumping on the ground; therefore, we need to set up the anchor point of the main character under its foot now. Find  Anchor  property in the  Properties  panel and set up the value of  y  as  0 . We will see that in  scene editor , the arrow of the  move tool  that represents the position of the main character appears under the foot of the main character.  Next, drag  Player  from  scene editor  and put it on the ground. The effect is as illustrated below:   In this way our scene's basic artistic content is set up. In the next section we will write code to vivify the contents of the game.", 
            "title": "Adding a main character"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/quick-start/index.html#writing-the-main-characters-script", 
            "text": "One of the core ideas of developing games by Cocos Creator is to let the content creation and function development undergo parallel cooperation smoothly. In the last section we focused on artistic content. Next we will write script to develop the flow of functions, and we will see that the finished program script can be used by content creators easily.  Even if you have never written a program before, there's no need to worry. We will provide all the necessary codes in the tutorial. You only need to copy and paste them to the correct position. Then in this part you can ask your programmer partners for help. Next let's start creating script that drives the main character to act.", 
            "title": "Writing the main character's script"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/quick-start/index.html#create-script", 
            "text": "First, right click the  assets  folder in the  Assets  panel and choose  Create- folder    Right click  New Folder , choose  Rename  and rename it as  scripts , under which all our scripts will be saved.  Right click the  scripts  folder, choose  Create- JavaScript  and create a JavaScript script  Rename the newly created script as  Player . Double click this script and open the code editor.", 
            "title": "Create script"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/quick-start/index.html#writing-component-property", 
            "text": "The opened script already has some preset code blocks. These codes are the structure needed for writing a component script. Scripts of such a structure are the components in Cocos creator, which can be mounted on the nodes in the scene and provide various functions that manipulate nodes. First, we will set up some properties and see how to adjust them in the scene.  Find the portion of  properties  in the  Player  script in  code editor , change it to the following content and press  Ctrl + S \uff08Windows\uff09or  Cmd + S \uff08Mac\uff09to save it:  // Player.js\n    //...\n    properties: {\n        // main character's jump height\n        jumpHeight: 0,\n        // main character's jump duration\n        jumpDuration: 0,\n        // maximal movement speed\n        maxMoveSpeed: 0,\n        // acceleration\n        accel: 0,\n    },\n    //...  These newly added properties will stipulate the movement of the main character. In code, we don't have to care about how much these numeric values are, because we will directly set up these numeric values in the  Properties  panel later.  Now we can add the  Player  component to the node of the main character. Choose the  Player  node in the  Node Tree , click the  add component  button in the  Properties  panel and choose  add user's script component- Player  to add the  Player  component to the node of the main character.   Now we can see the newly added  Player  component in the  Properties  panel of the  Player  node. Set up properties related to the jumping and movement of the main character according to the image below:   Only jumpDuration's unit is seconds. The unit of the other values is pixels. According to the current setting of the  Player  component: Our main character will have a jump height of 200 pixels. The time needed for jumping to the highest point is 0.3 seconds. Its maximum horizontal movement speed is 400 pixels per second. Its horizontal acceleration is 350 pixels per second.  All these numeric values are suggestions. Later when the game is running, you can modify these numeric values in the  Properties  panel at anytime according to your preference, no need to change any codes. How convenient it is, right?", 
            "title": "Writing component property"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/quick-start/index.html#writing-code-for-jumping-and-movement", 
            "text": "Next we will add a method to make the main character jump. Add a method called  setJumpAction  and put it below the  properties: {...},  code block:  // Player.js\n    properties: {\n        //...\n    },\n\n    setJumpAction: function () {\n        // jump up\n        var jumpUp = cc.moveBy(this.jumpDuration, cc.p(0, this.jumpHeight)).easing(cc.easeCubicActionOut());\n        // jump down\n        var jumpDown = cc.moveBy(this.jumpDuration, cc.p(0, -this.jumpHeight)).easing(cc.easeCubicActionIn());\n        // repeat\n        return cc.repeatForever(cc.sequence(jumpUp, jumpDown));\n    },  Here some Action in the Cocos2d-js engine is used to realize the jumping animation of the main character. For detailed information, please check  Cocos2d-js API .  Next invoke the newly added  setJumpAction  method in the  onLoad  method and implement  runAction  to start action:  // Player.js\n    onLoad: function () {\n        // initialize jump action\n        this.jumpAction = this.setJumpAction();\n        this.node.runAction(this.jumpAction);\n    },  The  onLoad  method will be immediately implemented after loading the scene. So we will put operations and logic concerning initialization into it.  After the script is saved, we can start running the game for the first time!  Click the  preview  button at the top of Cocos Creator editor, which looks like a \"play\" button. Cocos Creator will automatically open your default browser and run the game in it. Now we should see the main character --- a purple monster jumping lively and continuously in the scene.", 
            "title": "Writing code for jumping and movement"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/quick-start/index.html#manipulation-of-movement", 
            "text": "A main character that can only jump foolishly up and down on the same spot is not very promising. Let us add keyboard input for the main character, using  A  and  D  to manipulate its jump direction. Below the  setJumpAction  method, add a new  setInputControl  method:  // Player.js\n    setJumpAction: function () {\n        //...\n    },\n\n    setInputControl: function () {\n        var self = this;\n        // add keyboard event listener\n        cc.eventManager.addListener({\n            event: cc.EventListener.KEYBOARD,\n            // When there is a key being pressed down, judge if it's the designated directional button and set up acceleration in the corresponding direction\n            onKeyPressed: function(keyCode, event) {\n                switch(keyCode) {\n                    case cc.KEY.a:\n                        self.accLeft = true;\n                        self.accRight = false;\n                        break;\n                    case cc.KEY.d:\n                        self.accLeft = false;\n                        self.accRight = true;\n                        break;\n                }\n            },\n            // when releasing the button, stop acceleration in this direction\n            onKeyReleased: function(keyCode, event) {\n                switch(keyCode) {\n                    case cc.KEY.a:\n                        self.accLeft = false;\n                        break;\n                    case cc.KEY.d:\n                        self.accRight = false;\n                        break;\n                }\n            }\n        }, self.node);\n    },  Then modify the  onLoad  method, into which we add the switch of accelerating to the left/right and the current horizontal speed of the main character. Then invoke the newly added  setInputControl  method. Start monitoring keyboard input after loading the scene:  // Player.js\n    onLoad: function () {\n        // initialize jump action\n        this.jumpAction = this.setJumpAction();\n        this.node.runAction(this.jumpAction);\n\n        // switch of acceleration direction\n        this.accLeft = false;\n        this.accRight = false;\n        // current horizontal speed of main character\n        this.xSpeed = 0;\n\n        // initialize keyboard input listener\n        this.setInputControl();\n    },  Finally, modify the content of the  update  method by adding settings for the acceleration, speed and the current position of the main character:  // Player.js\n    update: function (dt) {\n        // update speed of each frame according to the current acceleration direction\n        if (this.accLeft) {\n            this.xSpeed -= this.accel * dt;\n        } else if (this.accRight) {\n            this.xSpeed += this.accel * dt;\n        }\n        // restrict the movement speed of the main character to the maximum movement speed\n        if ( Math.abs(this.xSpeed)   this.maxMoveSpeed ) {\n            // if speed reaches its limit, use the max speed with current direction\n            this.xSpeed = this.maxMoveSpeed * this.xSpeed / Math.abs(this.xSpeed);\n        }\n\n        // update the position of the main character according to the current speed\n        this.node.x += this.xSpeed * dt;\n    },  update  will be invoked once for each frame after loading the scene. We normally put the logic contents that need to be frequently calculated or timely updated here. In our game, after obtaining the acceleration direction by keyboard input, we need to calculate the speed and position of the main character in  update  for each frame.  After saving the script, you can brew a cup of tea and click  preview  to check the latest outcome. After opening the preview in your browser, click the game scene with the mouse (due to the restrictions of browsers, keyboard input can only be accepted after clicking the game scene) , then you can press the  A  and  D  buttons to manipulate the main character to move to the left/right!  Is the movement a little bit too slow? Does the main character not jump high enough? Hope to extend jump duration? No problem! All these can be adjusted at anytime. Just set up different property values for the  Player  component, then you can adjust the game at your will. Here is a set of settings for reference:  Jump Height: 150\nJump Duration: 0.3\nMax Move Speed: 400\nAccel: 1000  This set of property settings will make the main character as agile as possible. As for how to choose the values, it all depends on what style of game you want.", 
            "title": "Manipulation of movement"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/quick-start/index.html#making-stars", 
            "text": "The main character can jump freely now so we need to set up a goal for players. The stars will appear continuously in the scene and players need to manipulate the monster to touch the stars to collect points. The star touched by the main character will disappear and a new one will be immediately re-created at a random position.", 
            "title": "Making stars"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/quick-start/index.html#create-prefab", 
            "text": "As for the nodes that need to be created repeatedly, we can save it as a  Prefab  resource, which can be a template for the dynamic generation of nodes. For more information about  Prefab , please read  Prefab .  Firstly, drag the  assets/textures/star  resource from the  Assets  panel into the scene. Anywhere in the  Node Tree  is fine. We only need the scene to be the operating platform for creating Prefab. After creation we will delete this node from the scene.  We don't need to modify the position of the stars or its render properties. But to make the stars disappear after being touched by the main character, we need to add a special component to the star. By the same method of adding the  Player  script, add a JavaScript script named  Star  to  assets/scripts/  (in the  Properties  panel of the  star , select  Add component  and then  Add custom component  and then  Star ).   Next, double click this script to start editing. Only one property is needed for the star component to stipulate the distance for collecting points by the main character. Modify  properties  and add the following content:  // Star.js\n    properties: {\n        // When the distance between the star and main character is less than this value, collection of the point will be completed\n        pickRadius: 0\n    },  After saving the script, add this script to the newly created  star  node. Then set up the property value of  Pick Radius  in the  Properties  panel as  60 :   The settings needed by Star Prefab are now finished. Now drag the  star  node from the  Node Tree  and drop it into the  assets  folder in the  Assets  panel. This should generate a Prefab resource named  star , as shown below.   Now the  star  node can be deleted from the scene. We can dynamically use the Prefab resource of stars in the script to generate stars.", 
            "title": "Create Prefab"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/quick-start/index.html#adding-game-control-script", 
            "text": "The generation of stars is a part of the game's main logic. Therefore we need to add a script named  Game  and make it the script of the game's main logic. Logic concerning scoring, failure and restarting will be added to this script later.  Add a new  Game  script inside the  assets/scripts  folder (next to  Star  and  Player ). Double click to open the script. First, add the properties needed for generating stars:  // Game.js\n    properties: {\n        // this property quotes the PreFab resource of stars\n        starPrefab: {\n            default: null,\n            type: cc.Prefab\n        },\n        // the random scale of disappearing time for stars\n        maxStarDuration: 0,\n        minStarDuration: 0,\n        // ground node for confirming the height of the generated star's position\n        ground: {\n            default: null,\n            type: cc.Node\n        },\n        // player node for obtaining the jump height of the main character and controlling the movement switch of the main character\n        player: {\n            default: null,\n            type: cc.Node\n        }\n    },  After saving the script, add the  Game  component to the  Canvas  node in the  Node Tree  (after choosing the  Canvas  node, drag the script to the  Properties  panel or click the  Add component  button in the  Properties  panel and choose  Game  in  Add Custom Component ).  Next, drag the  star  Prefab resource from the  Assets  panel into the  Star Prefab  property of the newly created  Game  component. This is the first time we have set up a quotation for the property. Only when setting  type  as quote type when declaring a property (such as the  cc.Prefab  type written here) can an asset or a node be dragged to the property.)  Then, drag the  ground  and  Player  nodes from the  Node Tree  to properties of the same name in the component, to finish the node quotation.  Finally, set the values of the  Min Star Duration  and  Max Star Duration  properties as  3  and  5 . Later when generating stars, we will choose a random value between these two values, for the duration of each star.", 
            "title": "Adding game control script"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/quick-start/index.html#generate-stars-at-a-random-position", 
            "text": "Next, we will continue to modify the  Game  script by adding the logic of generating stars and putting it after the  onLoad  method:  // Game.js\n    onLoad: function () {\n        // obtain the anchor point of ground level on the y axis\n        this.groundY = this.ground.y + this.ground.height/2;   // this.ground.top may also work\n        // generate a new star\n        this.spawnNewStar();\n    },\n\n    spawnNewStar: function() {\n        // generate a new node in the scene with a preset template\n        var newStar = cc.instantiate(this.starPrefab);\n        // put the newly added node under the Canvas node\n        this.node.addChild(newStar);\n        // set up a random position for the star\n        newStar.setPosition(this.getNewStarPosition());\n    },\n\n    getNewStarPosition: function () {\n        var randX = 0;\n        // According to the position of the ground level and the main character's jump height, randomly obtain an anchor point of the star on the y axis\n        var randY = this.groundY + cc.random0To1() * this.player.getComponent('Player').jumpHeight + 50;\n        // according to the width of the screen, randomly obtain an anchor point of star on the x axis\n        var maxX = this.node.width/2;\n        randX = cc.randomMinus1To1() * maxX;\n        // return to the anchor point of the star\n        return cc.p(randX, randY);\n    }  After saving the script, click the  preview  button. Then in the browser you will see that a star is dynamically generated after the game is started! By the same method, you can dynamically generate any preset node with a Prefab template in the game.", 
            "title": "Generate stars at a random position"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/quick-start/index.html#adding-the-action-of-the-main-characters-touching-and-collecting-of-stars", 
            "text": "Now we will add the action logic of the main character's collecting of stars. The essential point here lies in the fact that the star needs to obtain the position of the main character's node at any time to judge if the distance between them is shorter than the collectable distance. How do we obtain the quotation of the main character's node? Don't forget that we have done two things before:   There is a property named  player  in the  Game  component, which saved the quotation of the main character's node.  Each star is dynamically generated in the  Game  script.   Therefore, we only need to deliver the concrete example in the  Game  component into a star and save it after the concrete example of the  Star  node is generated in the  Game  script. Then we can visit the main character's node by  game.player  at anytime. Let's open the  Game  script, and add the following code to the end of the  spawnNewStar  method:  // Game.js\n    spawnNewStar: function() {\n        // ...\n        // deliver the concrete example of the Game component into the star component\n        newStar.getComponent('Star').game = this;\n    },  Open the  Star  script after saving, now we can use the  player  node quoted in the  Game  component to judge the distance. Add the methods named  getPlayerDistance  and  onPicked  and put them below the  onLoad  method:  // Star.js\n    getPlayerDistance: function () {\n        // judge the distance according to the position of the player node\n        var playerPos = this.game.player.getPosition();\n        // calculate the distance between two nodes according to their positions\n        var dist = cc.pDistance(this.node.position, playerPos);\n        return dist;\n    },\n\n    onPicked: function() {\n        // When the stars are being collected, invoke the interface in the Game script to generate a new star\n        this.game.spawnNewStar();\n        // then destroy the current star's node\n        this.node.destroy();\n    },  Then add the judging distance for each frame to the  update  method. If the distance is shorter than the collectable distance set by the  pickRadius  property, implement collecting behavior:  // Star.js\n    update: function (dt) {\n        // judge if the distance between the star and main character is shorter than the collecting distance for each frame\n        if (this.getPlayerDistance()   this.pickRadius) {\n            // invoke collecting behavior\n            this.onPicked();\n            return;\n        }\n    },  Save the script, then preview and test again. You will see that when the main character gets close to the star, the star will disappear and a new one will be generated at a random position!", 
            "title": "Adding the action of the main character's touching and collecting of stars"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/quick-start/index.html#adding-score", 
            "text": "The little monster makes a great effort to collect the stars. But how come it receives no reward? Now, let's add the logic and display of scoring when collecting stars.", 
            "title": "Adding score"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/quick-start/index.html#adding-a-score-labellabel", 
            "text": "The score will start from 0 when the game is started. 1 point will be added for 1 star collected. To display the score, we should first create a  Label  node. Choose the  Canvas  node in the  Node Tree , right click and choose  Create -  Create Renderer Nodes -  Node With Label . A new Label node will be created under  Canvas , and it will be located at the bottom. Next we will use the following steps to set up this Label node:   Change the node's name to  score .  Select the  score  node, and set the X,Y of the  position  property to  (0, 180) .  Edit the  String  property of the  Label  component and input  Score: 0 .  Set the  Font Size  property of the  Label  component to  50 .  Drag the  assets/mikado_outline_shadow  bitmap font resource from the  Assets  panel\uff08pay attention! the icon is  \uff09into the  Font  property of the  Label  component, to change the font used to render the score.   The completed effect is as illustrated below (don't worry about the  Size ):", 
            "title": "Adding a score label\uff08Label\uff09"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/quick-start/index.html#adding-scoring-logic-to-game-script", 
            "text": "We will put the logic of scoring and updating the score display in the  Game  script. Open the  Game  script to start editing. First, add a reference property of the score display Label to the end of the  properties  block:  // Game.js\n    properties: {\n        // ...\n        // quotation of score label\n        scoreDisplay: {\n            default: null,\n            type: cc.Label\n        }\n    },  Next, add the initialization of variables for scoring in the  onLoad  method:  // Game.js\n    onLoad: function () {\n        // ...\n        // initialize scoring\n        this.score = 0;\n    },  Then add a new method named  gainScore  to the back of the  update  method:  // Game.js\n    gainScore: function () {\n        this.score += 1;\n        // update the words of the scoreDisplay Label\n        this.scoreDisplay.string = 'Score: ' + this.score.toString();\n    },", 
            "title": "Adding scoring logic to Game script"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/quick-start/index.html#invoke-the-scoring-logic-of-the-game-in-star-script", 
            "text": "Open the  Star  script after saving the  Game  script. Add the invoking of  gainScore  to the  onPicked  method:  // Star.js\n    onPicked: function() {\n        // when the stars are being collected, invoke the interface in the Game script to generate a new star\n        this.game.spawnNewStar();\n        // invoke the scoring method of the Game script\n        this.game.gainScore();\n        // then destroy the current star's node\n        this.node.destroy();\n    },  Preview after saving. You will see that when collecting stars, the scores displayed at the top of screen will increase now!", 
            "title": "Invoke the scoring logic of the Game in Star script"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/quick-start/index.html#judgement-of-failure-and-restarting", 
            "text": "Now our game has taken shape. But no matter how many scores one may get, a game without the possibility of failure won't give players any fulfillment. Now let's add the action of the stars' regular disappearance. And if all the stars disappear, the game will be viewed as failed. In other words, players need to finish collecting the star before the star disappears and repeat this procedure unceasingly to finish the loop of the play method.", 
            "title": "Judgement of failure and restarting"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/quick-start/index.html#adding-the-logic-of-disappearing-in-a-limited-time-to-the-star", 
            "text": "Open the  Game  script, and add the variable declaration needed for counting time before invoking  spawnNewStar  of the  onLoad  method:  // Game.js\n    onLoad: function () {\n        // ...\n        // initialize timer\n        this.timer = 0;\n        this.starDuration = 0;\n        // generate a new star\n        this.spawnNewStar();\n        // initialize scoring\n        this.score = 0;\n    },  Then add the logic of resetting the timer to the end of the  spawnNewStar  method, in which  this.minStarDuration  and  this.maxStarDuration  are properties of the  Game  component that was declared at the beginning. They are used to stipulate the random scale of star duration:  // Game.js\n    spawnNewStar: function() {\n        // ...\n        // reset timer, randomly choose a value according the scale of star duration\n        this.starDuration = this.minStarDuration + cc.random0To1() * (this.maxStarDuration - this.minStarDuration);\n        this.timer = 0;\n    },  Add the logic of updating the timer and judgement of exceeding the duration to the  update  method:  // Game.js\n    update: function (dt) {\n        // update timer for each frame, when a new star is not generated after exceeding duration\n        // invoke the logic of game failure\n        if (this.timer   this.starDuration) {\n            this.gameOver();\n            return;\n        }\n        this.timer += dt;\n    },  In the end, add the  gameOver  method. Reload the scene when failure occurs.  // Game.js\n    gameOver: function () {\n        this.player.stopAllActions(); // stop the jumping action of the player node\n        cc.director.loadScene('game');\n    }  Modification of the  Game  script is now finished. Save the script and open the  Star  script, because we need to add a simple visual prompt effect to the star that is about to disappear. Add the following code to the end of the  update  method:  // Star.js\n    update: function() {\n        // ...\n        // update the transparency of the star according to the timer in the Game script\n        var opacityRatio = 1 - this.game.timer/this.game.starDuration;\n        var minOpacity = 50;\n        this.node.opacity = minOpacity + Math.floor(opacityRatio * (255 - minOpacity));\n    }  Save the  Star  script, and the logic of this game's play method will now be completely finished. Now click the  preview  button, we will see a qualified game with a core play method, incentive mechanism and failure mechanism in the browser.", 
            "title": "Adding the logic of disappearing in a limited time to the star"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/quick-start/index.html#adding-sound-effects", 
            "text": "Although lots of people will ignore sound when playing smartphone games, for the completeness of the workflow presented in this tutorial, we still have to supplement the task of adding sound effects.", 
            "title": "Adding sound effects"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/quick-start/index.html#jumping-sound-effect", 
            "text": "Firstly, add the jumping sound effect. Open the  Player  script and add the  jumpAudio  property that quotes the sound document resource:  // Player.js\n    properties: {\n        // ...\n        // jumping sound effect resource\n        jumpAudio: {\n            default: null,\n            url: cc.AudioClip\n        },\n    },  Then rewrite the  setJumpAction  method, insert the callback of playing the sound effect and play the sound by adding the  playJumpSound  method:  // Player.js\n    setJumpAction: function () {\n        // jump up\n        var jumpUp = cc.moveBy(this.jumpDuration, cc.p(0, this.jumpHeight)).easing(cc.easeCubicActionOut());\n        // jump down\n        var jumpDown = cc.moveBy(this.jumpDuration, cc.p(0, -this.jumpHeight)).easing(cc.easeCubicActionIn());\n        // add a callback function to invoke other defined methods after the action is finished\n        var callback = cc.callFunc(this.playJumpSound, this);\n        // repeat unceasingly, and invoke callback to play sound after landing each time\n        return cc.repeatForever(cc.sequence(jumpUp, jumpDown, callback));\n    },\n\n    playJumpSound: function () {\n        // invoke sound engine to play the sound\n        cc.audioEngine.playEffect(this.jumpAudio, false);\n    },", 
            "title": "Jumping sound effect"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/quick-start/index.html#scoring-sound-effect", 
            "text": "After saving the  Player  script, open the  Game  script to add the scoring sound effect. Firstly, we still add a property to  properties  to quote the sound document resource:  // Game.js\n    properties: {\n        // ...\n        // scoring sound effect resource\n        scoreAudio: {\n            default: null,\n            url: cc.AudioClip\n        }\n    },  Then insert the code of playing the sound into the  gainScore  method:  // Game.js\n    gainScore: function () {\n        this.score += 1;\n        // update the words of the scoreDisplay Label\n        this.scoreDisplay.string = 'Score: ' + this.score.toString();\n        // play the scoring sound effect\n        cc.audioEngine.playEffect(this.scoreAudio, false);\n    },  Save the script. Go back to the  Node Tree , choose the  Player  node, and drag the  assets/audio/jump  resource from the  Assets  panel to the  Jump Audio  property of the  Player  component.  Then choose the  Canvas  node, drag the  assets/audio/score  resource to the  Score Audio  property of the  Game  component.  Now it's done! The scene hierarchy of the completed form and properties of each key component are as follows:       Now we can fully enjoy the newly created game. How many scores can you get? Don't forget that you can modify game parameters like movement control and star duration, etc. in the  Player  and  Game  components at anytime to quickly adjust the game's degree of difficulty. The scene needs to be saved after modifications of component properties. Only the saved values can be recorded.", 
            "title": "Scoring sound effect"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/quick-start/index.html#summary", 
            "text": "Congratulations! You have finished the first game created by Cocos Creator. We hope this quick start tutorial for beginners can help you understand the basic concepts and workflows in the game development process of Cocos Creator. If you are not interested in writing and learning script programming, you can directly copy and paste the completed script from the completed project.  Next, you can continue to perfect this game. The following are some recommended improving methods:   Add a simple start menu, display a start button when the game starts running. Only after clicking the button will the game start  Add a simple menu interface for the failure of the game. Only after clicking the button will the game restart after failure  Restrict the movement of the main character to the window's boundaries  Add more exquisite animation performance to the jumping action of the main character  Add a countdown progress bar to the state when a star disappears  Add more gorgeous effects when collecting stars  Add input controls for touch screen devices   For editions that have been improved in all the above aspects, you can download  evolution edition project  for reference and learning, which will not be discussed in detail here.  Moreover, if you want to release the completed game on a server to share with your friends, you can read the content of the  Preview Build  section.  Today's tutorial ends here. You can immediately start creating your second Cocos Creator game or continue reading this guide. For any questions on this quick start tutorial, you can send feedback on  Warehouse of this tutorial on Github .   According to your experience of using the engine, you can continue to read:   Cocos2d-x User Guide  Unity User Guide", 
            "title": "Summary"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/cocos2d-x-guide/index.html", 
            "text": "Cocos2d-x User Guide\n\n\nCocos Creator is a new type of game development tool oriented towards content creation that has completely integrated the componentized edition Cocos2d-x WEB, by which you can launch games on platforms like Web, iOS, Android, Mac, Windows, etc.. Moreover, you can use it to directly launch games on Cocos Play platform, grasping the new opportunity brought by the rapid development of the channel for mobile web games. For more introductions to Cocos Creator, please refer to \nIntroduction\n.\n\n\nThe aim of this document is to introduce the users of Cocos2d-x to Cocos Creator and help them learn how to use the new editor as soon as possible.\nThis document will discuss possible problems that may occur in the transition from Cocos2d-x to Cocos Creator development and offer relative solutions, which will not go deep into framework details but provide links to detailed reference documents of different parts.\n\n\n1. Typical Misconceptions\n\n\nFor new Cocos Creator users, some of the following typical misconceptions may occur\uff1a\n\n\n\n\nHoping to use Cocos Creator by coordinating it with Cocos2d-x\n\uff1aCocos Creator, having had a complete JavaScript WEB engine internally, can work without relying on Cocos2d-x. However, if you want to launch the original edition, you still need to set up a Cocos2d-x in your computer.\n\n\nBuilding an entire code framework at first and then add in game contents\n\uff1aCocos Creator's workflows are content creation oriented, which is very convenient for prototype creation. You can create scenes and write logic code directly into the editor, then you can drive the game scene and run it. The following data driven chapters will introduce changes of workflows in detail\n\n\nDirectly check the API of Cocos2d-JS when coding\n\uff1aCocos Creator has said to be originated from Cocos2d-JS. Their APIs have the same origin and have lots of identical parts. But with entirely new componentized frameworks, their APIs are different and not compatible with each other\n\n\nHoping to directly run the old Cocos2d-JS games on Cocos Creator\n\uff1aTheir APIs are not 100% compatible; therefore, such operation is unavailable.\n\n\nExtend functions by way of inheritance\n\uff1aIn Cocos2d-JS, inheritance is a basic method for extending node functions. But in Cocos Creator, inheriting and extending nodes is not recommended. The node is only an entity. The logic of the game should be realized by different components and then be assembled in the node.\n\n\n\n\nThe reason for mentioning these misconceptions at the beginning of this document is that we hope developers can realize that the workflows and development ideas provided by Cocos Creator are tremendously different from those of Cocos2d-x.\nFor a better understanding of how to code correctly in Cocos Creator, the following two chapters will introduce the changes in workflows and API level brought by data driven in more detail.\n\n\n2. Data Driven\n\n\nIn Cocos2d-x, the development method is driven by code and most of the game's data is stored in the code, unless the developer has built his/her own data driven framwork.\nIn the framework of Cocos Creator, all the scenes will be serialized as pure data. When running, these pure data will be used to rebuild factors like scenes, interfaces, animations and even components, etc..\n\n\nWhat is code driven and what is data driven?\n\n\nWhy do we call Cocos2d-x a code driven development method? For instance, suppose that there is a character in the scene, who will walk around continuously in one area, then we will code as follows:\n\n\nvar role = new cc.Sprite('role.png');\nscene.addChild(role);\nrole.setPosition(100, 100);\nvar walk = cc.sequence(cc.moveBy(5, 100, 0), cc.moveBy(5, -100, 0)).repeatForever();\nrole.runAction(walk);\n\n\n\n\nIn this code, scene relationship, position information, action section and animation information of \nrole\n are all realized by code; therefore it's called code driven. There also are some developers who store data information in other documents, but they still have to realize the parser of data themselves. Even when using some traditional editors, parsers are also needed to parse the data exported from editors into scenes.\n\n\nBut what Cocos Creator provides is a more thorough data driven method. All the information edited in the editor will be serialized into data documents. When running, the engine will directly transform the data into object by deserialization. This procedure is fundamentally different from the procedure described above: the category property in the engines can be directly serialized or deserialized. You don't need to transform it by any mapping relation. Scene graph, position property and animation, etc. in the above example can all be serialized by the editor into data. When loading scenes, no data is needed, developers only need to deserialize the whole scene from scene data:\n\n\ncc.director.loadScene('SampleScene');\n\n\n\n\nSerialization\n\n\nSerialization and deserialization supports most public properties in Cocos Creator. These properties are exposed to developers through the properties panel. Developers can arbitrarily modify and save properties in editor. The procedure of saving is to serialize resources and scene data into Asset Database. In contrast, in the procedure of loading scenes, the deserialization mechanism can instantiate corresponding objects according to scene data, and restore all properties set up in the editor.\n\n\nWhat's more, the power of data driven lies in the fact that components edited by users themselves can also make property declarations. These properties can be edited in editor, saved in scene data, and finally deserialized into game scenes when running.\n\n\nThe source database is presented as \nAssets\n in the editor.\n\n\nUnderstanding workflows of Cocos Creator from the angle of data driven\n\n\nBeing different from Cocos2d-x, workflows of Cocos Creator are content creation oriented. Developers might encounter various kinds of confusion in the process of transition. However, when viewing from the angle of data driven, such changes of workflows will be a matter of course. Data driven makes it possible to freely edit scenes. Developers can not only build the whole scene visually, but also edit the logic of the game (edit properties exposed by components), which makes the editor the access for all, but not code. Just like the example before, in Cocos Creator, developers build a parent-child relationship, set position, and design animation with editor at first, then design the logic of the nodes in the scene using the component code; and assemble components into different nodes in the end.\n\n\n\n\n3. Changes at Framework Level\n\n\nAs is mentioned at the beginning, Cocos Creator has been completely integrated with componentized Cocos2d-JS. This is a highly customized edition. Due to componentization and the needs of data driven, API sets and the standard edition of Cocos2d-JS have the same origin, but the two of which are uncompatible with each other.  The following are detailed introductions of some important API differences:\n\n\nLogic Tree and Render Tree\n\n\nIn Cocos2d-JS, the Render device will traverse the scene's node tree to generate a render queue; therefore, the node tree built by developers is in fact a render tree. However, in Cocos Creator, we introduce a new concept: logic tree. The node tree built by developers and mounting components constitutes a logic tree, within which nodes constitute entity units and components are in charge of logic.\n\n\nThe most essential difference is: What the logic tree concerns is game logic but not render relation.\n\n\nTh logic tree will generate the scene's render tree and decide rendering order. But developers don't need to worry about these, they only need to make sure the correctness of the displaying effect in editor. In \nHierarchy\n of editor, developers can adjust the order and parent-child relationship of the logic tree.\n\n\nScene Management\n\n\nIn Cocos2d-JS, after building scenes with code, developers can switch scenes by 'cc.director.runScene'. In Cocos Creator, when developers have finished building scenes in editor, all the data will be saved as a 'scene-name.fire' document and then be stored in Asset Database. Developers can load a scene resource by using \ncc.director.loadScene\n. Please refer to the following concrete example:\n\n\nvar sceneName = 'scene-name';\nvar onLaunched = function () {\n    console.log('Scene ' + sceneName + ' launched');\n};\n// The first parameter is the name of the scene. The second optional parameter is the callback function after the loading scene.\ncc.director.loadScene(sceneName, onLaunched);\n\n\n\n\nBesides, interface for visiting scene nodes is provided:\n\n\n// To obtain scene nodes of logic tree\nvar logicScene = cc.director.getScene();\n\n\n\n\nNode and Component\n\n\nIn Cocos Creator, 'cc.Node'is replaced by the logic node, and the old node is renamed as \n_ccsg.Node\n and becomes a private category that is not recommended to be used anymore. The reason for this is that developers only need to focus on logic nodes and they no longer need to care about render nodes at the bottom. Of course, we have preserved its API sets as much as possible. APIs like information concerning Transform, node tree, Action and properties remain unchanged.\n\n\nThere used to be a crude mechanism of components. Developers could receive callbacks like onEnter, onExit, update, etc. by adding components to Node. In Cocos Creator, the same interface \naddComponent\n is used, but the component system becomes the core of the whole engine. Components can extend the function of the logic node in various ways. It could even be said that the logic node shouldn't include any actual game logic and it's logic should be completely assembled by various kinds of logic components.\n\n\nAnd this leads to the biggst difference between Cocos2d-JS and Cocos Creator: How to extend node behavior?\n\n\nIn Cocos2d-JS, developers can extend Nodes. Cocos Creator does not allow this. All the extensions should be done by adding components. In a componentized framework like Cocos Creator, composition is the preferred extension method.\n\n\nFor more information on the component system, please refer to chapters like \nNode Component\n and \nComponents\n, etc..\n\n\nCoordinate System and Anchor Point\n\n\nThe coordinate system of Cocos Creator is still a cartesian coordinate system, but there are some changes in anchor points. Please look at the diagram before reading the explanations:\n\n\n\n\nSupposing the anchor point of a context node is (0.5, 0.5). This node has a subnode, the anchor point of which is (0, 0). In Cocos2d-JS, its illustration will be like that in the left diagram. But in Cocos Creator, its illustration will be like that of the right diagram. The reason is that the local coordinate systems of the subnodes are different. In Cocos2d-JS, wherever the anchor point of the parent node is located, the origin of the subnode's coordinate system is at the lower left corner of the parent node. But in Cocos Creator, the origin of the subnode's coordinate system is in the position of the parent node's coordinate position(i.e., its anchor point). Such modification is more compatiable with the editor, which is, in general, very natural for scenes built by the editior. But when developers use code to build nodes, they should pay special attention.\n\n\nCategories and objects that remain unchanged\n\n\nIn Cocos Creator, we preserved the behaviors of lots of important categories and objects, which include:\n\n\n\n\ncc.game\n\n\ncc.view\n\n\ncc.director\n\n\ncc.audioEngine\n\n\ncc.eventManager\n\n\ncc.scheduler\n\n\ncc.textureCache\n\n\ncc.sys\n\n\ncc.visibleRect\n\n\nscripting actions\n\n\nSome types of render nodes: Menu and MenuItem,ClippingNode,ProgressTimer,MotionStreak,ParallaxNode,RenderTexture,DrawNode,relative categories of Tile map, etc.\n\n\nChipmunk physics engine and PhysicsDebugNode\n\n\nTypes of basic data\n\n\n\n\nPoints to be noted:\n\n\n\n\nThose types of preserved render nodes listed above can only interact with the render tree and can't be used together with logic nodes and components.\n\n\nAction system supports not just render nodes, but all the actions operated on Transform support logic nodes too.\n\n\ncc.scheduler\n supports components, which contain interfaces like \nschedule\n,\nscheduleOnce\n,\nunschedule\n,\nunscheduleAllCallbacks\n\n\nThough event manager is preserved, logic nodes have a set of new event API. Direct use of event manager is not recommended. For detailed information, please refer to the introduction of the event system that follows\n\n\n\n\nEvent System\n\n\nIn \ncc.Node\n, a series of wholly new event APIs are added. From logic nodes, various events can be distributed. The monitor's register of some kind of event is also allowed. The monitor could be a simple callback function, or an assembly of callback functions and its caller. List of important APIs:\n\n\n\n\nnode.emit(type, detail)\n: Inform all the monitors to monitor \ntype\n event. Capable of sending an additional parameter.\n\n\nnode.dispatchEvent(event)\n: Send an event to its monitor. Support bubbling.\n\n\nnode.on(type, callback, target)\n: Continuously monitor \ntype\n event of \nnode\n.\n\n\nnode.once(type, callback, target)\n: Monitor  \ntype\n event of \nnode\n once.\n\n\nnode.off(type, callback, target)\n: Cancel the monitoring of all \ntype\n events or cancel a certain monitor of \ntype\n event (appointed by callback and target).\n\n\n\n\nSuch an event distribution method has changed from centralized distribution by \ncc.eventManager\n to distribution by the node which has the event itself. It can be called a transformation from a centralized event system to a discrete event system. In the meantime, Cocos Creator has built in two kinds of system events(i.e., \nMOUSE\n and \nTOUCH\n) in nodes:\n\n\n\n\n\n\n\n\nDefinition of enumeration object\n\n\nCorresponding event name\n\n\n\n\n\n\n\n\n\n\ncc.Node.EventType.TOUCH_START\n\n\n'touchstart'\n\n\n\n\n\n\ncc.Node.EventType.TOUCH_MOVE\n\n\n'touchmove'\n\n\n\n\n\n\ncc.Node.EventType.TOUCH_END\n\n\n'touchend'\n\n\n\n\n\n\ncc.Node.EventType.TOUCH_CANCEL\n\n\n'touchcancel'\n\n\n\n\n\n\ncc.Node.EventType.MOUSE_DOWN\n\n\n'mousedown'\n\n\n\n\n\n\ncc.Node.EventType.MOUSE_ENTER\n\n\n'mouseenter'\n\n\n\n\n\n\ncc.Node.EventType.MOUSE_MOVE\n\n\n'mousemove'\n\n\n\n\n\n\ncc.Node.EventType.MOUSE_LEAVE\n\n\n'mouseleave'\n\n\n\n\n\n\ncc.Node.EventType.MOUSE_UP\n\n\n'mouseup'\n\n\n\n\n\n\ncc.Node.EventType.MOUSE_WHEEL\n\n\n'mousewheel'\n\n\n\n\n\n\n\n\nHenceforth, developers can directly respond to various MOUSE and TOUCH events of nodes. They no longer need to judge whether contact points are included in nodes. Moreover, the new event system supports event bubbling. Suppose the TOUCH event is triggered on a node, if the event monitor didn't stop bubbling, its parent node would trigger the same TOUCH event as well. For a concrete method of use for the event system, please refer to \nScripting Events\n\n\n4. Next step\n\n\nIn a highly generalized way, the text above introduced some of the design ideas behind Cocos Creator and obstructions that may occur when transitioning from Cocos2d-JS. Not all the knowledge points are covered here. That's not the purpose of this document either. The purpose of this document is to help Cocos2d-x users learn how to use Cocos Creator more easily. Please continue reading the Cocos Creator User Guide, getting to learn all of the workflows and coding techniques.\n\n\n\n\nContinue on to read about \nProject Structure\n.", 
            "title": "_Cocos2d-x Guide"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/cocos2d-x-guide/index.html#cocos2d-x-user-guide", 
            "text": "Cocos Creator is a new type of game development tool oriented towards content creation that has completely integrated the componentized edition Cocos2d-x WEB, by which you can launch games on platforms like Web, iOS, Android, Mac, Windows, etc.. Moreover, you can use it to directly launch games on Cocos Play platform, grasping the new opportunity brought by the rapid development of the channel for mobile web games. For more introductions to Cocos Creator, please refer to  Introduction .  The aim of this document is to introduce the users of Cocos2d-x to Cocos Creator and help them learn how to use the new editor as soon as possible.\nThis document will discuss possible problems that may occur in the transition from Cocos2d-x to Cocos Creator development and offer relative solutions, which will not go deep into framework details but provide links to detailed reference documents of different parts.", 
            "title": "Cocos2d-x User Guide"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/cocos2d-x-guide/index.html#1-typical-misconceptions", 
            "text": "For new Cocos Creator users, some of the following typical misconceptions may occur\uff1a   Hoping to use Cocos Creator by coordinating it with Cocos2d-x \uff1aCocos Creator, having had a complete JavaScript WEB engine internally, can work without relying on Cocos2d-x. However, if you want to launch the original edition, you still need to set up a Cocos2d-x in your computer.  Building an entire code framework at first and then add in game contents \uff1aCocos Creator's workflows are content creation oriented, which is very convenient for prototype creation. You can create scenes and write logic code directly into the editor, then you can drive the game scene and run it. The following data driven chapters will introduce changes of workflows in detail  Directly check the API of Cocos2d-JS when coding \uff1aCocos Creator has said to be originated from Cocos2d-JS. Their APIs have the same origin and have lots of identical parts. But with entirely new componentized frameworks, their APIs are different and not compatible with each other  Hoping to directly run the old Cocos2d-JS games on Cocos Creator \uff1aTheir APIs are not 100% compatible; therefore, such operation is unavailable.  Extend functions by way of inheritance \uff1aIn Cocos2d-JS, inheritance is a basic method for extending node functions. But in Cocos Creator, inheriting and extending nodes is not recommended. The node is only an entity. The logic of the game should be realized by different components and then be assembled in the node.   The reason for mentioning these misconceptions at the beginning of this document is that we hope developers can realize that the workflows and development ideas provided by Cocos Creator are tremendously different from those of Cocos2d-x.\nFor a better understanding of how to code correctly in Cocos Creator, the following two chapters will introduce the changes in workflows and API level brought by data driven in more detail.", 
            "title": "1. Typical Misconceptions"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/cocos2d-x-guide/index.html#2-data-driven", 
            "text": "In Cocos2d-x, the development method is driven by code and most of the game's data is stored in the code, unless the developer has built his/her own data driven framwork.\nIn the framework of Cocos Creator, all the scenes will be serialized as pure data. When running, these pure data will be used to rebuild factors like scenes, interfaces, animations and even components, etc..", 
            "title": "2. Data Driven"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/cocos2d-x-guide/index.html#what-is-code-driven-and-what-is-data-driven", 
            "text": "Why do we call Cocos2d-x a code driven development method? For instance, suppose that there is a character in the scene, who will walk around continuously in one area, then we will code as follows:  var role = new cc.Sprite('role.png');\nscene.addChild(role);\nrole.setPosition(100, 100);\nvar walk = cc.sequence(cc.moveBy(5, 100, 0), cc.moveBy(5, -100, 0)).repeatForever();\nrole.runAction(walk);  In this code, scene relationship, position information, action section and animation information of  role  are all realized by code; therefore it's called code driven. There also are some developers who store data information in other documents, but they still have to realize the parser of data themselves. Even when using some traditional editors, parsers are also needed to parse the data exported from editors into scenes.  But what Cocos Creator provides is a more thorough data driven method. All the information edited in the editor will be serialized into data documents. When running, the engine will directly transform the data into object by deserialization. This procedure is fundamentally different from the procedure described above: the category property in the engines can be directly serialized or deserialized. You don't need to transform it by any mapping relation. Scene graph, position property and animation, etc. in the above example can all be serialized by the editor into data. When loading scenes, no data is needed, developers only need to deserialize the whole scene from scene data:  cc.director.loadScene('SampleScene');", 
            "title": "What is code driven and what is data driven?"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/cocos2d-x-guide/index.html#serialization", 
            "text": "Serialization and deserialization supports most public properties in Cocos Creator. These properties are exposed to developers through the properties panel. Developers can arbitrarily modify and save properties in editor. The procedure of saving is to serialize resources and scene data into Asset Database. In contrast, in the procedure of loading scenes, the deserialization mechanism can instantiate corresponding objects according to scene data, and restore all properties set up in the editor.  What's more, the power of data driven lies in the fact that components edited by users themselves can also make property declarations. These properties can be edited in editor, saved in scene data, and finally deserialized into game scenes when running.  The source database is presented as  Assets  in the editor.", 
            "title": "Serialization"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/cocos2d-x-guide/index.html#understanding-workflows-of-cocos-creator-from-the-angle-of-data-driven", 
            "text": "Being different from Cocos2d-x, workflows of Cocos Creator are content creation oriented. Developers might encounter various kinds of confusion in the process of transition. However, when viewing from the angle of data driven, such changes of workflows will be a matter of course. Data driven makes it possible to freely edit scenes. Developers can not only build the whole scene visually, but also edit the logic of the game (edit properties exposed by components), which makes the editor the access for all, but not code. Just like the example before, in Cocos Creator, developers build a parent-child relationship, set position, and design animation with editor at first, then design the logic of the nodes in the scene using the component code; and assemble components into different nodes in the end.", 
            "title": "Understanding workflows of Cocos Creator from the angle of data driven"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/cocos2d-x-guide/index.html#3-changes-at-framework-level", 
            "text": "As is mentioned at the beginning, Cocos Creator has been completely integrated with componentized Cocos2d-JS. This is a highly customized edition. Due to componentization and the needs of data driven, API sets and the standard edition of Cocos2d-JS have the same origin, but the two of which are uncompatible with each other.  The following are detailed introductions of some important API differences:", 
            "title": "3. Changes at Framework Level"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/cocos2d-x-guide/index.html#logic-tree-and-render-tree", 
            "text": "In Cocos2d-JS, the Render device will traverse the scene's node tree to generate a render queue; therefore, the node tree built by developers is in fact a render tree. However, in Cocos Creator, we introduce a new concept: logic tree. The node tree built by developers and mounting components constitutes a logic tree, within which nodes constitute entity units and components are in charge of logic.  The most essential difference is: What the logic tree concerns is game logic but not render relation.  Th logic tree will generate the scene's render tree and decide rendering order. But developers don't need to worry about these, they only need to make sure the correctness of the displaying effect in editor. In  Hierarchy  of editor, developers can adjust the order and parent-child relationship of the logic tree.", 
            "title": "Logic Tree and Render Tree"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/cocos2d-x-guide/index.html#scene-management", 
            "text": "In Cocos2d-JS, after building scenes with code, developers can switch scenes by 'cc.director.runScene'. In Cocos Creator, when developers have finished building scenes in editor, all the data will be saved as a 'scene-name.fire' document and then be stored in Asset Database. Developers can load a scene resource by using  cc.director.loadScene . Please refer to the following concrete example:  var sceneName = 'scene-name';\nvar onLaunched = function () {\n    console.log('Scene ' + sceneName + ' launched');\n};\n// The first parameter is the name of the scene. The second optional parameter is the callback function after the loading scene.\ncc.director.loadScene(sceneName, onLaunched);  Besides, interface for visiting scene nodes is provided:  // To obtain scene nodes of logic tree\nvar logicScene = cc.director.getScene();", 
            "title": "Scene Management"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/cocos2d-x-guide/index.html#node-and-component", 
            "text": "In Cocos Creator, 'cc.Node'is replaced by the logic node, and the old node is renamed as  _ccsg.Node  and becomes a private category that is not recommended to be used anymore. The reason for this is that developers only need to focus on logic nodes and they no longer need to care about render nodes at the bottom. Of course, we have preserved its API sets as much as possible. APIs like information concerning Transform, node tree, Action and properties remain unchanged.  There used to be a crude mechanism of components. Developers could receive callbacks like onEnter, onExit, update, etc. by adding components to Node. In Cocos Creator, the same interface  addComponent  is used, but the component system becomes the core of the whole engine. Components can extend the function of the logic node in various ways. It could even be said that the logic node shouldn't include any actual game logic and it's logic should be completely assembled by various kinds of logic components.  And this leads to the biggst difference between Cocos2d-JS and Cocos Creator: How to extend node behavior?  In Cocos2d-JS, developers can extend Nodes. Cocos Creator does not allow this. All the extensions should be done by adding components. In a componentized framework like Cocos Creator, composition is the preferred extension method.  For more information on the component system, please refer to chapters like  Node Component  and  Components , etc..", 
            "title": "Node and Component"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/cocos2d-x-guide/index.html#coordinate-system-and-anchor-point", 
            "text": "The coordinate system of Cocos Creator is still a cartesian coordinate system, but there are some changes in anchor points. Please look at the diagram before reading the explanations:   Supposing the anchor point of a context node is (0.5, 0.5). This node has a subnode, the anchor point of which is (0, 0). In Cocos2d-JS, its illustration will be like that in the left diagram. But in Cocos Creator, its illustration will be like that of the right diagram. The reason is that the local coordinate systems of the subnodes are different. In Cocos2d-JS, wherever the anchor point of the parent node is located, the origin of the subnode's coordinate system is at the lower left corner of the parent node. But in Cocos Creator, the origin of the subnode's coordinate system is in the position of the parent node's coordinate position(i.e., its anchor point). Such modification is more compatiable with the editor, which is, in general, very natural for scenes built by the editior. But when developers use code to build nodes, they should pay special attention.", 
            "title": "Coordinate System and Anchor Point"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/cocos2d-x-guide/index.html#categories-and-objects-that-remain-unchanged", 
            "text": "In Cocos Creator, we preserved the behaviors of lots of important categories and objects, which include:   cc.game  cc.view  cc.director  cc.audioEngine  cc.eventManager  cc.scheduler  cc.textureCache  cc.sys  cc.visibleRect  scripting actions  Some types of render nodes: Menu and MenuItem,ClippingNode,ProgressTimer,MotionStreak,ParallaxNode,RenderTexture,DrawNode,relative categories of Tile map, etc.  Chipmunk physics engine and PhysicsDebugNode  Types of basic data   Points to be noted:   Those types of preserved render nodes listed above can only interact with the render tree and can't be used together with logic nodes and components.  Action system supports not just render nodes, but all the actions operated on Transform support logic nodes too.  cc.scheduler  supports components, which contain interfaces like  schedule , scheduleOnce , unschedule , unscheduleAllCallbacks  Though event manager is preserved, logic nodes have a set of new event API. Direct use of event manager is not recommended. For detailed information, please refer to the introduction of the event system that follows", 
            "title": "Categories and objects that remain unchanged"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/cocos2d-x-guide/index.html#event-system", 
            "text": "In  cc.Node , a series of wholly new event APIs are added. From logic nodes, various events can be distributed. The monitor's register of some kind of event is also allowed. The monitor could be a simple callback function, or an assembly of callback functions and its caller. List of important APIs:   node.emit(type, detail) : Inform all the monitors to monitor  type  event. Capable of sending an additional parameter.  node.dispatchEvent(event) : Send an event to its monitor. Support bubbling.  node.on(type, callback, target) : Continuously monitor  type  event of  node .  node.once(type, callback, target) : Monitor   type  event of  node  once.  node.off(type, callback, target) : Cancel the monitoring of all  type  events or cancel a certain monitor of  type  event (appointed by callback and target).   Such an event distribution method has changed from centralized distribution by  cc.eventManager  to distribution by the node which has the event itself. It can be called a transformation from a centralized event system to a discrete event system. In the meantime, Cocos Creator has built in two kinds of system events(i.e.,  MOUSE  and  TOUCH ) in nodes:     Definition of enumeration object  Corresponding event name      cc.Node.EventType.TOUCH_START  'touchstart'    cc.Node.EventType.TOUCH_MOVE  'touchmove'    cc.Node.EventType.TOUCH_END  'touchend'    cc.Node.EventType.TOUCH_CANCEL  'touchcancel'    cc.Node.EventType.MOUSE_DOWN  'mousedown'    cc.Node.EventType.MOUSE_ENTER  'mouseenter'    cc.Node.EventType.MOUSE_MOVE  'mousemove'    cc.Node.EventType.MOUSE_LEAVE  'mouseleave'    cc.Node.EventType.MOUSE_UP  'mouseup'    cc.Node.EventType.MOUSE_WHEEL  'mousewheel'     Henceforth, developers can directly respond to various MOUSE and TOUCH events of nodes. They no longer need to judge whether contact points are included in nodes. Moreover, the new event system supports event bubbling. Suppose the TOUCH event is triggered on a node, if the event monitor didn't stop bubbling, its parent node would trigger the same TOUCH event as well. For a concrete method of use for the event system, please refer to  Scripting Events", 
            "title": "Event System"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/cocos2d-x-guide/index.html#4-next-step", 
            "text": "In a highly generalized way, the text above introduced some of the design ideas behind Cocos Creator and obstructions that may occur when transitioning from Cocos2d-JS. Not all the knowledge points are covered here. That's not the purpose of this document either. The purpose of this document is to help Cocos2d-x users learn how to use Cocos Creator more easily. Please continue reading the Cocos Creator User Guide, getting to learn all of the workflows and coding techniques.   Continue on to read about  Project Structure .", 
            "title": "4. Next step"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/unity-guide/index.html", 
            "text": "Unity User Guide\n\n\nFor users who have used Unity3D before, they will find it extremely easy when starting to use Cocos Creator because many concepts are interlinked between the two. However,\nthere still are some differences between Cocos Creator and Unity3D on some detailed concepts. This document will enumerate the differences\nbetween Cocos Creator and Unity3D to help Unity3D users learn to use Cocos Creator more quickly.\n\n\nAbstract\n\n\n\n\n\n\n\n\nCocos Creator\n\n\nUnity3D\n\n\nInstruction\n\n\n\n\n\n\n\n\n\n\ncc.Node\n\n\nGameObject\n\n\nObject in the scene. Each object can contain many components\n\n\n\n\n\n\nnode.active\n\n\ngameObject.activeSelf\n\n\nSet up the activated state of the node itself\n\n\n\n\n\n\nnode.activeInHierarchy\n\n\ngameObject.activeInHierarchy\n\n\nCheck the activated state of the node in hierarchy\n\n\n\n\n\n\nnode.parent\n\n\ntransform.parent\n\n\n\n\n\n\n\n\nnode.position\n\n\ntransform.position\n\n\nPosition in Cocos Creator is in the local coordinate system, but in Unity3D it's in the world coordinate system\n\n\n\n\n\n\nnode.rotation\n\n\ntransform.rotation\n\n\nRotation in Cocos Creator is in the local coordinate system, but in Unity3D it's in the world coordinate system\n\n\n\n\n\n\nnode.scale\n\n\ntransform.localScale\n\n\n\n\n\n\n\n\ncc.find(path, refNode)\n\n\ntransform.Find(path), GameObject.Find(path)\n\n\nIf refNode is blank, find it from the scene root node, otherwise, find it from the refNode node.\n\n\n\n\n\n\ncc.game.addPersistRootNode(node)\n\n\nObject.DontDestroyOnLoad(gameObject)\n\n\n\n\n\n\n\n\ncc.Component\n\n\nComponent\n\n\nComponent\n\n\n\n\n\n\ncomp.node\n\n\ncomp.gameObject\n\n\n\n\n\n\n\n\ncomp.onLoad()\n\n\ncomp.Awake()\n\n\n\n\n\n\n\n\ncomp.start()\n\n\ncomp.Start()\n\n\n\n\n\n\n\n\ncomp.update(dt)\n\n\ncomp.Update()\n\n\n\n\n\n\n\n\ncomp.lateUpdate(dt)\n\n\ncomp.LateUpdate()\n\n\n\n\n\n\n\n\nobj.destroy()\n\n\nObject.Destroy(obj)\n\n\nobj is the concrete example of cc.Object (normally it is: node, component or asset)\n\n\n\n\n\n\ncc.isValid(obj)\n\n\nobj != null\n\n\nJudge if cc.Object is effective (normally it is: node, component or asset)\n\n\n\n\n\n\n\n\n\n\nThe API of Firball use camelCase. The first letter of the method and variable is in lowercase. The first letter of the category definition is in uppercase.\n\n\nThe callback of Firball follows the style of Node.js, which means the first parameter of the callback is wrong information.\n\n\n\n\ncc.Node vs GameObject\n\n\nNode in Cocos Creator equals to GameObject + Transform in Unity3D. In Cocos Creator,\nthe hierarchical relation of the parent and child nodes is maintained by Node. But in Unity3D, it's in the charge of Transform.\n\n\n// change the parent-child relation\nthis.node.parent = anotherNode;\n\n// rotate by 20 degrees\nthis.node.rotation += 20;\n\n// shift by pixcels of (10,10)\nthis.node.position.x += 10;\nthis.node.position.y += 10;\n\n// zoom in/out for 1.5 times\nthis.node.scale.x *= 1.5;\nthis.node.scale.y *= 1.5;\n\n\n\n\nCoordinate system\n\n\nposition\n, \nrotation\n and \nscale\n in cc.Node are both in the local coordinate system. As for Unity3D, its \nPostion\n,\n\nRotation\n is in the world coordinate system.\n\n\nIn Cocos Creator, if you want to calculate the world coordinate of cc.Node, you can use the following method:\n\n\n// set up the node to the position of (100,100) in world coordinate system\nthis.node.position = this.node.convertToNodeSpaceAR(cc.v2(100,100));\n// this.node.rotation = TODO\n\n\n\n\ncc.Component vs MonoBehaviour\n\n\nIn Cocos Creator, the user defined script is written by extending the cc.Component category. But in Unity3D, it's written by\nextending MonoBehaviour. Let's compare a Cocos Creator script with a Unity3D script that has the same functions:\n\n\nUnity3D\n:\n\n\npublic class Foobar : MonoBehaviour {\n  public string text = 'Foobar';\n  void Start () {\n    Debug.Log('Hello ' + text );\n  }\n  void Update () {}\n}\n\n\n\n\nCocos Creator\n:\n\n\n// Foobar.js\ncc.Class({\n  extends: cc.Component,\n  properties: {\n    text: 'Foobar',\n  },\n  onLoad: function () {\n    console.log('Hello ' + this.text);\n  },\n  update: function (dt) {},\n});\n\n\n\n\nProperty definition\n\n\nIn Cocos Creator, properties are defined in the \nproperties\n field. But in Unity3D, properties are defined as\nmember variables of MonoBehaviour. Apart from differences in the defining positions, Cocos Creator also imports the concept of the property parameter into the property. These parameters can be used to control\nthe display method of properties in Inspector, serialization, etc. For detailed parameters, please refer to: [/manual/scripting/attributes]\n\n\nThe following are defining methods of some commonly used properties in Cocos Creator:\n\n\nvar MyEnum = cc.Enum({\n  Foo: 1,\n  Bar: 2,\n});\n\n// MyScript.js\nvar Foobar = require('Foobar');\ncc.Class({\n  extends: cc.Component,\n  properties: {\n    // quote other cc.Node\n    // in Unity3D, it is defined as: public GameObject otherGameObject;\n    otherNode: { default: null, type: cc.Node },\n\n    // quote a concrete example of Foobar Component\n    // in Unity3D, it is defined as: public Foobar foobar;\n    foobar: { default: null, type: Foobar },\n\n    // do not serialize this property\n    // in Unity3D, it is defined as: [System.NonSerialized] public int index = 0;\n    index: { default: 0, type: cc.Integer, serializable: false  },\n\n    // define an array\n    // in Unity3D, it is defined as: public float[] idList;\n    idList: { default: [],  type: cc.Float },\n\n    // define an enumerated category\n    // in Unity3D, it is defined as: public MyEnum myEnum = MyEnum.Foo;\n    myEnum: { default: MyEnum.Foo,  type: MyEnum },\n  }\n})\n\n\n\n\nLife cycle\n\n\nThe life cycle of Cocos Creator is basically the same as Unity3D, having only slight differences in the naming:\n\n\n\n\n\n\n\n\nCocos Creator\n\n\nUnity3D\n\n\n\n\n\n\n\n\n\n\nonLoad\n\n\nAwake\n\n\n\n\n\n\nstart\n\n\nStart\n\n\n\n\n\n\nupdate\n\n\nUpdate\n\n\n\n\n\n\nlateUpdate\n\n\nLateUpdate\n\n\n\n\n\n\nonEnable\n\n\nOnEnable\n\n\n\n\n\n\nonDisable\n\n\nOnDisable\n\n\n\n\n\n\nonDestroy\n\n\nOnDestroy\n\n\n\n\n\n\n\n\n\n\nWhen you want to destroy a cc.Object concrete example (such as: node, component or asset), you can use obj.destroy() function.\n\n\nWhen you want to determine whether a cc.Object concrete example(such as: node, component or asset) is destroyed or not, you can use cc.isValid(node).\n\n\n\n\nMessage\n\n\nThe message system of Cocos Creator uses the transmit\nreceive mode of dom, which can send a message upward, but you need to sign up for message in Node.\nBut in Unity3D, messages are realized by going through SendMessage and directly responding to the member function defined in the script.\n\n\nThe following is the transmit\nreceive mode of message in Cocos Creator:\n\n\ncc.Class({\n  extends: cc.Component,\n\n  onLoad: function () {\n    this.node.on('hello-foobar', function ( event ) {\n      event.stopPropagation();\n      console.log('Hello Foobar');\n    });\n  },\n\n  start: function () {\n    this.node.emit('hello-foobar');\n  },\n})\n\n\n\n\n\n\nContinue on to read about \nProject Structure\n.", 
            "title": "_Unity Guide"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/unity-guide/index.html#unity-user-guide", 
            "text": "For users who have used Unity3D before, they will find it extremely easy when starting to use Cocos Creator because many concepts are interlinked between the two. However,\nthere still are some differences between Cocos Creator and Unity3D on some detailed concepts. This document will enumerate the differences\nbetween Cocos Creator and Unity3D to help Unity3D users learn to use Cocos Creator more quickly.", 
            "title": "Unity User Guide"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/unity-guide/index.html#abstract", 
            "text": "Cocos Creator  Unity3D  Instruction      cc.Node  GameObject  Object in the scene. Each object can contain many components    node.active  gameObject.activeSelf  Set up the activated state of the node itself    node.activeInHierarchy  gameObject.activeInHierarchy  Check the activated state of the node in hierarchy    node.parent  transform.parent     node.position  transform.position  Position in Cocos Creator is in the local coordinate system, but in Unity3D it's in the world coordinate system    node.rotation  transform.rotation  Rotation in Cocos Creator is in the local coordinate system, but in Unity3D it's in the world coordinate system    node.scale  transform.localScale     cc.find(path, refNode)  transform.Find(path), GameObject.Find(path)  If refNode is blank, find it from the scene root node, otherwise, find it from the refNode node.    cc.game.addPersistRootNode(node)  Object.DontDestroyOnLoad(gameObject)     cc.Component  Component  Component    comp.node  comp.gameObject     comp.onLoad()  comp.Awake()     comp.start()  comp.Start()     comp.update(dt)  comp.Update()     comp.lateUpdate(dt)  comp.LateUpdate()     obj.destroy()  Object.Destroy(obj)  obj is the concrete example of cc.Object (normally it is: node, component or asset)    cc.isValid(obj)  obj != null  Judge if cc.Object is effective (normally it is: node, component or asset)      The API of Firball use camelCase. The first letter of the method and variable is in lowercase. The first letter of the category definition is in uppercase.  The callback of Firball follows the style of Node.js, which means the first parameter of the callback is wrong information.", 
            "title": "Abstract"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/unity-guide/index.html#ccnode-vs-gameobject", 
            "text": "Node in Cocos Creator equals to GameObject + Transform in Unity3D. In Cocos Creator,\nthe hierarchical relation of the parent and child nodes is maintained by Node. But in Unity3D, it's in the charge of Transform.  // change the parent-child relation\nthis.node.parent = anotherNode;\n\n// rotate by 20 degrees\nthis.node.rotation += 20;\n\n// shift by pixcels of (10,10)\nthis.node.position.x += 10;\nthis.node.position.y += 10;\n\n// zoom in/out for 1.5 times\nthis.node.scale.x *= 1.5;\nthis.node.scale.y *= 1.5;", 
            "title": "cc.Node vs GameObject"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/unity-guide/index.html#coordinate-system", 
            "text": "position ,  rotation  and  scale  in cc.Node are both in the local coordinate system. As for Unity3D, its  Postion , Rotation  is in the world coordinate system.  In Cocos Creator, if you want to calculate the world coordinate of cc.Node, you can use the following method:  // set up the node to the position of (100,100) in world coordinate system\nthis.node.position = this.node.convertToNodeSpaceAR(cc.v2(100,100));\n// this.node.rotation = TODO", 
            "title": "Coordinate system"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/unity-guide/index.html#cccomponent-vs-monobehaviour", 
            "text": "In Cocos Creator, the user defined script is written by extending the cc.Component category. But in Unity3D, it's written by\nextending MonoBehaviour. Let's compare a Cocos Creator script with a Unity3D script that has the same functions:  Unity3D :  public class Foobar : MonoBehaviour {\n  public string text = 'Foobar';\n  void Start () {\n    Debug.Log('Hello ' + text );\n  }\n  void Update () {}\n}  Cocos Creator :  // Foobar.js\ncc.Class({\n  extends: cc.Component,\n  properties: {\n    text: 'Foobar',\n  },\n  onLoad: function () {\n    console.log('Hello ' + this.text);\n  },\n  update: function (dt) {},\n});", 
            "title": "cc.Component vs MonoBehaviour"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/unity-guide/index.html#property-definition", 
            "text": "In Cocos Creator, properties are defined in the  properties  field. But in Unity3D, properties are defined as\nmember variables of MonoBehaviour. Apart from differences in the defining positions, Cocos Creator also imports the concept of the property parameter into the property. These parameters can be used to control\nthe display method of properties in Inspector, serialization, etc. For detailed parameters, please refer to: [/manual/scripting/attributes]  The following are defining methods of some commonly used properties in Cocos Creator:  var MyEnum = cc.Enum({\n  Foo: 1,\n  Bar: 2,\n});\n\n// MyScript.js\nvar Foobar = require('Foobar');\ncc.Class({\n  extends: cc.Component,\n  properties: {\n    // quote other cc.Node\n    // in Unity3D, it is defined as: public GameObject otherGameObject;\n    otherNode: { default: null, type: cc.Node },\n\n    // quote a concrete example of Foobar Component\n    // in Unity3D, it is defined as: public Foobar foobar;\n    foobar: { default: null, type: Foobar },\n\n    // do not serialize this property\n    // in Unity3D, it is defined as: [System.NonSerialized] public int index = 0;\n    index: { default: 0, type: cc.Integer, serializable: false  },\n\n    // define an array\n    // in Unity3D, it is defined as: public float[] idList;\n    idList: { default: [],  type: cc.Float },\n\n    // define an enumerated category\n    // in Unity3D, it is defined as: public MyEnum myEnum = MyEnum.Foo;\n    myEnum: { default: MyEnum.Foo,  type: MyEnum },\n  }\n})", 
            "title": "Property definition"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/unity-guide/index.html#life-cycle", 
            "text": "The life cycle of Cocos Creator is basically the same as Unity3D, having only slight differences in the naming:     Cocos Creator  Unity3D      onLoad  Awake    start  Start    update  Update    lateUpdate  LateUpdate    onEnable  OnEnable    onDisable  OnDisable    onDestroy  OnDestroy      When you want to destroy a cc.Object concrete example (such as: node, component or asset), you can use obj.destroy() function.  When you want to determine whether a cc.Object concrete example(such as: node, component or asset) is destroyed or not, you can use cc.isValid(node).", 
            "title": "Life cycle"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/unity-guide/index.html#message", 
            "text": "The message system of Cocos Creator uses the transmit receive mode of dom, which can send a message upward, but you need to sign up for message in Node.\nBut in Unity3D, messages are realized by going through SendMessage and directly responding to the member function defined in the script.  The following is the transmit receive mode of message in Cocos Creator:  cc.Class({\n  extends: cc.Component,\n\n  onLoad: function () {\n    this.node.on('hello-foobar', function ( event ) {\n      event.stopPropagation();\n      console.log('Hello Foobar');\n    });\n  },\n\n  start: function () {\n    this.node.emit('hello-foobar');\n  },\n})   Continue on to read about  Project Structure .", 
            "title": "Message"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/project-structure/index.html", 
            "text": "Project structure\n\n\nUsing the Dashboard, we can begin by creating a Hello World project. The created project has a specific folder structure. We will learn about the Cocos Creator project in this section.\n\n\nProject folder structure\n\n\nAfter creating and opening a Cocos Creator project for the first time, you will see the following structure is included in the project folder:\n\n\nProjectName(project folder)\n\u251c\u2500\u2500assets\n\u251c\u2500\u2500library\n\u251c\u2500\u2500local\n\u251c\u2500\u2500settings\n\u251c\u2500\u2500temp\n\u2514\u2500\u2500project.json\n\n\n\n\nNext we will introduce the function of each folder.\n\n\nResource folder(assets)\n\n\n\u2018assets\u2019\n- Public folders for project collaborators\n  - \nassets\n\n    Project resource files, including all actual elements used to form a project. Such as:\n    - Scenes\n    - Scripts\n    - Sprites\n    - Textures\n    - Audio files\n    - ...\n    Just think of all of them as loaded resources in the Assets Panel of the [Editor]\uff08/start/editor-overview)\n  - \nsettings\n\n    These are global project settings, which are of a project-level and are shared by all project collaborators, such as:\n    - Plug-in settings\n    - Button settings\n    - Physics settings\n    - ...\n- Private folders used by the current client \n(and you should ignore them in version control)\n\n  - \nlibrary\n\n    Files in this folder are for resource library management, and will be used by the \nEditor\n for library data persistence and resource display.\n  - \nlocal\n\n    Local project settings, which store the user's customized settings, such as the Editor layout.\n  - \ntemp\n\n    Temporary files created by the Cocos Creator Engine.\n\n\n\n\nContinue on to read about \nSupport\n.", 
            "title": "_Project Structure"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/project-structure/index.html#project-structure", 
            "text": "Using the Dashboard, we can begin by creating a Hello World project. The created project has a specific folder structure. We will learn about the Cocos Creator project in this section.", 
            "title": "Project structure"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/project-structure/index.html#project-folder-structure", 
            "text": "After creating and opening a Cocos Creator project for the first time, you will see the following structure is included in the project folder:  ProjectName(project folder)\n\u251c\u2500\u2500assets\n\u251c\u2500\u2500library\n\u251c\u2500\u2500local\n\u251c\u2500\u2500settings\n\u251c\u2500\u2500temp\n\u2514\u2500\u2500project.json  Next we will introduce the function of each folder.", 
            "title": "Project folder structure"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/project-structure/index.html#resource-folderassets", 
            "text": "\u2018assets\u2019\n- Public folders for project collaborators\n  -  assets \n    Project resource files, including all actual elements used to form a project. Such as:\n    - Scenes\n    - Scripts\n    - Sprites\n    - Textures\n    - Audio files\n    - ...\n    Just think of all of them as loaded resources in the Assets Panel of the [Editor]\uff08/start/editor-overview)\n  -  settings \n    These are global project settings, which are of a project-level and are shared by all project collaborators, such as:\n    - Plug-in settings\n    - Button settings\n    - Physics settings\n    - ...\n- Private folders used by the current client  (and you should ignore them in version control) \n  -  library \n    Files in this folder are for resource library management, and will be used by the  Editor  for library data persistence and resource display.\n  -  local \n    Local project settings, which store the user's customized settings, such as the Editor layout.\n  -  temp \n    Temporary files created by the Cocos Creator Engine.   Continue on to read about  Support .", 
            "title": "Resource folder(assets)"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/support/index.html", 
            "text": "Obtain help and support\n\n\nSend problems and feedback\n\n\nApart from the information provided in this guide, you can also obtain information from or send feedback to the Cocos Creator development group through the following channels at any time:\n\n\n\n\nQQ group\uff1a246239860\n\n\nCocos2d-JS API document\n\n\nQ\nA community\n\n\n\n\nPresentation and example projects\n\n\n\n\nExample collection\n: from basic components to interactive input, this project includes usage case by case introductions to the functional points.\n\n\nYour first Cocos Creator game: Star Catcher\n\n\n21 points card game co-developed with Tencent\n\n\n\n\nOriginal release code library\n\n\nCocos code libraries that are needed for zipping and sending to native platforms (Windows, Mac, Android, iOS):\n\n\n\n\nCocos Framework v3.9 Windows Edition\n\n\nCocos Framework v3.9 Mac Edition\n\n\n\n\nCode libraries needed for zipping and sending to the Android platform:\n\n\n\n\nAndroid SDK Windows\n\n\nAndroid SDK Mac\n\n\nAndroid NDK Windows 32bit\n\n\nAndroid NDK Windows 64bit\n\n\nAndroid NDK Mac\n\n\n\n\nOther third-party tools and resources\n\n\nTools for generating texture packer\n\n\n\n\nTexturePacker\n\n\nZwoptex\n\n\n\n\nTools for generating Bitmap font\n\n\n\n\nGlyph Designer\n\n\nHiero\n\n\nBMFont (Windows)\n\n\n\n\n2D skeleton animation tools\n\n\n\n\nSpine\n\n\nSpriter\n\n\nDragonBones\n\n\n\n\nTools for making special effect particles\n\n\n\n\nParticle Designer\n\n\nParticle2dx\n: free online tool\n\n\n\n\nOther game development resources\n\n\n\n\nCocos Store\n: various game art assets, extension tools\n\n\n\n\n\n\nContinue on to read about \nBasics\n.", 
            "title": "_Support"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/support/index.html#obtain-help-and-support", 
            "text": "", 
            "title": "Obtain help and support"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/support/index.html#send-problems-and-feedback", 
            "text": "Apart from the information provided in this guide, you can also obtain information from or send feedback to the Cocos Creator development group through the following channels at any time:   QQ group\uff1a246239860  Cocos2d-JS API document  Q A community", 
            "title": "Send problems and feedback"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/support/index.html#presentation-and-example-projects", 
            "text": "Example collection : from basic components to interactive input, this project includes usage case by case introductions to the functional points.  Your first Cocos Creator game: Star Catcher  21 points card game co-developed with Tencent", 
            "title": "Presentation and example projects"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/support/index.html#original-release-code-library", 
            "text": "Cocos code libraries that are needed for zipping and sending to native platforms (Windows, Mac, Android, iOS):   Cocos Framework v3.9 Windows Edition  Cocos Framework v3.9 Mac Edition   Code libraries needed for zipping and sending to the Android platform:   Android SDK Windows  Android SDK Mac  Android NDK Windows 32bit  Android NDK Windows 64bit  Android NDK Mac", 
            "title": "Original release code library"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/support/index.html#other-third-party-tools-and-resources", 
            "text": "", 
            "title": "Other third-party tools and resources"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/support/index.html#tools-for-generating-texture-packer", 
            "text": "TexturePacker  Zwoptex", 
            "title": "Tools for generating texture packer"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/support/index.html#tools-for-generating-bitmap-font", 
            "text": "Glyph Designer  Hiero  BMFont (Windows)", 
            "title": "Tools for generating Bitmap font"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/support/index.html#2d-skeleton-animation-tools", 
            "text": "Spine  Spriter  DragonBones", 
            "title": "2D skeleton animation tools"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/support/index.html#tools-for-making-special-effect-particles", 
            "text": "Particle Designer  Particle2dx : free online tool", 
            "title": "Tools for making special effect particles"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/getting-started/support/index.html#other-game-development-resources", 
            "text": "Cocos Store : various game art assets, extension tools    Continue on to read about  Basics .", 
            "title": "Other game development resources"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/index.html", 
            "text": "Basic editor information\n\n\nThis chapter will provide an introduction to the main editor windows and panels. We recommend beginners start getting familiar with Cocos Creator's interface and operating methods by reading this chapter before getting into learning about workflow.\n\n\n\n\nEditor interface introduction\n\n\nAsset manager\n\n\nScene editor\n\n\nHierarchy\n\n\nHierarchy inspector\n\n\nConsole\n\n\nToolbar\n\n\nEditor layot\n\n\nConstruction and preview\n\n\n\n\n\n\n\nContinue on to read about \nEditor Interface Introduction\n.", 
            "title": "_Getting Started"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/index.html#basic-editor-information", 
            "text": "This chapter will provide an introduction to the main editor windows and panels. We recommend beginners start getting familiar with Cocos Creator's interface and operating methods by reading this chapter before getting into learning about workflow.   Editor interface introduction  Asset manager  Scene editor  Hierarchy  Hierarchy inspector  Console  Toolbar  Editor layot  Construction and preview    Continue on to read about  Editor Interface Introduction .", 
            "title": "Basic editor information"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-overview/index.html", 
            "text": "Editor interface overview\n\n\nThis chapter will introduce the editor interface and get familiar with each of the panels, menus and functional buttons that make up the editor. The Cocos Creator editor is composed of multiple panels which can be moved and combined freely to meet the needs of different projects and developers. Here we will take the default editor layout as an example to quickly browse the name and function of each panel:\n\n\n\n\nAsset manager\n\n\n\n\nAsset manager\n shows all the assets in the project asset file (\u2018assets\u2019). It will show the folder in a dendritic structure and auto-sync the content changes in the project resource folder from the operating system. You can drag files in or use the menu to import resources.\n\n\nFor further information please read the \nasset manager\n section.\n\n\nScene editor\n\n\n\n\nScene editor\n is used to show and edit the visible working area in the scene. WYSIWYG scene building work is all done depending on the display in the scene editor.\n\n\nFor further information please read the \nscene editor\n section.\n\n\nHierarchy\n\n\n\n\nHierarchy\n displays all the nodes and their hierarchy in the form of a list tree. For all the content you can see in the \nscene editor\n, the corresponding node entry can be found in the \nHierarchy\n. The content in these two panels when editing the scene will synchronize the display and we normally use these two panels at the same time to build the scene.\n\n\nFor further information please read the \nHierarchy\n section.\n\n\nAttribute inspector\n\n\n\n\nAttribute inspector\n is the working area where we view and edit the currently selected node and component attribute. This panel will display and edit the attribute data defined by the script in the most suitable way.\n\n\nFor further information please read the \nInspector\n section.\n\n\nToolbar\n\n\n\n\nToolbar\n includes the scene editing tool and operating button for game preview. The far right side shows the access address for remote testing and debugging and the device number of the connected device.\n\n\nContinue on to read about \nToolbar\n.", 
            "title": "_Editor Overview"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-overview/index.html#editor-interface-overview", 
            "text": "This chapter will introduce the editor interface and get familiar with each of the panels, menus and functional buttons that make up the editor. The Cocos Creator editor is composed of multiple panels which can be moved and combined freely to meet the needs of different projects and developers. Here we will take the default editor layout as an example to quickly browse the name and function of each panel:", 
            "title": "Editor interface overview"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-overview/index.html#asset-manager", 
            "text": "Asset manager  shows all the assets in the project asset file (\u2018assets\u2019). It will show the folder in a dendritic structure and auto-sync the content changes in the project resource folder from the operating system. You can drag files in or use the menu to import resources.  For further information please read the  asset manager  section.", 
            "title": "Asset manager"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-overview/index.html#scene-editor", 
            "text": "Scene editor  is used to show and edit the visible working area in the scene. WYSIWYG scene building work is all done depending on the display in the scene editor.  For further information please read the  scene editor  section.", 
            "title": "Scene editor"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-overview/index.html#hierarchy", 
            "text": "Hierarchy  displays all the nodes and their hierarchy in the form of a list tree. For all the content you can see in the  scene editor , the corresponding node entry can be found in the  Hierarchy . The content in these two panels when editing the scene will synchronize the display and we normally use these two panels at the same time to build the scene.  For further information please read the  Hierarchy  section.", 
            "title": "Hierarchy"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-overview/index.html#attribute-inspector", 
            "text": "Attribute inspector  is the working area where we view and edit the currently selected node and component attribute. This panel will display and edit the attribute data defined by the script in the most suitable way.  For further information please read the  Inspector  section.", 
            "title": "Attribute inspector"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-overview/index.html#toolbar", 
            "text": "Toolbar  includes the scene editing tool and operating button for game preview. The far right side shows the access address for remote testing and debugging and the device number of the connected device.  Continue on to read about  Toolbar .", 
            "title": "Toolbar"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/assets/index.html", 
            "text": "Assets\n\n\nAssets\n is used for us to access and manage the working area of project assets. Adding assets in here is normally a necessary step when starting to make game. You can use \nHelloWorld\n template to create a new project and then you can see there are many basic asset types in \nassets\n.\n\n\nIntroduction for the interface\n\n\nassets\n shows the contents in project assets folders in tree view, but be noticed that only the assets put under \nassets\n catalog in the project folder will be showed in here. Please read \nProject structure\n for project folder structure. Now let me introduce the elements in each interface:\n\n\n\n\n\n\nCreate\n button on the top left corner is used to create new asset\n\n\nThe input box on the top right can be used to search and filter the asset filenames that contain specific text.\n\n\nThe main part of the panel is the asset list for the asset folder where you can add, delete or alter assets using context menu or dragging operation.\n\n\n\n\nAsset list\n\n\nAsset list can include any folder structure. Folders in \nassets\n will show as \nicon. Click the arrow on the left to the icon, the contents in this folder will be unfold/fold.\n\n\nThe rest showed in the list other than folders are all asset files. Files in the asset list will not show their expanded-names, instead, they will use icons to indicate the type of file or asset, for example, the project created by \nHelloWorld\n template includes three core assets:\n\n\n\n\nimage assets\n\uff1acurrently includes image files like \njpg\n and \npng\n, icon will show as thumbnail of the image.\n\n\nscript assets\n: the JavaScript file programmer writes and uses \njs\n as the filename extension. We add function and game logic to the component by editing these scripts.\n\n\nscene assets\n: scene file opened by double click. Only the scene file is opened can we keep creating and making the contents.\n\n\n\n\nMore common asset types and asset workflow, please read \nAsset workflow\n.\n\n\nCreate assets\n\n\nCurrently, the assets can be created in \nassets\n are as follows:\n\n\n\n\nFolder\n\n\nScript file\n\n\nScene\n\n\nMovie clips\n\n\n\n\nClick \ncreate\n button on the top left corner, the create assets menu including the above asset list will be popped out. Click any item in it will create new corresponding assets at the current selected position.\n\n\n\n\nSelect asset\n\n\nYou can use the following asset selection in asset list:\n\n\n\n\nClick to select a single asset\n\n\nPress \nCtrl\n or \nCmd\n on the keyboard and click the mouse to join more assets into the selection\n\n\nPress \nShift\n on the keyboard and click the mouse to select continuous assets\n\n\n\n\nYou can execute move, delete and other operations to those selected assets.\n\n\nMove asset\n\n\nAfter selecting the asset(can select many for once), hold down the mouse and drag to move the asset(s) to other position. Drag the assets into the folder, you will see the folder with the mouse hovering over is highlighted by orange.\n\n\nRelease the mouse at this time so that the asset(s) is moved into the highlighted folder.\n\n\nDelete asset\n\n\nFor those chosen assets, you can execute the following operation to delete:\n\n\n\n\nRight click and choose \ndelete\n from the popped out menu\n\n\nPress \nDelete\n\uff08Windows\uff09or \nCmd + Backspace\n\uff08Mac) after choosing the asset\n\n\n\n\nSince deleting assets is an irreversible operation, there will be a dialog box popped out demanding user to confirm. Once click yes, the assets will be deleted permanently and cannot be found in recycling station (Windows) or trash bin (Mac)! Please use it with caution and do version management or manual backup.\n\n\nOther operations\n\n\nThe right click menu of \nassets\n also includes the following operation:\n\n\n\n\nrename\n: rename the asset\n\n\ncreate\n: same function with \ncreate\n button, it will add asset to the current selected folder. If the current selected one is asset file, it will add new asset to the same folder with current selected asset.\n\n\nshow in explorer\uff08Windows\uff09or Finder \uff08Mac\uff09\n: open the asset folder in the file manager window of operating system.\n\n\nGo to the asset location in Library\n: open the imported asset location in \nLibrary\n of project folder. Please read \nproject structure\n for detailed information.\n\n\nShow UUID\n: show the current selected asset's UUID in\nconsole\n window.\n\n\nRefresh\n: rerun the import operation of this asset.\n\n\n\n\nBesides, for specific asset type, you can enter the editing status like scene asset and script asset by double clicking asset.\n\n\nFilter asset\n\n\nEnter text in the search box at the top right of \nassets\n to filter filenames with all the assets including the input text. You can also input filename extensions like \n*.png\n so it will list all the assets with this specific extension.\n\n\n\n\n\n\nContinue on to read about \nScene editor\n.", 
            "title": "_Assets"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/assets/index.html#assets", 
            "text": "Assets  is used for us to access and manage the working area of project assets. Adding assets in here is normally a necessary step when starting to make game. You can use  HelloWorld  template to create a new project and then you can see there are many basic asset types in  assets .", 
            "title": "Assets"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/assets/index.html#introduction-for-the-interface", 
            "text": "assets  shows the contents in project assets folders in tree view, but be noticed that only the assets put under  assets  catalog in the project folder will be showed in here. Please read  Project structure  for project folder structure. Now let me introduce the elements in each interface:    Create  button on the top left corner is used to create new asset  The input box on the top right can be used to search and filter the asset filenames that contain specific text.  The main part of the panel is the asset list for the asset folder where you can add, delete or alter assets using context menu or dragging operation.", 
            "title": "Introduction for the interface"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/assets/index.html#asset-list", 
            "text": "Asset list can include any folder structure. Folders in  assets  will show as  icon. Click the arrow on the left to the icon, the contents in this folder will be unfold/fold.  The rest showed in the list other than folders are all asset files. Files in the asset list will not show their expanded-names, instead, they will use icons to indicate the type of file or asset, for example, the project created by  HelloWorld  template includes three core assets:   image assets \uff1acurrently includes image files like  jpg  and  png , icon will show as thumbnail of the image.  script assets : the JavaScript file programmer writes and uses  js  as the filename extension. We add function and game logic to the component by editing these scripts.  scene assets : scene file opened by double click. Only the scene file is opened can we keep creating and making the contents.   More common asset types and asset workflow, please read  Asset workflow .", 
            "title": "Asset list"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/assets/index.html#create-assets", 
            "text": "Currently, the assets can be created in  assets  are as follows:   Folder  Script file  Scene  Movie clips   Click  create  button on the top left corner, the create assets menu including the above asset list will be popped out. Click any item in it will create new corresponding assets at the current selected position.", 
            "title": "Create assets"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/assets/index.html#select-asset", 
            "text": "You can use the following asset selection in asset list:   Click to select a single asset  Press  Ctrl  or  Cmd  on the keyboard and click the mouse to join more assets into the selection  Press  Shift  on the keyboard and click the mouse to select continuous assets   You can execute move, delete and other operations to those selected assets.", 
            "title": "Select asset"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/assets/index.html#move-asset", 
            "text": "After selecting the asset(can select many for once), hold down the mouse and drag to move the asset(s) to other position. Drag the assets into the folder, you will see the folder with the mouse hovering over is highlighted by orange. \nRelease the mouse at this time so that the asset(s) is moved into the highlighted folder.", 
            "title": "Move asset"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/assets/index.html#delete-asset", 
            "text": "For those chosen assets, you can execute the following operation to delete:   Right click and choose  delete  from the popped out menu  Press  Delete \uff08Windows\uff09or  Cmd + Backspace \uff08Mac) after choosing the asset   Since deleting assets is an irreversible operation, there will be a dialog box popped out demanding user to confirm. Once click yes, the assets will be deleted permanently and cannot be found in recycling station (Windows) or trash bin (Mac)! Please use it with caution and do version management or manual backup.", 
            "title": "Delete asset"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/assets/index.html#other-operations", 
            "text": "The right click menu of  assets  also includes the following operation:   rename : rename the asset  create : same function with  create  button, it will add asset to the current selected folder. If the current selected one is asset file, it will add new asset to the same folder with current selected asset.  show in explorer\uff08Windows\uff09or Finder \uff08Mac\uff09 : open the asset folder in the file manager window of operating system.  Go to the asset location in Library : open the imported asset location in  Library  of project folder. Please read  project structure  for detailed information.  Show UUID : show the current selected asset's UUID in console  window.  Refresh : rerun the import operation of this asset.   Besides, for specific asset type, you can enter the editing status like scene asset and script asset by double clicking asset.", 
            "title": "Other operations"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/assets/index.html#filter-asset", 
            "text": "Enter text in the search box at the top right of  assets  to filter filenames with all the assets including the input text. You can also input filename extensions like  *.png  so it will list all the assets with this specific extension.    Continue on to read about  Scene editor .", 
            "title": "Filter asset"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/scene/index.html", 
            "text": "Scene editor\n\n\n\n\nScene editor\n is the core working area of content creation. You will use it to choose and place the scene image, character, special effet, UI and other game elements. In this working area, you can select and use \ntransform tool\n to change the node's attributes like position, rotation, scale and size. Here you can also preview WYSIWYG scene effect.\n\n\nView Introduction\n\n\nNavigation\n\n\nYou can move and locate the view in \nscene editor\n by the following operations:\n\n\n\n\nright click to drag\n\uff1ahorizontally remove the view.\n\n\nmouse wheel\n\uff1azoom in/out the view by taking the current mouse hovering position as the center.\n\n\n\n\nCoordinate system and grid\n\n\nThere will be a set of scaleplate and grids on the background of the scene view, which indicate the position information of each point in \nworld coordinate system\n. Point reads \n(0,0)\n is the origin of the world coordinate system in the scene. When using the mouse wheel to zoom out the view display, each scale represents a distance of \n100\n pixel. Due to the differences in the zooming in/out scale of current view, the number representing the distance from this point to origin will display on different scales, the unit of which is pixel.\n\n\nScale and grid in the scene are important reference information for us to place the scene elements. For informations on the relationship between coordinate system and node attributes like position, please read \nTransform\n section.\n\n\nIndicator Frame of Design resolution\n\n\nThe purple frame in the view represents the content area that displays in the scene by default. The size of this area is determined by \ndesign resolution\n. For settings and effects of deign resolution, please read \nCanvas\n section.\n\n\nSelect a node\n\n\nWhen the mouse is hovering on the node in the scene, the constraint frame of the node will display a grey singlet line. The node will be selected if you left click the mouse. You can only use transform tools (like position, rotation) to set node operations after selecting it.\n\n\nThere will be wireframe in blue around the selected node to prompt the constraint frame for node.\n\n\nNode name prompt\n\n\nWhen the mouse is hovering on the node, the node name will be displayed together with the node constraint frame. You can decide your target before clicking to confirm your selection according to the suspend prompt at places where nodes are gathering.\n\n\nAbout the naming of nodes, please read the introduction in \nHierarchy\n.\n\n\nThe node constraint box\n\n\nYou can see the constraint box(in grey or blue) when hovering on or selecting the node, and the rectangular region of the constraint box indicates the \nsize\n attribute size of the node. Even though the node doesn't contain image rendering component(such as \nSprite\n), you can set \nsize\n attribute for the node and the tranparent region within the constraint box of node can be selected by clicking the mouse or hovered.\n\n\n\n\nNode's \nsize\n attribute plays an important role in multiresolution adapt and layout strategy. For more information about usage of node size, please read \nmultiresolution adapt and elements aligning\n.\n\n\nMultiselect nodes\n\n\nPress the left mouse button and drag in \nscene editor\n and you can draw a blue marquee. Nodes overlap with the marquee will be selected all together when releasing the mouse. You can slide the mouse at your will to change the marquee area before releasing the mouse.\n\n\nAfter selecting multiple nodes, any transform operation will make effects on all the selected nodes.\n\n\nUse transform tool to arrange node\n\n\nThe core function of \nscene editor\n is to edit and arrange the visible elements in the scene in the way of WYSIWYG. We mainly arrage the nodes in the way we hope them to be by series \ntransform tool\n on the top left corner of the main window's tool bar.\n\n\nMove transform tool\n\n\nMove transform tool\n is the tranform tool default in activated state when opening the editor. This tool can be activated by clicking the first button on top left corner of main window's tool bar.\n\n\n\n\nSelect any node so you can see the node center(or anchor's position) appears a gizmo composed of red and green arrows and blue cube.\n\n\nGizmo\n refers to a controller that can interactive with mouse and appears in certain editing states in the scene editor. These controllers are only to assist editing without being shown in the game while it is running.\n\n\n\n\nWhen the move transform tool is activated:\n\n\n\n\nPress red arrow and drag mouse, then the node will be moved on the x axis;\n\n\nPress green arrow and drag mouse, then the node will be moved on the y axis;\n\n\nPress blue cube and drag mouse, then the node will be moved freely on both the axises.\n\n\n\n\nWhen the scene editor is activated, press keyboard shortcut \nW\n and you can switch to move tranform tool at any time.\n\n\nRotate transform tool\n\n\nClick the second button on the tool bar located at the main window's top left corner or press the keyboard shortcut \nE\n in scene editor and you can activate \nrotate transform tool\n.\n\n\n\n\nThe gizmo of rotate transform tool is mainly made up of an arrow and a circle. The direction of arrowhead indicates the angle of current node \nrotation\n. By dragging arrow or any point in the circle, you can rotate the node and you can get the angle value of current rotation on gizmo before you release the mouse.\n\n\n\n\nScale transform tool\n\n\nClick the third button on the tool bar located at main window's top left corner or press the keyboard shortcut \nR\n in the scene editor and you can activate \nscale transform tool\n.\n\n\n\n\n\n\nPress red arrow and drag mouse, then the node will be zoomed on the direction of x axis;\n\n\nPress green arrow and drag mouse, then the node will be zoomed on the direction of y axis;\n\n\nPress the yellow square in the middle, then the whole node image will be zoomed keeping the aspect ratio.\n\n\n\n\n\n\nAll the child nodes will be zoomed in the same ratio with the node.\n\n\nRectangle tranform tool\n\n\nClick the fourth button on the tool bar located at the main window's top left corner or press the keyboard shortcut \nT\n in scene editor and you can activate \nrectangle tranform tool\n.\n\n\n\n\nDrag any end-points of the gizmo so you can change the attributes of \nwidth\n and \nheight\n in node size while the opposite angles end points position keep the same.\n\n\nDrag any side on the gizmo so you can change the attributes of \nwidth\n and \nheight\n in node size while the opposite sides position keep the same.\n\n\n\n\nIn UI elements layout, \nrectangle transform tool\n is always used to precisely control the position and length of the node's dimensions. As to the image elements that must keep original image aspect ratio, the rectangle transform tool is normally not the best choice for size adjustment.\n\n\n\n\nContinue on to read about \nHierarchy\n.", 
            "title": "_Scene"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/scene/index.html#scene-editor", 
            "text": "Scene editor  is the core working area of content creation. You will use it to choose and place the scene image, character, special effet, UI and other game elements. In this working area, you can select and use  transform tool  to change the node's attributes like position, rotation, scale and size. Here you can also preview WYSIWYG scene effect.", 
            "title": "Scene editor"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/scene/index.html#view-introduction", 
            "text": "", 
            "title": "View Introduction"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/scene/index.html#navigation", 
            "text": "You can move and locate the view in  scene editor  by the following operations:   right click to drag \uff1ahorizontally remove the view.  mouse wheel \uff1azoom in/out the view by taking the current mouse hovering position as the center.", 
            "title": "Navigation"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/scene/index.html#coordinate-system-and-grid", 
            "text": "There will be a set of scaleplate and grids on the background of the scene view, which indicate the position information of each point in  world coordinate system . Point reads  (0,0)  is the origin of the world coordinate system in the scene. When using the mouse wheel to zoom out the view display, each scale represents a distance of  100  pixel. Due to the differences in the zooming in/out scale of current view, the number representing the distance from this point to origin will display on different scales, the unit of which is pixel.  Scale and grid in the scene are important reference information for us to place the scene elements. For informations on the relationship between coordinate system and node attributes like position, please read  Transform  section.", 
            "title": "Coordinate system and grid"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/scene/index.html#indicator-frame-of-design-resolution", 
            "text": "The purple frame in the view represents the content area that displays in the scene by default. The size of this area is determined by  design resolution . For settings and effects of deign resolution, please read  Canvas  section.", 
            "title": "Indicator Frame of Design resolution"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/scene/index.html#select-a-node", 
            "text": "When the mouse is hovering on the node in the scene, the constraint frame of the node will display a grey singlet line. The node will be selected if you left click the mouse. You can only use transform tools (like position, rotation) to set node operations after selecting it.  There will be wireframe in blue around the selected node to prompt the constraint frame for node.", 
            "title": "Select a node"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/scene/index.html#node-name-prompt", 
            "text": "When the mouse is hovering on the node, the node name will be displayed together with the node constraint frame. You can decide your target before clicking to confirm your selection according to the suspend prompt at places where nodes are gathering.  About the naming of nodes, please read the introduction in  Hierarchy .", 
            "title": "Node name prompt"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/scene/index.html#the-node-constraint-box", 
            "text": "You can see the constraint box(in grey or blue) when hovering on or selecting the node, and the rectangular region of the constraint box indicates the  size  attribute size of the node. Even though the node doesn't contain image rendering component(such as  Sprite ), you can set  size  attribute for the node and the tranparent region within the constraint box of node can be selected by clicking the mouse or hovered.   Node's  size  attribute plays an important role in multiresolution adapt and layout strategy. For more information about usage of node size, please read  multiresolution adapt and elements aligning .", 
            "title": "The node constraint box"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/scene/index.html#multiselect-nodes", 
            "text": "Press the left mouse button and drag in  scene editor  and you can draw a blue marquee. Nodes overlap with the marquee will be selected all together when releasing the mouse. You can slide the mouse at your will to change the marquee area before releasing the mouse.  After selecting multiple nodes, any transform operation will make effects on all the selected nodes.", 
            "title": "Multiselect nodes"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/scene/index.html#use-transform-tool-to-arrange-node", 
            "text": "The core function of  scene editor  is to edit and arrange the visible elements in the scene in the way of WYSIWYG. We mainly arrage the nodes in the way we hope them to be by series  transform tool  on the top left corner of the main window's tool bar.", 
            "title": "Use transform tool to arrange node"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/scene/index.html#move-transform-tool", 
            "text": "Move transform tool  is the tranform tool default in activated state when opening the editor. This tool can be activated by clicking the first button on top left corner of main window's tool bar.   Select any node so you can see the node center(or anchor's position) appears a gizmo composed of red and green arrows and blue cube.  Gizmo  refers to a controller that can interactive with mouse and appears in certain editing states in the scene editor. These controllers are only to assist editing without being shown in the game while it is running.   When the move transform tool is activated:   Press red arrow and drag mouse, then the node will be moved on the x axis;  Press green arrow and drag mouse, then the node will be moved on the y axis;  Press blue cube and drag mouse, then the node will be moved freely on both the axises.   When the scene editor is activated, press keyboard shortcut  W  and you can switch to move tranform tool at any time.", 
            "title": "Move transform tool"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/scene/index.html#rotate-transform-tool", 
            "text": "Click the second button on the tool bar located at the main window's top left corner or press the keyboard shortcut  E  in scene editor and you can activate  rotate transform tool .   The gizmo of rotate transform tool is mainly made up of an arrow and a circle. The direction of arrowhead indicates the angle of current node  rotation . By dragging arrow or any point in the circle, you can rotate the node and you can get the angle value of current rotation on gizmo before you release the mouse.", 
            "title": "Rotate transform tool"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/scene/index.html#scale-transform-tool", 
            "text": "Click the third button on the tool bar located at main window's top left corner or press the keyboard shortcut  R  in the scene editor and you can activate  scale transform tool .    Press red arrow and drag mouse, then the node will be zoomed on the direction of x axis;  Press green arrow and drag mouse, then the node will be zoomed on the direction of y axis;  Press the yellow square in the middle, then the whole node image will be zoomed keeping the aspect ratio.    All the child nodes will be zoomed in the same ratio with the node.", 
            "title": "Scale transform tool"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/scene/index.html#rectangle-tranform-tool", 
            "text": "Click the fourth button on the tool bar located at the main window's top left corner or press the keyboard shortcut  T  in scene editor and you can activate  rectangle tranform tool .   Drag any end-points of the gizmo so you can change the attributes of  width  and  height  in node size while the opposite angles end points position keep the same.  Drag any side on the gizmo so you can change the attributes of  width  and  height  in node size while the opposite sides position keep the same.   In UI elements layout,  rectangle transform tool  is always used to precisely control the position and length of the node's dimensions. As to the image elements that must keep original image aspect ratio, the rectangle transform tool is normally not the best choice for size adjustment.   Continue on to read about  Hierarchy .", 
            "title": "Rectangle tranform tool"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/hierarchy/index.html", 
            "text": "Hierarchy\n\n\n\n\nHierarchy\n includes all nodes in current opened scene, no matter the node includes the visible image or not. You can choose, create and delete nodes in here and create set membership of node by dragging one node to another.\n\n\nClick to choose node, and the selected node will be highlighted in blue. Current selected node will show with blue frame in \nscene editor\n and update contents in \nInspector\n.\n\n\nCreate node\n\n\nThere are two ways to create node in Hierarchy:\n\n\n\n\nClick  \n+\n button on the top left corner or right click the mouse to enter the \ncreate node\n submenu in right click menu. In this submenu, you can select different node types including Sprite, Label, Button and other nodes with different functions and expressions.\n\n\nDrag assets like image, font or particle from \nexplorer\n to Hierarchy. Then you can create corresponding image rendering node with the selected assets.\n\n\n\n\nDelete node\n\n\nAfter select node, you can delete the selected node by the \ndelete\n option in the right click menu or press the hot key \nDelete\n\uff08Windows\uff09or \nCmd + Backspace\n. If the selected node contains child node, then the child node will be deleted along with it.\n\n\nEstablish and edit node hierarchy relationship\n\n\nDragging node A to node B makes node A the child node of node B. Similar with \nexplorer\n, Hierarchy also show nodes' hierarchical relationship in tree view. Click the triangle icon on the left of node and you can unfold or fold the child node list.\n\n\nChange node's showing order\n\n\nOther than dragging one node to another, you can also keeps dragging node up and down to change the order of node in the list. The orange square indicates the range of parent node which the node belongs to and the green line represents the position the node will be inserted.\n\n\n\n\nThe ranking of node in the list determines the showing order of node in the scene. The lower the node is in the Hierarchy, the later will its rendering happen in the scene and will cover the nodes rank higher in the list.\n\n\nOther operations\n\n\nRight click the node, the popup menu also includes the following operation:\n\n\n\n\nCopy/paste\n\uff1acopy the node to the clipboard and then paste it to other places or open another scene to paste the node just copied.\n\n\nCopy node\n\uff1agenerate node replication exactly the same with the selected node and they are at the same level.\n\n\nRename\n\uff1arename the node\n\n\nShow route in console\n\uff1aIn complicated scenes, we sometimes need to get the complete hierarchy route of the node to access it when running the script. Click this option so you can see the node's route in \nconsole\n.\n\n\n\n\n\n\nContinue on to read about \nAttribute inspector\n.", 
            "title": "_Hierarchy"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/hierarchy/index.html#hierarchy", 
            "text": "Hierarchy  includes all nodes in current opened scene, no matter the node includes the visible image or not. You can choose, create and delete nodes in here and create set membership of node by dragging one node to another.  Click to choose node, and the selected node will be highlighted in blue. Current selected node will show with blue frame in  scene editor  and update contents in  Inspector .", 
            "title": "Hierarchy"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/hierarchy/index.html#create-node", 
            "text": "There are two ways to create node in Hierarchy:   Click   +  button on the top left corner or right click the mouse to enter the  create node  submenu in right click menu. In this submenu, you can select different node types including Sprite, Label, Button and other nodes with different functions and expressions.  Drag assets like image, font or particle from  explorer  to Hierarchy. Then you can create corresponding image rendering node with the selected assets.", 
            "title": "Create node"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/hierarchy/index.html#delete-node", 
            "text": "After select node, you can delete the selected node by the  delete  option in the right click menu or press the hot key  Delete \uff08Windows\uff09or  Cmd + Backspace . If the selected node contains child node, then the child node will be deleted along with it.", 
            "title": "Delete node"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/hierarchy/index.html#establish-and-edit-node-hierarchy-relationship", 
            "text": "Dragging node A to node B makes node A the child node of node B. Similar with  explorer , Hierarchy also show nodes' hierarchical relationship in tree view. Click the triangle icon on the left of node and you can unfold or fold the child node list.", 
            "title": "Establish and edit node hierarchy relationship"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/hierarchy/index.html#change-nodes-showing-order", 
            "text": "Other than dragging one node to another, you can also keeps dragging node up and down to change the order of node in the list. The orange square indicates the range of parent node which the node belongs to and the green line represents the position the node will be inserted.   The ranking of node in the list determines the showing order of node in the scene. The lower the node is in the Hierarchy, the later will its rendering happen in the scene and will cover the nodes rank higher in the list.", 
            "title": "Change node's showing order"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/hierarchy/index.html#other-operations", 
            "text": "Right click the node, the popup menu also includes the following operation:   Copy/paste \uff1acopy the node to the clipboard and then paste it to other places or open another scene to paste the node just copied.  Copy node \uff1agenerate node replication exactly the same with the selected node and they are at the same level.  Rename \uff1arename the node  Show route in console \uff1aIn complicated scenes, we sometimes need to get the complete hierarchy route of the node to access it when running the script. Click this option so you can see the node's route in  console .    Continue on to read about  Attribute inspector .", 
            "title": "Other operations"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/inspector/index.html", 
            "text": "Inspector\n\n\n\n\nAttribute inspector\n is the working area where we check and edit the current selected nodes and component attributes. Select the node in \nScene editor\n or \nHierarchy\n, attributes of this node and attributes of all the components of this node will display in \nInspector\n for your inquiry and editing.\n\n\nFrom top to bottom, the Inspector panel displays:\n\n\n\n\nnode activating switch and node name\n\n\nnode attribute\n\n\ncomponent attribute\n\n\n\n\nnode name and activating switch\n\n\nThe check box on the top left corner indicates the activating state of node. When the used node is not activated, all the components related to image rendering on the node will be shut down. The whole node including child nodes will be hidden efficiently.\n\n\nWhat displays at the right side of the node activating switch is node name, which is in accordance with the node name showed in \nHierarchy\n.\n\n\nNode attribute\n\n\nNext, \nAttribute inspector\n will show the attributes of node, which are listed under the headline \nNode\n. By clicking \nNode\n, one can fold or unfold the attributes of node.\n\n\nOther than the transforming attributes like Position, Rotation, Scale and Size, node attributes also include Anchor, Color, Opacity. Generally, modifications of node attributes will immediately reflect in the changes in the appearance or position of node in scene editor.\n\n\nFor more details on node attribute, please read \nTransform\n section.\n\n\nComponent attribute\n\n\nAll the components mounted to a node and their attributes will be listed under node attribute. Just like node attribute, you can switch the fold/unfold status of a component attribute by clicking its name. When there are many components mounted to a node, you can get larger working area by folding the component attributes that are not frequently modified.\n\n\nUsers create a component by script, the attribute of which is declared by the script. Different types of attributes have different widget appearances and editing methods in \nInspector\n. The defining method of attribute will be introduced in detail in \nScripting Properties\n.\n\n\nEdit an attribute\n\n\nAttribute\n is a public variable that declared in the component script and can be serialized and stored in the scene and animation data. We can quickly modify the attribute settings by \nInspector\n to realize the goal of adjusting game data and playing method with out programming.\n\n\nNormally we can divide attributes into \nvalue type\n and \nreference type\n according to the different memory location used by variables.\n\n\nValue type attribute\n\n\nvalue type\n includes numbers, strings, enumerations and other simple variable types that occupy small RAM space:\n\n\n\n\nNumber: can be input directly by keyboard. Users can also press the upward/downward arrows near the input field to gradually increase/decrease attribut value.\n\n\nVec2: the widget of Vec2 is the combination of two input values. And the input field will mark the corresponding child attribute name of each value with \nx\n and \ny\n.\n\n\nString: directly use keyboard to input string into textbox. The input widget of string can be divided into two types: single line and multiple lines. Users can press Enter button to wrap in Multiple lines textbox.\n\n\nBoolean: It can be edited in the form of check box. The selected state indicates the attribute value is \ntrue\n; and the non-selected state indicates the attribute value is \nfalse\n.\n\n\nEnum: It can be edited in the form of drop-down menu. Click enum menu and choose one option from the popp up menu list, then the modification of enum can be finished.\n\n\nColor: click color attribute preview box and \ncolor picker\n window will popped out. You can click to choose the color you need in this window, or directly enter specified color in the RGBA color input box below. Click any position outside the \ncolor picker\n window will close the window and the color selected in the end will be took as the attribute color.\n\n\n\n\n\n\nReference type attribute\n\n\nReference type\n includes much more complicated objects, such as node, component or asset. Different from the various editing methods of value type, reference type normally has only one editing method--drag the node or the asset into the attribute column.\n\n\nThe attribute of reference type will show \nNone\n after the initialization. Because users can't use script to set up initialized value for attribute of reference type, they can drag corresponding nodes or assets according to the type of attribute to finish the assignment for reference type.\n\n\nThe attribute column that needs to be assigned value by dragging nodes will show green label. There might display \nNode\n on the label, which means any node can be dragged into it. Also, the label may display component names like \nSprite\n,\nAnimation\n, etc., then users need to drag the nodes to which corresponding components are mounted.\n\n\nThe attribute column that needs to be assigned value by dragging assets will show yellow labels. There might display the asset type on the label, such as \nsprite-frame\n, \nprefab\n, \nfont\n, etc.. The assignment can be finished as long as you drag the assets of corresponding type from \nresource manager\n.\n\n\n\n\nNote: that script file is also a type of asset. Therefore the script asset reference attribute used by components shown on the top of the above picture is also represented by a yellow label.\n\n\n\n\nContinue on to read about \nConsole\n.", 
            "title": "_Inspector"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/inspector/index.html#inspector", 
            "text": "Attribute inspector  is the working area where we check and edit the current selected nodes and component attributes. Select the node in  Scene editor  or  Hierarchy , attributes of this node and attributes of all the components of this node will display in  Inspector  for your inquiry and editing.  From top to bottom, the Inspector panel displays:   node activating switch and node name  node attribute  component attribute", 
            "title": "Inspector"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/inspector/index.html#node-name-and-activating-switch", 
            "text": "The check box on the top left corner indicates the activating state of node. When the used node is not activated, all the components related to image rendering on the node will be shut down. The whole node including child nodes will be hidden efficiently.  What displays at the right side of the node activating switch is node name, which is in accordance with the node name showed in  Hierarchy .", 
            "title": "node name and activating switch"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/inspector/index.html#node-attribute", 
            "text": "Next,  Attribute inspector  will show the attributes of node, which are listed under the headline  Node . By clicking  Node , one can fold or unfold the attributes of node.  Other than the transforming attributes like Position, Rotation, Scale and Size, node attributes also include Anchor, Color, Opacity. Generally, modifications of node attributes will immediately reflect in the changes in the appearance or position of node in scene editor.  For more details on node attribute, please read  Transform  section.", 
            "title": "Node attribute"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/inspector/index.html#component-attribute", 
            "text": "All the components mounted to a node and their attributes will be listed under node attribute. Just like node attribute, you can switch the fold/unfold status of a component attribute by clicking its name. When there are many components mounted to a node, you can get larger working area by folding the component attributes that are not frequently modified.  Users create a component by script, the attribute of which is declared by the script. Different types of attributes have different widget appearances and editing methods in  Inspector . The defining method of attribute will be introduced in detail in  Scripting Properties .", 
            "title": "Component attribute"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/inspector/index.html#edit-an-attribute", 
            "text": "Attribute  is a public variable that declared in the component script and can be serialized and stored in the scene and animation data. We can quickly modify the attribute settings by  Inspector  to realize the goal of adjusting game data and playing method with out programming.  Normally we can divide attributes into  value type  and  reference type  according to the different memory location used by variables.", 
            "title": "Edit an attribute"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/inspector/index.html#value-type-attribute", 
            "text": "value type  includes numbers, strings, enumerations and other simple variable types that occupy small RAM space:   Number: can be input directly by keyboard. Users can also press the upward/downward arrows near the input field to gradually increase/decrease attribut value.  Vec2: the widget of Vec2 is the combination of two input values. And the input field will mark the corresponding child attribute name of each value with  x  and  y .  String: directly use keyboard to input string into textbox. The input widget of string can be divided into two types: single line and multiple lines. Users can press Enter button to wrap in Multiple lines textbox.  Boolean: It can be edited in the form of check box. The selected state indicates the attribute value is  true ; and the non-selected state indicates the attribute value is  false .  Enum: It can be edited in the form of drop-down menu. Click enum menu and choose one option from the popp up menu list, then the modification of enum can be finished.  Color: click color attribute preview box and  color picker  window will popped out. You can click to choose the color you need in this window, or directly enter specified color in the RGBA color input box below. Click any position outside the  color picker  window will close the window and the color selected in the end will be took as the attribute color.", 
            "title": "Value type attribute"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/inspector/index.html#reference-type-attribute", 
            "text": "Reference type  includes much more complicated objects, such as node, component or asset. Different from the various editing methods of value type, reference type normally has only one editing method--drag the node or the asset into the attribute column.  The attribute of reference type will show  None  after the initialization. Because users can't use script to set up initialized value for attribute of reference type, they can drag corresponding nodes or assets according to the type of attribute to finish the assignment for reference type.  The attribute column that needs to be assigned value by dragging nodes will show green label. There might display  Node  on the label, which means any node can be dragged into it. Also, the label may display component names like  Sprite , Animation , etc., then users need to drag the nodes to which corresponding components are mounted.  The attribute column that needs to be assigned value by dragging assets will show yellow labels. There might display the asset type on the label, such as  sprite-frame ,  prefab ,  font , etc.. The assignment can be finished as long as you drag the assets of corresponding type from  resource manager .   Note: that script file is also a type of asset. Therefore the script asset reference attribute used by components shown on the top of the above picture is also represented by a yellow label.   Continue on to read about  Console .", 
            "title": "Reference type attribute"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/console/index.html", 
            "text": "Console\n\n\n\n\nconsole\n will report errors, warnings or other log informations generated by Cocos Creator editor and engine. Information with different priority will show in different color:\n\n\n\n\nLog\n\uff1agray text, is normally used to indicate operation on-going.\n\n\nInfo\n\uff1ablue text, is used to indicate important prompt information.\n\n\nSuccess\n\uff1agreen text, is used to indicate that current operation has successfully done.\n\n\nWarn\n\uff1ayellow text, is used to warn user to deal with the abnormal situation which won't influence operations if not being dealt with.\n\n\nError\n\uff1ared text, indicates gross error and measures must be took before going on to the next operation or running the game.\n\n\n\n\nWhen there are too much information in console, you can filter these information effective by widgets in console. The operations include:\n\n\n\n\nClear\n \n Clear all the current information in console panel.\n\n\nFilter input\n \n Filter the information in console according to the input text. If the \nRegex\n next to it is checked, then the input text will be took as a regular expression to match the text.\n\n\nInformation levels\n \n You can choose one information level from this drop-down menu. From log level to error level, console will only show information in specific level. The default option \nAll\n represents information in all levels will be showed.\n\n\nMerge same type information\n \n When this selection is being activated, the same and repeat information will be merged into one, but there will be yellow numbers next to the information to prompt how many information of the same type have been merged.\n\n\n\n\n\n\nContinue on to read about \nToolbar\n.", 
            "title": "_Console"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/console/index.html#console", 
            "text": "console  will report errors, warnings or other log informations generated by Cocos Creator editor and engine. Information with different priority will show in different color:   Log \uff1agray text, is normally used to indicate operation on-going.  Info \uff1ablue text, is used to indicate important prompt information.  Success \uff1agreen text, is used to indicate that current operation has successfully done.  Warn \uff1ayellow text, is used to warn user to deal with the abnormal situation which won't influence operations if not being dealt with.  Error \uff1ared text, indicates gross error and measures must be took before going on to the next operation or running the game.   When there are too much information in console, you can filter these information effective by widgets in console. The operations include:   Clear    Clear all the current information in console panel.  Filter input    Filter the information in console according to the input text. If the  Regex  next to it is checked, then the input text will be took as a regular expression to match the text.  Information levels    You can choose one information level from this drop-down menu. From log level to error level, console will only show information in specific level. The default option  All  represents information in all levels will be showed.  Merge same type information    When this selection is being activated, the same and repeat information will be merged into one, but there will be yellow numbers next to the information to prompt how many information of the same type have been merged.    Continue on to read about  Toolbar .", 
            "title": "Console"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/preferences/index.html", 
            "text": "Preferences\n\n\nPreferences\n the panel provides a variety of personalized global editor settings,\nTo Open \nPreferences\n Window, Please select the main menu \nCocosCreator-\nPreferences\n.\n\n\nPreferences\n is composed of several different pages, all settings are divided into the following categories.\nModify the Settings after click \nSave and Close\n button, settings will only take effect.\n\n\nGeneral\n\n\n\n\nLanguage\n\n\nCan choose \n\u4e2d\u6587\n or \nEnglish\n, it will take effect after Cocos Creator editor restarts.\n\n\nIP Address\n\n\nCase the user may have multiple IP addresses on this computer,\nManually select one and two-dimensional code as a default when previewing address address.\nThis will list all native IP, You can also choose \nAuto\n get an IP editor automatically picked for you.\n\n\nDisplayed Build Console Log\n\n\nThis item is selected, Build log will be displayed directly in the process of publishing original project \nConsole\n panel.\nNon-selected, Building the release of primary logs are saved in the \n%USER/.CocosCreator/logs/native.log\n project,\nyou can also use the \nConsole\n Log button in the upper left corner of the panel \nCocos Console Log\n option to open the document.\n\n\nSpin step\n\n\nIn the \nProperties\n, all numeric property has a set of UP and DOWN arrows next to the input box,\nvalues that can be used to step Input:\n\n\n\n\nWhen hovering close to the value of the property name, The cursor will turn into \n such a shape, then Drag the mouse, can also according to a continuous increase or decrease the value of step amplitude.\n\n\nThe above two ways to modify the value\uff0cThe default step size is \n0.1\n,\n\nSpin step\n says each time you click the step button or drag the mouse to change the step amplitude.\nFor example, if you mainly use numbers to integers in the script, you can take the step size is set to \n1\n,\ncan be adjusted more easily.\n\n\nNote\n\uff1aAfter modifying the steps to refresh the Editor window (Ctrl/Cmd + R), set the Stride length will take effect\n\n\nData Editor\n\n\n\n\nThis category is used to set the default open mode for scripts and resources.\n\n\nExternal Script Editor\n\n\nYou can use built-in Code Editor or any external text tool executable file, as in \nAssets\n opens when you double-click\na script file. Also available in the drop-down menu select \nInternal\n,\nor click \nBrowse\n button select the executable file of the preferred text editor.\n\n\nExternal Picture Editor\n\n\nSimilar to the above option, used here to set when \nAssets\n,\ndouble-click the picture file, open the picture with the default application path.\n\n\nNative Develop\n\n\n\n\nThis classification is used to set the build is released to the native platform ( iOS, Android, Mac, Windows ),\nthe required development environment path.\n\n\nUse Builtin JavaScript Engine\n\n\nWhether to use Cocos Creator the built-in 'engine' path as JavaScript engine path.\nThis engine is used for \nScene\n to render the scene,\ndeclarations and other built-in components engine module in the Web environment.\n\n\nJavaScript Engine Path\n\n\nIn addition to using \nengine\n, you can also customize to https://github.com/cocos-creator/engine to clone or\nfork a copy of the engine to the local anywhere,\nthen uncheck \nUse Builtin JavaScript Engine\n and set the \nUse Builtin JavaScript Engine\n path to\nyour custom engines. You can use the editor to customize your engine.\n\n\nUse Builtin Cocos2d-x Engine\n\n\nWhether to use Cocos Creator the built-in 'cocos2d-x' path as cocos2d-x c++ engine path.\nThis engine is used for all \nBuild\n native platform ( iOS, Android, Mac, Windows ) project to build and compile.\n\n\nCocos2d-x Path\n\n\nUse Builtin Cocos2d-x Engine\n cancel previous selections, you can manually specify the path cocos2d-x.\nNote cocos2d-x engine used here must be downloaded from the https://github.com/cocos-creator/cocos2d-x-lite or the warehouse's fork.\n\n\nNDK Path\n\n\nSet the NDK Path, See \nSetup Native Development Environment\n.\n\n\nAndroid SDK Path\n\n\nSet the Android SDK Path, See \nSetup Native Development Environment\n.\n\n\nANT Path\n\n\nSet the ANT Path, See \nSetup Native Development Environment\n.\n\n\nPreview Run\n\n\n\n\nWhen using \nPlay\n button directly above the main window, you can set various options.\n\n\nShould Auto-refresh Preview\n\n\nWhen browsers or simulator have when running your scene,\nAfter you save the scene or recompile the script is whether you should refresh the preview device.\n\n\nPreview Browser\n\n\nFrom the drop-down menu, select system default browser or click the \nBrowse\n button to\nmanually specify a path to the browser.\n\n\nSimulator Path\n\n\nStarting with version v1.1.0, cocos simulator used in the Cocos Creator is placed on the cocos2d-x engine path.\nWhen using a customized version of the engine, you need to compile your own path simulator to the engine.\nClick \nOpen\n button you can open the currently specified in the file system path of the simulator.\nConvenient debugging positioning.\n\n\nSimulator Device Orientation\n\n\nSpecify the simulator runtime is a landscape or portrait.\n\n\nSimulator Resolution\n\n\nSelect a resolution from the default device as a simulator for resolution.\n\n\nCustom Resolution\n\n\nif the default resolution does not meet the requirements,\nyou can manually enter the Height and Width of the screen to set the simulator resolution.", 
            "title": "_Preferences"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/preferences/index.html#preferences", 
            "text": "Preferences  the panel provides a variety of personalized global editor settings,\nTo Open  Preferences  Window, Please select the main menu  CocosCreator- Preferences .  Preferences  is composed of several different pages, all settings are divided into the following categories.\nModify the Settings after click  Save and Close  button, settings will only take effect.", 
            "title": "Preferences"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/preferences/index.html#general", 
            "text": "", 
            "title": "General"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/preferences/index.html#language", 
            "text": "Can choose  \u4e2d\u6587  or  English , it will take effect after Cocos Creator editor restarts.", 
            "title": "Language"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/preferences/index.html#ip-address", 
            "text": "Case the user may have multiple IP addresses on this computer,\nManually select one and two-dimensional code as a default when previewing address address.\nThis will list all native IP, You can also choose  Auto  get an IP editor automatically picked for you.", 
            "title": "IP Address"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/preferences/index.html#displayed-build-console-log", 
            "text": "This item is selected, Build log will be displayed directly in the process of publishing original project  Console  panel.\nNon-selected, Building the release of primary logs are saved in the  %USER/.CocosCreator/logs/native.log  project,\nyou can also use the  Console  Log button in the upper left corner of the panel  Cocos Console Log  option to open the document.", 
            "title": "Displayed Build Console Log"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/preferences/index.html#spin-step", 
            "text": "In the  Properties , all numeric property has a set of UP and DOWN arrows next to the input box,\nvalues that can be used to step Input:   When hovering close to the value of the property name, The cursor will turn into   such a shape, then Drag the mouse, can also according to a continuous increase or decrease the value of step amplitude.  The above two ways to modify the value\uff0cThe default step size is  0.1 , Spin step  says each time you click the step button or drag the mouse to change the step amplitude.\nFor example, if you mainly use numbers to integers in the script, you can take the step size is set to  1 ,\ncan be adjusted more easily.  Note \uff1aAfter modifying the steps to refresh the Editor window (Ctrl/Cmd + R), set the Stride length will take effect", 
            "title": "Spin step"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/preferences/index.html#data-editor", 
            "text": "This category is used to set the default open mode for scripts and resources.", 
            "title": "Data Editor"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/preferences/index.html#external-script-editor", 
            "text": "You can use built-in Code Editor or any external text tool executable file, as in  Assets  opens when you double-click\na script file. Also available in the drop-down menu select  Internal ,\nor click  Browse  button select the executable file of the preferred text editor.", 
            "title": "External Script Editor"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/preferences/index.html#external-picture-editor", 
            "text": "Similar to the above option, used here to set when  Assets ,\ndouble-click the picture file, open the picture with the default application path.", 
            "title": "External Picture Editor"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/preferences/index.html#native-develop", 
            "text": "This classification is used to set the build is released to the native platform ( iOS, Android, Mac, Windows ),\nthe required development environment path.", 
            "title": "Native Develop"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/preferences/index.html#use-builtin-javascript-engine", 
            "text": "Whether to use Cocos Creator the built-in 'engine' path as JavaScript engine path.\nThis engine is used for  Scene  to render the scene,\ndeclarations and other built-in components engine module in the Web environment.", 
            "title": "Use Builtin JavaScript Engine"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/preferences/index.html#javascript-engine-path", 
            "text": "In addition to using  engine , you can also customize to https://github.com/cocos-creator/engine to clone or\nfork a copy of the engine to the local anywhere,\nthen uncheck  Use Builtin JavaScript Engine  and set the  Use Builtin JavaScript Engine  path to\nyour custom engines. You can use the editor to customize your engine.", 
            "title": "JavaScript Engine Path"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/preferences/index.html#use-builtin-cocos2d-x-engine", 
            "text": "Whether to use Cocos Creator the built-in 'cocos2d-x' path as cocos2d-x c++ engine path.\nThis engine is used for all  Build  native platform ( iOS, Android, Mac, Windows ) project to build and compile.", 
            "title": "Use Builtin Cocos2d-x Engine"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/preferences/index.html#cocos2d-x-path", 
            "text": "Use Builtin Cocos2d-x Engine  cancel previous selections, you can manually specify the path cocos2d-x.\nNote cocos2d-x engine used here must be downloaded from the https://github.com/cocos-creator/cocos2d-x-lite or the warehouse's fork.", 
            "title": "Cocos2d-x Path"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/preferences/index.html#ndk-path", 
            "text": "Set the NDK Path, See  Setup Native Development Environment .", 
            "title": "NDK Path"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/preferences/index.html#android-sdk-path", 
            "text": "Set the Android SDK Path, See  Setup Native Development Environment .", 
            "title": "Android SDK Path"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/preferences/index.html#ant-path", 
            "text": "Set the ANT Path, See  Setup Native Development Environment .", 
            "title": "ANT Path"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/preferences/index.html#preview-run", 
            "text": "When using  Play  button directly above the main window, you can set various options.", 
            "title": "Preview Run"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/preferences/index.html#should-auto-refresh-preview", 
            "text": "When browsers or simulator have when running your scene,\nAfter you save the scene or recompile the script is whether you should refresh the preview device.", 
            "title": "Should Auto-refresh Preview"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/preferences/index.html#preview-browser", 
            "text": "From the drop-down menu, select system default browser or click the  Browse  button to\nmanually specify a path to the browser.", 
            "title": "Preview Browser"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/preferences/index.html#simulator-path", 
            "text": "Starting with version v1.1.0, cocos simulator used in the Cocos Creator is placed on the cocos2d-x engine path.\nWhen using a customized version of the engine, you need to compile your own path simulator to the engine.\nClick  Open  button you can open the currently specified in the file system path of the simulator.\nConvenient debugging positioning.", 
            "title": "Simulator Path"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/preferences/index.html#simulator-device-orientation", 
            "text": "Specify the simulator runtime is a landscape or portrait.", 
            "title": "Simulator Device Orientation"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/preferences/index.html#simulator-resolution", 
            "text": "Select a resolution from the default device as a simulator for resolution.", 
            "title": "Simulator Resolution"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/preferences/index.html#custom-resolution", 
            "text": "if the default resolution does not meet the requirements,\nyou can manually enter the Height and Width of the screen to set the simulator resolution.", 
            "title": "Custom Resolution"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/node-library/index.html", 
            "text": "Node Library\n\n\n\n\nNode Library\n is a very simple direct visual control of the warehouse, We can drag and drop the preset node to the \nScene\n or \nHierarchy\n, quickly complete the creation of preset node.\n\n\nWhen wo use the default layout, the node library will be displayed in the editor. If we use the editor's layout is not included node library, We can open the node library via the main menu \nPanel-\nNode Library\n, then drag it to editor.\n\n\nNode Library\n includes two categories, represented by the two tabs:\n\n\ncreator\n\n\nAs shown in the figure above, this lists all the built-in default nodes in the editor. \nDrag the control to the scene, you can quickly generate sprite what including default resource, button that contains the background map and text caption and has been configured with good content, as well as scroll view that has already been configured for content and scroll bars. And so on other nodes.\n\n\nThe contents of the \nNode Library\n are the same as that of the \nNodes\n in the main menu. Creating a new node through the node library is more convenient and quick\n\n\nAlong with the subsequent add more functionality, We will continue to add nodes to the control library\n\n\nuser\n\n\n\n\nThis column can collect the user's own set of \nPrefab\n, convenient repeatedly create\u3002\n\n\nTo add custom prefabricated controls, Only need from the resource manager to drag the corresponding prefabricated resources (Prefab) to the custom control page.\n\n\nRight click on the elements in the custom control, you can choose to rename or delete the control from the control library.\n\n\nThen you can use drag and drop in the scene in the way you create custom controls.", 
            "title": "_Node-Library"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/node-library/index.html#node-library", 
            "text": "Node Library  is a very simple direct visual control of the warehouse, We can drag and drop the preset node to the  Scene  or  Hierarchy , quickly complete the creation of preset node.  When wo use the default layout, the node library will be displayed in the editor. If we use the editor's layout is not included node library, We can open the node library via the main menu  Panel- Node Library , then drag it to editor.  Node Library  includes two categories, represented by the two tabs:", 
            "title": "Node Library"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/node-library/index.html#creator", 
            "text": "As shown in the figure above, this lists all the built-in default nodes in the editor. \nDrag the control to the scene, you can quickly generate sprite what including default resource, button that contains the background map and text caption and has been configured with good content, as well as scroll view that has already been configured for content and scroll bars. And so on other nodes.  The contents of the  Node Library  are the same as that of the  Nodes  in the main menu. Creating a new node through the node library is more convenient and quick  Along with the subsequent add more functionality, We will continue to add nodes to the control library", 
            "title": "creator"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/node-library/index.html#user", 
            "text": "This column can collect the user's own set of  Prefab , convenient repeatedly create\u3002  To add custom prefabricated controls, Only need from the resource manager to drag the corresponding prefabricated resources (Prefab) to the custom control page.  Right click on the elements in the custom control, you can choose to rename or delete the control from the control library.  Then you can use drag and drop in the scene in the way you create custom controls.", 
            "title": "user"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/node-tree/index.html", 
            "text": "Node Tree\n\n\n\n\nNode Tree\n includes all nodes in current opened scene, no matter the node includes the visible image or not. You can choose, create and delete nodes in here and create set membership of node by dragging one node to another.\n\n\nClick to choose node, and the selected node will be highlighted in blue. Current selected node will show with blue frame in \nscene editor\n and update contents in \nProperties\n panel.\n\n\nCreate node\n\n\nThere are two ways to create node in Hierarchy:\n\n\n\n\nClick  \n+\n button on the top left corner or right click the mouse to enter the \ncreate node\n submenu in right click menu. In this submenu, you can select different node types including Sprite, Label, Button and other nodes with different functions and expressions.\n\n\nDrag assets like image, font or particle from \nexplorer\n to \nNode Tree\n. Then you can create corresponding image rendering node with the selected assets.\n\n\n\n\nDelete node\n\n\nAfter select node, you can delete the selected node by the \ndelete\n option in the right click menu or press the hot key \nDelete\n\uff08Windows\uff09or \nCmd + Backspace\n. If the selected node contains child node, then the child node will be deleted along with it.\n\n\nCreate and edit node parenting relationship\n\n\nDragging node A to node B makes node A the child node of node B. Similar with \nexplorer\n, Hierarchy also show nodes' hierarchical relationship in tree view. Click the triangle icon on the left of node and you can unfold or fold the child node list.\n\n\nChange node's rendering order\n\n\nOther than dragging one node to another, you can also keeps dragging node up and down to change the order of node in the list. The orange square indicates the range of parent node which the node belongs to and the green line represents the position the node will be inserted.\n\n\n\n\nThe order of nodes in the list determines the rendering order of node in the scene. The lower the node is in the \nNode Tree\n, the later will its rendering happen in the scene and will cover the nodes rank higher in the list.\n\n\nOther operations\n\n\nRight click the node, the popup menu also includes the following operation:\n\n\n\n\nCopy/paste\n\uff1acopy the node to the clipboard and then paste it to other places or open another scene to paste the node just copied.\n\n\nCopy node\n\uff1agenerate node replication exactly the same with the selected node and they are at the same level.\n\n\nRename\n\uff1arename the node\n\n\nShow Path\n\uff1aIn complicated scenes, we sometimes need to get the complete path in the node tree to access it when running the script. Click this option so you can see the node's path in \nconsole\n.\n\n\n\n\n\n\nContinue on to read about \nProperties\n panel.", 
            "title": "_Node-Tree"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/node-tree/index.html#node-tree", 
            "text": "Node Tree  includes all nodes in current opened scene, no matter the node includes the visible image or not. You can choose, create and delete nodes in here and create set membership of node by dragging one node to another.  Click to choose node, and the selected node will be highlighted in blue. Current selected node will show with blue frame in  scene editor  and update contents in  Properties  panel.", 
            "title": "Node Tree"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/node-tree/index.html#create-node", 
            "text": "There are two ways to create node in Hierarchy:   Click   +  button on the top left corner or right click the mouse to enter the  create node  submenu in right click menu. In this submenu, you can select different node types including Sprite, Label, Button and other nodes with different functions and expressions.  Drag assets like image, font or particle from  explorer  to  Node Tree . Then you can create corresponding image rendering node with the selected assets.", 
            "title": "Create node"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/node-tree/index.html#delete-node", 
            "text": "After select node, you can delete the selected node by the  delete  option in the right click menu or press the hot key  Delete \uff08Windows\uff09or  Cmd + Backspace . If the selected node contains child node, then the child node will be deleted along with it.", 
            "title": "Delete node"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/node-tree/index.html#create-and-edit-node-parenting-relationship", 
            "text": "Dragging node A to node B makes node A the child node of node B. Similar with  explorer , Hierarchy also show nodes' hierarchical relationship in tree view. Click the triangle icon on the left of node and you can unfold or fold the child node list.", 
            "title": "Create and edit node parenting relationship"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/node-tree/index.html#change-nodes-rendering-order", 
            "text": "Other than dragging one node to another, you can also keeps dragging node up and down to change the order of node in the list. The orange square indicates the range of parent node which the node belongs to and the green line represents the position the node will be inserted.   The order of nodes in the list determines the rendering order of node in the scene. The lower the node is in the  Node Tree , the later will its rendering happen in the scene and will cover the nodes rank higher in the list.", 
            "title": "Change node's rendering order"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/node-tree/index.html#other-operations", 
            "text": "Right click the node, the popup menu also includes the following operation:   Copy/paste \uff1acopy the node to the clipboard and then paste it to other places or open another scene to paste the node just copied.  Copy node \uff1agenerate node replication exactly the same with the selected node and they are at the same level.  Rename \uff1arename the node  Show Path \uff1aIn complicated scenes, we sometimes need to get the complete path in the node tree to access it when running the script. Click this option so you can see the node's path in  console .    Continue on to read about  Properties  panel.", 
            "title": "Other operations"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/properties/index.html", 
            "text": "Properties\n\n\n\n\nProperties\n panel is the working area where we check and edit the current selected nodes and component attributes. Select the node in \nScene editor\n or \nNode Tree\n, attributes of this node and attributes of all the components of this node will display in \nProperties\n panel for your inquiry and editing.\n\n\nFrom top to bottom, the \nProperties\n panel displays:\n\n\n\n\nnode activating switch and node name\n\n\nnode attribute\n\n\ncomponent attribute\n\n\n\n\nnode name and activating switch\n\n\nThe check box on the top left corner indicates the activating state of node. When the used node is not activated, all the components related to image rendering on the node will be shut down. The whole node including child nodes will be hidden efficiently.\n\n\nWhat displays at the right side of the node activating switch is node name, which is in accordance with the node name showed in \nNode Tree\n.\n\n\nNode Properties\n\n\nNext, \nProperties\n panel will show properties of node, which are listed under the headline \nNode\n. By clicking \nNode\n, one can fold or unfold the attributes of node.\n\n\nOther than the transforming attributes like Position, Rotation, Scale and Size, node attributes also include Anchor, Color, Opacity. Generally, modifications of node attributes will immediately reflect in the changes in the appearance or position of node in scene editor.\n\n\nFor more details on node attribute, please read \nTransform\n section.\n\n\nComponent attribute\n\n\nAll the components mounted to a node and their attributes will be listed under node attribute. Just like node attribute, you can switch the fold/unfold status of a component attribute by clicking its name. When there are many components mounted to a node, you can get larger working area by folding the component attributes that are not frequently modified.\n\n\nUsers create a component by script, the attribute of which is declared by the script. Different types of attributes have different widget appearances and editing methods in \nProperties\n panel. The defining method of attribute will be introduced in detail in \nScripting Properties\n.\n\n\nEdit an attribute\n\n\nAttribute\n is a public variable that declared in the component script and can be serialized and stored in the scene and animation data. We can quickly modify the attribute settings by \nProperties\n panel to realize the goal of adjusting game data and playing method with out programming.\n\n\nNormally we can divide attributes into \nvalue type\n and \nreference type\n according to the different memory location used by variables.\n\n\nValue type attribute\n\n\nvalue type\n includes numbers, strings, enumerations and other simple variable types that occupy small RAM space:\n\n\n\n\nNumber: can be input directly by keyboard. Users can also press the upward/downward arrows near the input field to gradually increase/decrease attribut value.\n\n\nVec2: the widget of Vec2 is the combination of two input values. And the input field will mark the corresponding child attribute name of each value with \nx\n and \ny\n.\n\n\nString: directly use keyboard to input string into textbox. The input widget of string can be divided into two types: single line and multiple lines. Users can press Enter button to wrap in Multiple lines textbox.\n\n\nBoolean: It can be edited in the form of check box. The selected state indicates the attribute value is \ntrue\n; and the non-selected state indicates the attribute value is \nfalse\n.\n\n\nEnum: It can be edited in the form of drop-down menu. Click enum menu and choose one option from the popp up menu list, then the modification of enum can be finished.\n\n\nColor: click color attribute preview box and \ncolor picker\n window will popped out. You can click to choose the color you need in this window, or directly enter specified color in the RGBA color input box below. Click any position outside the \ncolor picker\n window will close the window and the color selected in the end will be took as the attribute color.\n\n\n\n\n\n\nReference type attribute\n\n\nReference type\n includes much more complicated objects, such as node, component or asset. Different from the various editing methods of value type, reference type normally has only one editing method--drag the node or the asset into the attribute column.\n\n\nThe attribute of reference type will show \nNone\n after the initialization. Because users can't use script to set up initialized value for attribute of reference type, they can drag corresponding nodes or assets according to the type of attribute to finish the assignment for reference type.\n\n\nThe attribute column that needs to be assigned value by dragging nodes will show green label. There might display \nNode\n on the label, which means any node can be dragged into it. Also, the label may display component names like \nSprite\n,\nAnimation\n, etc., then users need to drag the nodes to which corresponding components are mounted.\n\n\nThe attribute column that needs to be assigned value by dragging assets will show yellow labels. There might display the asset type on the label, such as \nsprite-frame\n, \nprefab\n, \nfont\n, etc.. The assignment can be finished as long as you drag the assets of corresponding type from \nAssets\n.\n\n\n\n\nNote: that script file is also a type of asset. Therefore the script asset reference attribute used by components shown on the top of the above picture is also represented by a yellow label.\n\n\n\n\nContinue on to read about \nConsole\n.", 
            "title": "_Properties"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/properties/index.html#properties", 
            "text": "Properties  panel is the working area where we check and edit the current selected nodes and component attributes. Select the node in  Scene editor  or  Node Tree , attributes of this node and attributes of all the components of this node will display in  Properties  panel for your inquiry and editing.  From top to bottom, the  Properties  panel displays:   node activating switch and node name  node attribute  component attribute", 
            "title": "Properties"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/properties/index.html#node-name-and-activating-switch", 
            "text": "The check box on the top left corner indicates the activating state of node. When the used node is not activated, all the components related to image rendering on the node will be shut down. The whole node including child nodes will be hidden efficiently.  What displays at the right side of the node activating switch is node name, which is in accordance with the node name showed in  Node Tree .", 
            "title": "node name and activating switch"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/properties/index.html#node-properties", 
            "text": "Next,  Properties  panel will show properties of node, which are listed under the headline  Node . By clicking  Node , one can fold or unfold the attributes of node.  Other than the transforming attributes like Position, Rotation, Scale and Size, node attributes also include Anchor, Color, Opacity. Generally, modifications of node attributes will immediately reflect in the changes in the appearance or position of node in scene editor.  For more details on node attribute, please read  Transform  section.", 
            "title": "Node Properties"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/properties/index.html#component-attribute", 
            "text": "All the components mounted to a node and their attributes will be listed under node attribute. Just like node attribute, you can switch the fold/unfold status of a component attribute by clicking its name. When there are many components mounted to a node, you can get larger working area by folding the component attributes that are not frequently modified.  Users create a component by script, the attribute of which is declared by the script. Different types of attributes have different widget appearances and editing methods in  Properties  panel. The defining method of attribute will be introduced in detail in  Scripting Properties .", 
            "title": "Component attribute"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/properties/index.html#edit-an-attribute", 
            "text": "Attribute  is a public variable that declared in the component script and can be serialized and stored in the scene and animation data. We can quickly modify the attribute settings by  Properties  panel to realize the goal of adjusting game data and playing method with out programming.  Normally we can divide attributes into  value type  and  reference type  according to the different memory location used by variables.", 
            "title": "Edit an attribute"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/properties/index.html#value-type-attribute", 
            "text": "value type  includes numbers, strings, enumerations and other simple variable types that occupy small RAM space:   Number: can be input directly by keyboard. Users can also press the upward/downward arrows near the input field to gradually increase/decrease attribut value.  Vec2: the widget of Vec2 is the combination of two input values. And the input field will mark the corresponding child attribute name of each value with  x  and  y .  String: directly use keyboard to input string into textbox. The input widget of string can be divided into two types: single line and multiple lines. Users can press Enter button to wrap in Multiple lines textbox.  Boolean: It can be edited in the form of check box. The selected state indicates the attribute value is  true ; and the non-selected state indicates the attribute value is  false .  Enum: It can be edited in the form of drop-down menu. Click enum menu and choose one option from the popp up menu list, then the modification of enum can be finished.  Color: click color attribute preview box and  color picker  window will popped out. You can click to choose the color you need in this window, or directly enter specified color in the RGBA color input box below. Click any position outside the  color picker  window will close the window and the color selected in the end will be took as the attribute color.", 
            "title": "Value type attribute"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/editor-panels/properties/index.html#reference-type-attribute", 
            "text": "Reference type  includes much more complicated objects, such as node, component or asset. Different from the various editing methods of value type, reference type normally has only one editing method--drag the node or the asset into the attribute column.  The attribute of reference type will show  None  after the initialization. Because users can't use script to set up initialized value for attribute of reference type, they can drag corresponding nodes or assets according to the type of attribute to finish the assignment for reference type.  The attribute column that needs to be assigned value by dragging nodes will show green label. There might display  Node  on the label, which means any node can be dragged into it. Also, the label may display component names like  Sprite , Animation , etc., then users need to drag the nodes to which corresponding components are mounted.  The attribute column that needs to be assigned value by dragging assets will show yellow labels. There might display the asset type on the label, such as  sprite-frame ,  prefab ,  font , etc.. The assignment can be finished as long as you drag the assets of corresponding type from  Assets .   Note: that script file is also a type of asset. Therefore the script asset reference attribute used by components shown on the top of the above picture is also represented by a yellow label.   Continue on to read about  Console .", 
            "title": "Reference type attribute"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/toolbar/index.html", 
            "text": "Tool bar\n\n\n\n\nTool bar\n is right above the main editor window including five sets of control buttons or pieces of information that provide editing functions for specific panels and allow the user to conveniently implement workflows.\n\n\nChoose transform tool\n\n\n\n\nThis provides the editing node transform attribute (position, rotation, scale, size) function for the \nscene editor\n. Please refer to \nuse transform tool to place node\n for detailed information.\n\n\nTransform tool display mode\n\n\nControl the display mode of the \ntransform tool\n in \nscene editor\n with the two sets of buttons below.\n\n\n\n\nPosition mode:\n\n\n\n\nAnchor: transform tool will be displayed at the position where the node \nAnchor\n is.\n\n\nCentral point: transform tool will be displayed at the position where the central point of the node is (influenced by the constraint box size).\n\n\n\n\n\n\nRotation mode:\n\n\n\n\nLocal transform tool's rotation (handle direction) will stay the same as the \nRotation\n attribute of the node.\n\n\nWorld: transform tool's rotation stays the same and the handles of the x and y axes stay the same as the direction of the world coordinate.\n\n\n\n\nRun game preview\n\n\n\n\nThis includes two buttons:\n\n\n\n\nRun preview: run the scene being currently edited in the browser.\n\n\nRefresh device: reload the current scene on all the devices that are connected to this machine to preview the game (including local browser and other mobile devices connected to the native machine).\n\n\n\n\nPreview address\n\n\n\n\nHere is shown the LAN address of the desktop computer running Cocos Creator. The mobile devices connected to the same local area network can access this address to preview and debug the game.\n\n\nOpen project folder\n\n\n\n\nOpen the project folder in the operating system explorer or finder.\n\n\n\n\nContinue on to read about the \nEditor Layout\n.", 
            "title": "_Toolbar"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/toolbar/index.html#tool-bar", 
            "text": "Tool bar  is right above the main editor window including five sets of control buttons or pieces of information that provide editing functions for specific panels and allow the user to conveniently implement workflows.", 
            "title": "Tool bar"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/toolbar/index.html#choose-transform-tool", 
            "text": "This provides the editing node transform attribute (position, rotation, scale, size) function for the  scene editor . Please refer to  use transform tool to place node  for detailed information.", 
            "title": "Choose transform tool"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/toolbar/index.html#transform-tool-display-mode", 
            "text": "Control the display mode of the  transform tool  in  scene editor  with the two sets of buttons below.   Position mode:   Anchor: transform tool will be displayed at the position where the node  Anchor  is.  Central point: transform tool will be displayed at the position where the central point of the node is (influenced by the constraint box size).    Rotation mode:   Local transform tool's rotation (handle direction) will stay the same as the  Rotation  attribute of the node.  World: transform tool's rotation stays the same and the handles of the x and y axes stay the same as the direction of the world coordinate.", 
            "title": "Transform tool display mode"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/toolbar/index.html#run-game-preview", 
            "text": "This includes two buttons:   Run preview: run the scene being currently edited in the browser.  Refresh device: reload the current scene on all the devices that are connected to this machine to preview the game (including local browser and other mobile devices connected to the native machine).", 
            "title": "Run game preview"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/toolbar/index.html#preview-address", 
            "text": "Here is shown the LAN address of the desktop computer running Cocos Creator. The mobile devices connected to the same local area network can access this address to preview and debug the game.", 
            "title": "Preview address"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/toolbar/index.html#open-project-folder", 
            "text": "Open the project folder in the operating system explorer or finder.   Continue on to read about the  Editor Layout .", 
            "title": "Open project folder"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/layout/index.html", 
            "text": "Editor layout\n\n\nEditor layout refers to the position, size and stack of panels in Cocos Creator.\n\n\nSelect the \nLayout\n menu from the main menu and you can choose the most suitable editor panel layout from the pre-set ones for your current project. You can adjust the position and size of each panel on the basis of the pre-set layout. Alterations to the layout will be auto-saved to the \nlocal/layout.windows.json\n file in the project folder.\n\n\nAdjusting panel size\n\n\nPosition the mouse on the border line of two panels and drag when the cursor changes shape to change the size of the two adjacent panels.\n\n\n\n\nSome panels have a minimum size setting, so the panel size can't be reduced if it reaches its size limitation.\n\n\nMoving panels\n\n\nClick the tab bar on the panel and drag to move the whole panel to any position in the editor window. The red box in the picture below shows the tab bar area that can be dragged and the arrow shows the drag direction:\n\n\n\n\nThe blue translucent box shows the position where the panel will be placed once the mouse is released when moving the panel.\n\n\nStacking panels\n\n\nBesides moving the panels, you can also move the mouse to the tab bar area of another panel when dragging the tab bar:\n\n\n\n\nRelease the mouse when the tab bar appears orange, so that the two panels can be stacked together. Only one panel can be displayed at a time:\n\n\n\n\nPanels in a stack can be very practical when the desktop resolution is not enough or the panel layout usage rate is low. Panels in a stack can be dragged out at any time to recover the display of the panel that is placed at the top.\n\n\n\n\nContinue on to read about \nConstruct Preview\n.", 
            "title": "_Layout"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/layout/index.html#editor-layout", 
            "text": "Editor layout refers to the position, size and stack of panels in Cocos Creator.  Select the  Layout  menu from the main menu and you can choose the most suitable editor panel layout from the pre-set ones for your current project. You can adjust the position and size of each panel on the basis of the pre-set layout. Alterations to the layout will be auto-saved to the  local/layout.windows.json  file in the project folder.", 
            "title": "Editor layout"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/layout/index.html#adjusting-panel-size", 
            "text": "Position the mouse on the border line of two panels and drag when the cursor changes shape to change the size of the two adjacent panels.   Some panels have a minimum size setting, so the panel size can't be reduced if it reaches its size limitation.", 
            "title": "Adjusting panel size"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/layout/index.html#moving-panels", 
            "text": "Click the tab bar on the panel and drag to move the whole panel to any position in the editor window. The red box in the picture below shows the tab bar area that can be dragged and the arrow shows the drag direction:   The blue translucent box shows the position where the panel will be placed once the mouse is released when moving the panel.", 
            "title": "Moving panels"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/layout/index.html#stacking-panels", 
            "text": "Besides moving the panels, you can also move the mouse to the tab bar area of another panel when dragging the tab bar:   Release the mouse when the tab bar appears orange, so that the two panels can be stacked together. Only one panel can be displayed at a time:   Panels in a stack can be very practical when the desktop resolution is not enough or the panel layout usage rate is low. Panels in a stack can be dragged out at any time to recover the display of the panel that is placed at the top.   Continue on to read about  Construct Preview .", 
            "title": "Stacking panels"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/preview-build/index.html", 
            "text": "Build and preview\n\n\nComing soon...\n\n\n\n\n\nContinue on to read about \nAsset workflow\n.", 
            "title": "_Preview Build"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/basics/preview-build/index.html#build-and-preview", 
            "text": "Coming soon...   Continue on to read about  Asset workflow .", 
            "title": "Build and preview"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/asset-workflow/index.html", 
            "text": "Asset workflow\n\n\nAdding an asset\n\n\nThere are three ways to add assets into a project:\n\n\n\n\nUsing the \ncreate\n button to add assets\n\n\nIn the operating system file manager, copy the asset file to the project assets folder and then reopen or activate the Cocos Creator window to finish importing the asset.\n\n\nDrag asset files from the operating system file manager (such as Explorer in Windows or Finder in Mac OS) to the \nassets\n panel to import the asset.\n\n\n\n\nImporting an asset from outside\n\n\nYou can drag files from another window in the operating system to the \nassets\n panel in Cocos Creator window in order to import assets from the outside. This operation will auto copy the asset files to the project asset files and finish the importing operation.\n\n\nImporting and synchronizing assets\n\n\nThe assets in \nassets\n and the project asset files seen in the file manager are synchronised. Moving, renaming and deleting assets in \nassets\n will do the same alterations to the asset files in the user's file system. Likewise, reopening or activating the Cocos Creator program after adding or deleting assets in the file system (such as Explorer in Windows or Finder in Mac OS)  will update the assets in \nassets\n.\n\n\nCommon asset workflow\n\n\nNext, we will introduce Cocos Creator's main asset types and the related workflows:\n\n\n\n\nScene asset\n\n\nImage asset\n\n\nAtlas\n\n\nFont asset\n\n\nParticle asset\n\n\nAudio asset\n\n\nPrefab\n\n\n\n\n\n\nContinue on to read about \nCreate and Manage Scenes\n.", 
            "title": "_Getting Started"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/asset-workflow/index.html#asset-workflow", 
            "text": "", 
            "title": "Asset workflow"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/asset-workflow/index.html#adding-an-asset", 
            "text": "There are three ways to add assets into a project:   Using the  create  button to add assets  In the operating system file manager, copy the asset file to the project assets folder and then reopen or activate the Cocos Creator window to finish importing the asset.  Drag asset files from the operating system file manager (such as Explorer in Windows or Finder in Mac OS) to the  assets  panel to import the asset.", 
            "title": "Adding an asset"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/asset-workflow/index.html#importing-an-asset-from-outside", 
            "text": "You can drag files from another window in the operating system to the  assets  panel in Cocos Creator window in order to import assets from the outside. This operation will auto copy the asset files to the project asset files and finish the importing operation.", 
            "title": "Importing an asset from outside"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/asset-workflow/index.html#importing-and-synchronizing-assets", 
            "text": "The assets in  assets  and the project asset files seen in the file manager are synchronised. Moving, renaming and deleting assets in  assets  will do the same alterations to the asset files in the user's file system. Likewise, reopening or activating the Cocos Creator program after adding or deleting assets in the file system (such as Explorer in Windows or Finder in Mac OS)  will update the assets in  assets .", 
            "title": "Importing and synchronizing assets"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/asset-workflow/index.html#common-asset-workflow", 
            "text": "Next, we will introduce Cocos Creator's main asset types and the related workflows:   Scene asset  Image asset  Atlas  Font asset  Particle asset  Audio asset  Prefab    Continue on to read about  Create and Manage Scenes .", 
            "title": "Common asset workflow"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/asset-workflow/scene-managing/index.html", 
            "text": "Creating and managing scenes\n\n\nCreating a scene\n\n\nMethod one: on the main menu select \nFile--\nNew scene\n\n\n\n\nMethod two: click the create menu in \nassets\n to create a new scene.\n\n\n\n\nSaving a scene\n\n\nMethod one: use keyboard shortcut \nCtrl + S\n (Windows) or \nCommand + S\n (Mac)\n\n\nMethod two: on the main menu select \nFile--\nSave scene\n\n\n\n\nSwitching scenes\n\n\nDouble click the scene that you want to open in \nassets\n.\n\n\n\n\n\nContinue on to read about \nTextures\n.", 
            "title": "_Scene Managing"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/asset-workflow/scene-managing/index.html#creating-and-managing-scenes", 
            "text": "", 
            "title": "Creating and managing scenes"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/asset-workflow/scene-managing/index.html#creating-a-scene", 
            "text": "Method one: on the main menu select  File-- New scene   Method two: click the create menu in  assets  to create a new scene.", 
            "title": "Creating a scene"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/asset-workflow/scene-managing/index.html#saving-a-scene", 
            "text": "Method one: use keyboard shortcut  Ctrl + S  (Windows) or  Command + S  (Mac)  Method two: on the main menu select  File-- Save scene", 
            "title": "Saving a scene"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/asset-workflow/scene-managing/index.html#switching-scenes", 
            "text": "Double click the scene that you want to open in  assets .   Continue on to read about  Textures .", 
            "title": "Switching scenes"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/asset-workflow/sprite/index.html", 
            "text": "Texture\n\n\nComing soon...\n\n\n\n\n\nContinue on to read about \nAtlas\n.", 
            "title": "_Sprite"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/asset-workflow/sprite/index.html#texture", 
            "text": "Coming soon...   Continue on to read about  Atlas .", 
            "title": "Texture"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/asset-workflow/atlas/index.html", 
            "text": "Atlas\n\n\nComing soon...\n\n\n\n\n\nContinue on to read about \nFont\n.", 
            "title": "_Atlas"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/asset-workflow/atlas/index.html#atlas", 
            "text": "Coming soon...   Continue on to read about  Font .", 
            "title": "Atlas"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/asset-workflow/font/index.html", 
            "text": "Font\n\n\nComing soon...\n\n\n\n\n\nContinue on to read about \nParticle Asset\n.", 
            "title": "_Font"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/asset-workflow/font/index.html#font", 
            "text": "Coming soon...   Continue on to read about  Particle Asset .", 
            "title": "Font"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/asset-workflow/particle/index.html", 
            "text": "Particle System\n\n\nImporting a particle asset\n\n\nPut the Cocos2d-s supported particle \n.plist\n directly under the project catalogue.\n\n\n\n\nAdding a particle system to the scene\n\n\nMethod one: drag particle assets directly from \nassets\n to \nHierarchy\n:\n\n\n\n\nMethod two: drag particle assets directly from \nassets\n to \nscene editor\n:\n\n\n\n\nMethod three: add a \nParticleSystem\n component to the existing node and give particle assets to the component \nFile\n attribute in \nassets\n:\n\n\n\n\n\n\n\nContinue on to read about \nAudio assets\n.", 
            "title": "_Particle"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/asset-workflow/particle/index.html#particle-system", 
            "text": "", 
            "title": "Particle System"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/asset-workflow/particle/index.html#importing-a-particle-asset", 
            "text": "Put the Cocos2d-s supported particle  .plist  directly under the project catalogue.", 
            "title": "Importing a particle asset"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/asset-workflow/particle/index.html#adding-a-particle-system-to-the-scene", 
            "text": "Method one: drag particle assets directly from  assets  to  Hierarchy :   Method two: drag particle assets directly from  assets  to  scene editor :   Method three: add a  ParticleSystem  component to the existing node and give particle assets to the component  File  attribute in  assets :    Continue on to read about  Audio assets .", 
            "title": "Adding a particle system to the scene"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/asset-workflow/audio-asset/index.html", 
            "text": "Audio asset\n\n\nComing soon...\n\n\n\n\n\nContinue on to read about \nPrefabricate Asset\n.", 
            "title": "_Audio Asset"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/asset-workflow/audio-asset/index.html#audio-asset", 
            "text": "Coming soon...   Continue on to read about  Prefabricate Asset .", 
            "title": "Audio asset"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/asset-workflow/prefab/index.html", 
            "text": "Prefab\n\n\nCreating a prefab\n\n\nAfter editing the Node in the scene, drag it directly from \nHierarchy\n to \nasset\n:\n\n\n\n\nAnd thus you create a prefab:\n\n\n\n\nSaving prefab\n\n\nAfter changing the prefab object in the scene, click \napply\n in the \nInspector\n\nand you can save the corresponding prefab:\n\n\n\n\nReverting prefab\n\n\nAfter changing the prefab object in the scene, click \nrevert\n in the \nInspector\n\nand you can restore the corresponding prefab to the status in \nasset\n:\n\n\n\n\n\n\n\nContinue on to read about \nContent Creation Workflow\n.", 
            "title": "_Prefab"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/asset-workflow/prefab/index.html#prefab", 
            "text": "", 
            "title": "Prefab"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/asset-workflow/prefab/index.html#creating-a-prefab", 
            "text": "After editing the Node in the scene, drag it directly from  Hierarchy  to  asset :   And thus you create a prefab:", 
            "title": "Creating a prefab"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/asset-workflow/prefab/index.html#saving-prefab", 
            "text": "After changing the prefab object in the scene, click  apply  in the  Inspector \nand you can save the corresponding prefab:", 
            "title": "Saving prefab"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/asset-workflow/prefab/index.html#reverting-prefab", 
            "text": "After changing the prefab object in the scene, click  revert  in the  Inspector \nand you can restore the corresponding prefab to the status in  asset :    Continue on to read about  Content Creation Workflow .", 
            "title": "Reverting prefab"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/content-workflow/index.html", 
            "text": "Content creation workflow\n\n\n\n\nNode and Component\n\n\nCoordinate system and transformation\n\n\nManage node hierarchy and display order\n\n\nCreate scene image with scene editor\n\n\n\n\nExcept for the routine scene elements of editing and creating, we will introduce the other two most important parts in the content creation of the \nUI system\n and \nanimation system\n in separate chapters:\n\n\n\n\nUI system\n\n\nAnimation system\n\n\n\n\n\n\nContinue on to read about \nNode and Component\n.", 
            "title": "_Getting Started"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/content-workflow/index.html#content-creation-workflow", 
            "text": "Node and Component  Coordinate system and transformation  Manage node hierarchy and display order  Create scene image with scene editor   Except for the routine scene elements of editing and creating, we will introduce the other two most important parts in the content creation of the  UI system  and  animation system  in separate chapters:   UI system  Animation system    Continue on to read about  Node and Component .", 
            "title": "Content creation workflow"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/content-workflow/node-component/index.html", 
            "text": "Node and component\n\n\nThe core of Cocos Creator's workflow is component-based development. The component-based framework is also known as the \ncomponent-entity system\n (or \nEntity-Component System\n). Simply put, we construct the entity in combination mode instead of inheriting mode.\n\n\nIn Cocos Creator, a \nNode\n is an entity carrying component. We will make nodes that have many kinds of expressions and functions by mounting a \nComponent\n that has many kinds of functions itself on the node. Let\u2019s see how to create a node and add a component to the scene.\n\n\nCreate Node\n\n\nTo get a node having a specific function fastest, you can use the \ncreate node\n button on the left corner of the \nHierarchy\n. We can make a very simple Sprite node as an example. Click the \ncreate node\n button and then choose \u2019create rendering node/Sprite\u2019:\n\n\n\n\nThen we can see the new Sprite node in the \nscene editor\n and \nHierarchy\n. The new node is named \u2018New Sprite\u2019, meaning this is a node whose function is mainly provided by the Sprite component. You can also try clicking the \ncreate node\n button again to choose other node types so that you can find their different names and expressions.\n\n\nComponent\n\n\nSprite component\n\n\nNow since we have some nodes, let's see what a component is and the connections between the components and nodes. Select the \u2018New Sprite\u2019 that we just created and you can see what the \nInspector\n says:\n\n\n\n\nThe part starting with \u2018Node\u2019 in the \nInspector\n is the property of the node. The property of the node includes changeable information about the node like position, rotation, scale and size as well other information such as anchor, color and opacity. We will introduce each in detail in the \nnode properties\n section.\n\n\nIn the following picture, the part starting with \u2018Sprite\u2019 is the property of the Sprite component. In 2D games, the Sprite component is responsible for most of the image rendering. The most important property of the Sprite component is \u2018Sprite Frame\u2019 where we can designate the image files that Sprite is going to render in the game. Let's try to drag a picture resource from the \nresource manager\n to the \u2018Sprite Frame\u2019 property in the \nInspector\n:\n\n\n\n\nWe see that the previous Sprite default image turns into the image we assigned. This is what the Sprite component does: rendering images.\n\n\nThe influence of the node attribute on the Sprite component\n\n\nWhen a node combines with the Sprite component, the rendering method of an image can be controlled by modifying the node attribute. You can adjust your node according to the settings marked by red lines in the following picture. You can see that the image rotation, scale, color and opacity changes:\n\n\n\n\nWe mentioned earlier that the component based structure achieves function extensions by combining. The following picture shows how the node and the Sprite component combine.\n\n\n\n\nNode Color and Opacity property\n\n\nThe property of \nColor\n and \nOpacity\n in the above picture have direct influence on the Sprite component rendering image. Color and opacity can also influence the display of the rendering component \nLabel\n.\n\n\nThese two properties will multiply the content of the rendering component itself to determine each pixel's color and opacity during rendering. In addition, the Opacity property will act on a child node and easily achieve the fade in and fade out effect of a set of node contents by altering the \u2018Opacity\u2019 of the parent node.\n\n\nAdd other components\n\n\nWe can add multiple components on one node to add more functions to the node. In the example above, we can continue to select the \u2018New Sprite\u2019 node, click the \nadd component\n button at the bottom of the \nInspector\n panel and select \u2018add UI component/Button\u2019 to add a Button component.\n\n\nThen set the Button component according to the following picture (the actual color attribute can be set freely according to your own taste):\n\n\n\n\nNext, click the \noperation preview\n button on the toolbar \n and hover the mouse over the image in the browser operation window. You can then see the color of the image changes which means the adding of the Button component to the node has taken effect!\n\n\nBrief Summary\n\n\nIn the above example, we first combined the Sprite component with the node which led us to the scene image that could designate the resource for the rendering image. Then we could display this image in different ways by altering the node attributes like scale and color. Next we could even add a Button component to the node so that it could react according to the different statuses of the button (normal, hover, down, etc.). This is the component based development workflow in Cocos Creator. We can use this method to combine different functions within a node to achieve a series of complicated targets, such as a character's mobile attack controls, auto scrolling of background images, layouts of UI elements, interaction functions and so on.\n\n\nIt's worth mentioning that a single node can only add one rendering component including \nSprite\n, \nLabel\n, \nParticle\n and so on.\n\n\nReference reading\n\n\n\n\nUnderstand component-entity system - i_dovelemon's blog\n\n\n\n\n\n\n\nContinue on to read about \nCoordinate system and Transform\n.", 
            "title": "_Node Component"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/content-workflow/node-component/index.html#node-and-component", 
            "text": "The core of Cocos Creator's workflow is component-based development. The component-based framework is also known as the  component-entity system  (or  Entity-Component System ). Simply put, we construct the entity in combination mode instead of inheriting mode.  In Cocos Creator, a  Node  is an entity carrying component. We will make nodes that have many kinds of expressions and functions by mounting a  Component  that has many kinds of functions itself on the node. Let\u2019s see how to create a node and add a component to the scene.", 
            "title": "Node and component"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/content-workflow/node-component/index.html#create-node", 
            "text": "To get a node having a specific function fastest, you can use the  create node  button on the left corner of the  Hierarchy . We can make a very simple Sprite node as an example. Click the  create node  button and then choose \u2019create rendering node/Sprite\u2019:   Then we can see the new Sprite node in the  scene editor  and  Hierarchy . The new node is named \u2018New Sprite\u2019, meaning this is a node whose function is mainly provided by the Sprite component. You can also try clicking the  create node  button again to choose other node types so that you can find their different names and expressions.", 
            "title": "Create Node"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/content-workflow/node-component/index.html#component", 
            "text": "", 
            "title": "Component"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/content-workflow/node-component/index.html#sprite-component", 
            "text": "Now since we have some nodes, let's see what a component is and the connections between the components and nodes. Select the \u2018New Sprite\u2019 that we just created and you can see what the  Inspector  says:   The part starting with \u2018Node\u2019 in the  Inspector  is the property of the node. The property of the node includes changeable information about the node like position, rotation, scale and size as well other information such as anchor, color and opacity. We will introduce each in detail in the  node properties  section.  In the following picture, the part starting with \u2018Sprite\u2019 is the property of the Sprite component. In 2D games, the Sprite component is responsible for most of the image rendering. The most important property of the Sprite component is \u2018Sprite Frame\u2019 where we can designate the image files that Sprite is going to render in the game. Let's try to drag a picture resource from the  resource manager  to the \u2018Sprite Frame\u2019 property in the  Inspector :   We see that the previous Sprite default image turns into the image we assigned. This is what the Sprite component does: rendering images.", 
            "title": "Sprite component"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/content-workflow/node-component/index.html#the-influence-of-the-node-attribute-on-the-sprite-component", 
            "text": "When a node combines with the Sprite component, the rendering method of an image can be controlled by modifying the node attribute. You can adjust your node according to the settings marked by red lines in the following picture. You can see that the image rotation, scale, color and opacity changes:   We mentioned earlier that the component based structure achieves function extensions by combining. The following picture shows how the node and the Sprite component combine.", 
            "title": "The influence of the node attribute on the Sprite component"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/content-workflow/node-component/index.html#node-color-and-opacity-property", 
            "text": "The property of  Color  and  Opacity  in the above picture have direct influence on the Sprite component rendering image. Color and opacity can also influence the display of the rendering component  Label .  These two properties will multiply the content of the rendering component itself to determine each pixel's color and opacity during rendering. In addition, the Opacity property will act on a child node and easily achieve the fade in and fade out effect of a set of node contents by altering the \u2018Opacity\u2019 of the parent node.", 
            "title": "Node Color and Opacity property"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/content-workflow/node-component/index.html#add-other-components", 
            "text": "We can add multiple components on one node to add more functions to the node. In the example above, we can continue to select the \u2018New Sprite\u2019 node, click the  add component  button at the bottom of the  Inspector  panel and select \u2018add UI component/Button\u2019 to add a Button component.  Then set the Button component according to the following picture (the actual color attribute can be set freely according to your own taste):   Next, click the  operation preview  button on the toolbar   and hover the mouse over the image in the browser operation window. You can then see the color of the image changes which means the adding of the Button component to the node has taken effect!", 
            "title": "Add other components"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/content-workflow/node-component/index.html#brief-summary", 
            "text": "In the above example, we first combined the Sprite component with the node which led us to the scene image that could designate the resource for the rendering image. Then we could display this image in different ways by altering the node attributes like scale and color. Next we could even add a Button component to the node so that it could react according to the different statuses of the button (normal, hover, down, etc.). This is the component based development workflow in Cocos Creator. We can use this method to combine different functions within a node to achieve a series of complicated targets, such as a character's mobile attack controls, auto scrolling of background images, layouts of UI elements, interaction functions and so on.  It's worth mentioning that a single node can only add one rendering component including  Sprite ,  Label ,  Particle  and so on.", 
            "title": "Brief Summary"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/content-workflow/node-component/index.html#reference-reading", 
            "text": "Understand component-entity system - i_dovelemon's blog    Continue on to read about  Coordinate system and Transform .", 
            "title": "Reference reading"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/content-workflow/transform/index.html", 
            "text": "Coordinate system and node transformation attribute\n\n\nIn the \nScene editor\n and \nNode and component\n files, we introduced that we can change a node's display behaviour by using \nchange tools\n and editing the node's attributes in the \nInspector\n . We will learn more about the coordinate system of where the node is and the operating principles of the node's four transformation attributes of Position, Rotation, Scale and Size in this section.\n\n\nCocos Creator coordinates system\n\n\nWe have learnt that we can set the position attribute for a node, so where will a node with a specific position attribute be displayed on the screen when the game is operating? Like a map in real life, we can run satellite positioning using both longitude and latitude. We also need to learn about the coordinate system of Cocos Creator to understand the meaning of node positioning.\n\n\nCartesian coordinate system\n\n\nThe Cocos Creator coordinate system is exactly the same as the cocos2d-x engine coordinate system. The cocos2d-x and OpenGL coordinate systems both originated from the Cartesian coordinate system. In the Cartesian coordinate system, the origin of the right-handed system is in the lower left corner with the direction of x going towards the right, y going upwards and z going outwards. This coordinate system we use is called the Cartesian right-handed coordinate system.\n\n\n\n\nScreen coordinate system and cocos2d-x coordinate system\n\n\nThe standard screen coordinate system uses a different coordinate system from OpenGL. It is very different from the cocos2d-x coordinate system.\n\n\nThe coordinate system used in developing applications with native SDK in iOS, Android, Windows Phone and other platforms is the standard screen coordinate system. The origin is located at the screen upper left corner with x going towards the right and y going downwards.\n\n\nThe cocos2d-x coordinate system is the same with the OpenGL coordinate system, the origin is in the lower left corner while x goes towards the right and y upwards.\n\n\n\n\nWorld Coordinates and Local Coordinates\n\n\nThe world coordinate system is also called the absolute coordinate system. It is a united coordinate system for displaying the scene space during Cocos Creator game development.\u300cWorld\u300dis used to indicate the scene in our game.\n\n\nThe local coordinate system is also called the relative coordinate system and it is related to the node. Each node has its own unique coordinates, so when the node is moving or changing directions, the coordinates related to this node will also move or change directions.\n\n\nNodes\n in Cocos Creator can have a hierarchical structure of set membership. The node position we altered in the node's \nPosition\n attribute setting are the \nlocal coordinates\n relative to the parent node not the world coordinates. Finally, when drawing the entire scene Cocos Creator will map these nodes' local coordinates to the world coordinates.\n\n\nTo determine the function mode of the coordinate system for each node, we also need to understand the concept of \nanchor\n.\n\n\nAnchor\n\n\nAnchor\n is another important property of nodes. It determines which point in the constraint frame of the node itself should be taken as the position of the whole node. The position we see the transformation tool show after we choose the node is the anchor position of the node.\n\n\nAnchor is expressed by \nanchorX\n and \nanchorY\n which are multiplication factors in the range of \n0 ~ 1\n. They calculate the anchor position by using the node size. \n(0.5, 0.5)\n indicates the anchor is located in the position where the node length and width are both multiplied by 0.5, i.e. the center of the node.\n\n\n\n\nWhen the anchor attribute is set as \n(0, 0)\n, the anchor is located at the origin of the node's local coordinates, i.e. the left bottom corner of the node constraint frame.\n\n\n\n\nThe local coordinates of the child node\n\n\nOnce the anchor position is decided, all the child nodes will take the \nanchor position\n as the coordinate origin. One thing we need to note is this action is not the same as the default action in the cocos2d-x engine; it is a feature of the Cocos Creator coordinate system!\n\n\nHypothetically, the node structure in the scene is as follows:\n\n\n\n\nWhen our scene contains nodes from a different hierarchy, we should take the following steps when we determine the position of each node in the world coordinate system:\n\n\n\n\nProcess each node from the root level of the scene. \u2018NodeA\u2019 in the above image is a root level node. First, determine the display position and coordinate origin position (same as the anchor position) according to the \nPosition\n and \nAnchor\n attributes of NodeA.\n\n\nThen process all of the direct child nodes of NodeA, i.e. \u2018NodeB\u2019 and its sibling nodes. In NodeA's local coordinate system determine the position of NodeB in the scene space and the position of the origin of the coordinate system.\n\n\nNo matter how many levels that the nodes have, we process them all in order from highest level to the lowest. Each node should use the coordinates of the parent node and its own position anchor attribute to determine position within the scene space.\n\n\n\n\nTransform property\n\n\nBesides the \nAnchor\n we introduced above, the node also includes four other main transformation properties which we will introduce next.\n\n\n\n\nPosition\n\n\nPosition\n is composed of \u2018x\u2019 and \u2018y\u2019 properties which set the node coordinates on the x and y axes of the current coordinates.\n\n\n\n\n\u2018NodeA\u2019 in the above image is at the root level of the scene. Its position is \u2018(507, 354)\u2019 (refer to the scale on the background of the\nscene editor\n), the position of its child node \u2018NodeC\u2019 is \u2018(345, 0)\u2019. You can see that the position of the child node migrated based on the parent node's anchor.\n\n\nThe default value of the position property is \u2018(0, 0)\u2019 which means that the newly added node will always show up at the parent node's coordinate origin position. The default position of nodes in Cocos Creator is \u2018(0, 0)\u2019 and the default anchor is set as \u2018(0.5, 0.5)\u2019. Nodes under this setting will be located at the center position of the parent node by default so that all the contents can be taken in when making UI or combining a player's character.\n\n\nIn the scene editor, you can always use \nmove transform tools\n to change a node\u2019s position.\n\n\nRotation\n\n\nRotation\n is another important property that will have an effect on a node\u2019s local coordinates. The rotate property only has one value to indicate the current rotation angle of the node. When the angle value is positive, the node rotates clockwise; when the angle value is negative, the node rotates counter clockwise.\n\n\n\n\nThe node hierarchical relationship in the image above is the same as in the previous image only with the \nRotation\n attribute of \u2018Node\u2019 set as \u201830\u2019 degrees. As well as \u2018NodeA\u2019 itself rotating 30 degrees clockwise, its child node \u2018NodeC\u2019 also rotates 30 degrees clockwise taking the anchor of \u2018NodeA\u2019 as the center.\n\n\nIn the scene editor, you can always use \nrotate transform tools\n to change the rotation of a node.\n\n\nScale\n\n\nThe \nScale\n property is a set of multiplication factors which are composed of \nscaleX\n and \nscaleY\n to represent the scale percentage  of a node on the x and y axes.\n\n\n\n\nThe scale property of \u2018NodeA\u2019 in the above image is set as \u2018(0.5, 1.0)\u2019. This means the node is reduced by factor of 0.5 on the x axis and remains the same on the y axis. You can see the image of its child node \nNodeC\n is also reduced on the x axis, so the scale property will influence all the child nodes.\n\n\nThe scale property set on the child node will have additive effects on the parent node. The child node of a child node will multiply all the scale properties on each hierarchy to get the scale percentage used in the world coordinate system. This is the same case with the position and rotation properties, it\u2019s just that that position and rotation properties have additive effects, while the scale property makes the effects more obvious by multiplication.\n\n\nThe scale property acts on the effects of the properties of position and size among others. When you change the scale property, the node's position and size won't change, but it will multiply the position, size and other properties by a scale before showing the node image; the values from the multiplication are the actual position and size of the node that will appear.\n\n\nIn the scene editor, you can always use \nscale transform tools\n to change the scale of the node.\n\n\nSize\n\n\nThe \nSize\n property is composed of \u2018Width\u2019 and \u2018Height\u2019 to stipulate the constraint frame's size. For the Sprite node, the size of the constraint frame is the size of the image that will appear.\n\n\nTherefore, the size property can easily be confused with the scale property. They both can influence the size of the Sprite image, but they influence it in different ways. The size property, along with position and anchor, regulates the four endpoint positions of the node and determines the image display range of the constraints of these four points according to its result. The size property plays a vital role in rendering the \nSliced Sprite\n.\n\n\nMeanwhile, the scale property gets the node's width and height after scaling based on the multiplication of the size value. When determining the size of the image, size is the basis while scale is the variable so to speak. Besides, the size property will not influence the size of the child node (but can make an indirect influence through \nWidget\n), which is very different from the scale property.\n\n\nIn the scene editor, you can always use \nrectangle transform tools\n to change the node size.\n\n\n\n\nContinue on to read about \nmanage node hierarchy and display order\n.", 
            "title": "_Transform"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/content-workflow/transform/index.html#coordinate-system-and-node-transformation-attribute", 
            "text": "In the  Scene editor  and  Node and component  files, we introduced that we can change a node's display behaviour by using  change tools  and editing the node's attributes in the  Inspector  . We will learn more about the coordinate system of where the node is and the operating principles of the node's four transformation attributes of Position, Rotation, Scale and Size in this section.", 
            "title": "Coordinate system and node transformation attribute"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/content-workflow/transform/index.html#cocos-creator-coordinates-system", 
            "text": "We have learnt that we can set the position attribute for a node, so where will a node with a specific position attribute be displayed on the screen when the game is operating? Like a map in real life, we can run satellite positioning using both longitude and latitude. We also need to learn about the coordinate system of Cocos Creator to understand the meaning of node positioning.", 
            "title": "Cocos Creator coordinates system"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/content-workflow/transform/index.html#cartesian-coordinate-system", 
            "text": "The Cocos Creator coordinate system is exactly the same as the cocos2d-x engine coordinate system. The cocos2d-x and OpenGL coordinate systems both originated from the Cartesian coordinate system. In the Cartesian coordinate system, the origin of the right-handed system is in the lower left corner with the direction of x going towards the right, y going upwards and z going outwards. This coordinate system we use is called the Cartesian right-handed coordinate system.", 
            "title": "Cartesian coordinate system"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/content-workflow/transform/index.html#screen-coordinate-system-and-cocos2d-x-coordinate-system", 
            "text": "The standard screen coordinate system uses a different coordinate system from OpenGL. It is very different from the cocos2d-x coordinate system.  The coordinate system used in developing applications with native SDK in iOS, Android, Windows Phone and other platforms is the standard screen coordinate system. The origin is located at the screen upper left corner with x going towards the right and y going downwards.  The cocos2d-x coordinate system is the same with the OpenGL coordinate system, the origin is in the lower left corner while x goes towards the right and y upwards.", 
            "title": "Screen coordinate system and cocos2d-x coordinate system"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/content-workflow/transform/index.html#world-coordinates-and-local-coordinates", 
            "text": "The world coordinate system is also called the absolute coordinate system. It is a united coordinate system for displaying the scene space during Cocos Creator game development.\u300cWorld\u300dis used to indicate the scene in our game.  The local coordinate system is also called the relative coordinate system and it is related to the node. Each node has its own unique coordinates, so when the node is moving or changing directions, the coordinates related to this node will also move or change directions.  Nodes  in Cocos Creator can have a hierarchical structure of set membership. The node position we altered in the node's  Position  attribute setting are the  local coordinates  relative to the parent node not the world coordinates. Finally, when drawing the entire scene Cocos Creator will map these nodes' local coordinates to the world coordinates.  To determine the function mode of the coordinate system for each node, we also need to understand the concept of  anchor .", 
            "title": "World Coordinates and Local Coordinates"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/content-workflow/transform/index.html#anchor", 
            "text": "Anchor  is another important property of nodes. It determines which point in the constraint frame of the node itself should be taken as the position of the whole node. The position we see the transformation tool show after we choose the node is the anchor position of the node.  Anchor is expressed by  anchorX  and  anchorY  which are multiplication factors in the range of  0 ~ 1 . They calculate the anchor position by using the node size.  (0.5, 0.5)  indicates the anchor is located in the position where the node length and width are both multiplied by 0.5, i.e. the center of the node.   When the anchor attribute is set as  (0, 0) , the anchor is located at the origin of the node's local coordinates, i.e. the left bottom corner of the node constraint frame.", 
            "title": "Anchor"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/content-workflow/transform/index.html#the-local-coordinates-of-the-child-node", 
            "text": "Once the anchor position is decided, all the child nodes will take the  anchor position  as the coordinate origin. One thing we need to note is this action is not the same as the default action in the cocos2d-x engine; it is a feature of the Cocos Creator coordinate system!  Hypothetically, the node structure in the scene is as follows:   When our scene contains nodes from a different hierarchy, we should take the following steps when we determine the position of each node in the world coordinate system:   Process each node from the root level of the scene. \u2018NodeA\u2019 in the above image is a root level node. First, determine the display position and coordinate origin position (same as the anchor position) according to the  Position  and  Anchor  attributes of NodeA.  Then process all of the direct child nodes of NodeA, i.e. \u2018NodeB\u2019 and its sibling nodes. In NodeA's local coordinate system determine the position of NodeB in the scene space and the position of the origin of the coordinate system.  No matter how many levels that the nodes have, we process them all in order from highest level to the lowest. Each node should use the coordinates of the parent node and its own position anchor attribute to determine position within the scene space.", 
            "title": "The local coordinates of the child node"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/content-workflow/transform/index.html#transform-property", 
            "text": "Besides the  Anchor  we introduced above, the node also includes four other main transformation properties which we will introduce next.", 
            "title": "Transform property"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/content-workflow/transform/index.html#position", 
            "text": "Position  is composed of \u2018x\u2019 and \u2018y\u2019 properties which set the node coordinates on the x and y axes of the current coordinates.   \u2018NodeA\u2019 in the above image is at the root level of the scene. Its position is \u2018(507, 354)\u2019 (refer to the scale on the background of the scene editor ), the position of its child node \u2018NodeC\u2019 is \u2018(345, 0)\u2019. You can see that the position of the child node migrated based on the parent node's anchor.  The default value of the position property is \u2018(0, 0)\u2019 which means that the newly added node will always show up at the parent node's coordinate origin position. The default position of nodes in Cocos Creator is \u2018(0, 0)\u2019 and the default anchor is set as \u2018(0.5, 0.5)\u2019. Nodes under this setting will be located at the center position of the parent node by default so that all the contents can be taken in when making UI or combining a player's character.  In the scene editor, you can always use  move transform tools  to change a node\u2019s position.", 
            "title": "Position"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/content-workflow/transform/index.html#rotation", 
            "text": "Rotation  is another important property that will have an effect on a node\u2019s local coordinates. The rotate property only has one value to indicate the current rotation angle of the node. When the angle value is positive, the node rotates clockwise; when the angle value is negative, the node rotates counter clockwise.   The node hierarchical relationship in the image above is the same as in the previous image only with the  Rotation  attribute of \u2018Node\u2019 set as \u201830\u2019 degrees. As well as \u2018NodeA\u2019 itself rotating 30 degrees clockwise, its child node \u2018NodeC\u2019 also rotates 30 degrees clockwise taking the anchor of \u2018NodeA\u2019 as the center.  In the scene editor, you can always use  rotate transform tools  to change the rotation of a node.", 
            "title": "Rotation"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/content-workflow/transform/index.html#scale", 
            "text": "The  Scale  property is a set of multiplication factors which are composed of  scaleX  and  scaleY  to represent the scale percentage  of a node on the x and y axes.   The scale property of \u2018NodeA\u2019 in the above image is set as \u2018(0.5, 1.0)\u2019. This means the node is reduced by factor of 0.5 on the x axis and remains the same on the y axis. You can see the image of its child node  NodeC  is also reduced on the x axis, so the scale property will influence all the child nodes.  The scale property set on the child node will have additive effects on the parent node. The child node of a child node will multiply all the scale properties on each hierarchy to get the scale percentage used in the world coordinate system. This is the same case with the position and rotation properties, it\u2019s just that that position and rotation properties have additive effects, while the scale property makes the effects more obvious by multiplication.  The scale property acts on the effects of the properties of position and size among others. When you change the scale property, the node's position and size won't change, but it will multiply the position, size and other properties by a scale before showing the node image; the values from the multiplication are the actual position and size of the node that will appear.  In the scene editor, you can always use  scale transform tools  to change the scale of the node.", 
            "title": "Scale"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/content-workflow/transform/index.html#size", 
            "text": "The  Size  property is composed of \u2018Width\u2019 and \u2018Height\u2019 to stipulate the constraint frame's size. For the Sprite node, the size of the constraint frame is the size of the image that will appear.  Therefore, the size property can easily be confused with the scale property. They both can influence the size of the Sprite image, but they influence it in different ways. The size property, along with position and anchor, regulates the four endpoint positions of the node and determines the image display range of the constraints of these four points according to its result. The size property plays a vital role in rendering the  Sliced Sprite .  Meanwhile, the scale property gets the node's width and height after scaling based on the multiplication of the size value. When determining the size of the image, size is the basis while scale is the variable so to speak. Besides, the size property will not influence the size of the child node (but can make an indirect influence through  Widget ), which is very different from the scale property.  In the scene editor, you can always use  rectangle transform tools  to change the node size.   Continue on to read about  manage node hierarchy and display order .", 
            "title": "Size"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/content-workflow/node-tree/index.html", 
            "text": "Manage node hierarchy and display order\n\n\n\n\n\nContinue on to read about \nbuild scene graph with scene editor\n.", 
            "title": "_Node Tree"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/content-workflow/node-tree/index.html#manage-node-hierarchy-and-display-order", 
            "text": "Continue on to read about  build scene graph with scene editor .", 
            "title": "Manage node hierarchy and display order"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/content-workflow/scene-editing/index.html", 
            "text": "Build scene graph with scene editor\n\n\nComing soon...\n\n\n\n\n\nContinue on to read about \nUI system\n.", 
            "title": "_Scene Editing"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/content-workflow/scene-editing/index.html#build-scene-graph-with-scene-editor", 
            "text": "Coming soon...   Continue on to read about  UI system .", 
            "title": "Build scene graph with scene editor"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/ui/index.html", 
            "text": "UI system\n\n\nThis chapter will introduce the powerful and flexible UI (user interface) system of Cocos Creator. By assembling different UI components, we were able to produce a UI that can adapt to screens with various resolutions, dynamically generate and update displaying content by data, and support various layout methods.\n\n\n\n\n\n\nSliced Sprite\n\n\nMulti-resolution\n\n\nWidget Alignment\n\n\nLabel Layout\n\n\nUI Components\n\n\nAuto Layout\n\n\nList with Data\n\n\n\n\n\n\n\nContinue on to read about \nSliced Sprite\n.", 
            "title": "_Getting Started"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/ui/index.html#ui-system", 
            "text": "This chapter will introduce the powerful and flexible UI (user interface) system of Cocos Creator. By assembling different UI components, we were able to produce a UI that can adapt to screens with various resolutions, dynamically generate and update displaying content by data, and support various layout methods.    Sliced Sprite  Multi-resolution  Widget Alignment  Label Layout  UI Components  Auto Layout  List with Data    Continue on to read about  Sliced Sprite .", 
            "title": "UI system"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/ui/sliced-sprite/index.html", 
            "text": "Use a Sliced Sprite to make a UI image\n\n\nWhen developing UI, we usually use an image in a nine rectangle grid format to display US element, the size of which might be dynamically modified according to the requirements of fitting screen resolution. In this way, even a very small original picture can be used to generate a background image that can cover the whole screen. It will save the inclusive space of the game, on the other hand, it can flexibly fit different layout requirements.\n\n\n\n\nThe right side of the picture above displays the texture of original size. The left side displays the effect of choosing Sliced mode and enlarging the \nsize\n property.\n\n\nThe nine rectangle grid cutting of the image resource\n\n\nTo use a nine rectangle grid image effect that can be infinitely enlarged, we need to cut the image resource into a nine rectangle grid at first. There are two methods to open \nSprite editor\n to edit the image resource:\n\n\n\n\nChoose image resource in \nresource manager\n, then click the \nedit\n button on the bottom of \n property checker\n. If the height of your window is not large enough, you might need to scroll \nproperty checker\n downward to see the button at the bottom.\n\n\nChoose the image node that you want to cut into a nine rectangle grid in \nscene editor\n. Then find and click the \nEdit\n button on the right side of the \nSprite Frame\n property in the Sprite component of \nproperty checker\n.\n\n\n\n\nAfter opening \nSprite editor\n, you will see there is a green line around the image, which indicates the position of the current split line of the nine rectangle grid. Drag the mouse to the split line, you will see the shape of the cursor change, then you can press down and drag the mouse to modify the position of the split line.\n\n\nWe drag the four split lines on the left/right/upper/lower side respectively and cut the image into a nine rectangle grid. The nine areas will apply different zooming in/out strategies when the Sprite size changes, which is as illustrated below:\n\n\n\n\nAnd the following picture illustrates the state of zooming in/out in different areas (the picture comes from\nYannick Loriot's Blog\n\uff09:\n\n\n\n\nAfter cutting, don't forget to click the green check mark on the upper right corner of \nSprite editor\n to save modifications to the resource.\n\n\nSet Sprite component to use Sliced mode\n\n\nAfter preparing the resource that has been cut into a nine rectangle grid, you can modify the display mode of the Sprite. And by modifying \nsize\n, you can create a UI element whose size can be arbitrarily designated.\n\n\n\n\nFirst, choose the Sprite node in the scene, set \nType\n property of the Sprite as \nSliced\n.\n\n\nThen drag the controlling point by \nrectangle tool\n to enlarge the \nsize\n property of the node. You can also modify the \nsize\n property by directly inputting a numeric value into \nproperty checker\n. If the image resource is produced in a nine rectangle grid format, then no matter how much the Sprite zooms in, no vagueness or distortion will appear.\n\n\n\n\nNotice\n\n\nWhen using \nrectangle tool\n or directly modifying the \nsize\n property of a Sliced Sprite, don't set the value of \nsize\n as a negative number, otherwise it can't be displayed correctly in Sliced mode.\n\n\n\n\nContinue on to read about \nMulti-resolution", 
            "title": "_Sliced Sprite"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/ui/sliced-sprite/index.html#use-a-sliced-sprite-to-make-a-ui-image", 
            "text": "When developing UI, we usually use an image in a nine rectangle grid format to display US element, the size of which might be dynamically modified according to the requirements of fitting screen resolution. In this way, even a very small original picture can be used to generate a background image that can cover the whole screen. It will save the inclusive space of the game, on the other hand, it can flexibly fit different layout requirements.   The right side of the picture above displays the texture of original size. The left side displays the effect of choosing Sliced mode and enlarging the  size  property.", 
            "title": "Use a Sliced Sprite to make a UI image"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/ui/sliced-sprite/index.html#the-nine-rectangle-grid-cutting-of-the-image-resource", 
            "text": "To use a nine rectangle grid image effect that can be infinitely enlarged, we need to cut the image resource into a nine rectangle grid at first. There are two methods to open  Sprite editor  to edit the image resource:   Choose image resource in  resource manager , then click the  edit  button on the bottom of   property checker . If the height of your window is not large enough, you might need to scroll  property checker  downward to see the button at the bottom.  Choose the image node that you want to cut into a nine rectangle grid in  scene editor . Then find and click the  Edit  button on the right side of the  Sprite Frame  property in the Sprite component of  property checker .   After opening  Sprite editor , you will see there is a green line around the image, which indicates the position of the current split line of the nine rectangle grid. Drag the mouse to the split line, you will see the shape of the cursor change, then you can press down and drag the mouse to modify the position of the split line.  We drag the four split lines on the left/right/upper/lower side respectively and cut the image into a nine rectangle grid. The nine areas will apply different zooming in/out strategies when the Sprite size changes, which is as illustrated below:   And the following picture illustrates the state of zooming in/out in different areas (the picture comes from Yannick Loriot's Blog \uff09:   After cutting, don't forget to click the green check mark on the upper right corner of  Sprite editor  to save modifications to the resource.", 
            "title": "The nine rectangle grid cutting of the image resource"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/ui/sliced-sprite/index.html#set-sprite-component-to-use-sliced-mode", 
            "text": "After preparing the resource that has been cut into a nine rectangle grid, you can modify the display mode of the Sprite. And by modifying  size , you can create a UI element whose size can be arbitrarily designated.   First, choose the Sprite node in the scene, set  Type  property of the Sprite as  Sliced .  Then drag the controlling point by  rectangle tool  to enlarge the  size  property of the node. You can also modify the  size  property by directly inputting a numeric value into  property checker . If the image resource is produced in a nine rectangle grid format, then no matter how much the Sprite zooms in, no vagueness or distortion will appear.", 
            "title": "Set Sprite component to use Sliced mode"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/ui/sliced-sprite/index.html#notice", 
            "text": "When using  rectangle tool  or directly modifying the  size  property of a Sliced Sprite, don't set the value of  size  as a negative number, otherwise it can't be displayed correctly in Sliced mode.   Continue on to read about  Multi-resolution", 
            "title": "Notice"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/ui/multi-resolution/index.html", 
            "text": "Fit scheme for multi-resolution\n\n\nCocos Creator is devoted to solving the problem of adapting to screens with various resolutions with one set of resources from the beginning. Generally speaking, we realize the adaptation scheme for multi-resolution through the following technology:\n\n\n\n\nCanvas\n component immediately obtains the actual resolution of the device screen and appropriately adjusts the size of all the render elements in the scene.\n\n\nWidget\n is put on rendering elements, which can align the element with different referential positions of the parent node according to different needs.\n\n\nLabel\n component has a built-in function that provides various dynamic layout modes. When the bounding box of labels change because of the alignment requirement of the Widget, labels will present the perfect layout effect according to your needs.\n\n\nSliced Sprite\n provides images whose size can be arbitrarily designated. Simultaneously, it can meet various alignment requirements and display images with high definition on screens of any resolution.\n\n\n\n\nNext, we start off by getting to know the concepts of design resolution and screen resolution, then we will go on to make understanding of the zooming in/out function of the \nCanvas\n component.\n\n\nDesign resolution and screen resolution\n\n\ndesign resolution\n is the resolution sample used by content creators when creating the scene. But \nscreen resolution\n is the actual resolution of the device that the game is running on.\n\n\nNormally, design resolution will use the screen resolution of the device that is being used the most by the targeted group on the market, such as: screen resolutions of \n800x480\n and \n1280x720\n that are being used by Android devices currently, or screen resolutions of \n1136x640\n and \n960x640\n that are being used by iOS devices. Therefore, after designers or directors set up the scene by using design resolution, the game will automatically adapt to the device used by the major targeted group.\n\n\nThen when the design resolution is different from the screen resolution, how could Cocos Creator adapt to the device?\n\n\nSupposing the design resolution is \n800x480\n, designers will create a background image of the same resolution.\n\n\n\n\nWhen design resolution and screen resolution have the same ratio of width to height\n\n\nWhen design resolution and screen resolution have the same ratio of width to height, supposing the screen resolution is \n1600x960\n, enlarging the background image to 1600/800 = \n2 times\n will perfectly fit the screen. This is the simplest situation, which will not be discussed in detail here.\n\n\nWhen the ratio of width to height of design resolution is larger than that of screen resolution, the height should be adjusted to avoid black borders\n\n\nSupposing the screen resolution is \n1024x768\n, a red frame is used in the following picture to indicate the visible area of the device screen. We use \nFit Height\n mode provided by the Canvas component to make the height of the design resolution automatically cover the height of the screen, i.e., enlarging the scene image to 768/480 = \n1.6 times\n.\n\n\n\n\nThis is a fairly good adaptation mode when the ratio of width to height of the design resolution is larger than that of the screen resolution. As illustrated above, although some parts of the background image will be cut down on the two sides of the screen, it can be ensured that no goof or black borders will appear in the visible area of the screen. Then the position of UI elements can be adjusted by the Widget, which makes sure that the UI elements will appear in the visible area of the screen. We will introduce this in detail in the next section \nWidget Align\n.\n\n\nWhen the ratio of width to height of the design resolution is larger than that of the screen resolution, the width should be adjusted to avoid black borders\n\n\nSupposing the screen resolution is \n1920x960\n, a red frame is also used in the following picture to indicate the visible area of the device screen. We use \nFit Width\n mode provided by the Canvas component to make the width of the design resolution automatically cover the width of the screen, i.e., enlarging the scene to 1920/800 = \n2.4 times\n\n\n\n\nWhen the ratio of width to height of the design resolution is relatively small, the use of this mode will cut down some parts of the background image on the upper/lower sides of the screen.\n\n\nNo matter how much the ratio of width to height of the screen is, all the contents of design resolution will be completely displayed, and black borders are permitted.\n\n\nIn the last example, supposing the screen has a resolution of \n640 x 960\n. If you want to make sure the background image is completely displayed on the screen, you need to simultaneously open  \nFit Height\n and \nFit Width\n in the Canvas component. The zooming in/out proportion of the scene image is calculated according to the smaller dimension in the screen resolution. In the example in the following picture, because the ratio of width to height of the screen is less than 1, the calculation of the zooming in/out proportion will be based on width, i.e., 640/800 = \n0.8 times\n.\n\n\n\n\nUnder such a displaying mode, there might be black borders on the screen or scene image that exceed the design resolution (goof). Although developers try their best to avoid black borders in general, if you want to make sure all the contents within the scale of design resolution are displayed on the screen, you can use this mode too.\n\n\nAccording to the ratio of width to height, 'Fit Width' or 'Fit Height' will be automatically chosen.\n\n\nIf there are no strict requirements for the content that might be cut down on the four sides of the screen, you don't need to open any fit mode in the Canvas component. Then \nFit Height\n or \nFit Width\n will be automatically chosen according to the ratio of width to height to avoid black borders. In other words, when the ratio of width to height of the design resolution is larger than that of the screen resolution, 'Fit Height' will be automatically opened (as in the first picture above); when the ratio of width to height of the design resolution is smaller than that of the screen resolution, 'Fit Width' will be automatically opened(as in the second picture above).\n\n\nCanvas component doesn't provide a fit mode that can respectively zoom in/out of the x axis and the y axis, which will distort the image.\n\n\nIn the Cocos engine, there is a fit mode called \nExactFit\n, which doesn't have black borders, or cut down the image within the scale of design resolution. But the price is the zooming in/out ratio of the scene image to the direction of the x/y axis  is different, which will distort the image.\n\n\nIf you don't mind distortions of the image, you can use the engine API to realize fit effect without using the Canvas component. For detailed information, you can refer to \nCocos2d-JS's screen adaptation scheme\n.\n\n\nUse Canvas component in the scene\n\n\nWhen creating a new scene, a node including the Canvas component will automatically be added to the root node of the scene. On the Canvas component, the options mentioned above can be set:\n\n\n\n\nDesign Resolution\n\n\nFit Height\n\n\nFit Width\n\n\n\n\n\n\nSet the Canvas node as the root node of all the render nodes of the image, then these nodes can automatically use the zooming in/out effect of Canvas's intelligent adaptations to multi-resolution.\n\n\nThe features of Canvas when editing the scene\n\n\nWhen editing the scene, the \nSize\n property of the Canvas node will be the same with \ndesign resolution\n, which can't be modified manually.\n\n\nThe \nPosition\n property will remain at \n(width/2, height/2)\n, which is the center of the screen whose resolution is the same with the design resolution.\n\n\nBecause the default value of the \nAnchor\n property will be set as \n(0.5, 0.5)\n, the Canvas will remain at the position of the screen center. The subnode of Canvas will make the screen center the origin of its coordinate system, which is different from that in the Cocos engine. Please pay attention to that.\n\n\nThe features of Canvas when running\n\n\nApart from the above features, the Canvas component will have the following changes in features:\n\n\n\n\nScale\n: According to the calculating principle of the zooming in/out ratio described above, assign the calculated zooming in/out ratio to the \nScale\n property.\n\n\nSize\n: In the mode without black borders, the \nSize\n property of Canvas will remain the same as the screen resolution. In the mode with black borders, the \nSize\n property of Canvas will remain the same as the design resolution.\n\n\n\n\nBecause Canvas can precisely obtain the size of the visible area of the screen when running, we can set up the alignment strategy of UI elements according to this size, making sure that all the UI elements can be correctly displayed in the visible area of the screen.\n\n\n\n\nContinue on to read about \nWidget alignment\n.", 
            "title": "_Multi-Resolution"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/ui/multi-resolution/index.html#fit-scheme-for-multi-resolution", 
            "text": "Cocos Creator is devoted to solving the problem of adapting to screens with various resolutions with one set of resources from the beginning. Generally speaking, we realize the adaptation scheme for multi-resolution through the following technology:   Canvas  component immediately obtains the actual resolution of the device screen and appropriately adjusts the size of all the render elements in the scene.  Widget  is put on rendering elements, which can align the element with different referential positions of the parent node according to different needs.  Label  component has a built-in function that provides various dynamic layout modes. When the bounding box of labels change because of the alignment requirement of the Widget, labels will present the perfect layout effect according to your needs.  Sliced Sprite  provides images whose size can be arbitrarily designated. Simultaneously, it can meet various alignment requirements and display images with high definition on screens of any resolution.   Next, we start off by getting to know the concepts of design resolution and screen resolution, then we will go on to make understanding of the zooming in/out function of the  Canvas  component.", 
            "title": "Fit scheme for multi-resolution"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/ui/multi-resolution/index.html#design-resolution-and-screen-resolution", 
            "text": "design resolution  is the resolution sample used by content creators when creating the scene. But  screen resolution  is the actual resolution of the device that the game is running on.  Normally, design resolution will use the screen resolution of the device that is being used the most by the targeted group on the market, such as: screen resolutions of  800x480  and  1280x720  that are being used by Android devices currently, or screen resolutions of  1136x640  and  960x640  that are being used by iOS devices. Therefore, after designers or directors set up the scene by using design resolution, the game will automatically adapt to the device used by the major targeted group.  Then when the design resolution is different from the screen resolution, how could Cocos Creator adapt to the device?  Supposing the design resolution is  800x480 , designers will create a background image of the same resolution.", 
            "title": "Design resolution and screen resolution"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/ui/multi-resolution/index.html#when-design-resolution-and-screen-resolution-have-the-same-ratio-of-width-to-height", 
            "text": "When design resolution and screen resolution have the same ratio of width to height, supposing the screen resolution is  1600x960 , enlarging the background image to 1600/800 =  2 times  will perfectly fit the screen. This is the simplest situation, which will not be discussed in detail here.", 
            "title": "When design resolution and screen resolution have the same ratio of width to height"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/ui/multi-resolution/index.html#when-the-ratio-of-width-to-height-of-design-resolution-is-larger-than-that-of-screen-resolution-the-height-should-be-adjusted-to-avoid-black-borders", 
            "text": "Supposing the screen resolution is  1024x768 , a red frame is used in the following picture to indicate the visible area of the device screen. We use  Fit Height  mode provided by the Canvas component to make the height of the design resolution automatically cover the height of the screen, i.e., enlarging the scene image to 768/480 =  1.6 times .   This is a fairly good adaptation mode when the ratio of width to height of the design resolution is larger than that of the screen resolution. As illustrated above, although some parts of the background image will be cut down on the two sides of the screen, it can be ensured that no goof or black borders will appear in the visible area of the screen. Then the position of UI elements can be adjusted by the Widget, which makes sure that the UI elements will appear in the visible area of the screen. We will introduce this in detail in the next section  Widget Align .", 
            "title": "When the ratio of width to height of design resolution is larger than that of screen resolution, the height should be adjusted to avoid black borders"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/ui/multi-resolution/index.html#when-the-ratio-of-width-to-height-of-the-design-resolution-is-larger-than-that-of-the-screen-resolution-the-width-should-be-adjusted-to-avoid-black-borders", 
            "text": "Supposing the screen resolution is  1920x960 , a red frame is also used in the following picture to indicate the visible area of the device screen. We use  Fit Width  mode provided by the Canvas component to make the width of the design resolution automatically cover the width of the screen, i.e., enlarging the scene to 1920/800 =  2.4 times   When the ratio of width to height of the design resolution is relatively small, the use of this mode will cut down some parts of the background image on the upper/lower sides of the screen.", 
            "title": "When the ratio of width to height of the design resolution is larger than that of the screen resolution, the width should be adjusted to avoid black borders"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/ui/multi-resolution/index.html#no-matter-how-much-the-ratio-of-width-to-height-of-the-screen-is-all-the-contents-of-design-resolution-will-be-completely-displayed-and-black-borders-are-permitted", 
            "text": "In the last example, supposing the screen has a resolution of  640 x 960 . If you want to make sure the background image is completely displayed on the screen, you need to simultaneously open   Fit Height  and  Fit Width  in the Canvas component. The zooming in/out proportion of the scene image is calculated according to the smaller dimension in the screen resolution. In the example in the following picture, because the ratio of width to height of the screen is less than 1, the calculation of the zooming in/out proportion will be based on width, i.e., 640/800 =  0.8 times .   Under such a displaying mode, there might be black borders on the screen or scene image that exceed the design resolution (goof). Although developers try their best to avoid black borders in general, if you want to make sure all the contents within the scale of design resolution are displayed on the screen, you can use this mode too.", 
            "title": "No matter how much the ratio of width to height of the screen is, all the contents of design resolution will be completely displayed, and black borders are permitted."
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/ui/multi-resolution/index.html#according-to-the-ratio-of-width-to-height-fit-width-or-fit-height-will-be-automatically-chosen", 
            "text": "If there are no strict requirements for the content that might be cut down on the four sides of the screen, you don't need to open any fit mode in the Canvas component. Then  Fit Height  or  Fit Width  will be automatically chosen according to the ratio of width to height to avoid black borders. In other words, when the ratio of width to height of the design resolution is larger than that of the screen resolution, 'Fit Height' will be automatically opened (as in the first picture above); when the ratio of width to height of the design resolution is smaller than that of the screen resolution, 'Fit Width' will be automatically opened(as in the second picture above).", 
            "title": "According to the ratio of width to height, 'Fit Width' or 'Fit Height' will be automatically chosen."
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/ui/multi-resolution/index.html#canvas-component-doesnt-provide-a-fit-mode-that-can-respectively-zoom-inout-of-the-x-axis-and-the-y-axis-which-will-distort-the-image", 
            "text": "In the Cocos engine, there is a fit mode called  ExactFit , which doesn't have black borders, or cut down the image within the scale of design resolution. But the price is the zooming in/out ratio of the scene image to the direction of the x/y axis  is different, which will distort the image.  If you don't mind distortions of the image, you can use the engine API to realize fit effect without using the Canvas component. For detailed information, you can refer to  Cocos2d-JS's screen adaptation scheme .", 
            "title": "Canvas component doesn't provide a fit mode that can respectively zoom in/out of the x axis and the y axis, which will distort the image."
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/ui/multi-resolution/index.html#use-canvas-component-in-the-scene", 
            "text": "When creating a new scene, a node including the Canvas component will automatically be added to the root node of the scene. On the Canvas component, the options mentioned above can be set:   Design Resolution  Fit Height  Fit Width    Set the Canvas node as the root node of all the render nodes of the image, then these nodes can automatically use the zooming in/out effect of Canvas's intelligent adaptations to multi-resolution.", 
            "title": "Use Canvas component in the scene"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/ui/multi-resolution/index.html#the-features-of-canvas-when-editing-the-scene", 
            "text": "When editing the scene, the  Size  property of the Canvas node will be the same with  design resolution , which can't be modified manually.  The  Position  property will remain at  (width/2, height/2) , which is the center of the screen whose resolution is the same with the design resolution.  Because the default value of the  Anchor  property will be set as  (0.5, 0.5) , the Canvas will remain at the position of the screen center. The subnode of Canvas will make the screen center the origin of its coordinate system, which is different from that in the Cocos engine. Please pay attention to that.", 
            "title": "The features of Canvas when editing the scene"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/ui/multi-resolution/index.html#the-features-of-canvas-when-running", 
            "text": "Apart from the above features, the Canvas component will have the following changes in features:   Scale : According to the calculating principle of the zooming in/out ratio described above, assign the calculated zooming in/out ratio to the  Scale  property.  Size : In the mode without black borders, the  Size  property of Canvas will remain the same as the screen resolution. In the mode with black borders, the  Size  property of Canvas will remain the same as the design resolution.   Because Canvas can precisely obtain the size of the visible area of the screen when running, we can set up the alignment strategy of UI elements according to this size, making sure that all the UI elements can be correctly displayed in the visible area of the screen.   Continue on to read about  Widget alignment .", 
            "title": "The features of Canvas when running"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/ui/widget-align/index.html", 
            "text": "Alignment strategy\n\n\nTo realize a perfect multi-resolution fit effect, presenting UI elements according to the positions stipulated in the design resolution is not enough. When the width and height of the screen change, UI elements must be able to intelligently sense the positions of the borders of the screen to make sure that they are presenting themselves in the visible area of the screen and being distributed in suitable positions. Such an effect can be realized by \nWidget\n.\n\n\nNext, we categorize different alignment workflows according to the categories of elements that need to be aligned:\n\n\nButtons and small elements that need to be aligned by borders\n\n\nFor elements with relatively small areas like a pause menu, in-game gold coins, etc., normally, aligning them by the borders of the screen would be enough. Then only a few simple steps are needed:\n\n\n\n\nSet these elements as subnodes of the Canvas node in \narrangement manager\n\n\nAdd the Widget component to element nodes\n\n\nTaking alignment with the bottom left corner as an example, open the alignment of \nLeft\n and \nBottom\n.\n\n\nThen set up the distance between the node and the borders of the screen. In the picture below, the left margin is set as 50px, right margin is set as 30px.\n\n\n\n\n\n\nAfter setting up the Widget component like this, no matter what the actual screen resolution is , this node element will remain on the bottom left corner of the screen. The distance between the left side of the node's bounding box and left border of the screen remains at 50px. The distance between the bottom of the node's bounding box and the bottom of the screen remains at 30px.\n\n\nPay attention! The alignment distance provided by the Widget component refers to the border of the bounding box that is located in the same direction as the child node and parent node. For example, \nLeft\n is ticked off in the above example to align the element with the left border, then the distance between the left border of the child node's bounding box and the left border of the parent node's (i.e., Canvas node, whose bounding box is constantly the same size as the screen) bounding box is the set value: 50px.\n\n\nNest alignment elements\n\n\nThe method of aligning with the border of the screen is introduced above. Because the default alignment reference of Widget is the parent node, we can add different node hierarchies and make the nodes on every hierarchy use the auto alignment function.\n\n\nNext, we will use a simple example to explain it. Supposing we have a node hierarchical relation as follows:\n\n\n\n\nIn the example above, \nparent\n is a panel, and \nbutton\n is a button. We can respectively add Widget component to these two nodes, and respectively set their alignment distance.\n\n\nFor the \nparent\n node, the distance of aligning the top left corner of the \nCanvas\n node remains at 80px:\n\n\n\n\nFor the \nbutton\n node, the distance of aligning the top left corner of the \nparent\n node remains at 50px:\n\n\n\n\nWith a workflow like this, we can group UI elements according to their display areas or functions, and elements of a different hierarchy can be aligned according to design.\n\n\nAutomatically zooming in/out the size of a node according to alignment requirements\n\n\nIn the above example, two borders that simultaneously align on one axis in opposite directions don't exist. If we want to make a panel that fully covers the width of the whole screen, we can simultaneously tick off the alignment switches \nLeft\n and \nRight\n:\n\n\n\n\nWhen simultaneously ticking off the alignment switches in opposite directions, Widget obtains the ability of modifying the \nSize\n of the node according to alignment requirements. In the picture above, we ticked off the left and right directions and set up margins, then Widget can dynamically set up the \nWidth\n property of the node according to the width of the parent node. As a result, no matter how wide the screen is, the distance between the panel and the left \n right borders of the screen remains at 100px permanently.\n\n\nCreate a node whose size is in accordance with the size of screen\n\n\nMaking use of the features of a node that can automatically zoom in/out, we can make the size of the node the same with that of the screen by setting up the Widget component of the node. Therefore, we don't have to put all the UI elements that need to align with the borders of screen under the Canvas node, but group them according to the requirements of function and logic.\n\n\nTo make such a node, we should first make sure that the size of the parent node of this node remains the same with that of the screen. The Canvas node is the best choice. Next, set up the Widget component of this node according to the following method:\n\n\n\n\nTherefore the size of the node will remain constantly the same with that of the Canvas node when running, i.e., the same as the size of the screen. After being set up like this, the child node of this node can transmit the same screen size by the same settings.\n\n\nWhat needs to be noted is that because the Canvas node itself has the function of remaining the same size as that of the screen, there is no need to add the Widget component to the Canvas node.\n\n\nSet up percentage alignment distance\n\n\nAfter opening the alignment function of a certain direction on the Widget component, apart from margins whose unit is designated as pixels, we can also input a percentage value. Therefore, Widget will multiply the width or height of the parent node on the corresponding axis by the input percentage to get the value of the actual margin.\n\n\nLet's take a look at a real example. Take a child node that has been directly put under Canvas as an example. We hope this node panel remains on the right side of the screen and constantly covers 60% of the total height of screen. Therefore, setting up the Widget component according to the following picture will realize this effect:\n\n\n\n\nWhen inputting the margin value when opening alignment direction, Widget can use the pixel unit together with percentage unit according to various needs. For example, input \n50%\n on the \nLeft\n direction that needs to align with the center line of the screen and input \n20px\n on the \nRight\n direction that needs to align with the borders of the screen; when calculating the position and size of the child node at last, all the margins will be positioned after being converted to pixcel distance according to the size of the parent node.\n\n\nMaking use of the percentage alignment distance, we can create UI elements that can zoom in/out infinitely according to the size of the screen. Exerting your imagination, fitting a thousand types of Android phones with one set of resources will be a piece of cake!\n\n\n\n\nContinue on to read about \nLabel Layout\n.", 
            "title": "_Widget Align"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/ui/widget-align/index.html#alignment-strategy", 
            "text": "To realize a perfect multi-resolution fit effect, presenting UI elements according to the positions stipulated in the design resolution is not enough. When the width and height of the screen change, UI elements must be able to intelligently sense the positions of the borders of the screen to make sure that they are presenting themselves in the visible area of the screen and being distributed in suitable positions. Such an effect can be realized by  Widget .  Next, we categorize different alignment workflows according to the categories of elements that need to be aligned:", 
            "title": "Alignment strategy"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/ui/widget-align/index.html#buttons-and-small-elements-that-need-to-be-aligned-by-borders", 
            "text": "For elements with relatively small areas like a pause menu, in-game gold coins, etc., normally, aligning them by the borders of the screen would be enough. Then only a few simple steps are needed:   Set these elements as subnodes of the Canvas node in  arrangement manager  Add the Widget component to element nodes  Taking alignment with the bottom left corner as an example, open the alignment of  Left  and  Bottom .  Then set up the distance between the node and the borders of the screen. In the picture below, the left margin is set as 50px, right margin is set as 30px.    After setting up the Widget component like this, no matter what the actual screen resolution is , this node element will remain on the bottom left corner of the screen. The distance between the left side of the node's bounding box and left border of the screen remains at 50px. The distance between the bottom of the node's bounding box and the bottom of the screen remains at 30px.  Pay attention! The alignment distance provided by the Widget component refers to the border of the bounding box that is located in the same direction as the child node and parent node. For example,  Left  is ticked off in the above example to align the element with the left border, then the distance between the left border of the child node's bounding box and the left border of the parent node's (i.e., Canvas node, whose bounding box is constantly the same size as the screen) bounding box is the set value: 50px.", 
            "title": "Buttons and small elements that need to be aligned by borders"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/ui/widget-align/index.html#nest-alignment-elements", 
            "text": "The method of aligning with the border of the screen is introduced above. Because the default alignment reference of Widget is the parent node, we can add different node hierarchies and make the nodes on every hierarchy use the auto alignment function.  Next, we will use a simple example to explain it. Supposing we have a node hierarchical relation as follows:   In the example above,  parent  is a panel, and  button  is a button. We can respectively add Widget component to these two nodes, and respectively set their alignment distance.  For the  parent  node, the distance of aligning the top left corner of the  Canvas  node remains at 80px:   For the  button  node, the distance of aligning the top left corner of the  parent  node remains at 50px:   With a workflow like this, we can group UI elements according to their display areas or functions, and elements of a different hierarchy can be aligned according to design.", 
            "title": "Nest alignment elements"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/ui/widget-align/index.html#automatically-zooming-inout-the-size-of-a-node-according-to-alignment-requirements", 
            "text": "In the above example, two borders that simultaneously align on one axis in opposite directions don't exist. If we want to make a panel that fully covers the width of the whole screen, we can simultaneously tick off the alignment switches  Left  and  Right :   When simultaneously ticking off the alignment switches in opposite directions, Widget obtains the ability of modifying the  Size  of the node according to alignment requirements. In the picture above, we ticked off the left and right directions and set up margins, then Widget can dynamically set up the  Width  property of the node according to the width of the parent node. As a result, no matter how wide the screen is, the distance between the panel and the left   right borders of the screen remains at 100px permanently.", 
            "title": "Automatically zooming in/out the size of a node according to alignment requirements"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/ui/widget-align/index.html#create-a-node-whose-size-is-in-accordance-with-the-size-of-screen", 
            "text": "Making use of the features of a node that can automatically zoom in/out, we can make the size of the node the same with that of the screen by setting up the Widget component of the node. Therefore, we don't have to put all the UI elements that need to align with the borders of screen under the Canvas node, but group them according to the requirements of function and logic.  To make such a node, we should first make sure that the size of the parent node of this node remains the same with that of the screen. The Canvas node is the best choice. Next, set up the Widget component of this node according to the following method:   Therefore the size of the node will remain constantly the same with that of the Canvas node when running, i.e., the same as the size of the screen. After being set up like this, the child node of this node can transmit the same screen size by the same settings.  What needs to be noted is that because the Canvas node itself has the function of remaining the same size as that of the screen, there is no need to add the Widget component to the Canvas node.", 
            "title": "Create a node whose size is in accordance with the size of screen"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/ui/widget-align/index.html#set-up-percentage-alignment-distance", 
            "text": "After opening the alignment function of a certain direction on the Widget component, apart from margins whose unit is designated as pixels, we can also input a percentage value. Therefore, Widget will multiply the width or height of the parent node on the corresponding axis by the input percentage to get the value of the actual margin.  Let's take a look at a real example. Take a child node that has been directly put under Canvas as an example. We hope this node panel remains on the right side of the screen and constantly covers 60% of the total height of screen. Therefore, setting up the Widget component according to the following picture will realize this effect:   When inputting the margin value when opening alignment direction, Widget can use the pixel unit together with percentage unit according to various needs. For example, input  50%  on the  Left  direction that needs to align with the center line of the screen and input  20px  on the  Right  direction that needs to align with the borders of the screen; when calculating the position and size of the child node at last, all the margins will be positioned after being converted to pixcel distance according to the size of the parent node.  Making use of the percentage alignment distance, we can create UI elements that can zoom in/out infinitely according to the size of the screen. Exerting your imagination, fitting a thousand types of Android phones with one set of resources will be a piece of cake!   Continue on to read about  Label Layout .", 
            "title": "Set up percentage alignment distance"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/ui/label-layout/index.html", 
            "text": "Label Layout\n\n\nThe \nLabel\n component is one of the key rendering components. You need to learn about how to set up label layout in order to have a perfect display when the UI system adapts to various resolutions and sets up alignment.\n\n\nAlignment of labels in the bounding box\n\n\nLike other rendering components, the layout of the Label component is based on the \nSize\n of the node, i.e., the scale stipulated by the Bounding Box.\n\n\n\n\nWhat is shown in the picture above is the display effect of labels rendered by Label in the blue bounding box. The following properties in Label determines the position of labels in the bounding box:\n\n\n\n\nHorizontal Align\n: the horizontal alignment of labels in the bounding box, which can be chosen from 3 positions: Left, Right, Center.\n\n\nVertical Align\n: the vertical alignment of labels in the bounding box, which can be chosen from 3 positions: Top, Bottom, Center.\n\n\n\n\nThe horizontal/vertical alignment positions in the above pictures are all set as \nCenter\n. You can see labels appearing on the center of the bounding box. You can modify the two properties above to make other combinations. Labels will appear on the four sides or four angles of the bounding box according to the settings.\n\n\nLabel Size and Line Height\n\n\nFont Size\n determines the display size of labels. Its unit is Point (it can also be called 'pound'), which is the size unit for fonts commonly used in most image editing softwares and font editing softwares. For dynamic fonts, \nFont Size\n can be zoomed in losslessly. But the display of bitmap fonts will be more and more vague when the set value of \nFont Size\n exceeds the font size stipulated by the font.\n\n\nLine Height\n determines the height occupied by each line when multiple lines of labels display, the unit of which is also Point. The displaying of multiple lines of labels can be carried out by using two methods:\n\n\n\n\nWhen inputting labels in the \nString\n property, manually input \u2018\\r\u2019 or \u2018\\n\u2019\n\n\nOpen the \nEnable Wrap Text\n property, which will be introduced in detail later\n\n\n\n\nRelation of label size and line height:\n\n\n\n\nIf the values of \nFont Size\n and \nLine Height\n are the same, labels will occupy the height of the most part of one line.\n\n\nIf the value of \nFont Size\n is less than that of \nLine Height\n, space between multiple lines of labels will be enlarged\n\n\nIf the value of \nFont Size\n is larger than that of \nLine Height\n, space between multiple lines of labels will be narrowed between multiple lines of labels. Overlapping of labels may appear.\n\n\n\n\n  \n  \n\n\nOverflow\n\n\nThe \nOverflow\n property determines the array of labels in the bounding box when the content of labels is increased.\n\n\nClamp\n\n\n\n\nWhen in Clamp mode, labels will firstly be rendered according to the requirements of alignment type and size, but the parts exceeding the bounding box will be concealed (clamped).\n\n\nAuto Shrink\n\n\n\n\nWhen in auto shrink mode, if labels exceed the bounding box when being rendered according to the original size, the size of the labels will be automatically shrunk to display all the labels.\n\n\nAttention! Auto shrink mode will not zoom in on labels to adapt to bounding box.\n\n\nResize Height\n\n\n\n\nResize height mode will make sure the bounding box of the labels fits the height of the labels, no matter the quantity of the labels' lines. This mode is suitable for displaying paragraphs of labels that don't have the same amount of content. An infinite amount of label content can be displayed in the arbitrary UI field when using this mode together with the \nScrollView\n component.\n\n\nEnable Wrap Text\n\n\nThe \nEnable Wrap Text\n property of the Label component can switch the auto wrap switch of labels. When \nEnable Wrap Text\n is opened, labels will automatically wrap acccording to the width of the bounding box without manual input of  \u2018\\r\u2019 or \u2018\\n\u2019 when inputting labels.\n\n\nAuto Wrap in Clamp Mode\n\n\nWhen clamp mode opens auto wrap, labels will be wrapped in the allowable scale of the bounding box in priority. Only when not all the words can be displayed after being wrapped will clamp mode function.\n\n\nThe following two pictures are taken when \nClamp\n + \nEnable Wrap Text\n are opened, the difference of which is the different width of the bounding boxes of the labels;\n\n\n  \n\n\nWhen the width of the bounding box is changing from the left picture to the right picture, labels will be continuously adjusted and wrapped, greatly changing from 2 lines to 4 lines. In the end, the clamped display will appear due to the insufficient height of the bounding box.\n\n\nAuto Wrap in Auto shrink mode\n\n\nSimilar to clamp mode, labels will be wrapped in priority when labels exceed the width of the bounding box in auto shrink mode. Only when the width and length of the bounding box are exceeded will the labels be automatically shrunk to adapt to the bounding box.\n\n\n\n\nAuto Height Adaptation\n\n\nIn auto height adaptation mode, the 'Enable Wrap Text' property is compulsorily opened.\n\n\nEnable Wrap Text of Chinese\n\n\nThe auto wrap behavior of Chinese is different from that of English. English is wrapped by the unit of words. Blank space is the smallest unit of wrap adjustment. Chinese is wrapped by the unit of characters. Every character can be wrapped alone.\n\n\nAnchor point of label node\n\n\nThe anchor point of a label node and the alignment mode of labels in the bounding box are two concepts that need to be differentiated. In a layout type that needs labels to enlarge the bounding box (e.g., \nResize Height\n), only correct setting up of anchor points can make the bounding box be extended to the expected direction.\n\n\nFor example, if you want the bounding box to extend downward, you need to set the \ny\n  property of \nAnchor\n as \n1\n.\n\n\n\n\nWidget\n\n\nAdd a \nWidget\n component to the node with the Label component, then you can make various layouts for label nodes relative to their parent nodes.\n\n\n\n\nIn the above picture, two Label subnodes are added to the background nodes. After respectively adding the Widget component to them, set the \nRight\n property of the Widget for the labels on the left side as \n50%\n, and set the \nLeft\n property of the Widget for the labels on the right side as \n60%\n, then the multi-column layout of labels in the picture above can be realized.\n\n\nAnd by setting margins on the aWidget, plus the layout type of labels, a flexible and beautiful layout for labels can be easily realized without concrete and minor adjustments to the bounding box.\n\n\nReference for checking components\n\n\nFor properties of the Label component, you can also check \nLabel Component\n document.\n\n\n\n\nContinue on to read about \nUI Components\n.", 
            "title": "_Label Layout"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/ui/label-layout/index.html#label-layout", 
            "text": "The  Label  component is one of the key rendering components. You need to learn about how to set up label layout in order to have a perfect display when the UI system adapts to various resolutions and sets up alignment.", 
            "title": "Label Layout"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/ui/label-layout/index.html#alignment-of-labels-in-the-bounding-box", 
            "text": "Like other rendering components, the layout of the Label component is based on the  Size  of the node, i.e., the scale stipulated by the Bounding Box.   What is shown in the picture above is the display effect of labels rendered by Label in the blue bounding box. The following properties in Label determines the position of labels in the bounding box:   Horizontal Align : the horizontal alignment of labels in the bounding box, which can be chosen from 3 positions: Left, Right, Center.  Vertical Align : the vertical alignment of labels in the bounding box, which can be chosen from 3 positions: Top, Bottom, Center.   The horizontal/vertical alignment positions in the above pictures are all set as  Center . You can see labels appearing on the center of the bounding box. You can modify the two properties above to make other combinations. Labels will appear on the four sides or four angles of the bounding box according to the settings.", 
            "title": "Alignment of labels in the bounding box"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/ui/label-layout/index.html#label-size-and-line-height", 
            "text": "Font Size  determines the display size of labels. Its unit is Point (it can also be called 'pound'), which is the size unit for fonts commonly used in most image editing softwares and font editing softwares. For dynamic fonts,  Font Size  can be zoomed in losslessly. But the display of bitmap fonts will be more and more vague when the set value of  Font Size  exceeds the font size stipulated by the font.  Line Height  determines the height occupied by each line when multiple lines of labels display, the unit of which is also Point. The displaying of multiple lines of labels can be carried out by using two methods:   When inputting labels in the  String  property, manually input \u2018\\r\u2019 or \u2018\\n\u2019  Open the  Enable Wrap Text  property, which will be introduced in detail later   Relation of label size and line height:   If the values of  Font Size  and  Line Height  are the same, labels will occupy the height of the most part of one line.  If the value of  Font Size  is less than that of  Line Height , space between multiple lines of labels will be enlarged  If the value of  Font Size  is larger than that of  Line Height , space between multiple lines of labels will be narrowed between multiple lines of labels. Overlapping of labels may appear.", 
            "title": "Label Size and Line Height"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/ui/label-layout/index.html#overflow", 
            "text": "The  Overflow  property determines the array of labels in the bounding box when the content of labels is increased.", 
            "title": "Overflow"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/ui/label-layout/index.html#clamp", 
            "text": "When in Clamp mode, labels will firstly be rendered according to the requirements of alignment type and size, but the parts exceeding the bounding box will be concealed (clamped).", 
            "title": "Clamp"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/ui/label-layout/index.html#auto-shrink", 
            "text": "When in auto shrink mode, if labels exceed the bounding box when being rendered according to the original size, the size of the labels will be automatically shrunk to display all the labels.  Attention! Auto shrink mode will not zoom in on labels to adapt to bounding box.", 
            "title": "Auto Shrink"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/ui/label-layout/index.html#resize-height", 
            "text": "Resize height mode will make sure the bounding box of the labels fits the height of the labels, no matter the quantity of the labels' lines. This mode is suitable for displaying paragraphs of labels that don't have the same amount of content. An infinite amount of label content can be displayed in the arbitrary UI field when using this mode together with the  ScrollView  component.", 
            "title": "Resize Height"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/ui/label-layout/index.html#enable-wrap-text", 
            "text": "The  Enable Wrap Text  property of the Label component can switch the auto wrap switch of labels. When  Enable Wrap Text  is opened, labels will automatically wrap acccording to the width of the bounding box without manual input of  \u2018\\r\u2019 or \u2018\\n\u2019 when inputting labels.", 
            "title": "Enable Wrap Text"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/ui/label-layout/index.html#auto-wrap-in-clamp-mode", 
            "text": "When clamp mode opens auto wrap, labels will be wrapped in the allowable scale of the bounding box in priority. Only when not all the words can be displayed after being wrapped will clamp mode function.  The following two pictures are taken when  Clamp  +  Enable Wrap Text  are opened, the difference of which is the different width of the bounding boxes of the labels;      When the width of the bounding box is changing from the left picture to the right picture, labels will be continuously adjusted and wrapped, greatly changing from 2 lines to 4 lines. In the end, the clamped display will appear due to the insufficient height of the bounding box.", 
            "title": "Auto Wrap in Clamp Mode"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/ui/label-layout/index.html#auto-wrap-in-auto-shrink-mode", 
            "text": "Similar to clamp mode, labels will be wrapped in priority when labels exceed the width of the bounding box in auto shrink mode. Only when the width and length of the bounding box are exceeded will the labels be automatically shrunk to adapt to the bounding box.", 
            "title": "Auto Wrap in Auto shrink mode"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/ui/label-layout/index.html#auto-height-adaptation", 
            "text": "In auto height adaptation mode, the 'Enable Wrap Text' property is compulsorily opened.", 
            "title": "Auto Height Adaptation"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/ui/label-layout/index.html#enable-wrap-text-of-chinese", 
            "text": "The auto wrap behavior of Chinese is different from that of English. English is wrapped by the unit of words. Blank space is the smallest unit of wrap adjustment. Chinese is wrapped by the unit of characters. Every character can be wrapped alone.", 
            "title": "Enable Wrap Text of Chinese"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/ui/label-layout/index.html#anchor-point-of-label-node", 
            "text": "The anchor point of a label node and the alignment mode of labels in the bounding box are two concepts that need to be differentiated. In a layout type that needs labels to enlarge the bounding box (e.g.,  Resize Height ), only correct setting up of anchor points can make the bounding box be extended to the expected direction.  For example, if you want the bounding box to extend downward, you need to set the  y   property of  Anchor  as  1 .", 
            "title": "Anchor point of label node"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/ui/label-layout/index.html#widget", 
            "text": "Add a  Widget  component to the node with the Label component, then you can make various layouts for label nodes relative to their parent nodes.   In the above picture, two Label subnodes are added to the background nodes. After respectively adding the Widget component to them, set the  Right  property of the Widget for the labels on the left side as  50% , and set the  Left  property of the Widget for the labels on the right side as  60% , then the multi-column layout of labels in the picture above can be realized.  And by setting margins on the aWidget, plus the layout type of labels, a flexible and beautiful layout for labels can be easily realized without concrete and minor adjustments to the bounding box.", 
            "title": "Widget"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/ui/label-layout/index.html#reference-for-checking-components", 
            "text": "For properties of the Label component, you can also check  Label Component  document.   Continue on to read about  UI Components .", 
            "title": "Reference for checking components"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/ui/ui-components/index.html", 
            "text": "Common UI Controls\n\n\nThe content of this document is coming soon...\n\n\n\n\n\nContinue on to read about  \nAuto Layout\n.", 
            "title": "_UI Components"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/ui/ui-components/index.html#common-ui-controls", 
            "text": "The content of this document is coming soon...   Continue on to read about   Auto Layout .", 
            "title": "Common UI Controls"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/ui/auto-layout/index.html", 
            "text": "Auto Layout Container\n\n\nThe layout component can be mounted to any node, making the node into a container with the auto layout function. The so-called auto layout container can automatically array the subnodes according to certain rules and adjust the container type nodes of its own size according to the sum total of bounding boxes of the node content.\n\n\nLayout Type\n\n\nAuto layout components have several basic layout types. These can be set up by the \nLayout Type\n property, which includes the following types.\n\n\nHorizontal Layout\n\n\n\n\nWhen \nLayout Type\n is set as \nHorizontal\n, all the subnodes will automatically be arrayed horizontally, and the width of the Layout node will be set up according to the sum total of the subnodes' \nWidth\n .Then the two Label nodes included in the picture above will automatically be arrayed horizontally.\n\n\nIn the horizontal layout type, the Layout component will not interfere with the position or height properties of the node on the y axis. The subnode can even be put outside the maximal height of the layout node's bounding box. If subnodes need to be aligned upward along the y axis, you can add the Widget component to the subnodes and open the alignment mode of the Top or Bottom.\n\n\nVertical Layout\n\n\n\n\nWhen \nLayout Type\n is set as \nVertical\n, all the subnodes will automatically be arrayed vertically and the height of the Layout node will be set up according to the sum total of the subnodes' \nHeight\n.\n\n\nIn the vertical layout type, the Layout component will not modify the position or width properties of the node on the x axis. Subnodes can only be neatly arrayed by adding the Widget and opening the Left or Right alignment mode.\n\n\nNode Direction\n\n\nThe Layout arrays' subnodes are based on the display order of subnodes in \narrangement manager\n and refers to the array directions set up by the \nVertical Direction\n or \nHorizontal Direction\n properties.\n\n\nHorizontal Direction\n\n\nYou can set up two directions:  \nLeft to Right\n or \nRight to Left\n. The former will array the nodes from left to right according to their display order in \narrangement manager\n; the later will array the nodes from right to left according to their display order in \narrangement manager\n.\n\n\nVertical Direction\n\n\nYou can set up two directions:  \nTop to Bottom\n or \nBottom to Top\n. The former will array the nodes from top to bottom according to their display order in \narrangement manager\n; the later will array the nodes from bottom to top according to their display order in \narrangement manager\n.\n\n\nOther layout types are coming soon\n\n\nWe will update this part of the document in the next edition.\n\n\nFor the properties of other Layout components, please check \nLayout\n document.\n\n\n\n\n\nContinue on to read about \nList with Data\n.", 
            "title": "_Auto Layout"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/ui/auto-layout/index.html#auto-layout-container", 
            "text": "The layout component can be mounted to any node, making the node into a container with the auto layout function. The so-called auto layout container can automatically array the subnodes according to certain rules and adjust the container type nodes of its own size according to the sum total of bounding boxes of the node content.", 
            "title": "Auto Layout Container"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/ui/auto-layout/index.html#layout-type", 
            "text": "Auto layout components have several basic layout types. These can be set up by the  Layout Type  property, which includes the following types.", 
            "title": "Layout Type"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/ui/auto-layout/index.html#horizontal-layout", 
            "text": "When  Layout Type  is set as  Horizontal , all the subnodes will automatically be arrayed horizontally, and the width of the Layout node will be set up according to the sum total of the subnodes'  Width  .Then the two Label nodes included in the picture above will automatically be arrayed horizontally.  In the horizontal layout type, the Layout component will not interfere with the position or height properties of the node on the y axis. The subnode can even be put outside the maximal height of the layout node's bounding box. If subnodes need to be aligned upward along the y axis, you can add the Widget component to the subnodes and open the alignment mode of the Top or Bottom.", 
            "title": "Horizontal Layout"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/ui/auto-layout/index.html#vertical-layout", 
            "text": "When  Layout Type  is set as  Vertical , all the subnodes will automatically be arrayed vertically and the height of the Layout node will be set up according to the sum total of the subnodes'  Height .  In the vertical layout type, the Layout component will not modify the position or width properties of the node on the x axis. Subnodes can only be neatly arrayed by adding the Widget and opening the Left or Right alignment mode.", 
            "title": "Vertical Layout"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/ui/auto-layout/index.html#node-direction", 
            "text": "The Layout arrays' subnodes are based on the display order of subnodes in  arrangement manager  and refers to the array directions set up by the  Vertical Direction  or  Horizontal Direction  properties.", 
            "title": "Node Direction"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/ui/auto-layout/index.html#horizontal-direction", 
            "text": "You can set up two directions:   Left to Right  or  Right to Left . The former will array the nodes from left to right according to their display order in  arrangement manager ; the later will array the nodes from right to left according to their display order in  arrangement manager .", 
            "title": "Horizontal Direction"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/ui/auto-layout/index.html#vertical-direction", 
            "text": "You can set up two directions:   Top to Bottom  or  Bottom to Top . The former will array the nodes from top to bottom according to their display order in  arrangement manager ; the later will array the nodes from bottom to top according to their display order in  arrangement manager .", 
            "title": "Vertical Direction"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/ui/auto-layout/index.html#other-layout-types-are-coming-soon", 
            "text": "We will update this part of the document in the next edition.  For the properties of other Layout components, please check  Layout  document.   Continue on to read about  List with Data .", 
            "title": "Other layout types are coming soon"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/ui/list-with-data/index.html", 
            "text": "Create a list of dynamically generated content\n\n\nThe content of this document is coming soon...\n\n\n\n\n\nContinue on to read about \nAnimation\n.", 
            "title": "_List With Data"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/ui/list-with-data/index.html#create-a-list-of-dynamically-generated-content", 
            "text": "The content of this document is coming soon...   Continue on to read about  Animation .", 
            "title": "Create a list of dynamically generated content"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/animation/index.html", 
            "text": "Animation system\n\n\nThis chapter will introduce the animation system that comes bundled with Cocos Creator.\nAnimation editors usually have the same standard functionality one would expect: standard movement, rotation, scale and sprite animations. Cocos Creator adds to this by providing support for \nover-time\n changes of user defined components and custom properties. Also, with a time curve that can be edited arbitrarily and previewing and editing the movement path directly in the scene view, it can help content creators create various complicated and exquisite dynamic effects without writing a single line of code.\n\n\n\n\n\n\nAbout Animations\n\n\nAnimation Clips\n\n\nAnimation Curve\n\n\nSprite Animation\n\n\nTime Curves\n\n\nAnimation Events\n\n\nScriting Animations\n\n\n\n\n\n\n\nStart learning from \nAbout Animations\n.", 
            "title": "_Getting Started"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/animation/index.html#animation-system", 
            "text": "This chapter will introduce the animation system that comes bundled with Cocos Creator.\nAnimation editors usually have the same standard functionality one would expect: standard movement, rotation, scale and sprite animations. Cocos Creator adds to this by providing support for  over-time  changes of user defined components and custom properties. Also, with a time curve that can be edited arbitrarily and previewing and editing the movement path directly in the scene view, it can help content creators create various complicated and exquisite dynamic effects without writing a single line of code.    About Animations  Animation Clips  Animation Curve  Sprite Animation  Time Curves  Animation Events  Scriting Animations    Start learning from  About Animations .", 
            "title": "Animation system"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/animation/animation/index.html", 
            "text": "About Animation\n\n\nAnimation components and Animation clips\n\n\nCocos Creator is a componentized structure. Animation is no exception, it is a component in the Node. Animation clips, however, are documents for saving animation data. Animation clips need to be mounted to Animation components to enable the engine to smoothly apply animation data to the Node.\n\n\nUnderstanding animation editor\n\n\nThe Animation editor can be divided into 7 parts.\n\n\n\n\n\n\n\n\nCommon button field, which displays some common functional buttons, such as: (from left to right) recording status switch, back to the first frame, last frame, play/stop, next frame, create a new animation clip and insert animation event.\n\n\n\n\n\n\nTimeline and event, which mainly displays timeline. The added user defined events will display here too.\n\n\n\n\n\n\nHierarchy management(node tree), which includes node data that can be influenced by the current animation clip.\n\n\n\n\n\n\nThe preview field of the animation frame in nodes, which mainly displays the preview timeline of all the frames in each node.\n\n\n\n\n\n\nProperty list, which displays the property lists of the currently chosen node that has been included in the chosen animation clip.\n\n\n\n\n\n\nKey frame. The frame corresponding to each property will display here.\n\n\n\n\n\n\nBasic properties of animation clip. After choosing the animation clip, the basic data will display here and can be modified.\n\n\n\n\n\n\nBasic operation\n\n\nModify the zoom proportion of timeline\n\n\nScroll the mouse wheel in area 2, 4, 6 of the image, and the display percentage of the timeline can be zoomed in/out.\n\n\nModify the display area of timeline\n\n\n\n\n\n\nPress Shift button on the keyboard, left-click area 2, 4, 6 in the image and drag it to the left/right.\n\n\n\n\n\n\nPress down the middle mouse button in area 2, 4, 6 in the image and drag it.\n\n\n\n\n\n\nModify the currently chosen timeline node\n\n\n\n\n\n\nClick or drag any position in the timeline (area 2) area, you can modify the current time node.\n\n\n\n\n\n\nDrag the marked red line in area 4.\n\n\n\n\n\n\nOpen/close recording status\n\n\n\n\n\n\nThere is a red button on the left side of graph 1. Click it and you will open/close the recording status.\n\n\n\n\n\n\nThe adding and deletion of the property frame and path will automatically open the recording status.\n\n\n\n\n\n\nThe playing of the animation will automatically open the recording status.\n\n\n\n\n\n\nWhen playing, operations like saving the scene, etc., will close the recording status.\n\n\n\n\n\n\nPlay/stop animation\n\n\n\n\n\n\nClick the Play button in graph 1, which will automatically turn into Stop. Click the button again and the animation will be stopped.\n\n\n\n\n\n\nWhen playing, operations like saving the scene, etc. will stop playing.\n\n\n\n\n\n\n\n\nContinue on to read about \nCreating Animation component and animation clip\n.", 
            "title": "_Animation"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/animation/animation/index.html#about-animation", 
            "text": "", 
            "title": "About Animation"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/animation/animation/index.html#animation-components-and-animation-clips", 
            "text": "Cocos Creator is a componentized structure. Animation is no exception, it is a component in the Node. Animation clips, however, are documents for saving animation data. Animation clips need to be mounted to Animation components to enable the engine to smoothly apply animation data to the Node.", 
            "title": "Animation components and Animation clips"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/animation/animation/index.html#understanding-animation-editor", 
            "text": "The Animation editor can be divided into 7 parts.     Common button field, which displays some common functional buttons, such as: (from left to right) recording status switch, back to the first frame, last frame, play/stop, next frame, create a new animation clip and insert animation event.    Timeline and event, which mainly displays timeline. The added user defined events will display here too.    Hierarchy management(node tree), which includes node data that can be influenced by the current animation clip.    The preview field of the animation frame in nodes, which mainly displays the preview timeline of all the frames in each node.    Property list, which displays the property lists of the currently chosen node that has been included in the chosen animation clip.    Key frame. The frame corresponding to each property will display here.    Basic properties of animation clip. After choosing the animation clip, the basic data will display here and can be modified.", 
            "title": "Understanding animation editor"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/animation/animation/index.html#basic-operation", 
            "text": "", 
            "title": "Basic operation"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/animation/animation/index.html#modify-the-zoom-proportion-of-timeline", 
            "text": "Scroll the mouse wheel in area 2, 4, 6 of the image, and the display percentage of the timeline can be zoomed in/out.", 
            "title": "Modify the zoom proportion of timeline"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/animation/animation/index.html#modify-the-display-area-of-timeline", 
            "text": "Press Shift button on the keyboard, left-click area 2, 4, 6 in the image and drag it to the left/right.    Press down the middle mouse button in area 2, 4, 6 in the image and drag it.", 
            "title": "Modify the display area of timeline"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/animation/animation/index.html#modify-the-currently-chosen-timeline-node", 
            "text": "Click or drag any position in the timeline (area 2) area, you can modify the current time node.    Drag the marked red line in area 4.", 
            "title": "Modify the currently chosen timeline node"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/animation/animation/index.html#openclose-recording-status", 
            "text": "There is a red button on the left side of graph 1. Click it and you will open/close the recording status.    The adding and deletion of the property frame and path will automatically open the recording status.    The playing of the animation will automatically open the recording status.    When playing, operations like saving the scene, etc., will close the recording status.", 
            "title": "Open/close recording status"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/animation/animation/index.html#playstop-animation", 
            "text": "Click the Play button in graph 1, which will automatically turn into Stop. Click the button again and the animation will be stopped.    When playing, operations like saving the scene, etc. will stop playing.     Continue on to read about  Creating Animation component and animation clip .", 
            "title": "Play/stop animation"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/animation/animation-clip/index.html", 
            "text": "Creating Animation components and animation clips\n\n\nCreating an Animation component\n\n\nWe can add different components to each Node. If you want to create an animation\non a Node, we must create a new Animation component for it.\n\n\nThere are 2 methods for creating an animation:\n\n\n1.Choose the Node that you want to use. Click \n+\n on the top right corner or\n\nAdd component\n below in the property checker and choose \nAnimation\n in \u201cother components\u201d.\n\n\n\n\nOpen the animation editor. Choose the Node that you want to add the animation to in the arrangement manager. Click the \nAdd Animation component\n button.\n\n\n\n\n\nCreate and mount animation clips\n\n\nWe have an Animation component on the Node, but we don't have the corresponding Animation clip data. There are 2 methods for creating an Animation clip:\n\n\n\n\nClick \n+\n on the top left corner in the resource manager or right click in the blank area and choose \nAnimation Clip\n. A clip document named 'New AnimationClip' will be created.\n\n\n\n\nCreating it is not enough. You need to   click and choose the Node in the arrangement manager again and find \nAnimation\n in the property checker. The current value of Clips  will be 0. Change it to 1.\n\n\nDrag the newly created 'New AnimationClip' from the resource manager into the newly emerged \nanimation-clip choice box\n.\n\n\n\n\nIf the Animation component hasn't been added to any Animation clip documents, you can click the \nCreate an Animation Clip\n button in the animation editor to create a new Animation clip document from the pop up window.\n\n\n\n\nYou need to pay attention! If you choose to cover the existing clip document, the contents of the covered document will be erased.\n\n\n\n\n\nContinue on to read about \nAnimation Curves\n.", 
            "title": "_Animation Clip"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/animation/animation-clip/index.html#creating-animation-components-and-animation-clips", 
            "text": "", 
            "title": "Creating Animation components and animation clips"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/animation/animation-clip/index.html#creating-an-animation-component", 
            "text": "We can add different components to each Node. If you want to create an animation\non a Node, we must create a new Animation component for it.  There are 2 methods for creating an animation:  1.Choose the Node that you want to use. Click  +  on the top right corner or Add component  below in the property checker and choose  Animation  in \u201cother components\u201d.   Open the animation editor. Choose the Node that you want to add the animation to in the arrangement manager. Click the  Add Animation component  button.", 
            "title": "Creating an Animation component"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/animation/animation-clip/index.html#create-and-mount-animation-clips", 
            "text": "We have an Animation component on the Node, but we don't have the corresponding Animation clip data. There are 2 methods for creating an Animation clip:   Click  +  on the top left corner in the resource manager or right click in the blank area and choose  Animation Clip . A clip document named 'New AnimationClip' will be created.   Creating it is not enough. You need to   click and choose the Node in the arrangement manager again and find  Animation  in the property checker. The current value of Clips  will be 0. Change it to 1.  Drag the newly created 'New AnimationClip' from the resource manager into the newly emerged  animation-clip choice box .   If the Animation component hasn't been added to any Animation clip documents, you can click the  Create an Animation Clip  button in the animation editor to create a new Animation clip document from the pop up window.   You need to pay attention! If you choose to cover the existing clip document, the contents of the covered document will be erased.   Continue on to read about  Animation Curves .", 
            "title": "Create and mount animation clips"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/animation/animation-curve/index.html", 
            "text": "Editing an Animation curve\n\n\nNow, that you have mounted Animation clips to the Node, you can create Animation\ncurves in your Animation clips.\n\n\nFirst, you need to understand Animation properties. These include the existing properties of the Node, such as, position rotation, etc. and the user-defined properties of the component.\nProperties that are included in a component will add the name of the component to the beginning of their own name, such as: \ncc.Sprite.spriteFrame\n.\n\n\n\n\nFor example, in the image above, the position curve is the property path and the\ncorresponding blue dots are animation frames.\n\n\nAdding a new property path\n\n\nThe normal method for adding a new property path involves first choosing the Node\nand then clicking \nadd property\n in the property field. In the pop up menu, all\nof the addable properties will be listed. Choose the property that you want to add and a corresponding path will be added.\n\n\nYou can also directly modify the corresponding properties of the Node in the recording status.\nOpen the recording status, by clicking the red circle in the top left corner and directly drag the chosen Node into the scene editor and an \nadd property\n path will correspondingly be added to the property list and a key frame will be added to the current timeline.\nAlso, in the recording status, direct modifications of other properties in the property checker will automatically add the property path and key frame.\n\n\nDelete a property path\n\n\nRight click the property in the property list and choose the delete option in the pop up menu and the property will be deleted from the animation data.\n\n\nAdd an animation frame\n\n\nDirect modifications of properties in recording status can automatically add corresponding properties and frames.\n\n\nYou can also directly click the ??sign on the right side of the corresponding property in the property list, then a frame will be added to the currently selected point in time.\n\n\n\n\nChoose an animation frame\n\n\nClick the created sequence frame and it will be displayed in the selected state. Now the sequence frame will turn from blue to white. If you need to select multiple sequence frames at once, you can hold down the Ctrl key and select the ones you need or directly drag and highlight them in the property field.\n\n\n\n\nMove an animation frame\n\n\nIf you move the mouse to any randomly chosen Node, the mouse will display left and right arrows.\nYou can drag all the chosen Nodes while holding down the left mouse button.\n\n\nModify an animation frame\n\n\nClick the animation frame that needs to be modified and the selected frame on the\ntimeline will jump to this frame. After making sure the recording status is opened,\nyou can directly modify the corresponding properties in the property checker.\n\n\nDelete an animation frame\n\n\nAfter choosing a sequence frame, click the ??sign in the property field and the currently selected sequence frame will be deleted. Or directly press the Delete key on the keyboard and all the selected nodes will be deleted.\n\n\n\n\nContinue on to read about \nSprite Animations\n.", 
            "title": "_Animation Curve"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/animation/animation-curve/index.html#editing-an-animation-curve", 
            "text": "Now, that you have mounted Animation clips to the Node, you can create Animation\ncurves in your Animation clips.  First, you need to understand Animation properties. These include the existing properties of the Node, such as, position rotation, etc. and the user-defined properties of the component.\nProperties that are included in a component will add the name of the component to the beginning of their own name, such as:  cc.Sprite.spriteFrame .   For example, in the image above, the position curve is the property path and the\ncorresponding blue dots are animation frames.", 
            "title": "Editing an Animation curve"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/animation/animation-curve/index.html#adding-a-new-property-path", 
            "text": "The normal method for adding a new property path involves first choosing the Node\nand then clicking  add property  in the property field. In the pop up menu, all\nof the addable properties will be listed. Choose the property that you want to add and a corresponding path will be added.  You can also directly modify the corresponding properties of the Node in the recording status.\nOpen the recording status, by clicking the red circle in the top left corner and directly drag the chosen Node into the scene editor and an  add property  path will correspondingly be added to the property list and a key frame will be added to the current timeline.\nAlso, in the recording status, direct modifications of other properties in the property checker will automatically add the property path and key frame.", 
            "title": "Adding a new property path"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/animation/animation-curve/index.html#delete-a-property-path", 
            "text": "Right click the property in the property list and choose the delete option in the pop up menu and the property will be deleted from the animation data.", 
            "title": "Delete a property path"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/animation/animation-curve/index.html#add-an-animation-frame", 
            "text": "Direct modifications of properties in recording status can automatically add corresponding properties and frames.  You can also directly click the ??sign on the right side of the corresponding property in the property list, then a frame will be added to the currently selected point in time.", 
            "title": "Add an animation frame"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/animation/animation-curve/index.html#choose-an-animation-frame", 
            "text": "Click the created sequence frame and it will be displayed in the selected state. Now the sequence frame will turn from blue to white. If you need to select multiple sequence frames at once, you can hold down the Ctrl key and select the ones you need or directly drag and highlight them in the property field.", 
            "title": "Choose an animation frame"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/animation/animation-curve/index.html#move-an-animation-frame", 
            "text": "If you move the mouse to any randomly chosen Node, the mouse will display left and right arrows.\nYou can drag all the chosen Nodes while holding down the left mouse button.", 
            "title": "Move an animation frame"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/animation/animation-curve/index.html#modify-an-animation-frame", 
            "text": "Click the animation frame that needs to be modified and the selected frame on the\ntimeline will jump to this frame. After making sure the recording status is opened,\nyou can directly modify the corresponding properties in the property checker.", 
            "title": "Modify an animation frame"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/animation/animation-curve/index.html#delete-an-animation-frame", 
            "text": "After choosing a sequence frame, click the ??sign in the property field and the currently selected sequence frame will be deleted. Or directly press the Delete key on the keyboard and all the selected nodes will be deleted.   Continue on to read about  Sprite Animations .", 
            "title": "Delete an animation frame"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/animation/sprite-animation/index.html", 
            "text": "Editing Sprite animation\n\n\nLet's see a concrete method for creating a frame animation.\n\n\nAdd a new Sprite component to node\n\n\nFirst, we need to make the Node properly displays textures. To do this we need to add a Sprite component to the Node.\nAfter selecting the Node, choose \nadd render component-\nSprite\n by clicking the \nAdd component\n button in the property checker.\n\n\nAdd a cc.Sprite.spriteFrame to property list\n\n\nOnce the Node is able to properly display textures, we need to create an animation path for the texture. Click \nadd property\n in the animation editor, then choose \ncc.Sprite.spriteFrame\n\n\nAdd a frame\n\n\nDrag the texture from the resource manager to the property frame field and put it on the \ncc.Sprite.spriteFrame\npath. Then drag the texture that needs to be displayed in the\nnext frame to the designated position. Click \nPlay\n and the newly created animation\ncan be previewed.\n\n\n\n\nContinue on to read \nTime Curves\n.", 
            "title": "_Sprite Animation"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/animation/sprite-animation/index.html#editing-sprite-animation", 
            "text": "Let's see a concrete method for creating a frame animation.", 
            "title": "Editing Sprite animation"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/animation/sprite-animation/index.html#add-a-new-sprite-component-to-node", 
            "text": "First, we need to make the Node properly displays textures. To do this we need to add a Sprite component to the Node.\nAfter selecting the Node, choose  add render component- Sprite  by clicking the  Add component  button in the property checker.", 
            "title": "Add a new Sprite component to node"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/animation/sprite-animation/index.html#add-a-ccspritespriteframe-to-property-list", 
            "text": "Once the Node is able to properly display textures, we need to create an animation path for the texture. Click  add property  in the animation editor, then choose  cc.Sprite.spriteFrame", 
            "title": "Add a cc.Sprite.spriteFrame to property list"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/animation/sprite-animation/index.html#add-a-frame", 
            "text": "Drag the texture from the resource manager to the property frame field and put it on the  cc.Sprite.spriteFrame path. Then drag the texture that needs to be displayed in the\nnext frame to the designated position. Click  Play  and the newly created animation\ncan be previewed.   Continue on to read  Time Curves .", 
            "title": "Add a frame"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/animation/time-curve/index.html", 
            "text": "Editing a time curve\n\n\nWe have already created some basic animations. However, sometimes we need to use\nslow-motion effects like EaseInOut, etc., between two frames. So how can this be achieved in the animation editor?\n\n\nFirst, we need to create two unequal frames on one path. For example, create two frames on a position which starts from 0,0 to 100,100, then a connecting line between these two frames will appear. Double click the connecting line and the time curve editor will open.\n\n\n\n\nUsing a pre-set curve\n\n\nWe can select various pre-set effects from the left-hand side of the curve editor, such as: Ease In, etc. After selecting, some pre-set parameters will appear at the top on the right-hand side. These can be chosen according to your needs.\n\n\nA user-defined curve\n\n\nSometimes the pre-set curve cannot meet the needs of the animation. However, we can modify the curve ourselves. In the preview image in the bottom right, there are two grey controlling points. By dragging these controlling points, the path of the curve can be modified.\nIf the controlling points need to be dragged outside of the visual field, you can use the mouse wheel or small plotting scale on the top right corner to zoom in/out of the preview image. The proportions supported by which range from 0.1 to 1.\n\n\n\n\nContinue on to read \nAnimation Events\n.", 
            "title": "_Time Curve"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/animation/time-curve/index.html#editing-a-time-curve", 
            "text": "We have already created some basic animations. However, sometimes we need to use\nslow-motion effects like EaseInOut, etc., between two frames. So how can this be achieved in the animation editor?  First, we need to create two unequal frames on one path. For example, create two frames on a position which starts from 0,0 to 100,100, then a connecting line between these two frames will appear. Double click the connecting line and the time curve editor will open.", 
            "title": "Editing a time curve"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/animation/time-curve/index.html#using-a-pre-set-curve", 
            "text": "We can select various pre-set effects from the left-hand side of the curve editor, such as: Ease In, etc. After selecting, some pre-set parameters will appear at the top on the right-hand side. These can be chosen according to your needs.", 
            "title": "Using a pre-set curve"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/animation/time-curve/index.html#a-user-defined-curve", 
            "text": "Sometimes the pre-set curve cannot meet the needs of the animation. However, we can modify the curve ourselves. In the preview image in the bottom right, there are two grey controlling points. By dragging these controlling points, the path of the curve can be modified.\nIf the controlling points need to be dragged outside of the visual field, you can use the mouse wheel or small plotting scale on the top right corner to zoom in/out of the preview image. The proportions supported by which range from 0.1 to 1.   Continue on to read  Animation Events .", 
            "title": "A user-defined curve"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/animation/animation-event/index.html", 
            "text": "Animation Events.\n\n\nWhen using animations in your games, you may want things to during a frame or even\nat the end of a frame. We call these animation events.\n\n\nAdding an event\n\n\nFirst, choose the position where you want an event to happen. Click the \nadd event\n\nbutton at the far left side of the button field. A white rectangle will appear on\nthe timeline representing the newly added event.\n\n\n\n\nDeleting an event\n\n\nThere are two ways to delete and event.\n\n\n\n\nDouble click the white rectangle that represents the event.\n\n\nClick the \nRecycle\n icon behind \nFunction\n after opening the event editor.\nA prompt for deleting this event will appear. Click the \nConfirm\n button and the\nevent will be deleted.\n\n\n\n\n\n\nYou can also right click \nEvent\n in the animation editor and choose \nDelete\n.\n\n\nSpecifying the  event trigger function and import parameters\n\n\nDouble click the white rectangle of the event you want to modify and the event editor\nwill open. In the editor, you can manually input the function name that needs to be transmitted. When triggering, the corresponding method will be matched to each component according to this function name.\n\n\nIf you want add imported parameters, you can click ??or ??near Params. Only three types of parameters supported: Boolean, String and Number.\n\n\n\n\nContinue on to read about \nScripting Animations\n.", 
            "title": "_Animation Event"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/animation/animation-event/index.html#animation-events", 
            "text": "When using animations in your games, you may want things to during a frame or even\nat the end of a frame. We call these animation events.", 
            "title": "Animation Events."
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/animation/animation-event/index.html#adding-an-event", 
            "text": "First, choose the position where you want an event to happen. Click the  add event \nbutton at the far left side of the button field. A white rectangle will appear on\nthe timeline representing the newly added event.", 
            "title": "Adding an event"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/animation/animation-event/index.html#deleting-an-event", 
            "text": "There are two ways to delete and event.   Double click the white rectangle that represents the event.  Click the  Recycle  icon behind  Function  after opening the event editor.\nA prompt for deleting this event will appear. Click the  Confirm  button and the\nevent will be deleted.    You can also right click  Event  in the animation editor and choose  Delete .", 
            "title": "Deleting an event"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/animation/animation-event/index.html#specifying-the-event-trigger-function-and-import-parameters", 
            "text": "Double click the white rectangle of the event you want to modify and the event editor\nwill open. In the editor, you can manually input the function name that needs to be transmitted. When triggering, the corresponding method will be matched to each component according to this function name.  If you want add imported parameters, you can click ??or ??near Params. Only three types of parameters supported: Boolean, String and Number.   Continue on to read about  Scripting Animations .", 
            "title": "Specifying the  event trigger function and import parameters"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/animation/scripting-animation/index.html", 
            "text": "Using scripts to control animation\n\n\nAnimation component\n\n\nAnimation components provide some common animation control functions. If you only need simple animation control, you can do some operations by obtaining the Animation component of the Node.\n\n\nPlay\n\n\nvar anim = this.getComopnent(cc.Animation);\n\n// if no animation is designated to play and defaultClip is set up, play defaultClip animation\nanim.play();\n\n// designate test animation to play\nanim.play('test');\n\n// designate test animation to play from 1 second\nanim.play('test', 1);\n\n\n\n\nWhen playing an animation, Animation will evaluate the former playing state of the animation for next step operation.\nIf animation is in:\n - \nStop\n state, then Animation will directly re-play this animation\n - \nPause\n state, then Animation will resume the playing of the animation and continue playing it from the current time\n - \nPlay\n state, then Animation will stop this animation and re-play it\n\n\nvar anim = this.getComopnent(cc.Animation);\n\n// play the first animation\nanim.play('position-anim');\n\n// play the second animation\nanim.play('rotation-anim');\n\n\n\n\nAnimation supports playing multiple animations simultaneously. The playing of different animations will not influence the playing state of each other, which is helpful for the creation of some complex animations.\n\n\nPause Resume Stop\n\n\nvar anim = this.getComopnent(cc.Animation);\n\nanim.play('test');\n\n// designate test animation to pause\nanim.pause('test');\n\n// pause all the animations\n// anim.pause();\n\n// designate test animation to resume\nanim.resume('test');\n\n// resume all the animations\n// anim.resume();\n\n// designate test animation to stop\nanim.stop('test');\n\n// stop all the animations\n// anim.stop();\n\n\n\n\nInvoking \nPause\n, \nResume\n and \nStop\n functions is similar.\n\n\nPause\n will temporarily stop playing the animation. \nResume\n, the animation will continue playing from the current time.\nHowever, \nStop\n will stop the playing of the animation. When being played again, this animation will start playing from the beginning.\n\n\nset up the current time of animation\n\n\nvar anim = this.getComopnent(cc.Animation);\n\nanim.play('test');\n\n// set the current playing time of test animation as 1 second\nanim.setCurrentTime(1, 'test');\n\n// set the current playing time of all animations as 1 second\n// anim.setCurrentTime(1);\n\n\n\n\nYou can set the current time of animation at anytime. But, the status of the animation will not be immediately modified according to set time. Only in next \nupdate\n of the animation will the playing status be re-calculated according to this time.\n\n\nAnimationState\n\n\nAnimation\n only provides some simple control functions. For more animation informations and controls, \nAnimationState\n is needed.\n\n\nWhat is AnimationState?\n\n\nIf \nAnimationClip\n is the carrier of animation data, then \nAnimationState\n is the concrete example of running \nAnimationClip\n, which decodes animation data into numeric values that are convenient to be calculated by program.\nWhen \nAnimation\n is playing an \nAnimationClip\n, \nAnimationClip\n will be docoded into \nAnimationState\n.\nThe playing state of \nAnimation\n is actually calculated by \nAnimationState\n, which includes whether animation will loop or not, how to loop, playing speed, etc..\n\n\nobtain AnimationState\n\n\nvar anim = this.getComopnent(cc.Animation);\n// play will return associated AnimationState\nvar animState = anim.play('test');\n\n// or directly obtain\nvar animState = anim.getAnimationState('test');\n\n\n\n\nObtain animation information\n\n\nvar anim = this.getComopnent(cc.Animation);\nvar animState = anim.play('test');\n\n// obtain clip associated with animation\nvar clip = animState.clip;\n\n// obtain animation name\nvar name = animState.name;\n\n// obtain the playing speed of animation\nvar speed = animState.speed;\n\n// obtain the total duration of animation\nvar duration = animState.duration;\n\n// obtain the playing time of animation\nvar time = animState.time;\n\n// obtain the repeat count of animation\nvar repeatCount = animState.repeatCount;\n\n// obtain the loop mode of animation\nvar wrapMode = animState.wrapMode\n\n// obtain if the animation is playing\nvar playing = animState.isPlaying;\n\n// obtain if the animation is paused\nvar paused = animState.isPaused;\n\n// obtain the frame rate of animation\nvar frameRate = animState.frameRate;\n\n\n\n\n\nFrom \nAnimationState\n, all the animation information can be obtained. You can use this information to see what should be done.\n\n\nSet up the playing speed of animation\n\n\nvar anim = this.getComopnent(cc.Animation);\nvar animState = anim.play('test');\n\n// accelerate the playing speed of animation\nanimState.speed = 2;\n\n// slow down the playing speed of animation\nanimState.speed = 0.5;\n\n\n\n\n\nThe greater the \nspeed\n value is, the faster the speed is, and vice versa\n\n\nSet up the loop mode and loop count of animation\n\n\nvar anim = this.getComopnent(cc.Animation);\nvar animState = anim.play('test');\n\n// set the loop mode as Normal\nanimState.wrapeMode = cc.WrapMode.Normal;\n\n// set the loop mode as Loop\nanimState.wrapeMode = cc.WrapMode.Loop;\n\n// set the loop count of animation as 2 times\nanimState.repeatCount = 2;\n\n// set the loop count of animation as infinite\nanimState.repeatCount = Infinity;\n\n\n\n\n\nAnimationState\n permits the dynamic setting up of loop mode. Currently, various loop modes are provided. These loop modes can be obtained from \ncc.WrapMode\n.\nIf the loop category of animation is \nLoop\n category, it should be used together with \nrepeatCount\n to achieve this effect.\nBy default, when decoding animation clips, if the loop category of animation is:\n - \nLoop\n category, \nrepeatCount\n will be set as \nInfinity\n, i.e., infinite loop\n - \nNormal\n category, \nrepeatCount\n will be set as 1\n\n\nAnimation event\n\n\nVisually editing the frame event is supported in the animation editor (For the methods of editing, please refer to \nAnimation event\n). Writing the callback of the animation event in the script is very simple too. The callback of the animation event is actually a normal function. The frame event added to the animation editor will map onto the component of animation root node.\n\n\nConcrete example:\n\n\nSuppose a frame event is added to the end of animation, which is as illustrated below:\n\n\n\nThen in the script, you can write like this:\n\n\ncc.Class({\n    extends: cc.Component,\n\n    onAnimCompleted: function (num, string) {\n        console.log('onAnimCompleted: param1[%s], param2[%s]', num, string);\n    }\n});\n\n\n\n\n\nAdd the above components to the \nroot node\n of animation. When animation is about to end, animation system will automatically invoke \nonAnimCompleted\n function in the script.\nAnimation system will search in all the components of animation root node. If there is a function that designated to realize animation event in components, then it will be invoked and parameters written in the event will be imported.\n\n\n\n\nContinue on to read about \nComponents\n.", 
            "title": "_Scripting Animation"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/animation/scripting-animation/index.html#using-scripts-to-control-animation", 
            "text": "", 
            "title": "Using scripts to control animation"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/animation/scripting-animation/index.html#animation-component", 
            "text": "Animation components provide some common animation control functions. If you only need simple animation control, you can do some operations by obtaining the Animation component of the Node.", 
            "title": "Animation component"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/animation/scripting-animation/index.html#play", 
            "text": "var anim = this.getComopnent(cc.Animation);\n\n// if no animation is designated to play and defaultClip is set up, play defaultClip animation\nanim.play();\n\n// designate test animation to play\nanim.play('test');\n\n// designate test animation to play from 1 second\nanim.play('test', 1);  When playing an animation, Animation will evaluate the former playing state of the animation for next step operation.\nIf animation is in:\n -  Stop  state, then Animation will directly re-play this animation\n -  Pause  state, then Animation will resume the playing of the animation and continue playing it from the current time\n -  Play  state, then Animation will stop this animation and re-play it  var anim = this.getComopnent(cc.Animation);\n\n// play the first animation\nanim.play('position-anim');\n\n// play the second animation\nanim.play('rotation-anim');  Animation supports playing multiple animations simultaneously. The playing of different animations will not influence the playing state of each other, which is helpful for the creation of some complex animations.", 
            "title": "Play"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/animation/scripting-animation/index.html#pause-resume-stop", 
            "text": "var anim = this.getComopnent(cc.Animation);\n\nanim.play('test');\n\n// designate test animation to pause\nanim.pause('test');\n\n// pause all the animations\n// anim.pause();\n\n// designate test animation to resume\nanim.resume('test');\n\n// resume all the animations\n// anim.resume();\n\n// designate test animation to stop\nanim.stop('test');\n\n// stop all the animations\n// anim.stop();  Invoking  Pause ,  Resume  and  Stop  functions is similar.  Pause  will temporarily stop playing the animation.  Resume , the animation will continue playing from the current time.\nHowever,  Stop  will stop the playing of the animation. When being played again, this animation will start playing from the beginning.", 
            "title": "Pause Resume Stop"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/animation/scripting-animation/index.html#set-up-the-current-time-of-animation", 
            "text": "var anim = this.getComopnent(cc.Animation);\n\nanim.play('test');\n\n// set the current playing time of test animation as 1 second\nanim.setCurrentTime(1, 'test');\n\n// set the current playing time of all animations as 1 second\n// anim.setCurrentTime(1);  You can set the current time of animation at anytime. But, the status of the animation will not be immediately modified according to set time. Only in next  update  of the animation will the playing status be re-calculated according to this time.", 
            "title": "set up the current time of animation"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/animation/scripting-animation/index.html#animationstate", 
            "text": "Animation  only provides some simple control functions. For more animation informations and controls,  AnimationState  is needed.", 
            "title": "AnimationState"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/animation/scripting-animation/index.html#what-is-animationstate", 
            "text": "If  AnimationClip  is the carrier of animation data, then  AnimationState  is the concrete example of running  AnimationClip , which decodes animation data into numeric values that are convenient to be calculated by program.\nWhen  Animation  is playing an  AnimationClip ,  AnimationClip  will be docoded into  AnimationState .\nThe playing state of  Animation  is actually calculated by  AnimationState , which includes whether animation will loop or not, how to loop, playing speed, etc..", 
            "title": "What is AnimationState?"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/animation/scripting-animation/index.html#obtain-animationstate", 
            "text": "var anim = this.getComopnent(cc.Animation);\n// play will return associated AnimationState\nvar animState = anim.play('test');\n\n// or directly obtain\nvar animState = anim.getAnimationState('test');", 
            "title": "obtain AnimationState"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/animation/scripting-animation/index.html#obtain-animation-information", 
            "text": "var anim = this.getComopnent(cc.Animation);\nvar animState = anim.play('test');\n\n// obtain clip associated with animation\nvar clip = animState.clip;\n\n// obtain animation name\nvar name = animState.name;\n\n// obtain the playing speed of animation\nvar speed = animState.speed;\n\n// obtain the total duration of animation\nvar duration = animState.duration;\n\n// obtain the playing time of animation\nvar time = animState.time;\n\n// obtain the repeat count of animation\nvar repeatCount = animState.repeatCount;\n\n// obtain the loop mode of animation\nvar wrapMode = animState.wrapMode\n\n// obtain if the animation is playing\nvar playing = animState.isPlaying;\n\n// obtain if the animation is paused\nvar paused = animState.isPaused;\n\n// obtain the frame rate of animation\nvar frameRate = animState.frameRate;  From  AnimationState , all the animation information can be obtained. You can use this information to see what should be done.", 
            "title": "Obtain animation information"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/animation/scripting-animation/index.html#set-up-the-playing-speed-of-animation", 
            "text": "var anim = this.getComopnent(cc.Animation);\nvar animState = anim.play('test');\n\n// accelerate the playing speed of animation\nanimState.speed = 2;\n\n// slow down the playing speed of animation\nanimState.speed = 0.5;  The greater the  speed  value is, the faster the speed is, and vice versa", 
            "title": "Set up the playing speed of animation"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/animation/scripting-animation/index.html#set-up-the-loop-mode-and-loop-count-of-animation", 
            "text": "var anim = this.getComopnent(cc.Animation);\nvar animState = anim.play('test');\n\n// set the loop mode as Normal\nanimState.wrapeMode = cc.WrapMode.Normal;\n\n// set the loop mode as Loop\nanimState.wrapeMode = cc.WrapMode.Loop;\n\n// set the loop count of animation as 2 times\nanimState.repeatCount = 2;\n\n// set the loop count of animation as infinite\nanimState.repeatCount = Infinity;  AnimationState  permits the dynamic setting up of loop mode. Currently, various loop modes are provided. These loop modes can be obtained from  cc.WrapMode .\nIf the loop category of animation is  Loop  category, it should be used together with  repeatCount  to achieve this effect.\nBy default, when decoding animation clips, if the loop category of animation is:\n -  Loop  category,  repeatCount  will be set as  Infinity , i.e., infinite loop\n -  Normal  category,  repeatCount  will be set as 1", 
            "title": "Set up the loop mode and loop count of animation"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/animation/scripting-animation/index.html#animation-event", 
            "text": "Visually editing the frame event is supported in the animation editor (For the methods of editing, please refer to  Animation event ). Writing the callback of the animation event in the script is very simple too. The callback of the animation event is actually a normal function. The frame event added to the animation editor will map onto the component of animation root node.", 
            "title": "Animation event"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/animation/scripting-animation/index.html#concrete-example", 
            "text": "Suppose a frame event is added to the end of animation, which is as illustrated below:  Then in the script, you can write like this:  cc.Class({\n    extends: cc.Component,\n\n    onAnimCompleted: function (num, string) {\n        console.log('onAnimCompleted: param1[%s], param2[%s]', num, string);\n    }\n});  Add the above components to the  root node  of animation. When animation is about to end, animation system will automatically invoke  onAnimCompleted  function in the script.\nAnimation system will search in all the components of animation root node. If there is a function that designated to realize animation event in components, then it will be invoked and parameters written in the event will be imported.   Continue on to read about  Components .", 
            "title": "Concrete example:"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/components/index.html", 
            "text": "Component reference\n\n\n\n\nSprite\n\n\nLabel\n\n\nAnimation\n\n\nCanvas\n\n\nWidget\n\n\nButton\n\n\nProgressBar\n\n\nMask\n\n\nScrollView\n\n\nScrollBar\n\n\nLayout\n\n\n\n\n\n\n\nContinue on to read about \nSprite component reference\n.", 
            "title": "_Getting Started"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/components/index.html#component-reference", 
            "text": "Sprite  Label  Animation  Canvas  Widget  Button  ProgressBar  Mask  ScrollView  ScrollBar  Layout    Continue on to read about  Sprite component reference .", 
            "title": "Component reference"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/components/sprite/index.html", 
            "text": "Sprite component reference\n\n\nUsing Sprites is the most common way to display images in a 2D game. By adding the Sprite component to a node you can display images from the project resources within the scene.\n\n\n\n\nClick the \nAdd Component\n button at the bottom of the \nInspector\n and select \nSprite\n from \nAdd Rendering Component\n to add the Sprite component to the node.\n\n\nSprite attribute\n\n\n\n\n\n\n\n\nAttribute\n\n\nFunction Explanation\n\n\n\n\n\n\n\n\n\n\nAtlas\n\n\nAtlas resource\n which the Sprite display image resource belongs to.\n\n\n\n\n\n\nSprite Frame\n\n\nSpriteFrame image resource\n which is used to render the Sprite.\n\n\n\n\n\n\nType\n\n\nRendering mode, currently includes Simple and Sliced rendering modes.\n\n\n\n\n\n\nUse Original Size\n\n\nWhether to use the original size of the image resource as the Sprite node size.\n\n\n\n\n\n\n\n\nDetailed explanation\n\n\nAfter adding the Sprite component, drag the Texture or SpriteFrame type resource from the \nresource manager\n to the \nSprite Frame\n attribute reference. The resource image can then be displayed through the Sprite component.\n\n\nIf this SpriteFrame resource is contained within an Atlas resource, then the \nAtlas\n attribute of the Sprite will be set up along with it. Later you can click the \nchoose\n button next to the \nAtlas\n attribute to choose another SpriteFrame from this Atlas to assign to the Sprite.\n\n\nRendering mode\n\n\nCurrently, the Sprite component supports two rendering modes:\n\n\n\n\nSimple mode: rendering the Sprite according to the original image resource. It is normally used along with \nUse Original Size\n to guarantee the image shown in the scene is in full accordance with the image designed by the graphic designer.\n\n\nSliced mode: the image is cut up into a nine square grid and according to certain rules is scaled to fit freely set dimensions (\nsize\n). It is usually used in UI elements or to make images that can be enlarged infinitely without influencing the image quality into images cut up into a grid to save game resource space. Please read \nuse Sprite editor to make a Sudoku image\n for detailed information.\n\n\n\n\n\n\nContinue on to read about \nLabel component reference\n.", 
            "title": "_Sprite"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/components/sprite/index.html#sprite-component-reference", 
            "text": "Using Sprites is the most common way to display images in a 2D game. By adding the Sprite component to a node you can display images from the project resources within the scene.   Click the  Add Component  button at the bottom of the  Inspector  and select  Sprite  from  Add Rendering Component  to add the Sprite component to the node.", 
            "title": "Sprite component reference"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/components/sprite/index.html#sprite-attribute", 
            "text": "Attribute  Function Explanation      Atlas  Atlas resource  which the Sprite display image resource belongs to.    Sprite Frame  SpriteFrame image resource  which is used to render the Sprite.    Type  Rendering mode, currently includes Simple and Sliced rendering modes.    Use Original Size  Whether to use the original size of the image resource as the Sprite node size.", 
            "title": "Sprite attribute"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/components/sprite/index.html#detailed-explanation", 
            "text": "After adding the Sprite component, drag the Texture or SpriteFrame type resource from the  resource manager  to the  Sprite Frame  attribute reference. The resource image can then be displayed through the Sprite component.  If this SpriteFrame resource is contained within an Atlas resource, then the  Atlas  attribute of the Sprite will be set up along with it. Later you can click the  choose  button next to the  Atlas  attribute to choose another SpriteFrame from this Atlas to assign to the Sprite.", 
            "title": "Detailed explanation"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/components/sprite/index.html#rendering-mode", 
            "text": "Currently, the Sprite component supports two rendering modes:   Simple mode: rendering the Sprite according to the original image resource. It is normally used along with  Use Original Size  to guarantee the image shown in the scene is in full accordance with the image designed by the graphic designer.  Sliced mode: the image is cut up into a nine square grid and according to certain rules is scaled to fit freely set dimensions ( size ). It is usually used in UI elements or to make images that can be enlarged infinitely without influencing the image quality into images cut up into a grid to save game resource space. Please read  use Sprite editor to make a Sudoku image  for detailed information.    Continue on to read about  Label component reference .", 
            "title": "Rendering mode"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/components/label/index.html", 
            "text": "Label component reference\n\n\nThe Label component is used to show a piece of text in the system font, TrueType font or BMFont. Label also has a composing function.\n\n\n\n\n\n\nClick the \nAdd Component\n button at the bottom of the \nInspector\n and select \nLabel\n from \nAdd Rendering Component\n to add the Label component to the node.\n\n\nLabel attribute\n\n\n\n\n\n\n\n\nAttribute\n\n\nFunction Explanation\n\n\n\n\n\n\n\n\n\n\nString\n\n\nText content character string.\n\n\n\n\n\n\nHorizontal Align\n\n\nHorizontal alignment pattern of the text. The options are LEFT, CENTER and RIGHT.\n\n\n\n\n\n\nVertical Align\n\n\nVertical alignment pattern of the text. The options are TOP, CENTER and BOTTOM.\n\n\n\n\n\n\nFont Size\n\n\nFont size of the text.\n\n\n\n\n\n\nLine Height\n\n\nLine height of the text.\n\n\n\n\n\n\nOverflow\n\n\nLayout pattern of the text. Currently supports CLAMP, SHRINK and RESIZE_HEIGHT. See \nLabel Layout\n for more detailed information.\n\n\n\n\n\n\nEnable Wrap Text\n\n\nEnable or disable the text line feed.\n\n\n\n\n\n\nFile\n\n\nDesignate the font file needed for rendering the text. If the system font is used, then this attribute can be set to null.\n\n\n\n\n\n\nUse System Font\n\n\nBoolean value, choose whether to use the system font or not.\n\n\n\n\n\n\n\n\nLabel Layout\n\n\n\n\n\n\n\n\nAttribute\n\n\nFunction Explanation\n\n\n\n\n\n\n\n\n\n\nCLAMP\n\n\nThe text size won't zoom in or out as the Bounding Box size changes. When Wrap Text is disabled, parts exceeding the Bounding Box won't be shown according to the normal character layout. When Wrap Text is enabled, it will try to wrap the text exceeding the boundaries to the next line. If the vertical space is not enough, any not completely visible text will also be hidden.\n\n\n\n\n\n\nSHRINK\n\n\nThe text size will zoom in or out (it won't zoom out automatically, the maximum size that will show is specified by Font Size) as the Bounding Box size changes. When Wrap Text is enabled, if the width is not enough, it will try to wrap the text to the next line before automatically adapting the Bounding Box's size to make the text show completely. If Wrap Text is disabled, then it will compose according to the current text and zoom automatically if it exceeds the boundaries.\n\n\n\n\n\n\nRESIZE_HEIGHT\n\n\nThe text Bounding Box will adapt to the layout of the text. The user cannot manually change the height of text in this status; it is automatically calculated by the internal algorithm.\n\n\n\n\n\n\n\n\nDetailed explanation\n\n\nBy dragging the TTF font file and BMFont font file into the \nfile\n attribute in the \nInspector\n the Label component can alter the rendering font type. If you want to stop using a font file, you can use the system font again by checking \nUse System Font\n?\n\n\n---`\n\n\nContinue on to read about \nAnimation component reference\n.", 
            "title": "_Label"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/components/label/index.html#label-component-reference", 
            "text": "The Label component is used to show a piece of text in the system font, TrueType font or BMFont. Label also has a composing function.    Click the  Add Component  button at the bottom of the  Inspector  and select  Label  from  Add Rendering Component  to add the Label component to the node.", 
            "title": "Label component reference"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/components/label/index.html#label-attribute", 
            "text": "Attribute  Function Explanation      String  Text content character string.    Horizontal Align  Horizontal alignment pattern of the text. The options are LEFT, CENTER and RIGHT.    Vertical Align  Vertical alignment pattern of the text. The options are TOP, CENTER and BOTTOM.    Font Size  Font size of the text.    Line Height  Line height of the text.    Overflow  Layout pattern of the text. Currently supports CLAMP, SHRINK and RESIZE_HEIGHT. See  Label Layout  for more detailed information.    Enable Wrap Text  Enable or disable the text line feed.    File  Designate the font file needed for rendering the text. If the system font is used, then this attribute can be set to null.    Use System Font  Boolean value, choose whether to use the system font or not.", 
            "title": "Label attribute"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/components/label/index.html#label-layout", 
            "text": "Attribute  Function Explanation      CLAMP  The text size won't zoom in or out as the Bounding Box size changes. When Wrap Text is disabled, parts exceeding the Bounding Box won't be shown according to the normal character layout. When Wrap Text is enabled, it will try to wrap the text exceeding the boundaries to the next line. If the vertical space is not enough, any not completely visible text will also be hidden.    SHRINK  The text size will zoom in or out (it won't zoom out automatically, the maximum size that will show is specified by Font Size) as the Bounding Box size changes. When Wrap Text is enabled, if the width is not enough, it will try to wrap the text to the next line before automatically adapting the Bounding Box's size to make the text show completely. If Wrap Text is disabled, then it will compose according to the current text and zoom automatically if it exceeds the boundaries.    RESIZE_HEIGHT  The text Bounding Box will adapt to the layout of the text. The user cannot manually change the height of text in this status; it is automatically calculated by the internal algorithm.", 
            "title": "Label Layout"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/components/label/index.html#detailed-explanation", 
            "text": "By dragging the TTF font file and BMFont font file into the  file  attribute in the  Inspector  the Label component can alter the rendering font type. If you want to stop using a font file, you can use the system font again by checking  Use System Font ?  ---`  Continue on to read about  Animation component reference .", 
            "title": "Detailed explanation"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/components/animation/index.html", 
            "text": "Animation component reference\n\n\nThe \nAnimation \ncomponent enables a node and its child node to make an animation.\n\n\n\n\nClick the \nadd component\n at the bottom of \nInspector\n and select \nAnimation\n from \nadd other components\n in order to add the \nAnimation\n component to the node.\n\n\nAnimation attribute\n\n\n\n\n\n\n\n\nAttribute\n\n\nFunction explanation\n\n\n\n\n\n\n\n\n\n\nDefault Clip\n\n\nDefault animation editing. If you set the value for this as one and \nPlay On Load\n as true, then the animation will play the contents of \nDefault Clip\n automatically after loading.\n\n\n\n\n\n\nClips\n\n\nDefault list type is null. If you add an \nAnimationClip\n in here, then it will be mirrored in the \nanimation editor\n; users can edit the contents of \nClips\n in the \nanimation editor\n\n\n\n\n\n\nPlay On Load\n\n\nBoolean type. Chooses whether to play the content of the \nDefault Clip\n automatically after the animation loads.\n\n\n\n\n\n\n\n\nDetailed description\n\n\nIf we need to have many nodes contained in one animation, then normally we will create a new node as the \nroot node\n of the animation and add the \nAnimation \n component to this \nroot node\n. The other child nodes of the root node will then automatically enter this animation.\n\n\nIf the following node tree is added:\n\n\n\nThen the hierarchy in the animation editor will show:\n\n\n\nFor more information about\nAnimation\n, please read \nanimation system\n.\n\n\n\n\n\nContinue on to read about \nCanvas component reference\n.", 
            "title": "_Animation"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/components/animation/index.html#animation-component-reference", 
            "text": "The  Animation  component enables a node and its child node to make an animation.   Click the  add component  at the bottom of  Inspector  and select  Animation  from  add other components  in order to add the  Animation  component to the node.", 
            "title": "Animation component reference"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/components/animation/index.html#animation-attribute", 
            "text": "Attribute  Function explanation      Default Clip  Default animation editing. If you set the value for this as one and  Play On Load  as true, then the animation will play the contents of  Default Clip  automatically after loading.    Clips  Default list type is null. If you add an  AnimationClip  in here, then it will be mirrored in the  animation editor ; users can edit the contents of  Clips  in the  animation editor    Play On Load  Boolean type. Chooses whether to play the content of the  Default Clip  automatically after the animation loads.", 
            "title": "Animation attribute"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/components/animation/index.html#detailed-description", 
            "text": "If we need to have many nodes contained in one animation, then normally we will create a new node as the  root node  of the animation and add the  Animation   component to this  root node . The other child nodes of the root node will then automatically enter this animation.  If the following node tree is added:  Then the hierarchy in the animation editor will show:  For more information about Animation , please read  animation system .   Continue on to read about  Canvas component reference .", 
            "title": "Detailed description"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/components/canvas/index.html", 
            "text": "Canvas component reference\n\n\nThe \nCanvas\n component can get the actual resolution of the device screen and zoom in and out of all the rendered elements in the scene. There can only exist one Canvas component in the scene at a time. We recommend you set all the UI and renderable elements as Canvas' child nodes.\n\n\n\n\nOptions\n\n\n\n\n\n\n\n\nOptions\n\n\nExplanation\n\n\n\n\n\n\n\n\n\n\nDesign Resolution\n\n\nDesign resolution (the resolution blueprint used while the content producer builds the scene)\n\n\n\n\n\n\nFit Height\n\n\nAuto-fit height (the height of the design resolution will auto-fit to the screen height)\n\n\n\n\n\n\nFit Width\n\n\nAuto-fit width (the width of the design resolution will auto-fit to the screen width)\n\n\n\n\n\n\n\n\n\n\n\nContinue on to read about the \nWidget component reference\n.", 
            "title": "_Canvas"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/components/canvas/index.html#canvas-component-reference", 
            "text": "The  Canvas  component can get the actual resolution of the device screen and zoom in and out of all the rendered elements in the scene. There can only exist one Canvas component in the scene at a time. We recommend you set all the UI and renderable elements as Canvas' child nodes.", 
            "title": "Canvas component reference"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/components/canvas/index.html#options", 
            "text": "Options  Explanation      Design Resolution  Design resolution (the resolution blueprint used while the content producer builds the scene)    Fit Height  Auto-fit height (the height of the design resolution will auto-fit to the screen height)    Fit Width  Auto-fit width (the width of the design resolution will auto-fit to the screen width)      Continue on to read about the  Widget component reference .", 
            "title": "Options"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/components/widget/index.html", 
            "text": "Widget component reference\n\n\nWidget is a frequently used UI layout component. It can make the current node automatically align to an optional position of the parent object or restrict dimensions to make your game adaptive to different resolution ratios.\n\n\n\n\nOptions\n\n\n\n\n\n\n\n\nOptions\n\n\nExplanation\n\n\nNote\n\n\n\n\n\n\n\n\n\n\nTop\n\n\nUpper border alignment\n\n\nAfter selecting, an input field will appear to set the distance between the upper border of the current node and the upper border of the parent object.\n\n\n\n\n\n\nBottom\n\n\nLower border alignment\n\n\nAfter selecting, an input field will appear to set the distance between the lower border of the current node and the lower border of the parent object.\n\n\n\n\n\n\nLeft\n\n\nLeft border alignment\n\n\nAfter selecting, an input field will appear to set the distance between the left border of the current node and the left border of the parent object.\n\n\n\n\n\n\nRight\n\n\nRight border alignment\n\n\nAfter selecting, an input field will appear to set the distance between the right border of the current node and the right border of the parent object.\n\n\n\n\n\n\nHorizontalCenter\n\n\nHorizontal center alignment\n\n\n\n\n\n\n\n\nVerticalCenter\n\n\nVertical center alignment\n\n\n\n\n\n\n\n\n\n\nBorder alignment\n\n\nWe can place a Widget below Canvas, and perform the following tests:\n\n\nLeft alignment, left border distance 100 px\uff1a\n\n\n\n\nBottom alignment, left border distance 50%\uff1a\n\n\nThe percentage will take the width or height of the parent object as a benchmark\n\n\n\nBottom right alignment, border distance 0 px\uff1a\n\n\n\n\nCenter alignment\n\n\nHorizontal center alignment:\n\n\n\n\nVertical center alignment and right border distance 50%:\n\n\n\n\nLimit size\n\n\nIf you align the left and right side at the same time, or align the top and bottom at the same time, then the size will be stretched in the corresponding direction.\nLet us look at a demonstration. Place two rectangular Sprites in the scene and take the bigger one as the dialog box background and the smaller one as the button on the dialog box. Take the button node as the child node of the dialog box and set the button into Sliced mode so that you can observe the stretch effect.\n\n\nHorizontal stretch, left and right margin 10%\uff1a\n\n\n\n\nVertical stretch, no margins on each end and horizontal center alignment:\n\n\n\n\nStretch in the horizontal and vertical directions, margin 50 px\uff1a\n\n\n\n\n\n\nContinue on to read about \nButton component preference\n.", 
            "title": "_Widget"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/components/widget/index.html#widget-component-reference", 
            "text": "Widget is a frequently used UI layout component. It can make the current node automatically align to an optional position of the parent object or restrict dimensions to make your game adaptive to different resolution ratios.", 
            "title": "Widget component reference"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/components/widget/index.html#options", 
            "text": "Options  Explanation  Note      Top  Upper border alignment  After selecting, an input field will appear to set the distance between the upper border of the current node and the upper border of the parent object.    Bottom  Lower border alignment  After selecting, an input field will appear to set the distance between the lower border of the current node and the lower border of the parent object.    Left  Left border alignment  After selecting, an input field will appear to set the distance between the left border of the current node and the left border of the parent object.    Right  Right border alignment  After selecting, an input field will appear to set the distance between the right border of the current node and the right border of the parent object.    HorizontalCenter  Horizontal center alignment     VerticalCenter  Vertical center alignment", 
            "title": "Options"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/components/widget/index.html#border-alignment", 
            "text": "We can place a Widget below Canvas, and perform the following tests:", 
            "title": "Border alignment"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/components/widget/index.html#left-alignment-left-border-distance-100-px", 
            "text": "", 
            "title": "Left alignment, left border distance 100 px\uff1a"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/components/widget/index.html#bottom-alignment-left-border-distance-50", 
            "text": "The percentage will take the width or height of the parent object as a benchmark", 
            "title": "Bottom alignment, left border distance 50%\uff1a"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/components/widget/index.html#bottom-right-alignment-border-distance-0-px", 
            "text": "", 
            "title": "Bottom right alignment, border distance 0 px\uff1a"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/components/widget/index.html#center-alignment", 
            "text": "", 
            "title": "Center alignment"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/components/widget/index.html#horizontal-center-alignment", 
            "text": "", 
            "title": "Horizontal center alignment:"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/components/widget/index.html#vertical-center-alignment-and-right-border-distance-50", 
            "text": "", 
            "title": "Vertical center alignment and right border distance 50%:"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/components/widget/index.html#limit-size", 
            "text": "If you align the left and right side at the same time, or align the top and bottom at the same time, then the size will be stretched in the corresponding direction.\nLet us look at a demonstration. Place two rectangular Sprites in the scene and take the bigger one as the dialog box background and the smaller one as the button on the dialog box. Take the button node as the child node of the dialog box and set the button into Sliced mode so that you can observe the stretch effect.", 
            "title": "Limit size"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/components/widget/index.html#horizontal-stretch-left-and-right-margin-10", 
            "text": "", 
            "title": "Horizontal stretch, left and right margin 10%\uff1a"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/components/widget/index.html#vertical-stretch-no-margins-on-each-end-and-horizontal-center-alignment", 
            "text": "", 
            "title": "Vertical stretch, no margins on each end and horizontal center alignment:"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/components/widget/index.html#stretch-in-the-horizontal-and-vertical-directions-margin-50-px", 
            "text": "Continue on to read about  Button component preference .", 
            "title": "Stretch in the horizontal and vertical directions, margin 50 px\uff1a"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/components/progress/index.html", 
            "text": "ProgressBar component reference\n\n\nProgressBar is usually used to show the progress of a certain operation in the game. Add the ProgressBar component to a node and associate a\nBar Sprite to this component. The Bar Sprite can then be controlled to show progress in the scene.\n\n\n\n\nClick the \nadd component\n button at the bottom of the \nInspector\n and select \nProgressBar\n from \nadd UI component\n? You can then add the ProgressBar component to the node.\n\n\nProgressBar attribute\n\n\n\n\n\n\n\n\nAttribute\n\n\nFunction Explanation\n\n\n\n\n\n\n\n\n\n\nBar Sprite\n\n\nThe Sprite component needed for rendering ProgressBar. It can be linked by dragging a node with the \nSprite\n component to this attribute.\n\n\n\n\n\n\nMode\n\n\nCurrently supports the horizontal and vertical modes. The initial direction can be changed by cooperating with the \nReverse\n attribute.\n\n\n\n\n\n\nTotal Length\n\n\nThe total length/total width of the Bar Sprite when the ProgressBar is at 100%.\n\n\n\n\n\n\nProgress\n\n\nFloating point. The data range is 0~1; values beyond that are not allowed.\n\n\n\n\n\n\nReverse\n\n\nBoolean value. The default filling direction is from left to right/bottom to top. You can switch between the two after it has been opened.\n\n\n\n\n\n\n\n\nDetailed explanation\n\n\nAfter adding the ProgressBar component, drag a node with the \nSprite\n component from the \nHierarchy\n to the Bar Sprite attribute. You can then control the display of the ProgressBar by dragging the progress sliding block.\n\n\nBar Sprite could be its own node, child node or any node that comes with the \nSprite\n component. Also, Bar Sprite can freely choose the Simple or\nSliced rendering modes.\n\n\n\n\nContinue on to read about \nMask component reference\n.", 
            "title": "_Progress"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/components/progress/index.html#progressbar-component-reference", 
            "text": "ProgressBar is usually used to show the progress of a certain operation in the game. Add the ProgressBar component to a node and associate a\nBar Sprite to this component. The Bar Sprite can then be controlled to show progress in the scene.   Click the  add component  button at the bottom of the  Inspector  and select  ProgressBar  from  add UI component ? You can then add the ProgressBar component to the node.", 
            "title": "ProgressBar component reference"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/components/progress/index.html#progressbar-attribute", 
            "text": "Attribute  Function Explanation      Bar Sprite  The Sprite component needed for rendering ProgressBar. It can be linked by dragging a node with the  Sprite  component to this attribute.    Mode  Currently supports the horizontal and vertical modes. The initial direction can be changed by cooperating with the  Reverse  attribute.    Total Length  The total length/total width of the Bar Sprite when the ProgressBar is at 100%.    Progress  Floating point. The data range is 0~1; values beyond that are not allowed.    Reverse  Boolean value. The default filling direction is from left to right/bottom to top. You can switch between the two after it has been opened.", 
            "title": "ProgressBar attribute"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/components/progress/index.html#detailed-explanation", 
            "text": "After adding the ProgressBar component, drag a node with the  Sprite  component from the  Hierarchy  to the Bar Sprite attribute. You can then control the display of the ProgressBar by dragging the progress sliding block.  Bar Sprite could be its own node, child node or any node that comes with the  Sprite  component. Also, Bar Sprite can freely choose the Simple or\nSliced rendering modes.   Continue on to read about  Mask component reference .", 
            "title": "Detailed explanation"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/components/button/index.html", 
            "text": "Button component reference\n\n\nThe button component responds to a click from the user. When the user clicks a Button, its status will change. In addition, users can assign a custom behavior to buttons' click event.\n\n\n\n\n\n\nClick the \u2018add component\u2019 button at the bottom of the \nInspector\n and select \u2018Button\u2019 from \u2018add UI component\u2019. You can then add the Button component to the node.\n\n\nButton attribute\n\n\n\n\n\n\n\n\nAttribute\n\n\nFunction explanation\n\n\n\n\n\n\n\n\n\n\nInteractable\n\n\nBoolean type, if set to false then the Button component enters the forbidden state.\n\n\n\n\n\n\nTransition\n\n\nEnumeration type, including NONE, COLOR and SPRITE. Each type corresponds to a different Transition setting. Please check more detailed information in the chapter \u2018Button Transition\u2019.\n\n\n\n\n\n\nClick Event\n\n\nDefault list type is null. Each event added by the user is composed of the node reference, component name and a response function. Please check more detailed information in the chapter \u2018Button Event\u2019.\n\n\n\n\n\n\n\n\nButton Transition\n\n\nButton Transition is used to indicate the status of the Button when clicked by the user. Currently the types available are NONE, COLOR and SPRITE.\n\n\n\n\nColor Transition\n\n\n\n\n\n\n\n\n\n\nAttribute\n\n\nFunction Explanation\n\n\n\n\n\n\n\n\n\n\nNormal\n\n\nColor of Button under Normal status.\n\n\n\n\n\n\nPressed\n\n\nColor of Button under Pressed status.\n\n\n\n\n\n\nHover\n\n\nColor of Button under Hover status.\n\n\n\n\n\n\nDisabled\n\n\nColor of Button under Disabled status.\n\n\n\n\n\n\nDuration\n\n\nTime interval needed for Button status switching.\n\n\n\n\n\n\n\n\nSprite Transition\n\n\n\n\n\n\n\n\n\n\nAttribute\n\n\nFunction Explanation\n\n\n\n\n\n\n\n\n\n\nNormal\n\n\nSpriteFrame of Button under Normal status.\n\n\n\n\n\n\nPressed\n\n\nSpriteFrame of Button under Pressed status.\n\n\n\n\n\n\nHover\n\n\nSpriteFrame of Button under Hover status.\n\n\n\n\n\n\nDisabled\n\n\nSpriteFrame of Button under Disabled status.\n\n\n\n\n\n\n\n\nButton event\n\n\n\n\n\n\n\n\n\n\nAttribute\n\n\nFunction Explanation\n\n\n\n\n\n\n\n\n\n\nTarget\n\n\nNode with the script component.\n\n\n\n\n\n\nComponent\n\n\nScript component name.\n\n\n\n\n\n\nHandler\n\n\nAssign a call-back function which will be triggered when the user clicks and releases the Button.\n\n\n\n\n\n\n\n\nDetailed explanation\n\n\nButton currently only supports the On Click event. This means only when users click and release the Button will the corresponding call-back function be triggered.\n\n\n\n\nContinue on to read about \nProgressBar Component reference\n.", 
            "title": "_Button"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/components/button/index.html#button-component-reference", 
            "text": "The button component responds to a click from the user. When the user clicks a Button, its status will change. In addition, users can assign a custom behavior to buttons' click event.    Click the \u2018add component\u2019 button at the bottom of the  Inspector  and select \u2018Button\u2019 from \u2018add UI component\u2019. You can then add the Button component to the node.", 
            "title": "Button component reference"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/components/button/index.html#button-attribute", 
            "text": "Attribute  Function explanation      Interactable  Boolean type, if set to false then the Button component enters the forbidden state.    Transition  Enumeration type, including NONE, COLOR and SPRITE. Each type corresponds to a different Transition setting. Please check more detailed information in the chapter \u2018Button Transition\u2019.    Click Event  Default list type is null. Each event added by the user is composed of the node reference, component name and a response function. Please check more detailed information in the chapter \u2018Button Event\u2019.", 
            "title": "Button attribute"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/components/button/index.html#button-transition", 
            "text": "Button Transition is used to indicate the status of the Button when clicked by the user. Currently the types available are NONE, COLOR and SPRITE.", 
            "title": "Button Transition"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/components/button/index.html#color-transition", 
            "text": "Attribute  Function Explanation      Normal  Color of Button under Normal status.    Pressed  Color of Button under Pressed status.    Hover  Color of Button under Hover status.    Disabled  Color of Button under Disabled status.    Duration  Time interval needed for Button status switching.", 
            "title": "Color Transition"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/components/button/index.html#sprite-transition", 
            "text": "Attribute  Function Explanation      Normal  SpriteFrame of Button under Normal status.    Pressed  SpriteFrame of Button under Pressed status.    Hover  SpriteFrame of Button under Hover status.    Disabled  SpriteFrame of Button under Disabled status.", 
            "title": "Sprite Transition"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/components/button/index.html#button-event", 
            "text": "Attribute  Function Explanation      Target  Node with the script component.    Component  Script component name.    Handler  Assign a call-back function which will be triggered when the user clicks and releases the Button.", 
            "title": "Button event"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/components/button/index.html#detailed-explanation", 
            "text": "Button currently only supports the On Click event. This means only when users click and release the Button will the corresponding call-back function be triggered.   Continue on to read about  ProgressBar Component reference .", 
            "title": "Detailed explanation"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/components/mask/index.html", 
            "text": "Mask component reference\n\n\nMask is used to specify the range where the child node can perform rendering. Nodes with a component that contains Mask will use a bounding box (which has the range specified by \u6187ize? of this node to create a rendered mask.  All of the child nodes of this node will clip according to this mask and the area outside the mask won't be rendered.\n\n\n\n\nClick the \nadd component\n button at the bottom of the \nInspector\n and select \nTask\n from \nadd rendering component\n? You can then add the Mask component to the node.\n\n\nMask attribute\n\n\n\n\n\n\n\n\nAttribute\n\n\nFunction Explanation\n\n\n\n\n\n\n\n\n\n\nNA\n\n\nNA\n\n\n\n\n\n\n\n\nDetailed explanation\n\n\nAfter adding the Mask component to a node, all the child nodes of this node will be affected by Mask during rendering.\n\n\n\n\nContinue on to read about \nScrollView component reference\n.", 
            "title": "_Mask"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/components/mask/index.html#mask-component-reference", 
            "text": "Mask is used to specify the range where the child node can perform rendering. Nodes with a component that contains Mask will use a bounding box (which has the range specified by \u6187ize? of this node to create a rendered mask.  All of the child nodes of this node will clip according to this mask and the area outside the mask won't be rendered.   Click the  add component  button at the bottom of the  Inspector  and select  Task  from  add rendering component ? You can then add the Mask component to the node.", 
            "title": "Mask component reference"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/components/mask/index.html#mask-attribute", 
            "text": "Attribute  Function Explanation      NA  NA", 
            "title": "Mask attribute"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/components/mask/index.html#detailed-explanation", 
            "text": "After adding the Mask component to a node, all the child nodes of this node will be affected by Mask during rendering.   Continue on to read about  ScrollView component reference .", 
            "title": "Detailed explanation"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/components/scrollview/index.html", 
            "text": "ScrollView component reference\n\n\nScrollView is a container with a scroll function. It provides a way to browse more contents within a limited display area. Generally, ScrollView will be used\nalong with the \nTask\n component and the \nScrollBar\n component can also be added to show the location of the browsing content.\n\n\n\n\n\n\nClick the \nadd component\n button at the bottom of the \nInspector\n and select \nScrollView\n from \nadd UI component\n You can then add the ScrollView component to the node.\n\n\nScrollView attribute\n\n\n\n\n\n\n\n\nAttribute\n\n\nFunction Explanation\n\n\n\n\n\n\n\n\n\n\nContent\n\n\nA reference node for creating scrollable content from ScrollView. It could be a node containing a very large picture.\n\n\n\n\n\n\nHorizontal\n\n\nBoolean value, whether horizontal scroll is allowed or not.\n\n\n\n\n\n\nVertical\n\n\nBoolean value, whether vertical scroll is allowed or not.\n\n\n\n\n\n\nInertia\n\n\nIs there an accelerating velocity when scrolling?\n\n\n\n\n\n\nBrake\n\n\nFloating point number, the deceleration coefficient after scrolling. The value range is 0-1 where if set to 1, then the scroll will stop immediately; if set to 0, then the scroll will continue until the content border.\n\n\n\n\n\n\nElastic\n\n\nBoolean value, whether to bounce back or not.\n\n\n\n\n\n\nBounce Duration\n\n\nFloating point number, the time duration for bounce back. The calue range is 0-10.\n\n\n\n\n\n\nHorizontal ScrollBar\n\n\nA reference node for creating a scroll bar showing the horizontal position of the contents.\n\n\n\n\n\n\nVertical ScrollBar\n\n\nA reference node for creating a scroll bar showing vertical position of the contents.\n\n\n\n\n\n\n\n\nDetailed explanation\n\n\nThe ScrollView component can only work with the specified content node. It calculates location information during scrolling using both the designated scroll direction and the length of the content node in this direction. The content node can also set to auto resize through the \nUI Widget\n?\n\n\nNormally a ScrollView node tree resembles the following:\n\n\n\n\nHere, the Viewport is used to define a scroll area that can be displayed. As a result, the Mask component will normally be added to the Viewport. Contents that can scroll can be put in the content node or added to its child node.\n\n\nScrollBar settings\n\n\nScrollBar is optional. You can choose to set either a horizontal or vertical ScrollBar or of course set them both.\n\n\nTo build a connection, you can drag a node with the ScrollBar component in the \nHierarchy\n over to the corresponding field in ScrollView.\n\n\n\n\nContinue on to read about \nScrollBar component reference\n.", 
            "title": "_Scrollview"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/components/scrollview/index.html#scrollview-component-reference", 
            "text": "ScrollView is a container with a scroll function. It provides a way to browse more contents within a limited display area. Generally, ScrollView will be used\nalong with the  Task  component and the  ScrollBar  component can also be added to show the location of the browsing content.    Click the  add component  button at the bottom of the  Inspector  and select  ScrollView  from  add UI component  You can then add the ScrollView component to the node.", 
            "title": "ScrollView component reference"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/components/scrollview/index.html#scrollview-attribute", 
            "text": "Attribute  Function Explanation      Content  A reference node for creating scrollable content from ScrollView. It could be a node containing a very large picture.    Horizontal  Boolean value, whether horizontal scroll is allowed or not.    Vertical  Boolean value, whether vertical scroll is allowed or not.    Inertia  Is there an accelerating velocity when scrolling?    Brake  Floating point number, the deceleration coefficient after scrolling. The value range is 0-1 where if set to 1, then the scroll will stop immediately; if set to 0, then the scroll will continue until the content border.    Elastic  Boolean value, whether to bounce back or not.    Bounce Duration  Floating point number, the time duration for bounce back. The calue range is 0-10.    Horizontal ScrollBar  A reference node for creating a scroll bar showing the horizontal position of the contents.    Vertical ScrollBar  A reference node for creating a scroll bar showing vertical position of the contents.", 
            "title": "ScrollView attribute"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/components/scrollview/index.html#detailed-explanation", 
            "text": "The ScrollView component can only work with the specified content node. It calculates location information during scrolling using both the designated scroll direction and the length of the content node in this direction. The content node can also set to auto resize through the  UI Widget ?  Normally a ScrollView node tree resembles the following:   Here, the Viewport is used to define a scroll area that can be displayed. As a result, the Mask component will normally be added to the Viewport. Contents that can scroll can be put in the content node or added to its child node.", 
            "title": "Detailed explanation"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/components/scrollview/index.html#scrollbar-settings", 
            "text": "ScrollBar is optional. You can choose to set either a horizontal or vertical ScrollBar or of course set them both.  To build a connection, you can drag a node with the ScrollBar component in the  Hierarchy  over to the corresponding field in ScrollView.   Continue on to read about  ScrollBar component reference .", 
            "title": "ScrollBar settings"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/components/scrollbar/index.html", 
            "text": "ScrollBar component reference\n\n\nScrollBar allows the user to scroll a picture (not currently supported in the public beta version) by dragging a sliding block. It's a bit similar to the \u2018Slider\u2019 component, but it is mostly used for scrolling while Slider is used to set values.\n\n\n\n\nClick the \u2018add component\u2019 button at the bottom of the \nInspector\n and select \u2018ScrollBar\u2019 from \u2018add UI component\u2019. You can then add the ScrollBar component to the node.\n\n\nScrollBar attribute\n\n\n\n\n\n\n\n\nAttribute\n\n\nFunction Explanation\n\n\n\n\n\n\n\n\n\n\nHandle\n\n\nScrollBar foreground picture. Its length/width will be calculated according to the content size of ScrollView and the dimensions of the actual display area.\n\n\n\n\n\n\nDirection\n\n\nScroll direction. You can currently select from either horizontal or vertical.\n\n\n\n\n\n\nEnable Auto Hide\n\n\nEnable or disable auto hide. If it is enabled, then \u2018Auto Hide Time\u2019 will hide automatically after the ScrollBar is shown.\n\n\n\n\n\n\nAuto Hide Time\n\n\nAuto hide time; need to set \nEnable Auto Hide\n along with it.\n\n\n\n\n\n\n\n\nDetailed explanation\n\n\nScrollBar normally is used together with \u2018ScrollView\u2019 instead of being used alone. Also, ScrollBar needs to assign a \u2018Sprite\u2019 component, i.e. \u2018Handle\u2019 in the attribute panel.\n\n\nNormally we will also designate a background picture to ScrollBar. This can be used to indicate the length or width of the whole of the ScrollBar.\n\n\n\n\nContinue on to read about \nLayout component reference\n.", 
            "title": "_Scrollbar"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/components/scrollbar/index.html#scrollbar-component-reference", 
            "text": "ScrollBar allows the user to scroll a picture (not currently supported in the public beta version) by dragging a sliding block. It's a bit similar to the \u2018Slider\u2019 component, but it is mostly used for scrolling while Slider is used to set values.   Click the \u2018add component\u2019 button at the bottom of the  Inspector  and select \u2018ScrollBar\u2019 from \u2018add UI component\u2019. You can then add the ScrollBar component to the node.", 
            "title": "ScrollBar component reference"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/components/scrollbar/index.html#scrollbar-attribute", 
            "text": "Attribute  Function Explanation      Handle  ScrollBar foreground picture. Its length/width will be calculated according to the content size of ScrollView and the dimensions of the actual display area.    Direction  Scroll direction. You can currently select from either horizontal or vertical.    Enable Auto Hide  Enable or disable auto hide. If it is enabled, then \u2018Auto Hide Time\u2019 will hide automatically after the ScrollBar is shown.    Auto Hide Time  Auto hide time; need to set  Enable Auto Hide  along with it.", 
            "title": "ScrollBar attribute"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/components/scrollbar/index.html#detailed-explanation", 
            "text": "ScrollBar normally is used together with \u2018ScrollView\u2019 instead of being used alone. Also, ScrollBar needs to assign a \u2018Sprite\u2019 component, i.e. \u2018Handle\u2019 in the attribute panel.  Normally we will also designate a background picture to ScrollBar. This can be used to indicate the length or width of the whole of the ScrollBar.   Continue on to read about  Layout component reference .", 
            "title": "Detailed explanation"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/components/layout/index.html", 
            "text": "Layout component reference\n\n\nLayout is a container component. The container can unlock the auto-layout function to automatically arrange all the sub-objects according to the specifications so that the user can use it to make list, page turning and other functions conveniently.\n\n\n\n\n\n\nClick \nadd component\n button at the bottom of \nInspector\n and then select \nLayout\n from \nadd UI component\n, then you add the Layout component to the node.\n\n\nLayout attribute\n\n\n\n\n\n\n\n\nAttribute\n\n\nFunction Explanation\n\n\n\n\n\n\n\n\n\n\nLayout Type\n\n\nLayout type, currently has NONE, HORIZONTAL and VERTICAL.\n\n\n\n\n\n\nAuto Resize\n\n\nRead only attribute, indicates the current layout container will auto adapt its own size to the number and size of the sub-object.\n\n\n\n\n\n\nMargin\n\n\nThe space between the sub-object and the container frame in the layout. NONE mode doesn't have this attribute.\n\n\n\n\n\n\nSpacingX\n\n\nThe separation distance between sub-objects in the horizontal layout. NONE mode doesn't have this attribute.\n\n\n\n\n\n\nSpacingY\n\n\nThe separation distance between sub-objects in the vertical layout.NONE mode doesn't have this attribute.\n\n\n\n\n\n\nHorizontal Direction\n\n\nWhen it is designated as horizontal layout, which side does the first child node start in the layout? The left or the right? Show this attribute only when the Layout Type is HORIZONTAL.\n\n\n\n\n\n\nVertical Direction\n\n\nWhen it is designated as vertical layout, which side does the first child node start in the layout? The upside or the downside? Show this attribute only when the Layout Type is VERTICAL.\n\n\n\n\n\n\n\n\nDetailed explanation\n\n\nThe default layout type is NONE after adding the Layout component. It indicates that the container won't change size and location of the sub-object. When the user places sub-object manually, the container will take the minimum rectangular region that can contain all the sub-objects as its own size.\n\n\nYou can switch the layout container type by altering \nLayout Type\n in \nInspector\n, all the layout types currently only support \nAuto Resize\n of the container itself.\n\n\n\n\nContinue on to read about \nScript development workflow\n.", 
            "title": "_Layout"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/components/layout/index.html#layout-component-reference", 
            "text": "Layout is a container component. The container can unlock the auto-layout function to automatically arrange all the sub-objects according to the specifications so that the user can use it to make list, page turning and other functions conveniently.    Click  add component  button at the bottom of  Inspector  and then select  Layout  from  add UI component , then you add the Layout component to the node.", 
            "title": "Layout component reference"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/components/layout/index.html#layout-attribute", 
            "text": "Attribute  Function Explanation      Layout Type  Layout type, currently has NONE, HORIZONTAL and VERTICAL.    Auto Resize  Read only attribute, indicates the current layout container will auto adapt its own size to the number and size of the sub-object.    Margin  The space between the sub-object and the container frame in the layout. NONE mode doesn't have this attribute.    SpacingX  The separation distance between sub-objects in the horizontal layout. NONE mode doesn't have this attribute.    SpacingY  The separation distance between sub-objects in the vertical layout.NONE mode doesn't have this attribute.    Horizontal Direction  When it is designated as horizontal layout, which side does the first child node start in the layout? The left or the right? Show this attribute only when the Layout Type is HORIZONTAL.    Vertical Direction  When it is designated as vertical layout, which side does the first child node start in the layout? The upside or the downside? Show this attribute only when the Layout Type is VERTICAL.", 
            "title": "Layout attribute"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/components/layout/index.html#detailed-explanation", 
            "text": "The default layout type is NONE after adding the Layout component. It indicates that the container won't change size and location of the sub-object. When the user places sub-object manually, the container will take the minimum rectangular region that can contain all the sub-objects as its own size.  You can switch the layout container type by altering  Layout Type  in  Inspector , all the layout types currently only support  Auto Resize  of the container itself.   Continue on to read about  Script development workflow .", 
            "title": "Detailed explanation"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/index.html", 
            "text": "Workflow of script development\n\n\nIntroduction\n\n\nCocos Creator's script is mainly developed by the extension component. Currently, Cocos Creator supports two script languages, Javascript\nand CoffeeScript. By writing the script component and putting it into the scene node, the object in the scene will be driven.\n\n\nWhile writing the component script, you can map the variables needing adjustment onto the Inspector by declaring the properties for the designer and graphic designer to adjust.\nMeanwhile, you can initialize, update and even destroy nodes by registering a certain call-back function.\n\n\nContents\n\n\n\n\nCreate and use component script\n\n\nProperty declaration\n\n\nAccess node and other component\n\n\nLife cycle call-back\n\n\nCreate and destroy node\n\n\nLaunch and listen to events\n\n\nSystem built-in events\n\n\nUse action system\n\n\nAction list\n\n\nUse timer\n\n\nScript execution order\n\n\nNetwork interface\n\n\nUse object pool\n\n\nAcquire resource\n\n\nModular script\n\n\nThird party module reference\n\n\nDebug script in browser\n\n\nJavaScript quick-start\n\n\n\n\nReference\n\n\n\n\nAttribute parameter reference\n\n\nRecommend coding standards\n\n\nSizeProvider\n\n\n\n\n\n\n\nContinue on to read about \nCreate and use component script\n.", 
            "title": "_Getting Started"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/index.html#workflow-of-script-development", 
            "text": "", 
            "title": "Workflow of script development"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/index.html#introduction", 
            "text": "Cocos Creator's script is mainly developed by the extension component. Currently, Cocos Creator supports two script languages, Javascript\nand CoffeeScript. By writing the script component and putting it into the scene node, the object in the scene will be driven.  While writing the component script, you can map the variables needing adjustment onto the Inspector by declaring the properties for the designer and graphic designer to adjust.\nMeanwhile, you can initialize, update and even destroy nodes by registering a certain call-back function.", 
            "title": "Introduction"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/index.html#contents", 
            "text": "Create and use component script  Property declaration  Access node and other component  Life cycle call-back  Create and destroy node  Launch and listen to events  System built-in events  Use action system  Action list  Use timer  Script execution order  Network interface  Use object pool  Acquire resource  Modular script  Third party module reference  Debug script in browser  JavaScript quick-start", 
            "title": "Contents"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/index.html#reference", 
            "text": "Attribute parameter reference  Recommend coding standards  SizeProvider    Continue on to read about  Create and use component script .", 
            "title": "Reference"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/use-component/index.html", 
            "text": "Creating and using component script\n\n\nCreating component script\n\n\nIn Cocos Creator, script is also a part of the asset. You can add and select JavaScript or CoffeeScript to create a component script\nby clicking the \"create\" button in the asset editor. By this time, you will get a new script in your asset editor:\n\n\n\n\nA simple component script is as follows:\n\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n    },\n\n    // use this for initialization\n    onLoad: function () {\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    update: function (dt) {\n    },\n});\n\n\n\n\nEditing script\n\n\nCocos Creator has installed a lightweight Code Editor for editors to edit script fast. Users can also choose\ntheir preferred text tool (such as Vim, Sublime Text, Web Storm, Visual Studio...) to edit script according to their\nown need.\n\n\nBy double clicking the script asset, users can open the built-in Code Editor to edit. If you need to use the external tools, the first thing you need to do is\nto locate the asset catalog in the file system, then edit it with the help of its own text tool.\n\n\nEdit the script and save it, and Cocos Creator will automatically detect the alteration of the script and compile it quickly.\n\n\nAdding script into the scene node\n\n\nAdding the script into the scene node is actually adding a component to this node. Let's rename the new \u201cNewScript.js\u201d to\n\u201csay-hello.js\u201d. Then select the scene node you would like to add, by this time the property of this node will be shown in \nInspector\n.\nThere's an \"add component\" button at the very bottom of \nInspector\n. Click the button and choose: add user script -\n say-hello\nto add a new script component.\n\n\n\n\nIf everything goes well, you will see your script shown in \nInspector\n :\n\n\n\n\nNote:\n You can also add script by dragging script asset into \nInspector\n.\n\n\n\n\nContinue on to read about \nproperty declaration\n.", 
            "title": "_Use Component"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/use-component/index.html#creating-and-using-component-script", 
            "text": "", 
            "title": "Creating and using component script"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/use-component/index.html#creating-component-script", 
            "text": "In Cocos Creator, script is also a part of the asset. You can add and select JavaScript or CoffeeScript to create a component script\nby clicking the \"create\" button in the asset editor. By this time, you will get a new script in your asset editor:   A simple component script is as follows:  cc.Class({\n    extends: cc.Component,\n\n    properties: {\n    },\n\n    // use this for initialization\n    onLoad: function () {\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    update: function (dt) {\n    },\n});", 
            "title": "Creating component script"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/use-component/index.html#editing-script", 
            "text": "Cocos Creator has installed a lightweight Code Editor for editors to edit script fast. Users can also choose\ntheir preferred text tool (such as Vim, Sublime Text, Web Storm, Visual Studio...) to edit script according to their\nown need.  By double clicking the script asset, users can open the built-in Code Editor to edit. If you need to use the external tools, the first thing you need to do is\nto locate the asset catalog in the file system, then edit it with the help of its own text tool.  Edit the script and save it, and Cocos Creator will automatically detect the alteration of the script and compile it quickly.", 
            "title": "Editing script"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/use-component/index.html#adding-script-into-the-scene-node", 
            "text": "Adding the script into the scene node is actually adding a component to this node. Let's rename the new \u201cNewScript.js\u201d to\n\u201csay-hello.js\u201d. Then select the scene node you would like to add, by this time the property of this node will be shown in  Inspector .\nThere's an \"add component\" button at the very bottom of  Inspector . Click the button and choose: add user script -  say-hello\nto add a new script component.   If everything goes well, you will see your script shown in  Inspector  :   Note:  You can also add script by dragging script asset into  Inspector .   Continue on to read about  property declaration .", 
            "title": "Adding script into the scene node"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/properties/index.html", 
            "text": "attribute declaration\n\n\nBy employing attribute declaration in the component script, we can visually show the field of the script component in \nInspector\n so that\nwe can adjust the attribute value in the scene easily.\n\n\nTo declare the attribute, all you need to do is put the attribute name and parameters in the cc.Class defining \nproperties\n field, for instance:\n\n\n  cc.Class({\n    extends: cc.Component,\n    properties: {\n      userID: 20,\n      userName: 'Foobar'\n    }\n  });\n\n\n\n\nAt this time, you can see in \nInspector\n the two properties you just defined are shown in the inspector panel:\n\n\n\n\nDeclaration method\n\n\nIn Cocos Creator, we provide two kinds of attribute declaration methods:\n\n\nSimple declaration\n\n\nIn most cases, we can use simple declaration. When the attribute declared is the Javascript built-in type \nboolean\n,\n\nstring\n and \nnumber\n, it can be written directly into:\n\n\n  properties: {\n    foo: 20,\n    bar: 'Hello World!',\n    foobar: false,\n  }\n\n\n\n\nWhen the delared attribute type is inherited from \ncc.ValueType\n\uff08 such as \ncc.Vec2\n\uff0c\ncc.Color\n\uff0c\ncc.Size\n etc.\uff09,\nthen it can be assigned with an example, such as:\n\n\n  properties: {\n    foo: new cc.Vec2(10,20),\n    bar: new cc.Color(255, 255, 255, 128),\n  }\n\n\n\n\nWhen the delared attribute type is inherited from \ncc.Class\n \uff08such as \ncc.Node\n\uff0c\ncc.Component\n etc.\uff09, you can finish the declaration\nby writing its constructor in the delaration, such as:\n\n\n  properties: {\n    foo: cc.Node,\n    bar: cc.Sprite,\n  }\n\n\n\n\nNote:\n Other than the situations above, we all need to use complete declaration to write for other types (such as array).\n\n\nComplete declaration\n\n\nUnder some circumstances, we need to add parameters for the attribute declaration. These parameters control the attribute display mode in \nInspector\n , and\nthe attribute behavior in the serial scene process. For example:\n\n\n  properties: {\n    score: {\n      default: 0,\n      displayName: 'Score (player)',\n      tooltip: 'The score of player',\n    }\n  }\n\n\n\n\nThe code above stipulates that the attribute name of the score in \nInspector\n will be shown as \u201cScore (player)\u201d,\nand when the cursor moves on to the parameter, it will show the corresponding Tooltip.\n\n\nBelow are the general parameters. For detailed usage please refer to\nattribute parameter\n.\n\n\n\n\ndefault: set default value for attribute\n\n\ntype: restrict data type of attribute\n\n\nvisible: the attribute is invisible in the Inspector panel if set to false\n\n\nserializable: do not serialize this attribute if set to false\n\n\ndisplayName: display the assigned name on the Inspector panel\n\n\ntooltip: add Tooltip of attribute in the Inspector panel\n\n\n\n\nDeclaration method for special type\n\n\nArray declaration\n\n\nThe default of array must be set to \n[]\n, if you are about to edit in \nInspector\n, then you also need to set the type into constructor, enumeration,\nor \n'Integer'\n,\n'Float'\n,\n'Boolean'\n and \n'String'\n.\n\n\n  properties: {\n    names: {\n      default: [],\n      type: ['String']\n    },\n\n    enemies: {\n      default: [],\n      type: [cc.Node]\n    },\n  }\n\n\n\n\nget/set declaration\n\n\nAfter setting get or set in the attribute, when you access the attribute, the pre-defined get or set method will be triggered. Defining the method is as follows:\n\n\nproperties: {\n  width: {\n    get: function () {\n      return this._width;\n    },\n    set: function (value) {\n      this._width = value;\n    }\n  }\n}\n\n\n\n\nNote:\n You can define the get method only, so this is like one attribute of read only.\n\n\nFor more attribute parameters, please read \nattribute parameter\n.\n\n\n\n\nContinue on to read about \nAccess node and other component\n.", 
            "title": "_Properties"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/properties/index.html#attribute-declaration", 
            "text": "By employing attribute declaration in the component script, we can visually show the field of the script component in  Inspector  so that\nwe can adjust the attribute value in the scene easily.  To declare the attribute, all you need to do is put the attribute name and parameters in the cc.Class defining  properties  field, for instance:    cc.Class({\n    extends: cc.Component,\n    properties: {\n      userID: 20,\n      userName: 'Foobar'\n    }\n  });  At this time, you can see in  Inspector  the two properties you just defined are shown in the inspector panel:", 
            "title": "attribute declaration"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/properties/index.html#declaration-method", 
            "text": "In Cocos Creator, we provide two kinds of attribute declaration methods:", 
            "title": "Declaration method"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/properties/index.html#simple-declaration", 
            "text": "In most cases, we can use simple declaration. When the attribute declared is the Javascript built-in type  boolean , string  and  number , it can be written directly into:    properties: {\n    foo: 20,\n    bar: 'Hello World!',\n    foobar: false,\n  }  When the delared attribute type is inherited from  cc.ValueType \uff08 such as  cc.Vec2 \uff0c cc.Color \uff0c cc.Size  etc.\uff09,\nthen it can be assigned with an example, such as:    properties: {\n    foo: new cc.Vec2(10,20),\n    bar: new cc.Color(255, 255, 255, 128),\n  }  When the delared attribute type is inherited from  cc.Class  \uff08such as  cc.Node \uff0c cc.Component  etc.\uff09, you can finish the declaration\nby writing its constructor in the delaration, such as:    properties: {\n    foo: cc.Node,\n    bar: cc.Sprite,\n  }  Note:  Other than the situations above, we all need to use complete declaration to write for other types (such as array).", 
            "title": "Simple declaration"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/properties/index.html#complete-declaration", 
            "text": "Under some circumstances, we need to add parameters for the attribute declaration. These parameters control the attribute display mode in  Inspector  , and\nthe attribute behavior in the serial scene process. For example:    properties: {\n    score: {\n      default: 0,\n      displayName: 'Score (player)',\n      tooltip: 'The score of player',\n    }\n  }  The code above stipulates that the attribute name of the score in  Inspector  will be shown as \u201cScore (player)\u201d,\nand when the cursor moves on to the parameter, it will show the corresponding Tooltip.  Below are the general parameters. For detailed usage please refer to attribute parameter .   default: set default value for attribute  type: restrict data type of attribute  visible: the attribute is invisible in the Inspector panel if set to false  serializable: do not serialize this attribute if set to false  displayName: display the assigned name on the Inspector panel  tooltip: add Tooltip of attribute in the Inspector panel", 
            "title": "Complete declaration"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/properties/index.html#declaration-method-for-special-type", 
            "text": "", 
            "title": "Declaration method for special type"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/properties/index.html#array-declaration", 
            "text": "The default of array must be set to  [] , if you are about to edit in  Inspector , then you also need to set the type into constructor, enumeration,\nor  'Integer' , 'Float' , 'Boolean'  and  'String' .    properties: {\n    names: {\n      default: [],\n      type: ['String']\n    },\n\n    enemies: {\n      default: [],\n      type: [cc.Node]\n    },\n  }", 
            "title": "Array declaration"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/properties/index.html#getset-declaration", 
            "text": "After setting get or set in the attribute, when you access the attribute, the pre-defined get or set method will be triggered. Defining the method is as follows:  properties: {\n  width: {\n    get: function () {\n      return this._width;\n    },\n    set: function (value) {\n      this._width = value;\n    }\n  }\n}  Note:  You can define the get method only, so this is like one attribute of read only.  For more attribute parameters, please read  attribute parameter .   Continue on to read about  Access node and other component .", 
            "title": "get/set declaration"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/access-node-component/index.html", 
            "text": "Access node and other component\n\n\nYou can edit node and component in the \nProperties\n panel, or dynamically modify in script as well. The advantage of dynamic modification is let you modify or transit property continuously for a period of time, to achieve some easing effects. Script can also be used to respond player inputs, or modify-create-or-destroy node and component, so as to implement various game logics. To achieve these, you should acquire the node or component which you want to modify.\n\n\nIn this tutorial, we will introduce how to\n\n\n\n\nget the node which a component belongs to\n\n\nget other component\n\n\nsetup node and component in \nProperties\n panel\n\n\nfind child node\n\n\nfind node in global\n\n\naccess exists variable\n\n\n\n\nGet the node which the component belong\n\n\nGetting the node which the component belong is easy, just use \nthis.node\n variable in component:\n\n\n    start: function () {\n        var node = this.node;\n        node.x = 100;\n    }\n\n\n\n\nGet other component\n\n\nYou will get other component in the same node frequently, that is where \ngetComponent\n comes in, it help you to find the component you need.\n\n\n    start: function () {\n        var label = this.getComponent(cc.Label);\n        var text = this.name + ' started';\n\n        // Change the text in Label Component\n        label.string = text;\n    }\n\n\n\n\nYou can also pass in a class name for the \ngetComponent\n. For user defined components, the class name is simply the filename of the script, and \ncase sensitive\n. For example, if a component declared in \"SinRotate.js\", its class name will be \"SinRotate\".\n\n\n    var label = this.getComponent(\nSinRotate\n);\n\n\n\n\nThere is also a \ngetComponent\n method on node, they are the same thing.\n\n\n    start: function () {\n        cc.log( this.node.getComponent(cc.Label) === this.getComponent(cc.Label) );  // true\n    }\n\n\n\n\nIf the component does not exist in the node, \ngetComponent\n will return null. If you are trying to access a null value at runtime, the \"TypeError\" exception will be thrown. So always remember to check if you are not sure of it.\n\n\n    start: function () {\n        var label = this.getComponent(cc.Label);\n        if (label) {\n            label.string = \nHello\n;\n        }\n        else {\n            cc.error(\nSomething wrong?\n);\n        }\n    }\n\n\n\n\nGet other node and their component\n\n\nIt is not enough to access to components in the same node, scripts often need to interact between nodes. For example, a cannon which takes aim at player by itself, need to constantly get player's position. Cocos Creator provider some different ways to retrieve other node and their component.\n\n\nUse Properties panel to link node\n\n\nThe most obvious and straightforward is to set object in \nProperties\n panel. Take node as an example, it just need to declare a property which type is \ncc.Node\n:\n\n\n// Cannon.js\n\ncc.Class({\n    extends: cc.Component,\n    properties: {\n        // declare player property\n        player: {\n            default: null,\n            type: cc.Node\n        }\n    }\n});\n\n\n\n\nAbove code declared a property named \nplayer\n in \nproperties\n, its default value is null, its object type is \ncc.Node\n. It is the equivalent of the \npublic cc.Node player = null;\n statement in other programe language. In \nProperties\n panel, the component will looks like this after the script compiled:\n\n\n\n\nThen you can drag and drop any node from \nNode Tree\n panel to the Player control:\n\n\n\n\nThis way, the player property will be set successfully, you can access it in your script directly:\n\n\n// Cannon.js\n\nvar Player = require(\nPlayer\n);\n\ncc.Class({\n    extends: cc.Component,\n    properties: {\n        // declare player property\n        player: {\n            default: null,\n            type: cc.Node\n        }\n    },\n\n    start: function () {\n        var playerComp = this.player.getComponent(Player);\n        this.checkPlayer(playerComp);\n    },\n\n    // ...\n});\n\n\n\n\nUse Properties panel to link component\n\n\nIn the example above, if you set the property's type to Player component, when you drag the \"Player Node\" to \nProperties\n panel, player property will be set to the Player component in the node. Then you don't need to call \ngetComponent\n for yourself.\n\n\n// Cannon.js\n\nvar Player = require(\nPlayer\n);\n\ncc.Class({\n    extends: cc.Component,\n    properties: {\n        // declare player property, but directly use component type this time\n        player: {\n            default: null,\n            type: Player\n        }\n    },\n\n    start: function () {\n        var playerComp = this.player;\n        this.checkPlayer(playerComp);\n    },\n\n    // ...\n});\n\n\n\n\nYou can also set the property's default value from \nnull\n to an array \n[]\n, then you can set multiple objects in \nProperties\n panel.\n\nBut if you need to dynamically get other objects in runtime, you need to search them by using methods shown below.\n\n\nFind child node\n\n\nSometimes there will be many objects with the same type in game scene, such as turret, enemy and effects, they can be uniformly managed by a global script. If we use \nProperties\n panel to associate them with the script one by one, that will be a heavy workload. It is often better to manage these objects by making them all children of one parent node, then retreive all children via the parent node:\n\n\n// CannonManager.js\n\ncc.Class({\n    extends: cc.Component,\n\n    start: function () {\n        this.cannons = [];\n        this.cannons = this.node.getChildren();\n    }\n});\n\n\n\n\nThe \ngetChildren\n is the \ncc.Node\n's built-in API which returns all children in an array.\n\n\nYou can also use \ngetChildByName\n:\n\n\nthis.node.getChildByName(\nCannon 01\n);\n\n\n\n\nIf the child's hierarchy is too deep, you can use \ncc.find\n, \ncc.find\n will find step by step based on the path passed into it:\n\n\ncc.find(\nCannon 01/Barrel/SFX\n, this.node);\n\n\n\n\nFind by name globally\n\n\nWhen omit the second parameter of \ncc.find\n, it will find starts from the scene root:\n\n\nthis.backNode = cc.find(\nCanvas/Menu/Back\n);\n\n\n\n\nAccess value from exists variable\n\n\nIf you already have the reference of a node or component in somewhere, you can also access them directly, there are two ways:\n\n\nAccess by using global variable\n\n\n\n\nYou should use global variable with care and understanding, we do not recommend using it, you had better keep them readonly if really need to do that.\n\n\n\n\nLet's define a global object \nwindow.Global\n, it will contain two properties, \nbackNode\n and \nbackLabel\n.\n\n\n// Globals.js, this file can have any name\n\nwindow.Global = {\n    backNode: null,\n    backLabel: null,\n};\n\n\n\n\nBecause all scripts are declared as \"use strict\" by default, so you should not omit the \nwindow.\n when declaring global variable.\n\nThen you can directly initialize the \nGlobal\n where appropriate:\n\n\n// Back.js\n\ncc.Class({\n    extends: cc.Component,\n\n    onLoad: function () {\n        Global.backNode = this.node;\n        Global.backLabel = this.getComponent(cc.Label);\n    }\n});\n\n\n\n\nAfter initialization, you can read the value from \nGlobal\n in everywhere:\n\n\n// AnyScript.js\n\ncc.Class({\n    extends: cc.Component,\n\n    // start will be executed after onLoad, so the Global will be initialized\n    start: function () {\n        var text = 'Back';\n        Global.backLabel.string = text;\n    }\n});\n\n\n\n\n\n\nAn exception will be thrown if the global variable is not yet declared when you access to it.\n\nPlease avoid name duplication with exists global variables in the system.\n\nYou must make ensure all global variable are initialized before using.\n\n\n\n\nAccess by using module\n\n\nIf you don't want to use global variable, you can use \nrequire\n to perform operation cross-scirpts, let's look at an example:\n\n\n// Global.js, now the filename matters\n\nmodule.exports = {\n    backNode: null,\n    backLabel: null,\n};\n\n\n\n\nYou can use \nrequire\n + filename(without paths) everywhere to retreive the object exported by \"export\" from other scripts.\n\n\n// Back.js\n\n// this feels more safe since you know where the object comes from\nvar Global = require(\nGlobal\n);\n\ncc.Class({\n    extends: cc.Component,\n\n    onLoad: function () {\n        Global.backNode = this.node;\n        Global.backLabel = this.getComponent(cc.Label);\n    }\n});\n\n\n\n\n// AnyScript.js\n\n// this feels more safe since you know where the object comes from\nvar Global = require(\nGlobal\n);\n\ncc.Class({\n    extends: cc.Component,\n\n    // start will be executed after onLoad, so the Global will be initialized\n    start: function () {\n        var text = \nBack\n;\n        Global.backLabel.string = text;\n    }\n});\n\n\n\n\nFor details, please refer to \nModular script\n.\n\n\n\n\nContinue on to read about \nLife cycle call-back\n.", 
            "title": "_Access Node Component"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/access-node-component/index.html#access-node-and-other-component", 
            "text": "You can edit node and component in the  Properties  panel, or dynamically modify in script as well. The advantage of dynamic modification is let you modify or transit property continuously for a period of time, to achieve some easing effects. Script can also be used to respond player inputs, or modify-create-or-destroy node and component, so as to implement various game logics. To achieve these, you should acquire the node or component which you want to modify.  In this tutorial, we will introduce how to   get the node which a component belongs to  get other component  setup node and component in  Properties  panel  find child node  find node in global  access exists variable", 
            "title": "Access node and other component"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/access-node-component/index.html#get-the-node-which-the-component-belong", 
            "text": "Getting the node which the component belong is easy, just use  this.node  variable in component:      start: function () {\n        var node = this.node;\n        node.x = 100;\n    }", 
            "title": "Get the node which the component belong"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/access-node-component/index.html#get-other-component", 
            "text": "You will get other component in the same node frequently, that is where  getComponent  comes in, it help you to find the component you need.      start: function () {\n        var label = this.getComponent(cc.Label);\n        var text = this.name + ' started';\n\n        // Change the text in Label Component\n        label.string = text;\n    }  You can also pass in a class name for the  getComponent . For user defined components, the class name is simply the filename of the script, and  case sensitive . For example, if a component declared in \"SinRotate.js\", its class name will be \"SinRotate\".      var label = this.getComponent( SinRotate );  There is also a  getComponent  method on node, they are the same thing.      start: function () {\n        cc.log( this.node.getComponent(cc.Label) === this.getComponent(cc.Label) );  // true\n    }  If the component does not exist in the node,  getComponent  will return null. If you are trying to access a null value at runtime, the \"TypeError\" exception will be thrown. So always remember to check if you are not sure of it.      start: function () {\n        var label = this.getComponent(cc.Label);\n        if (label) {\n            label.string =  Hello ;\n        }\n        else {\n            cc.error( Something wrong? );\n        }\n    }", 
            "title": "Get other component"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/access-node-component/index.html#get-other-node-and-their-component", 
            "text": "It is not enough to access to components in the same node, scripts often need to interact between nodes. For example, a cannon which takes aim at player by itself, need to constantly get player's position. Cocos Creator provider some different ways to retrieve other node and their component.", 
            "title": "Get other node and their component"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/access-node-component/index.html#use-properties-panel-to-link-node", 
            "text": "The most obvious and straightforward is to set object in  Properties  panel. Take node as an example, it just need to declare a property which type is  cc.Node :  // Cannon.js\n\ncc.Class({\n    extends: cc.Component,\n    properties: {\n        // declare player property\n        player: {\n            default: null,\n            type: cc.Node\n        }\n    }\n});  Above code declared a property named  player  in  properties , its default value is null, its object type is  cc.Node . It is the equivalent of the  public cc.Node player = null;  statement in other programe language. In  Properties  panel, the component will looks like this after the script compiled:   Then you can drag and drop any node from  Node Tree  panel to the Player control:   This way, the player property will be set successfully, you can access it in your script directly:  // Cannon.js\n\nvar Player = require( Player );\n\ncc.Class({\n    extends: cc.Component,\n    properties: {\n        // declare player property\n        player: {\n            default: null,\n            type: cc.Node\n        }\n    },\n\n    start: function () {\n        var playerComp = this.player.getComponent(Player);\n        this.checkPlayer(playerComp);\n    },\n\n    // ...\n});", 
            "title": "Use Properties panel to link node"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/access-node-component/index.html#use-properties-panel-to-link-component", 
            "text": "In the example above, if you set the property's type to Player component, when you drag the \"Player Node\" to  Properties  panel, player property will be set to the Player component in the node. Then you don't need to call  getComponent  for yourself.  // Cannon.js\n\nvar Player = require( Player );\n\ncc.Class({\n    extends: cc.Component,\n    properties: {\n        // declare player property, but directly use component type this time\n        player: {\n            default: null,\n            type: Player\n        }\n    },\n\n    start: function () {\n        var playerComp = this.player;\n        this.checkPlayer(playerComp);\n    },\n\n    // ...\n});  You can also set the property's default value from  null  to an array  [] , then you can set multiple objects in  Properties  panel. \nBut if you need to dynamically get other objects in runtime, you need to search them by using methods shown below.", 
            "title": "Use Properties panel to link component"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/access-node-component/index.html#find-child-node", 
            "text": "Sometimes there will be many objects with the same type in game scene, such as turret, enemy and effects, they can be uniformly managed by a global script. If we use  Properties  panel to associate them with the script one by one, that will be a heavy workload. It is often better to manage these objects by making them all children of one parent node, then retreive all children via the parent node:  // CannonManager.js\n\ncc.Class({\n    extends: cc.Component,\n\n    start: function () {\n        this.cannons = [];\n        this.cannons = this.node.getChildren();\n    }\n});  The  getChildren  is the  cc.Node 's built-in API which returns all children in an array.  You can also use  getChildByName :  this.node.getChildByName( Cannon 01 );  If the child's hierarchy is too deep, you can use  cc.find ,  cc.find  will find step by step based on the path passed into it:  cc.find( Cannon 01/Barrel/SFX , this.node);", 
            "title": "Find child node"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/access-node-component/index.html#find-by-name-globally", 
            "text": "When omit the second parameter of  cc.find , it will find starts from the scene root:  this.backNode = cc.find( Canvas/Menu/Back );", 
            "title": "Find by name globally"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/access-node-component/index.html#access-value-from-exists-variable", 
            "text": "If you already have the reference of a node or component in somewhere, you can also access them directly, there are two ways:", 
            "title": "Access value from exists variable"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/access-node-component/index.html#access-by-using-module", 
            "text": "If you don't want to use global variable, you can use  require  to perform operation cross-scirpts, let's look at an example:  // Global.js, now the filename matters\n\nmodule.exports = {\n    backNode: null,\n    backLabel: null,\n};  You can use  require  + filename(without paths) everywhere to retreive the object exported by \"export\" from other scripts.  // Back.js\n\n// this feels more safe since you know where the object comes from\nvar Global = require( Global );\n\ncc.Class({\n    extends: cc.Component,\n\n    onLoad: function () {\n        Global.backNode = this.node;\n        Global.backLabel = this.getComponent(cc.Label);\n    }\n});  // AnyScript.js\n\n// this feels more safe since you know where the object comes from\nvar Global = require( Global );\n\ncc.Class({\n    extends: cc.Component,\n\n    // start will be executed after onLoad, so the Global will be initialized\n    start: function () {\n        var text =  Back ;\n        Global.backLabel.string = text;\n    }\n});  For details, please refer to  Modular script .   Continue on to read about  Life cycle call-back .", 
            "title": "Access by using module"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/life-cycle-callbacks/index.html", 
            "text": "Life cycle call-back\n\n\nCocos Creator provides the life cycle call-back function for component script. Users can write the script in a specific period by defining a specific function call-back.\nCurrently, the life-cycle call-back functions provided for users are:\n\n\n\n\nonLoad\n\n\nstart\n\n\nupdate\n\n\nlateUpdate\n\n\nonDestroy\n\n\nonEnable\n\n\nonDisable\n\n\n\n\nonLoad\n\n\nIn the initialization phase of the component script, we provide the \nonLoad\n call-back function. \nonLoad\n call-back will be triggered when the scene has this component being loaded.\n The \nonLoad\n phase guarantees you can get other nodes from the scene and the resource data associated with the node. Normally,\nwe will do some operation associated with initialization in the \nonLoad\n phase. For example:\n\n\ncc.Class({\n  extends: cc.Component,\n\n  properties: {\n    bulletSprite: cc.SpriteFrame,\n    gun: cc.Node,\n  },\n\n  onLoad: function () {\n    this._bulletRect = this.bulletSprite.getRect();\n    this.gun = cc.find('hand/weapon', this.node);\n  },\n});\n\n\n\n\nstart\n\n\nThe \nstart\n call-back function will be triggered before the first activation of the component, which is before executing \nupdate\n for the first time.\n\nstart\n is usually used to initialize some intermediate state data which may have changed during update and frequently enables and disables.\n\n\nNote:\n When the component shifts back from a disabled state to an enabled state, \nstart\n will be called-back again.\n\n\ncc.Class({\n  extends: cc.Component,\n\n  start: function () {\n    this._timer = 0.0;\n  },\n\n  update: function (dt) {\n    this._timer += dt;\n    if ( this._timer \n= 10.0 ) {\n      console.log('I am done!');\n      this.enabled = false;\n    }\n  },\n});\n\n\n\n\nupdate\n\n\nOne of the key points for game development is to update an object's behavior, status and orientation before rendering every frame. These update operations are normally put in the \nupdate\n call-back.\n\n\ncc.Class({\n  extends: cc.Component,\n\n  update: function (dt) {\n    this.node.setPosition( 0.0, 40.0 * dt );\n  }\n});\n\n\n\n\nlateUpdate\n\n\nupdate\n will execute before all the animations' update, but if we want to perform some extra operations after the animation update or\n want to perform other operations after \nupdate\n of all the components are done, then we'll need the \nlateUpdate\n call-back.\n\n\ncc.Class({\n  extends: cc.Component,\n\n  lateUpdate: function (dt) {\n    this.node.rotation = 20;\n  }\n});\n\n\n\n\nonEnable\n\n\nWhen the \nenabled\n property of the component turns from \nfalse\n to \ntrue\n, it will trigger \nonEnable\n call-back. If the node is created for the first time,\nand \nenabled\n is \ntrue\n, then it will be called after \nonLoad\n but before \nstart\n.\n\n\nonDisable\n\n\nWhen the \nenabled\n property of the component turns from \ntrue\n to \nfalse\n, it will activate the \nonDisable\n call-back.\n\n\nonDestroy\n\n\nWhen the component calls \ndestroy()\n, they will be collected when this frame is done. By this time, it will call the \nonDestroy\n call-back.\n\n\n\n\nContinue on to read about \ncreate and destroy nodes\n.", 
            "title": "_Life Cycle Callbacks"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/life-cycle-callbacks/index.html#life-cycle-call-back", 
            "text": "Cocos Creator provides the life cycle call-back function for component script. Users can write the script in a specific period by defining a specific function call-back.\nCurrently, the life-cycle call-back functions provided for users are:   onLoad  start  update  lateUpdate  onDestroy  onEnable  onDisable", 
            "title": "Life cycle call-back"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/life-cycle-callbacks/index.html#onload", 
            "text": "In the initialization phase of the component script, we provide the  onLoad  call-back function.  onLoad  call-back will be triggered when the scene has this component being loaded.\n The  onLoad  phase guarantees you can get other nodes from the scene and the resource data associated with the node. Normally,\nwe will do some operation associated with initialization in the  onLoad  phase. For example:  cc.Class({\n  extends: cc.Component,\n\n  properties: {\n    bulletSprite: cc.SpriteFrame,\n    gun: cc.Node,\n  },\n\n  onLoad: function () {\n    this._bulletRect = this.bulletSprite.getRect();\n    this.gun = cc.find('hand/weapon', this.node);\n  },\n});", 
            "title": "onLoad"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/life-cycle-callbacks/index.html#start", 
            "text": "The  start  call-back function will be triggered before the first activation of the component, which is before executing  update  for the first time. start  is usually used to initialize some intermediate state data which may have changed during update and frequently enables and disables.  Note:  When the component shifts back from a disabled state to an enabled state,  start  will be called-back again.  cc.Class({\n  extends: cc.Component,\n\n  start: function () {\n    this._timer = 0.0;\n  },\n\n  update: function (dt) {\n    this._timer += dt;\n    if ( this._timer  = 10.0 ) {\n      console.log('I am done!');\n      this.enabled = false;\n    }\n  },\n});", 
            "title": "start"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/life-cycle-callbacks/index.html#update", 
            "text": "One of the key points for game development is to update an object's behavior, status and orientation before rendering every frame. These update operations are normally put in the  update  call-back.  cc.Class({\n  extends: cc.Component,\n\n  update: function (dt) {\n    this.node.setPosition( 0.0, 40.0 * dt );\n  }\n});", 
            "title": "update"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/life-cycle-callbacks/index.html#lateupdate", 
            "text": "update  will execute before all the animations' update, but if we want to perform some extra operations after the animation update or\n want to perform other operations after  update  of all the components are done, then we'll need the  lateUpdate  call-back.  cc.Class({\n  extends: cc.Component,\n\n  lateUpdate: function (dt) {\n    this.node.rotation = 20;\n  }\n});", 
            "title": "lateUpdate"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/life-cycle-callbacks/index.html#onenable", 
            "text": "When the  enabled  property of the component turns from  false  to  true , it will trigger  onEnable  call-back. If the node is created for the first time,\nand  enabled  is  true , then it will be called after  onLoad  but before  start .", 
            "title": "onEnable"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/life-cycle-callbacks/index.html#ondisable", 
            "text": "When the  enabled  property of the component turns from  true  to  false , it will activate the  onDisable  call-back.", 
            "title": "onDisable"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/life-cycle-callbacks/index.html#ondestroy", 
            "text": "When the component calls  destroy() , they will be collected when this frame is done. By this time, it will call the  onDestroy  call-back.   Continue on to read about  create and destroy nodes .", 
            "title": "onDestroy"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/create-destroy/index.html", 
            "text": "Create and destroy nodes\n\n\nCreate new nodes\n\n\nBesides creating nodes by using the scene editor, we can create nodes dynamically in script. Add it into the scene by \nnew cc.Node()\n\nto complete the whole constructive process.\n\n\nBelow is a simple example:\n\n\ncc.Class({\n  extends: cc.Component,\n\n  properties: {\n    sprite: {\n      default: null,\n      type: cc.SpriteFrame,\n    },\n  },\n\n  start: function () {\n    var node = new cc.Node('sprite ' + this.count);\n    var sp = node.addComponent(cc.Sprite);\n\n    sp.spriteFrame = this.sprite;\n    node.parent = this.node;\n    node.setPosition(0,0);\n  },\n});\n\n\n\n\nClone the existing node\n\n\nSometimes we want to clone the existing node dynamically in the scene, it can be done by \ncc.instantiate\n. Here is how it is done:\n\n\ncc.Class({\n  extends: cc.Component,\n\n  properties: {\n    target: {\n      default: null,\n      type: cc.Node,\n    },\n  },\n\n  start: function () {\n    var scene = cc.director.getScene();\n    var node = cc.instantiate(this.target);\n\n    node.parent = scene;\n    node.setPosition(0,0);\n  },\n});\n\n\n\n\nCreate preset node\n\n\nLike cloning the existing node, you set your prefab node and create by \ncc.instantiate\n. Here is how it's done:\n\n\ncc.Class({\n  extends: cc.Component,\n\n  properties: {\n    target: {\n      default: null,\n      type: cc.Prefab,\n    },\n  },\n\n  start: function () {\n    var scene = cc.director.getScene();\n    var node = cc.instantiate(this.target);\n\n    node.parent = scene;\n    node.setPosition(0,0);\n  },\n});\n\n\n\n\nDestroy node\n\n\nNodes can be destroyed by the function \nnode.destroy()\n. It's worth mentioning that node destroying will not happen immediately, but\nwill be executed after the logic update for the present frame is complete. After a node is destroyed, it is in the invalid state. By \ncc.isValid\n,\nthe present node can be judged whether it is destroyed or not.\n\n\nHere is how to use it:\n\n\ncc.Class({\n  extends: cc.Component,\n\n  properties: {\n    target: cc.Node,\n  },\n\n  start: function () {\n    setTimeout(function () {\n      this.target.destroy();\n    }.bind(this), 5000);\n  },\n\n  update: function (dt) {\n    if ( !cc.isValid(this.target) ) {\n      this.enabled = false;\n      return;\n    }\n\n    this.target.rotation += dt * 10.0;\n  },\n});\n\n\n\n\n\n\nContinue on to read about \nlaunch and monitor events\n.", 
            "title": "_Create Destroy"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/create-destroy/index.html#create-and-destroy-nodes", 
            "text": "", 
            "title": "Create and destroy nodes"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/create-destroy/index.html#create-new-nodes", 
            "text": "Besides creating nodes by using the scene editor, we can create nodes dynamically in script. Add it into the scene by  new cc.Node() \nto complete the whole constructive process.  Below is a simple example:  cc.Class({\n  extends: cc.Component,\n\n  properties: {\n    sprite: {\n      default: null,\n      type: cc.SpriteFrame,\n    },\n  },\n\n  start: function () {\n    var node = new cc.Node('sprite ' + this.count);\n    var sp = node.addComponent(cc.Sprite);\n\n    sp.spriteFrame = this.sprite;\n    node.parent = this.node;\n    node.setPosition(0,0);\n  },\n});", 
            "title": "Create new nodes"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/create-destroy/index.html#clone-the-existing-node", 
            "text": "Sometimes we want to clone the existing node dynamically in the scene, it can be done by  cc.instantiate . Here is how it is done:  cc.Class({\n  extends: cc.Component,\n\n  properties: {\n    target: {\n      default: null,\n      type: cc.Node,\n    },\n  },\n\n  start: function () {\n    var scene = cc.director.getScene();\n    var node = cc.instantiate(this.target);\n\n    node.parent = scene;\n    node.setPosition(0,0);\n  },\n});", 
            "title": "Clone the existing node"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/create-destroy/index.html#create-preset-node", 
            "text": "Like cloning the existing node, you set your prefab node and create by  cc.instantiate . Here is how it's done:  cc.Class({\n  extends: cc.Component,\n\n  properties: {\n    target: {\n      default: null,\n      type: cc.Prefab,\n    },\n  },\n\n  start: function () {\n    var scene = cc.director.getScene();\n    var node = cc.instantiate(this.target);\n\n    node.parent = scene;\n    node.setPosition(0,0);\n  },\n});", 
            "title": "Create preset node"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/create-destroy/index.html#destroy-node", 
            "text": "Nodes can be destroyed by the function  node.destroy() . It's worth mentioning that node destroying will not happen immediately, but\nwill be executed after the logic update for the present frame is complete. After a node is destroyed, it is in the invalid state. By  cc.isValid ,\nthe present node can be judged whether it is destroyed or not.  Here is how to use it:  cc.Class({\n  extends: cc.Component,\n\n  properties: {\n    target: cc.Node,\n  },\n\n  start: function () {\n    setTimeout(function () {\n      this.target.destroy();\n    }.bind(this), 5000);\n  },\n\n  update: function (dt) {\n    if ( !cc.isValid(this.target) ) {\n      this.enabled = false;\n      return;\n    }\n\n    this.target.rotation += dt * 10.0;\n  },\n});   Continue on to read about  launch and monitor events .", 
            "title": "Destroy node"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/events/index.html", 
            "text": "Listen to and launch events\n\n\nListen to events\n\n\nEven processing is done in the \ncc.Node\n. Components can register and monitor events by visiting the node \nthis.node\n. Listen to events\ncan be registered by the function \nthis.node.on()\n. The methods are as follows:\n\n\ncc.Class({\n  extends: cc.Component,\n\n  properties: {\n  },\n\n  onLoad: function () {\n    this.node.on('mousedown', function ( event ) {\n      console.log('Hello!');\n    });\n  },\n});\n\n\n\n\nWhat's worth mentioning is that the event listener function \non\n can pass to the third parameter target to bind the caller of the response function. The following two calling methods\nhave the same effect:\n\n\n// bind using the function\nthis.node.on('mousedown', function ( event ) {\n  this.enabled = false;\n}.bind(this));\n\n// use the third parameter\nthis.node.on('mousedown', function (event) {\n  this.enabled = false;\n}, this);\n\n\n\n\nBesides listening with \non\n, we can also use the \nonce\n method. The \nonce\n listener will shut the event being listened to after the listener function responds.\n\n\nShut listener\n\n\nWe can shut the corresponding event listener using \noff\n when we don't care about a certain event anymore. One thing to note is that the parameter of\n\noff\n must be in one-to-one correspondence with the parameter of \non\n in order to shut it.\n\n\nBelow are what we recommend you to put in:\n\n\ncc.Class({\n  extends: cc.Component,\n\n  _sayHello: function () {\n    console.log('Hello World');\n  },\n\n  onEnable: function () {\n    this.node.on('foobar', this._sayHello, this);\n  },\n\n  onDisable: function () {\n    this.node.off('foobar', this._sayHello, this);\n  },\n});\n\n\n\n\nLaunch event\n\n\nWe can launch an event using two ways: \nemit\n and \ndispatchEvent\n. The difference between these two is that the latter can do the event delivery.\nLet's get to know the \nemit\n event through a simple example\uff1a\n\n\ncc.Class({\n  extends: cc.Component,\n\n  onLoad: function () {\n    this.node.on('say-hello', function (event) {\n      console.log(event.detail.msg);\n    });\n  },\n\n  start: function () {\n    this.node.emit('say-hello', {\n      msg: 'Hello, this is Cocos Creator',\n    });\n  },\n});\n\n\n\n\nEvent delivery\n\n\nEvents launched by the \ndispatchEvent\n method mentioned above would enter the event delivery stage. In Cocos Creator's\nevent delivery system, we use bubble delivery. Bubble delivery will pass the event from the initiating node continually on to its parent node\nuntil it gets to the root node or is interruptedly processed by \nevent.stopPropagation()\n in the response function of some node.\n\n\n\n\nAs shown in the picture above, when we send the event \u201cfoobar\u201d from node c, if both node a and b listen to the event\u201cfoobar\u201d,\nthe event will pass to node b and a from c. For example:\n\n\n// In the component script of node c\nthis.node.dispatchEvent( new cc.Event('foobar', true) );\n\n\n\n\nIf we want to stop the event delivery after node b intercepts the event, we can call the function \nevent.stopPropagation()\n\nto do this. Detailed methods are as follows:\n\n\n// In the component script of node b\nthis.node.on('foobar', function (event) {\n  event.stopPropagation();\n});\n\n\n\n\nEvent object\n\n\nIn the call-back of the event listener, the developer will receive an event object \nevent\n of the \ncc.Event\n type. \nstopPropagation\n is the standard API of \ncc.Event\n, other important API include:\n\n\n\n\n\n\n\n\nAPI name\n\n\ntype\n\n\nmeaning\n\n\n\n\n\n\n\n\n\n\ntype\n\n\nString\n\n\ntype of the event (event name)\n\n\n\n\n\n\ntarget\n\n\ncc.Node\n\n\nprimary object received by the event\n\n\n\n\n\n\ncurrentTarget\n\n\ncc.Node\n\n\ncurrent object receiving the event; current object of the event in the bubble stage may be different from the primary object\n\n\n\n\n\n\ngetType\n\n\nFunciton\n\n\nget the type of the event\n\n\n\n\n\n\nstopPropagation\n\n\nFunction\n\n\nstop the bubble stage, the event will no longer pass on to the parent node while the rest of the listeners of the current node will still receive the event\n\n\n\n\n\n\nstopPropagationImmediate\n\n\nFunction\n\n\nstop delivering the event. The event will not pass on to the parent node and the rest of the listeners of the current node\n\n\n\n\n\n\ngetCurrentTarget\n\n\nFunction\n\n\nget the target node that is currently receiving the event\n\n\n\n\n\n\ndetail\n\n\nFunction\n\n\ncustom event information\uff08belongs to \ncc.Event.EventCustom\n\uff09\n\n\n\n\n\n\nsetUserData\n\n\nFunction\n\n\nset custom event information\uff08belongs to \ncc.Event.EventCustom\n\uff09\n\n\n\n\n\n\ngetUserData\n\n\nFunction\n\n\nget custom event information\uff08belongs to \ncc.Event.EventCustom\n\uff09\n\n\n\n\n\n\n\n\nYou can refer to the \ncc.Event\n and API files of its child category for a complete API list.\n\n\nSystem built-in event\n\n\nAbove are the general rules for listening to the event and launching the event. Cocos Creator has built in system events like mouse and touch for \ncc.Node\n. You can refer to \nInternal Events\n.", 
            "title": "_Events"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/events/index.html#listen-to-and-launch-events", 
            "text": "", 
            "title": "Listen to and launch events"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/events/index.html#listen-to-events", 
            "text": "Even processing is done in the  cc.Node . Components can register and monitor events by visiting the node  this.node . Listen to events\ncan be registered by the function  this.node.on() . The methods are as follows:  cc.Class({\n  extends: cc.Component,\n\n  properties: {\n  },\n\n  onLoad: function () {\n    this.node.on('mousedown', function ( event ) {\n      console.log('Hello!');\n    });\n  },\n});  What's worth mentioning is that the event listener function  on  can pass to the third parameter target to bind the caller of the response function. The following two calling methods\nhave the same effect:  // bind using the function\nthis.node.on('mousedown', function ( event ) {\n  this.enabled = false;\n}.bind(this));\n\n// use the third parameter\nthis.node.on('mousedown', function (event) {\n  this.enabled = false;\n}, this);  Besides listening with  on , we can also use the  once  method. The  once  listener will shut the event being listened to after the listener function responds.", 
            "title": "Listen to events"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/events/index.html#shut-listener", 
            "text": "We can shut the corresponding event listener using  off  when we don't care about a certain event anymore. One thing to note is that the parameter of off  must be in one-to-one correspondence with the parameter of  on  in order to shut it.  Below are what we recommend you to put in:  cc.Class({\n  extends: cc.Component,\n\n  _sayHello: function () {\n    console.log('Hello World');\n  },\n\n  onEnable: function () {\n    this.node.on('foobar', this._sayHello, this);\n  },\n\n  onDisable: function () {\n    this.node.off('foobar', this._sayHello, this);\n  },\n});", 
            "title": "Shut listener"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/events/index.html#launch-event", 
            "text": "We can launch an event using two ways:  emit  and  dispatchEvent . The difference between these two is that the latter can do the event delivery.\nLet's get to know the  emit  event through a simple example\uff1a  cc.Class({\n  extends: cc.Component,\n\n  onLoad: function () {\n    this.node.on('say-hello', function (event) {\n      console.log(event.detail.msg);\n    });\n  },\n\n  start: function () {\n    this.node.emit('say-hello', {\n      msg: 'Hello, this is Cocos Creator',\n    });\n  },\n});", 
            "title": "Launch event"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/events/index.html#event-delivery", 
            "text": "Events launched by the  dispatchEvent  method mentioned above would enter the event delivery stage. In Cocos Creator's\nevent delivery system, we use bubble delivery. Bubble delivery will pass the event from the initiating node continually on to its parent node\nuntil it gets to the root node or is interruptedly processed by  event.stopPropagation()  in the response function of some node.   As shown in the picture above, when we send the event \u201cfoobar\u201d from node c, if both node a and b listen to the event\u201cfoobar\u201d,\nthe event will pass to node b and a from c. For example:  // In the component script of node c\nthis.node.dispatchEvent( new cc.Event('foobar', true) );  If we want to stop the event delivery after node b intercepts the event, we can call the function  event.stopPropagation() \nto do this. Detailed methods are as follows:  // In the component script of node b\nthis.node.on('foobar', function (event) {\n  event.stopPropagation();\n});", 
            "title": "Event delivery"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/events/index.html#event-object", 
            "text": "In the call-back of the event listener, the developer will receive an event object  event  of the  cc.Event  type.  stopPropagation  is the standard API of  cc.Event , other important API include:     API name  type  meaning      type  String  type of the event (event name)    target  cc.Node  primary object received by the event    currentTarget  cc.Node  current object receiving the event; current object of the event in the bubble stage may be different from the primary object    getType  Funciton  get the type of the event    stopPropagation  Function  stop the bubble stage, the event will no longer pass on to the parent node while the rest of the listeners of the current node will still receive the event    stopPropagationImmediate  Function  stop delivering the event. The event will not pass on to the parent node and the rest of the listeners of the current node    getCurrentTarget  Function  get the target node that is currently receiving the event    detail  Function  custom event information\uff08belongs to  cc.Event.EventCustom \uff09    setUserData  Function  set custom event information\uff08belongs to  cc.Event.EventCustom \uff09    getUserData  Function  get custom event information\uff08belongs to  cc.Event.EventCustom \uff09     You can refer to the  cc.Event  and API files of its child category for a complete API list.", 
            "title": "Event object"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/events/index.html#system-built-in-event", 
            "text": "Above are the general rules for listening to the event and launching the event. Cocos Creator has built in system events like mouse and touch for  cc.Node . You can refer to  Internal Events .", 
            "title": "System built-in event"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/internal-events/index.html", 
            "text": "System built-in events\n\n\nAs stated in the last file, \ncc.Node\n has a whole set of \nevent listener and dispatch mechanisms\n. Based on this mechanism, we will provide some basic system events. This file will introduce how to use these events.\n\n\nSystem events follow the general register method, developers can register event listener not only by using the enumeration type but also by using the event name directly, the definition for the event name follows DOM event standards.\n\n\n// Use enumeration type to register\nnode.on(cc.Node.EventType.MOUSE_DOWN, function (event) {\n  console.log('Mouse down');\n}, this);\n// Use event name to register\nnode.on('mousedown', function (event) {\n  console.log('Mouse down');\n}, this);\n\n\n\n\nMouse event type and event object\n\n\nThe Mouse event will only be triggered on desktop platforms, the event types the system provides are as follows:\n\n\n\n\n\n\n\n\nenumeration object definition\n\n\ncorresponding event name\n\n\nevent trigger timing\n\n\n\n\n\n\n\n\n\n\ncc.Node.EventType.MOUSE_DOWN\n\n\n'mousedown'\n\n\ntrigger once when mouse down\n\n\n\n\n\n\ncc.Node.EventType.MOUSE_ENTER\n\n\n'mouseenter'\n\n\nwhen the mouse enters the target node region, regardless if it is down\n\n\n\n\n\n\ncc.Node.EventType.MOUSE_MOVE\n\n\n'mousemove'\n\n\nwhen the mouse moves in the target node region, regardless if it is down\n\n\n\n\n\n\ncc.Node.EventType.MOUSE_LEAVE\n\n\n'mouseleave'\n\n\nwhen the mouse leaves the target node region, regardless if it is down\n\n\n\n\n\n\ncc.Node.EventType.MOUSE_UP\n\n\n'mouseup'\n\n\ntrigger once when the mouse is released from the down state\n\n\n\n\n\n\ncc.Node.EventType.MOUSE_WHEEL\n\n\n'mousewheel'\n\n\nwhen the mouse wheel rolls\n\n\n\n\n\n\n\n\nThe important APIs of mouse events\uff08\ncc.Event.EventMouse\n\uff09are as follows\uff08\ncc.Event\n standard events API excluded\uff09\uff1a\n\n\n\n\n\n\n\n\nfunction name\n\n\nreturned value type\n\n\nmeaning\n\n\n\n\n\n\n\n\n\n\ngetScrollY\n\n\nNumber\n\n\nget the y axis distance wheel scrolled, effective only when scrolling\n\n\n\n\n\n\ngetLocation\n\n\nObject\n\n\nget mouse location object which includes x and y properties\n\n\n\n\n\n\ngetLocationX\n\n\nNumber\n\n\nget X axis location of the mouse\n\n\n\n\n\n\ngetLocationY\n\n\nNumber\n\n\nget Y axis location of the mouse\n\n\n\n\n\n\ngetDelta\n\n\nObject\n\n\nget the distance object the mouse moves since last event, which includes x and y properties\n\n\n\n\n\n\ngetButton\n\n\nNumber\n\n\ncc.Event.EventMouse.BUTTON_LEFT\n or \ncc.Event.EventMouse.BUTTON_RIGHT\n or \ncc.Event.EventMouse.BUTTON_MIDDLE\n\n\n\n\n\n\n\n\nTouch event types and event objects\n\n\nTouch event can be triggered in both mobile platforms and desktop platforms. This is designed to serve developers to debug on desktop platforms better, all you need to do is listen to touch events, touch events from mobile platforms and mouse events from desktop can be responded to at the same time. Touch event types that the system provides are as follows:\n\n\n\n\n\n\n\n\nenumeration object definition\n\n\ncorresponding event name\n\n\nevent trigger timing\n\n\n\n\n\n\n\n\n\n\ncc.Node.EventType.TOUCH_START\n\n\n'touchstart'\n\n\nwhen the finger touches the screen\n\n\n\n\n\n\ncc.Node.EventType.TOUCH_MOVE\n\n\n'touchmove'\n\n\nwhen the finger moves in the target node region on screen\n\n\n\n\n\n\ncc.Node.EventType.TOUCH_END\n\n\n'touchend'\n\n\nwhen the finger leaves screen in the target node region\n\n\n\n\n\n\ncc.Node.EventType.TOUCH_CANCEL\n\n\n'touchcancel'\n\n\nwhen the finger leaves screen outside the target node region\n\n\n\n\n\n\n\n\nThe important APIs of touch event\uff08\ncc.Event.EventTouch\n\uff09are as follows\uff08\ncc.Event\n starndard event API excluded\uff09:\n\n\n\n\n\n\n\n\nAPI name\n\n\ntype\n\n\nmeaning\n\n\n\n\n\n\n\n\n\n\ntouch\n\n\ncc.Touch\n\n\ncontact object related to the current event\n\n\n\n\n\n\n\n\nNote, touch events support multi-touch, each touch spot will send one event to the event listener. You can get all the information of touch spot from \ncc.Touch\n API:\n\n\n\n\n\n\n\n\nfunction name\n\n\nreturn value type\n\n\nmeaning\n\n\n\n\n\n\n\n\n\n\ngetID\n\n\nNumber\n\n\nidentification ID of the touch spot, can be used in multi-touch to track the touch spot\n\n\n\n\n\n\ngetLocation\n\n\nObject\n\n\nget location object of the touch spot which includes x and y properties\n\n\n\n\n\n\ngetLocationX\n\n\nNumber\n\n\nget X axis location of the touch spot\n\n\n\n\n\n\ngetLocationY\n\n\nNumber\n\n\nget Y axis location of the touch spot\n\n\n\n\n\n\ngetDelta\n\n\nObject\n\n\nget the distance object the touch spot moves since the last event, which includes x and y properties\n\n\n\n\n\n\ngetStartLocation\n\n\nObject\n\n\nget the location object the where touch spot gets down which includes x and y properties\n\n\n\n\n\n\ngetPreviousLocation\n\n\nObject\n\n\nget the location object of the touch spot at the last event which includes x and y properties\n\n\n\n\n\n\n\n\nMouse and touch event bubbles\n\n\nMouse and touch events all support the event bubbles on the node tree, take the pictures below as an example:\n\n\n\n\nIn the scene shown in the picture, node A has a child node B which has a child node C. Suppose the developer set the touch event listeners for all these three nodes, when the mouse or finger was applied in the node B region, the event will be triggered at node B first and the node B listener will receive the event. Then the node B will pass this event to its parent node, so the node A listener will receive this event. This is a basic event bubble process.\n\n\nWhen the mouse or finger presses in the node C region, the event will be triggered at node C first and notify the registered event listener at node C. Node C will notify node B of this event, and the logic in node B will check whether the touch spot is in its region. If the answer is yes, it will notify its listener, otherwise, it will do nothing. Node A will receive the event then, since node C is completely in node A, the event listener registered in node A will receive the touch down event. The above process explains the event bubble process and that the logic decides whether to dispatch the event or not based on the node region.\n\n\nExcept for the node region to decide whether to dispatch the event or not, the bubble process of mouse and touch events is no different than the general events. So, the function \nstopPropagation\n to call \nevent\n of \nstopPropagation\n can stop the bubbling process actively.\n\n\nOther events of \ncc.Node\n\n\n\n\n\n\n\n\nenumeration object definition\n\n\ncorresponding event name\n\n\nevent trigger timing\n\n\n\n\n\n\n\n\n\n\nnull\n\n\n'position-changed'\n\n\nwhen the location property is changed\n\n\n\n\n\n\nnull\n\n\n'rotation-changed'\n\n\nwhen the rotation property is changed\n\n\n\n\n\n\nnull\n\n\n'scale-changed'\n\n\nwhen the scale property is changed\n\n\n\n\n\n\nnull\n\n\n'size-changed'\n\n\nwhen the size property is changed\n\n\n\n\n\n\nnull\n\n\n'anchor-changed'\n\n\nwhen the anchor property is changed\n\n\n\n\n\n\nnull\n\n\n'color-changed'\n\n\nwhen the color property is changed\n\n\n\n\n\n\nnull\n\n\n'opacity-changed'\n\n\nwhen the transparency property is changed", 
            "title": "_Internal Events"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/internal-events/index.html#system-built-in-events", 
            "text": "As stated in the last file,  cc.Node  has a whole set of  event listener and dispatch mechanisms . Based on this mechanism, we will provide some basic system events. This file will introduce how to use these events.  System events follow the general register method, developers can register event listener not only by using the enumeration type but also by using the event name directly, the definition for the event name follows DOM event standards.  // Use enumeration type to register\nnode.on(cc.Node.EventType.MOUSE_DOWN, function (event) {\n  console.log('Mouse down');\n}, this);\n// Use event name to register\nnode.on('mousedown', function (event) {\n  console.log('Mouse down');\n}, this);", 
            "title": "System built-in events"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/internal-events/index.html#mouse-event-type-and-event-object", 
            "text": "The Mouse event will only be triggered on desktop platforms, the event types the system provides are as follows:     enumeration object definition  corresponding event name  event trigger timing      cc.Node.EventType.MOUSE_DOWN  'mousedown'  trigger once when mouse down    cc.Node.EventType.MOUSE_ENTER  'mouseenter'  when the mouse enters the target node region, regardless if it is down    cc.Node.EventType.MOUSE_MOVE  'mousemove'  when the mouse moves in the target node region, regardless if it is down    cc.Node.EventType.MOUSE_LEAVE  'mouseleave'  when the mouse leaves the target node region, regardless if it is down    cc.Node.EventType.MOUSE_UP  'mouseup'  trigger once when the mouse is released from the down state    cc.Node.EventType.MOUSE_WHEEL  'mousewheel'  when the mouse wheel rolls     The important APIs of mouse events\uff08 cc.Event.EventMouse \uff09are as follows\uff08 cc.Event  standard events API excluded\uff09\uff1a     function name  returned value type  meaning      getScrollY  Number  get the y axis distance wheel scrolled, effective only when scrolling    getLocation  Object  get mouse location object which includes x and y properties    getLocationX  Number  get X axis location of the mouse    getLocationY  Number  get Y axis location of the mouse    getDelta  Object  get the distance object the mouse moves since last event, which includes x and y properties    getButton  Number  cc.Event.EventMouse.BUTTON_LEFT  or  cc.Event.EventMouse.BUTTON_RIGHT  or  cc.Event.EventMouse.BUTTON_MIDDLE", 
            "title": "Mouse event type and event object"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/internal-events/index.html#touch-event-types-and-event-objects", 
            "text": "Touch event can be triggered in both mobile platforms and desktop platforms. This is designed to serve developers to debug on desktop platforms better, all you need to do is listen to touch events, touch events from mobile platforms and mouse events from desktop can be responded to at the same time. Touch event types that the system provides are as follows:     enumeration object definition  corresponding event name  event trigger timing      cc.Node.EventType.TOUCH_START  'touchstart'  when the finger touches the screen    cc.Node.EventType.TOUCH_MOVE  'touchmove'  when the finger moves in the target node region on screen    cc.Node.EventType.TOUCH_END  'touchend'  when the finger leaves screen in the target node region    cc.Node.EventType.TOUCH_CANCEL  'touchcancel'  when the finger leaves screen outside the target node region     The important APIs of touch event\uff08 cc.Event.EventTouch \uff09are as follows\uff08 cc.Event  starndard event API excluded\uff09:     API name  type  meaning      touch  cc.Touch  contact object related to the current event     Note, touch events support multi-touch, each touch spot will send one event to the event listener. You can get all the information of touch spot from  cc.Touch  API:     function name  return value type  meaning      getID  Number  identification ID of the touch spot, can be used in multi-touch to track the touch spot    getLocation  Object  get location object of the touch spot which includes x and y properties    getLocationX  Number  get X axis location of the touch spot    getLocationY  Number  get Y axis location of the touch spot    getDelta  Object  get the distance object the touch spot moves since the last event, which includes x and y properties    getStartLocation  Object  get the location object the where touch spot gets down which includes x and y properties    getPreviousLocation  Object  get the location object of the touch spot at the last event which includes x and y properties", 
            "title": "Touch event types and event objects"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/internal-events/index.html#mouse-and-touch-event-bubbles", 
            "text": "Mouse and touch events all support the event bubbles on the node tree, take the pictures below as an example:   In the scene shown in the picture, node A has a child node B which has a child node C. Suppose the developer set the touch event listeners for all these three nodes, when the mouse or finger was applied in the node B region, the event will be triggered at node B first and the node B listener will receive the event. Then the node B will pass this event to its parent node, so the node A listener will receive this event. This is a basic event bubble process.  When the mouse or finger presses in the node C region, the event will be triggered at node C first and notify the registered event listener at node C. Node C will notify node B of this event, and the logic in node B will check whether the touch spot is in its region. If the answer is yes, it will notify its listener, otherwise, it will do nothing. Node A will receive the event then, since node C is completely in node A, the event listener registered in node A will receive the touch down event. The above process explains the event bubble process and that the logic decides whether to dispatch the event or not based on the node region.  Except for the node region to decide whether to dispatch the event or not, the bubble process of mouse and touch events is no different than the general events. So, the function  stopPropagation  to call  event  of  stopPropagation  can stop the bubbling process actively.", 
            "title": "Mouse and touch event bubbles"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/internal-events/index.html#other-events-of-ccnode", 
            "text": "enumeration object definition  corresponding event name  event trigger timing      null  'position-changed'  when the location property is changed    null  'rotation-changed'  when the rotation property is changed    null  'scale-changed'  when the scale property is changed    null  'size-changed'  when the size property is changed    null  'anchor-changed'  when the anchor property is changed    null  'color-changed'  when the color property is changed    null  'opacity-changed'  when the transparency property is changed", 
            "title": "Other events of cc.Node"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/actions/index.html", 
            "text": "Using the action system in Cocos Creator\n\n\nIntroduction to the action system\n\n\nThe action system that Cocos Creator provides originates from Cocos2d-x with both the API and usage having been inherited. The action system can complete displacement, zoom, rotate and all the other actions of the node within a designated time.\n\n\nWhat needs to be noted is that the action system cannot replace the \nanimation system\n. What the action system provides is an API interface for programmers, while the animation system is designed within the editor. Meanwhile, they serve different usages \u2014 the action system is more suitable for making simple deformation and displacement animation while the animation system is much more powerful, you can make animation supporting all kinds of properties with the editor, including motion track and complicated animation in slow motion.\n\n\nAction system\n\n\nThe action system is easy to use, supporting the following API in \ncc.Node\n:\n\n\n// create a moving action\nvar action = cc.moveTo(2, 100, 100);\n// execute the action\nnode.runAction(action);\n// stop one action\nnode.stopAction(action);\n// stop all actions\nnode.stopActions();\n\n\n\n\nDevelopers can also set tags for the actions and control the actions by tag.\n\n\n// set tag for the action\nvar ACTION_TAG = 1;\naction.setTag(ACTION_TAG);\n// get the action by tag\nnode.getActionByTag(ACTION_TAG);\n// stop one action by tag\nnode.stopActionByTag(ACTION_TAG);\n\n\n\n\nAction categories\n\n\nCocos Creator supports various kinds of actions which can be divided into several categories:\n(Since there are too many action categories, we will not describe every action's usage in detail. The developer can check all the actions according to the \naction system API list\n.)\n\n\nBasic action\n\n\nBasic action is the action to achieve all kinds of deformation and displacement animation, for example using \ncc.moveTo\n to move the node to a certain location; using \ncc.rotateBy\n to rotate the node by a certain angle; using \ncc.scaleTo\n to zoom in and out on the node.\n\n\nBasic action can be divided into interval action and free action. Interval action is a gradual change action that is done in a certain time interval. The actions mentioned above are all interval actions which are inherited from \ncc.ActionInterval\n. Whereas free actions happen immediately and are all inherited from \ncc.ActionInstant\n, for instance, \ncc.callFunc\n is used to call the callback function; \ncc.hide\n is used to hide the node.\n\n\nContainer action\n\n\nThe container action can organize actions in different ways, below are several of the container action\u2019s usages:\n\n\n\n\nSequential action \ncc.sequence\n\n    Sequential action makes a series of child actions run one by one in sequence. For example:\n    \n// make the node move back and forth\n    var seq = cc.sequence(cc.moveBy(0.5, 200, 0), cc.moveBy(0.5, -200, 0));\n    node.runAction(seq);\n\n\nSynchronization action \ncc.spawn\n\n    Synchronization action synchronises the execution of a series of child actions. The result of the execution of these child actions will gather together to alter the properties of the node. For example:\n    \n// make the node zoom while it moves upwards\n    var spawn = cc.spawn(cc.moveBy(0.5, 0, 50), cc.scaleTo(0.5, 0.8, 1.4));\n    node.runAction(spawn);\n\n\nRepetitive action \ncc.repeat\n\n    Repetitive action is used to repeat one action several times. For example:\n    \n// make the node move back and forth 5 times\n    var seq = cc.repeat(\n                cc.sequence(\n                    cc.moveBy(2, 200, 0), \n                    cc.moveBy(2, -200, 0)\n                ), 5);\n    node.runAction(seq);\n\n\nRepeat forever action \ncc.repeatForever\n\n    As its name, this action container can make the target action repeat forever until it is stopped manually.\n    \n// move the node back and forth and keep repeating\n    var seq = cc.repeatForever(\n                cc.sequence(\n                    cc.moveBy(2, 200, 0), \n                    cc.moveBy(2, -200, 0)\n                ));\n\n\nSpeed action \ncc.speed\n\n    Speed action can alter the execution rate of the target action to make it quicker or slower.\n    \n// double the speed of the target action which means the action that took 2 seconds  before now can be done in 1 second\n    var action = cc.speed(\n                    cc.spawn(\n                        cc.moveBy(2, 0, 50), \n                        cc.scaleTo(2, 0.8, 1.4)\n                    ), 0.5);\n    node.runAction(action);\n\n\n\n\nYou can see from the above example, different container types can be combined. Besides, we provide a more convenient link-form API for the container type actions. The action objects support these three API - \nrepeat\n,\nrepeatForever\n,\nspeed\n- which will return to the action object itself and support the continued link-form call. Let's see a more complicated action example:\n\n\n// a complicated jump animation\nthis.jumpAction = cc.sequence(\n    cc.spawn(\n        cc.scaleTo(0.1, 0.8, 1.2),\n        cc.moveTo(0.1, 0, 10)\n    ),\n    cc.spawn(\n        cc.ScaleTo.create(0.2, 1, 1),\n        cc.MoveTo.create(0.2, 0, 0)\n    ),\n    cc.delayTime(0.5),\n    cc.spawn(\n        cc.ScaleTo.create(0.1, 1.2, 0.8),\n        cc.MoveTo.create(0.1, 0, -10)\n    ),\n    cc.spawn(\n        cc.ScaleTo.create(0.2, 1, 1),\n        cc.MoveTo.create(0.2, 0, 0)\n    )\n// play the animation at 1/2 speed and repeat 5 times\n).speed(2).repeat(5);\n\n\n\n\nSlow motion\n\n\nSlow motion cannot exist alone; it always exists to modify a basic action. It can be used to alter the time curve of the basic action to give the action fast in/out, ease in or other more complicated special effects. One thing we need to note is that only interval actions support slow motion:\n\n\nvar aciton = cc.scaleTo(0.5, 2, 2);\naction.easing(cc.easeIn(3.0));\n\n\n\n\nThe basic slow motion category is\ncc.ActionEase\n. You can refer to the picture below for the time curves of different slow motions:\n\n\n\n\nPictures from http://hosted.zeh.com.br/tweener/docs/en-us/\n\n\nAPI reference for specific action\n\n\nPlease refer to \nthe action system API list\n to learn which action system interfaces can be used.", 
            "title": "_Actions"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/actions/index.html#using-the-action-system-in-cocos-creator", 
            "text": "", 
            "title": "Using the action system in Cocos Creator"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/actions/index.html#introduction-to-the-action-system", 
            "text": "The action system that Cocos Creator provides originates from Cocos2d-x with both the API and usage having been inherited. The action system can complete displacement, zoom, rotate and all the other actions of the node within a designated time.  What needs to be noted is that the action system cannot replace the  animation system . What the action system provides is an API interface for programmers, while the animation system is designed within the editor. Meanwhile, they serve different usages \u2014 the action system is more suitable for making simple deformation and displacement animation while the animation system is much more powerful, you can make animation supporting all kinds of properties with the editor, including motion track and complicated animation in slow motion.", 
            "title": "Introduction to the action system"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/actions/index.html#action-system", 
            "text": "The action system is easy to use, supporting the following API in  cc.Node :  // create a moving action\nvar action = cc.moveTo(2, 100, 100);\n// execute the action\nnode.runAction(action);\n// stop one action\nnode.stopAction(action);\n// stop all actions\nnode.stopActions();  Developers can also set tags for the actions and control the actions by tag.  // set tag for the action\nvar ACTION_TAG = 1;\naction.setTag(ACTION_TAG);\n// get the action by tag\nnode.getActionByTag(ACTION_TAG);\n// stop one action by tag\nnode.stopActionByTag(ACTION_TAG);", 
            "title": "Action system"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/actions/index.html#action-categories", 
            "text": "Cocos Creator supports various kinds of actions which can be divided into several categories:\n(Since there are too many action categories, we will not describe every action's usage in detail. The developer can check all the actions according to the  action system API list .)", 
            "title": "Action categories"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/actions/index.html#basic-action", 
            "text": "Basic action is the action to achieve all kinds of deformation and displacement animation, for example using  cc.moveTo  to move the node to a certain location; using  cc.rotateBy  to rotate the node by a certain angle; using  cc.scaleTo  to zoom in and out on the node.  Basic action can be divided into interval action and free action. Interval action is a gradual change action that is done in a certain time interval. The actions mentioned above are all interval actions which are inherited from  cc.ActionInterval . Whereas free actions happen immediately and are all inherited from  cc.ActionInstant , for instance,  cc.callFunc  is used to call the callback function;  cc.hide  is used to hide the node.", 
            "title": "Basic action"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/actions/index.html#container-action", 
            "text": "The container action can organize actions in different ways, below are several of the container action\u2019s usages:   Sequential action  cc.sequence \n    Sequential action makes a series of child actions run one by one in sequence. For example:\n     // make the node move back and forth\n    var seq = cc.sequence(cc.moveBy(0.5, 200, 0), cc.moveBy(0.5, -200, 0));\n    node.runAction(seq);  Synchronization action  cc.spawn \n    Synchronization action synchronises the execution of a series of child actions. The result of the execution of these child actions will gather together to alter the properties of the node. For example:\n     // make the node zoom while it moves upwards\n    var spawn = cc.spawn(cc.moveBy(0.5, 0, 50), cc.scaleTo(0.5, 0.8, 1.4));\n    node.runAction(spawn);  Repetitive action  cc.repeat \n    Repetitive action is used to repeat one action several times. For example:\n     // make the node move back and forth 5 times\n    var seq = cc.repeat(\n                cc.sequence(\n                    cc.moveBy(2, 200, 0), \n                    cc.moveBy(2, -200, 0)\n                ), 5);\n    node.runAction(seq);  Repeat forever action  cc.repeatForever \n    As its name, this action container can make the target action repeat forever until it is stopped manually.\n     // move the node back and forth and keep repeating\n    var seq = cc.repeatForever(\n                cc.sequence(\n                    cc.moveBy(2, 200, 0), \n                    cc.moveBy(2, -200, 0)\n                ));  Speed action  cc.speed \n    Speed action can alter the execution rate of the target action to make it quicker or slower.\n     // double the speed of the target action which means the action that took 2 seconds  before now can be done in 1 second\n    var action = cc.speed(\n                    cc.spawn(\n                        cc.moveBy(2, 0, 50), \n                        cc.scaleTo(2, 0.8, 1.4)\n                    ), 0.5);\n    node.runAction(action);   You can see from the above example, different container types can be combined. Besides, we provide a more convenient link-form API for the container type actions. The action objects support these three API -  repeat , repeatForever , speed - which will return to the action object itself and support the continued link-form call. Let's see a more complicated action example:  // a complicated jump animation\nthis.jumpAction = cc.sequence(\n    cc.spawn(\n        cc.scaleTo(0.1, 0.8, 1.2),\n        cc.moveTo(0.1, 0, 10)\n    ),\n    cc.spawn(\n        cc.ScaleTo.create(0.2, 1, 1),\n        cc.MoveTo.create(0.2, 0, 0)\n    ),\n    cc.delayTime(0.5),\n    cc.spawn(\n        cc.ScaleTo.create(0.1, 1.2, 0.8),\n        cc.MoveTo.create(0.1, 0, -10)\n    ),\n    cc.spawn(\n        cc.ScaleTo.create(0.2, 1, 1),\n        cc.MoveTo.create(0.2, 0, 0)\n    )\n// play the animation at 1/2 speed and repeat 5 times\n).speed(2).repeat(5);", 
            "title": "Container action"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/actions/index.html#slow-motion", 
            "text": "Slow motion cannot exist alone; it always exists to modify a basic action. It can be used to alter the time curve of the basic action to give the action fast in/out, ease in or other more complicated special effects. One thing we need to note is that only interval actions support slow motion:  var aciton = cc.scaleTo(0.5, 2, 2);\naction.easing(cc.easeIn(3.0));  The basic slow motion category is cc.ActionEase . You can refer to the picture below for the time curves of different slow motions:   Pictures from http://hosted.zeh.com.br/tweener/docs/en-us/", 
            "title": "Slow motion"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/actions/index.html#api-reference-for-specific-action", 
            "text": "Please refer to  the action system API list  to learn which action system interfaces can be used.", 
            "title": "API reference for specific action"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/action-list/index.html", 
            "text": "Action list\n\n\nBasic action type\n\n\n\n\nAction\n\uff1abase class of all action types\n\n\nFiniteTimeAction\n\uff1afinite time action which has the property of \nduration\n .\n\n\nActionInstant\n\uff1afree action which will execute immediately, inherited from \nFiniteTimeAction\n.\n\n\nActionInterval\n\uff1ainterval action which will be completed within a predetermined time period, also inherited from \nFiniteTimeAction\n.\n\n\nActionEase\n\uff1aall slow motion base classes to modify \nActionInterval\n.\n\n\nEaseRateAction\n\uff1aslow motion base class with rate attribute.\n\n\nEaseElastic\n\uff1aelastic slow motion base class.\n\n\nEaseBounce\n\uff1abounce slow motion base class.\n\n\n\n\nThe developer can get to know the basic API for every action type in these action type files.\n\n\nContainer action\n\n\n\n\n\n\n\n\nAction name\n\n\nIntroduction\n\n\nFile link\n\n\n\n\n\n\n\n\n\n\ncc.sequence\n\n\nsequential execution action\n\n\nAPI description\n\n\n\n\n\n\ncc.spawn\n\n\nsynchronized execution action\n\n\nAPI description\n\n\n\n\n\n\ncc.repeat\n\n\nrepetitive execution action\n\n\nAPI description\n\n\n\n\n\n\ncc.repeatForever\n\n\nforever repetitive action\n\n\nAPI description\n\n\n\n\n\n\ncc.speed\n\n\nalter action rate\n\n\nAPI description\n\n\n\n\n\n\n\n\nFree action\n\n\n\n\n\n\n\n\nAction name\n\n\nIntroduction\n\n\nFile link\n\n\n\n\n\n\n\n\n\n\ncc.show\n\n\nshow immediately\n\n\nAPI description\n\n\n\n\n\n\ncc.hide\n\n\nhide immediately\n\n\nAPI description\n\n\n\n\n\n\ncc.toggleVisibility\n\n\nshow/hide status switch\n\n\nAPI description\n\n\n\n\n\n\ncc.removeSelf\n\n\nremove self from parent node\n\n\nAPI description\n\n\n\n\n\n\ncc.flipX\n\n\nX-axis flip\n\n\nAPI description\n\n\n\n\n\n\ncc.flipY\n\n\nY-axis flip\n\n\nAPI description\n\n\n\n\n\n\ncc.place\n\n\nplace at the target location\n\n\nAPI description\n\n\n\n\n\n\ncc.callFunc\n\n\nexecute callback function\n\n\nAPI description\n\n\n\n\n\n\ncc.targetedAction\n\n\ncreate action with existent action and a new target node\n\n\nAPI description\n\n\n\n\n\n\n\n\nInterval action\n\n\n\n\n\n\n\n\nAction name\n\n\nIntroduction\n\n\nFile link\n\n\n\n\n\n\n\n\n\n\ncc.moveTo\n\n\nmove to the target location\n\n\nAPI description\n\n\n\n\n\n\ncc.moveBy\n\n\nmove by assigned distance\n\n\nAPI description\n\n\n\n\n\n\ncc.rotateTo\n\n\nrotate to the target angle\n\n\nAPI description\n\n\n\n\n\n\ncc.rotateBy\n\n\nrotate by assigned angle\n\n\nAPI description\n\n\n\n\n\n\ncc.scaleTo\n\n\nscale node to assigned multiple\n\n\nAPI description\n\n\n\n\n\n\ncc.scaleBy\n\n\nscale node by assigned multiple\n\n\nAPI description\n\n\n\n\n\n\ncc.skewTo\n\n\nskew to the target angle\n\n\nAPI description\n\n\n\n\n\n\ncc.skewBy\n\n\nskew by assigned angle\n\n\nAPI description\n\n\n\n\n\n\ncc.jumpBy\n\n\nmove assigned distance by jumping\n\n\nAPI description\n\n\n\n\n\n\ncc.jumpTo\n\n\njump to the target location\n\n\nAPI description\n\n\n\n\n\n\ncc.follow\n\n\nfollow the target node's location\n\n\nAPI description\n\n\n\n\n\n\ncc.bezierTo\n\n\nmove to the target location by Bezier curve track\n\n\nAPI description\n\n\n\n\n\n\ncc.bezierBy\n\n\nmove assigned distance by Bezier curve track\n\n\nAPI description\n\n\n\n\n\n\ncc.blink\n\n\nblink(based on the transparency)\n\n\nAPI description\n\n\n\n\n\n\ncc.fadeTo\n\n\nalter the transparency to assigned value\n\n\nAPI description\n\n\n\n\n\n\ncc.fadeIn\n\n\nfade in\n\n\nAPI description\n\n\n\n\n\n\ncc.fadeOut\n\n\nfade out\n\n\nAPI description\n\n\n\n\n\n\ncc.tintTo\n\n\nalter the color to the assigned value\n\n\nAPI description\n\n\n\n\n\n\ncc.tintBy\n\n\nalter the color by the assigned increment\n\n\nAPI description\n\n\n\n\n\n\ncc.delayTime\n\n\ndelay the assigned time amount\n\n\nAPI description\n\n\n\n\n\n\ncc.reverseTime\n\n\nreverse the time axis of the target action\n\n\nAPI description\n\n\n\n\n\n\ncc.cardinalSplineTo\n\n\nmove to the target location by cardinal spline curve track\n\n\nAPI description\n\n\n\n\n\n\ncc.cardinalSplineBy\n\n\nmove assigned distance by cardinal spline curve track\n\n\nAPI description\n\n\n\n\n\n\ncc.catmullRomTo\n\n\nmove to the target location by Catmull Rom spline curve track\n\n\nAPI description\n\n\n\n\n\n\ncc.catmullRomBy\n\n\nmove assigned distance by by Catmull Rom spline curve track\n\n\nAPI description\n\n\n\n\n\n\n\n\nSlow motion\n\n\n\n\n\n\n\n\nAction name\n\n\nFile link\n\n\n\n\n\n\n\n\n\n\ncc.easeIn\n\n\nAPI description\n\n\n\n\n\n\ncc.easeOut\n\n\nAPI description\n\n\n\n\n\n\ncc.easeInOut\n\n\nAPI description\n\n\n\n\n\n\ncc.easeExponentialIn\n\n\nAPI description\n\n\n\n\n\n\ncc.easeExponentialOut\n\n\nAPI description\n\n\n\n\n\n\ncc.easeExponentialInOut\n\n\nAPI description\n\n\n\n\n\n\ncc.easeSineIn\n\n\nAPI description\n\n\n\n\n\n\ncc.easeSineOut\n\n\nAPI description\n\n\n\n\n\n\ncc.easeSineInOut\n\n\nAPI description\n\n\n\n\n\n\ncc.easeElasticIn\n\n\nAPI description\n\n\n\n\n\n\ncc.easeElasticOut\n\n\nAPI description\n\n\n\n\n\n\ncc.easeElasticInOut\n\n\nAPI description\n\n\n\n\n\n\ncc.easeBounceIn\n\n\nAPI description\n\n\n\n\n\n\ncc.easeBounceOut\n\n\nAPI description\n\n\n\n\n\n\ncc.easeBounceInOut\n\n\nAPI description\n\n\n\n\n\n\ncc.easeBackIn\n\n\nAPI description\n\n\n\n\n\n\ncc.easeBackOut\n\n\nAPI description\n\n\n\n\n\n\ncc.easeBackInOut\n\n\nAPI description\n\n\n\n\n\n\ncc.easeBezierAction\n\n\nAPI description\n\n\n\n\n\n\ncc.easeQuadraticActionIn\n\n\nAPI description\n\n\n\n\n\n\ncc.easeQuadraticActionOut\n\n\nAPI description\n\n\n\n\n\n\ncc.easeQuadraticActionInOut\n\n\nAPI description\n\n\n\n\n\n\ncc.easeQuarticActionIn\n\n\nAPI description\n\n\n\n\n\n\ncc.easeQuarticActionOut\n\n\nAPI description\n\n\n\n\n\n\ncc.easeQuarticActionInOut\n\n\nAPI description\n\n\n\n\n\n\ncc.easeQuinticActionIn\n\n\nAPI description\n\n\n\n\n\n\ncc.easeQuinticActionOut\n\n\nAPI description\n\n\n\n\n\n\ncc.easeQuinticActionInOut\n\n\nAPI description\n\n\n\n\n\n\ncc.easeCircleActionIn\n\n\nAPI description\n\n\n\n\n\n\ncc.easeCircleActionOut\n\n\nAPI description\n\n\n\n\n\n\ncc.easeCircleActionInOut\n\n\nAPI description\n\n\n\n\n\n\ncc.easeCubicActionIn\n\n\nAPI description\n\n\n\n\n\n\ncc.easeCubicActionOut\n\n\nAPI description\n\n\n\n\n\n\ncc.easeCubicActionInOut\n\n\nAPI description", 
            "title": "_Action List"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/action-list/index.html#action-list", 
            "text": "", 
            "title": "Action list"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/action-list/index.html#basic-action-type", 
            "text": "Action \uff1abase class of all action types  FiniteTimeAction \uff1afinite time action which has the property of  duration  .  ActionInstant \uff1afree action which will execute immediately, inherited from  FiniteTimeAction .  ActionInterval \uff1ainterval action which will be completed within a predetermined time period, also inherited from  FiniteTimeAction .  ActionEase \uff1aall slow motion base classes to modify  ActionInterval .  EaseRateAction \uff1aslow motion base class with rate attribute.  EaseElastic \uff1aelastic slow motion base class.  EaseBounce \uff1abounce slow motion base class.   The developer can get to know the basic API for every action type in these action type files.", 
            "title": "Basic action type"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/action-list/index.html#container-action", 
            "text": "Action name  Introduction  File link      cc.sequence  sequential execution action  API description    cc.spawn  synchronized execution action  API description    cc.repeat  repetitive execution action  API description    cc.repeatForever  forever repetitive action  API description    cc.speed  alter action rate  API description", 
            "title": "Container action"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/action-list/index.html#free-action", 
            "text": "Action name  Introduction  File link      cc.show  show immediately  API description    cc.hide  hide immediately  API description    cc.toggleVisibility  show/hide status switch  API description    cc.removeSelf  remove self from parent node  API description    cc.flipX  X-axis flip  API description    cc.flipY  Y-axis flip  API description    cc.place  place at the target location  API description    cc.callFunc  execute callback function  API description    cc.targetedAction  create action with existent action and a new target node  API description", 
            "title": "Free action"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/action-list/index.html#interval-action", 
            "text": "Action name  Introduction  File link      cc.moveTo  move to the target location  API description    cc.moveBy  move by assigned distance  API description    cc.rotateTo  rotate to the target angle  API description    cc.rotateBy  rotate by assigned angle  API description    cc.scaleTo  scale node to assigned multiple  API description    cc.scaleBy  scale node by assigned multiple  API description    cc.skewTo  skew to the target angle  API description    cc.skewBy  skew by assigned angle  API description    cc.jumpBy  move assigned distance by jumping  API description    cc.jumpTo  jump to the target location  API description    cc.follow  follow the target node's location  API description    cc.bezierTo  move to the target location by Bezier curve track  API description    cc.bezierBy  move assigned distance by Bezier curve track  API description    cc.blink  blink(based on the transparency)  API description    cc.fadeTo  alter the transparency to assigned value  API description    cc.fadeIn  fade in  API description    cc.fadeOut  fade out  API description    cc.tintTo  alter the color to the assigned value  API description    cc.tintBy  alter the color by the assigned increment  API description    cc.delayTime  delay the assigned time amount  API description    cc.reverseTime  reverse the time axis of the target action  API description    cc.cardinalSplineTo  move to the target location by cardinal spline curve track  API description    cc.cardinalSplineBy  move assigned distance by cardinal spline curve track  API description    cc.catmullRomTo  move to the target location by Catmull Rom spline curve track  API description    cc.catmullRomBy  move assigned distance by by Catmull Rom spline curve track  API description", 
            "title": "Interval action"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/action-list/index.html#slow-motion", 
            "text": "Action name  File link      cc.easeIn  API description    cc.easeOut  API description    cc.easeInOut  API description    cc.easeExponentialIn  API description    cc.easeExponentialOut  API description    cc.easeExponentialInOut  API description    cc.easeSineIn  API description    cc.easeSineOut  API description    cc.easeSineInOut  API description    cc.easeElasticIn  API description    cc.easeElasticOut  API description    cc.easeElasticInOut  API description    cc.easeBounceIn  API description    cc.easeBounceOut  API description    cc.easeBounceInOut  API description    cc.easeBackIn  API description    cc.easeBackOut  API description    cc.easeBackInOut  API description    cc.easeBezierAction  API description    cc.easeQuadraticActionIn  API description    cc.easeQuadraticActionOut  API description    cc.easeQuadraticActionInOut  API description    cc.easeQuarticActionIn  API description    cc.easeQuarticActionOut  API description    cc.easeQuarticActionInOut  API description    cc.easeQuinticActionIn  API description    cc.easeQuinticActionOut  API description    cc.easeQuinticActionInOut  API description    cc.easeCircleActionIn  API description    cc.easeCircleActionOut  API description    cc.easeCircleActionInOut  API description    cc.easeCubicActionIn  API description    cc.easeCubicActionOut  API description    cc.easeCubicActionInOut  API description", 
            "title": "Slow motion"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/scheduler/index.html", 
            "text": "Using the timer\n\n\nIn Cocos Creator, we provide a convenient timer for the components. This timer originates from the \ncc.Scheduler\n in Cocos2d-x and we preserved it in Cocos Creator and adapted the method of usage based on the components.\n\n\nSome people may think \nsetTimeout\n and \nsetInterval\n are enough. Developers surely can use these two functions, but we prefer using the timer more as it is quicker and more powerful and it combines better with the components!\n\n\nNow, let's see its detailed using method:\n\n\n\n\n\n\nStart a timer\n\n\ncomponent.schedule(function() {\n    // Here \u2018this\u2019 is referring to the component\n    this.doSomething();\n}, 5);\n\n\nThe timer above will run once every 5s.\n\n\n\n\n\n\nQuicker timer\n\n\n// Time interval in units of seconds\nvar interval = 5;\n// Time of repetition\nvar repeat = 3;\n// Start delay\nvar delay = 10;\ncomponent.schedule(function() {\n    // Here \u2018this\u2019 is referring to the component\n    this.doSomething();\n}, interval, repeat, delay);\n\n\nThe timer above will start counting after 10 seconds, run call-back once every 5 seconds and repeat 3 times.\n\n\n\n\n\n\nTimer only runs once (shortcut)\n\n\ncomponent.scheduleOnce(function() {\n    // Here \u2018this\u2019 is referring to the component\n    this.doSomething();\n}, 2);\n\n\nThe timer above will run the call-back function once after 2 seconds and then will stop counting.\n\n\n\n\n\n\nCancel the timer\n\n\nThe developer can use the call-back function itself to cancel the timer:\n\n\nthis.count = 0;\nthis.callback = function () {\n    if (this.count === 5) {\n        // Cancel this timer at the sixth call-back \n        this.unschedule(this.callback);\n    }\n    this.doSomething();\n    this.count++;\n}\ncomponent.schedule(this.callback, 1);\n\n\n\n\n\n\nBelow are all the functions of the timer in the component:\n\n\n\n\nschedule\uff1astart a timer\n\n\nscheduleOnce\uff1astart a timer that runs only once\n\n\nunschedule\uff1acancel a timer\n\n\nunscheduleAllCallbacks\uff1acancel all the timers of this component\n\n\n\n\nThese detailed descriptions about API can all be found in \nComponent API\n.\n\n\nBesides this, if every frame needs to run a function, please add function \nupdate\n directly in to the component, so this function will be called by every frame. A detailed description can be found in \nlife cycle file\n.\n\n\nCaution: \ncc.Node\n does not contain API related to the timer", 
            "title": "_Scheduler"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/scheduler/index.html#using-the-timer", 
            "text": "In Cocos Creator, we provide a convenient timer for the components. This timer originates from the  cc.Scheduler  in Cocos2d-x and we preserved it in Cocos Creator and adapted the method of usage based on the components.  Some people may think  setTimeout  and  setInterval  are enough. Developers surely can use these two functions, but we prefer using the timer more as it is quicker and more powerful and it combines better with the components!  Now, let's see its detailed using method:    Start a timer  component.schedule(function() {\n    // Here \u2018this\u2019 is referring to the component\n    this.doSomething();\n}, 5);  The timer above will run once every 5s.    Quicker timer  // Time interval in units of seconds\nvar interval = 5;\n// Time of repetition\nvar repeat = 3;\n// Start delay\nvar delay = 10;\ncomponent.schedule(function() {\n    // Here \u2018this\u2019 is referring to the component\n    this.doSomething();\n}, interval, repeat, delay);  The timer above will start counting after 10 seconds, run call-back once every 5 seconds and repeat 3 times.    Timer only runs once (shortcut)  component.scheduleOnce(function() {\n    // Here \u2018this\u2019 is referring to the component\n    this.doSomething();\n}, 2);  The timer above will run the call-back function once after 2 seconds and then will stop counting.    Cancel the timer  The developer can use the call-back function itself to cancel the timer:  this.count = 0;\nthis.callback = function () {\n    if (this.count === 5) {\n        // Cancel this timer at the sixth call-back \n        this.unschedule(this.callback);\n    }\n    this.doSomething();\n    this.count++;\n}\ncomponent.schedule(this.callback, 1);    Below are all the functions of the timer in the component:   schedule\uff1astart a timer  scheduleOnce\uff1astart a timer that runs only once  unschedule\uff1acancel a timer  unscheduleAllCallbacks\uff1acancel all the timers of this component   These detailed descriptions about API can all be found in  Component API .  Besides this, if every frame needs to run a function, please add function  update  directly in to the component, so this function will be called by every frame. A detailed description can be found in  life cycle file .", 
            "title": "Using the timer"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/scheduler/index.html#caution-ccnode-does-not-contain-api-related-to-the-timer", 
            "text": "", 
            "title": "Caution: cc.Node does not contain API related to the timer"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/execution-order/index.html", 
            "text": "Script execution order\n\n\nFile contents are being completed at this time...", 
            "title": "_Execution Order"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/execution-order/index.html#script-execution-order", 
            "text": "File contents are being completed at this time...", 
            "title": "Script execution order"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/network/index.html", 
            "text": "Standard network interface\n\n\nIn Cocos Creator, we support the most widely used standard network interface on the Web platform:\n\n\n\n\nXMLHttpRequest\n\uff1afor short connection\n\n\nWebSocket\n\uff1afor long connection\n\n\n\n\nOf course, browsers on the Web platform support these two interfaces originally. The reason why we say Cocos Creator supports it is because when we release the native version, the user can operate it using these two network interface codes which follows the principle of \"one set of code for multiple platforms operation\" which Cocos honors.\n\n\nHow to use\n\n\n\n\nXMLHttpRequest\n\n\n\n\nSimple example:\n\n\nvar xhr = new XMLHttpRequest();\nxhr.onreadystatechange = function ()\n{\n   if (xhr.readyState == 4 \n (xhr.status \n= 200 \n xhr.status \n 400))\n   {\n      var response = xhr.responseText;\n      console.log(response);\n    }\n};\nxhr.open(\nGET\n, url, true);\nxhr.send();\n\n\n\n\nDevelopers can use \nnew XMLHttpRequest()\n directly or use \ncc.loader.getXMLHttpRequest()\n to create a connecting object. The effect of these two are the same.\n\n\nFor the standard file of \nXMLHttpRequest\n, please refer to \nMDN Chinese file\n\u3002\n\n\n\n\nWebSocket\n\n\n\n\nSimple example:\n\n\nws = new WebSocket(\nws://echo.websocket.org\n);\nws.onopen = function (event) {\n    console.log(\nSend Text WS was opened.\n);\n};\nws.onmessage = function (event) {\n    console.log(\nresponse text msg: \n + event.data);\n};\nws.onerror = function (event) {\n    console.log(\nSend Text fired an error\n);\n};\nws.onclose = function (event) {\n    console.log(\nWebSocket instance closed.\n);\n};\n\nsetTimeout(function () {\n    if (ws.readyState === WebSocket.OPEN) {\n        ws.send(\nHello WebSocket, I'm a text message.\n);\n    }\n    else {\n        console.log(\nWebSocket instance wasn't ready...\n);\n    }\n}, 3);\n\n\n\n\nFor the standard file of \nWebSocket\n, please refer to\nMDN Chinese file\n\u3002\n\n\nSocketIO\n\n\nBeyond these, SocketIO provides packaging based on the WebSocket API which can be used on the Node.js server. If this library is needed, developers can reference SocketIO on their own.\n\n\nReference SocketIO in script:\n\n\n\n\nDownload SocketIO\uff1a\nDownload link\n\n\nDrag the downloaded file into the route you would like to save in explorer\n\n\nReference SocketIO in the component script:\n\n\n\n\n// Judge whether it is a native environment or not, if it is then it can not be referenced because native provides native SocketIO to achieve\nif (cc.sys.isNative) {\n    // io variable in native environment has not been defined, the exported variable is actually SocketIO\n    window.io = SocketIO;\n}\nelse {\n    // use relative path, do not need .js as postfix\n    require('relative_path_to/socket.io');\n}\n\n\n\n\n\n\nTo use SocketIO in the component you can go to \nSocketIO official website\n for API and files", 
            "title": "_Network"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/network/index.html#standard-network-interface", 
            "text": "In Cocos Creator, we support the most widely used standard network interface on the Web platform:   XMLHttpRequest \uff1afor short connection  WebSocket \uff1afor long connection   Of course, browsers on the Web platform support these two interfaces originally. The reason why we say Cocos Creator supports it is because when we release the native version, the user can operate it using these two network interface codes which follows the principle of \"one set of code for multiple platforms operation\" which Cocos honors.", 
            "title": "Standard network interface"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/network/index.html#how-to-use", 
            "text": "XMLHttpRequest   Simple example:  var xhr = new XMLHttpRequest();\nxhr.onreadystatechange = function ()\n{\n   if (xhr.readyState == 4   (xhr.status  = 200   xhr.status   400))\n   {\n      var response = xhr.responseText;\n      console.log(response);\n    }\n};\nxhr.open( GET , url, true);\nxhr.send();  Developers can use  new XMLHttpRequest()  directly or use  cc.loader.getXMLHttpRequest()  to create a connecting object. The effect of these two are the same.  For the standard file of  XMLHttpRequest , please refer to  MDN Chinese file \u3002   WebSocket   Simple example:  ws = new WebSocket( ws://echo.websocket.org );\nws.onopen = function (event) {\n    console.log( Send Text WS was opened. );\n};\nws.onmessage = function (event) {\n    console.log( response text msg:   + event.data);\n};\nws.onerror = function (event) {\n    console.log( Send Text fired an error );\n};\nws.onclose = function (event) {\n    console.log( WebSocket instance closed. );\n};\n\nsetTimeout(function () {\n    if (ws.readyState === WebSocket.OPEN) {\n        ws.send( Hello WebSocket, I'm a text message. );\n    }\n    else {\n        console.log( WebSocket instance wasn't ready... );\n    }\n}, 3);  For the standard file of  WebSocket , please refer to MDN Chinese file \u3002", 
            "title": "How to use"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/network/index.html#socketio", 
            "text": "Beyond these, SocketIO provides packaging based on the WebSocket API which can be used on the Node.js server. If this library is needed, developers can reference SocketIO on their own.  Reference SocketIO in script:   Download SocketIO\uff1a Download link  Drag the downloaded file into the route you would like to save in explorer  Reference SocketIO in the component script:   // Judge whether it is a native environment or not, if it is then it can not be referenced because native provides native SocketIO to achieve\nif (cc.sys.isNative) {\n    // io variable in native environment has not been defined, the exported variable is actually SocketIO\n    window.io = SocketIO;\n}\nelse {\n    // use relative path, do not need .js as postfix\n    require('relative_path_to/socket.io');\n}   To use SocketIO in the component you can go to  SocketIO official website  for API and files", 
            "title": "SocketIO"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/pooling/index.html", 
            "text": "Use object pool\n\n\nComing soon...", 
            "title": "_Pooling"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/pooling/index.html#use-object-pool", 
            "text": "Coming soon...", 
            "title": "Use object pool"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/load-assets/index.html", 
            "text": "Acquire and load asset\n\n\nCocos Creator has a whole set of uniform asset management mechanisms. In this tutorial, we will introduce\n\n\n\n\nClassification of assets\n\n\nHow to set assets in the \nProperties\n panel \n\n\nHow to dynamically load Asset\n\n\nHow to dynamically load Raw Asset\n\n\n\n\nClassification of assets\n\n\nAssets currently can be classified into two different types, one type is called \nAsset\n, the other is called \nRaw Asset\n.\n\n\nAsset\n\n\nMost assets like \ncc.SpriteFrame\n, \ncc.AnimationClip\n and \ncc.Prefab\n all belong to Asset. The loading of Asset is uniform and automatic. Assets that rely on each other can be preloaded automatically.\n\n\n\n\nFor example, when the engine is loading the scene, it will first automatically load the assets linked to the scene and if these assets are linked to other assets, then these other assets will also be loaded first. Only when the loading is complete will the loading of the scene be finished.\n\n\n\n\nTherefore, as long as you get an Asset object, then this object must be the one that has finished loading and can access all the asset data directly through the attributes of this object. If you are going to use these assets in the engine, the Asset object that the engine API receives must be a loaded one.\n\n\nThe script can define an Asset properties:\n\n\n// NewScript.js\n\ncc.Class({\n    extends: cc.Component,\n    properties: {\n\n        spriteFrame: {\n            default: null,\n            type: cc.SpriteFrame\n        },\n\n    }\n});\n\n\n\n\nRaw Asset\n\n\nThe object received by the existing API previously in Cocos2d is not the Asset object mentioned above but a URL presented by a character string. These former asset types that the API uses are called Raw Assets. \ncc.Texture2D\n, \ncc.Font\n and \ncc.AudioClip\n are all Raw Assets. If you are going to use Raw Assets in the engine, all you have to do is to pass the URL of the asset to the engine API, then the engine interior will automatically load the assets represented by this URL.\n\n\nIf you are going to declare a Raw Asset attribute type as \ncc.Texture2D\n in CCClass, you may want to define it first:\n\n\ncc.Class({\n    extends: cc.Component,t a \n    properties: {\n\n        textureURL: {\n            default: null,\n            type: cc.Texture2D\n        }\n\n    }\n});\n\n\n\n\nThe problem with writing in this way is that \ntextureURL\n in the code is actually a character string rather than a living example of \ncc.Texture2D\n. To avoid confusing the two types here, use \nurl: cc.Texture2D\n rather than \ntype: cc.Texture2D\n when declaring the Raw Asset attribute in CCClass.\n\n\ncc.Class({\n    extends: cc.Component,\n    properties: {\n\n        textureURL: {\n            default: \n,\n            url: cc.Texture2D\n        }\n\n    }\n});\n\n\n\n\nHow to set assets in the \nProperties\n panel\n\n\nNo matter whether using Assets or Raw Assets, as long as you define the type in the script, you can set assets easily in the \nProperties\n panel. Hypothetically, we could have a component like this:\n\n\n// NewScript.js\n\ncc.Class({\n    extends: cc.Component,\n    properties: {\n\n        textureURL: {\n            default: \n,\n            url: cc.Texture2D\n        },\n        spriteFrame: {\n            default: null,\n            type: cc.SpriteFrame\n        },\n\n    }\n});\n\n\n\n\nHere is how it looks like in the \nProperties\n panel after adding it into the scene:\n\n\n\n\nThen we drag an image and a SpriteFrame separately from \nAssets\n to the corresponding attribute in the \nProperties\n panel:\n\n\n\n\nThe result is as follows:\n\n\n\n\nIn this way you can get the set asset directly from the script:\n\n\n    onLoad: function () {\n        var spriteFrame = this.spriteFrame;\n        var textureURL = this.textureURL;\n\n        spriteFrame.setTexture(textureURL);\n    }\n\n\n\n\nAlthough it is very straight forward to set assets in the \nProperties\n panel, assets can only be pre-set in the scene without dynamic switching. If you need dynamic switching, you need to check the following contents out.\n\n\nHow to dynamically load\n\n\nAll resources that require dynamically loaded via script, must be placed under \nresources\n folder or its subfolders,\n\nresources\n need to be manually created in the assets folder and must be located in the root directory of the assets,\nlike this:\n\n\n\n\nThe \nimage/image\n, \nprefab\n, \nanim\n, \nfont\n is a common Asset, and image, audio is a common Raw Asset.\n\n\n\n\nInside \nresources\n folder resources, can be associated with dependence to other resources outside the folder, or resource reference could also be an external scene to. Project build time, but was released in \n build \n panel selected scenarios,\n\nresources\n all the resources folder, \nresources\n folders associated with their dependence on external resources are exported.\nSo, if a resource does not need directly from the script \ndynamic\n  loading, it won't be in the \nresources\n folder.\n\n\n\n\nHow to dynamically load Asset\n\n\nCreator provides \ncc.loader.loadRes\n the API to load specific Asset that is located under the Resources directory.\nAnd \ncc.loader. load\n difference is that loadRe should only load a single Asset.\nInvoke, you only need to pass a relative path to the resources, and \nNot\n at the end of the path containing the file name extension.\n\n\n// load Prefab\ncc.loader.loadRes(\ntest assets/prefab\n, function (err, prefab) {\n    var newNode = cc.instantiate(prefab);\n    cc.director.getScene().addChild(newNode);\n});\n\n// load AnimationClip\ncc.loader.loadRes(\ntest assets/anim\n, function (err, clip) {\n    myNode.getComponent(cc.Animation).addClip(clip, \nanim\n);\n});\n\n// load SpriteAtlas (Atlas), and get one of them SpriteFrame\n// Note Atlas resource file (plist) usually of the same name and a picture file (PNG) placed in a directory,\n// So should need to in the second parameter specifies the resource type.\ncc.loader.loadRes(\ntest assets/sheep\n, cc.SpriteAtlas, function (err, atlas) {\n    var frame = atlas.getSpriteFrame('sheep_down_0');\n    sprite.spriteFrame = frame;\n});\n\n\n\n\nIndependent of load SpriteFrame\n\n\nAfter the photo settings for the Sprite will be in the Resource Manager to generate a corresponding SpriteFrame. But if\n\ntest assets/image\n is loaded directly, and the type will be cc.Texture2D. You must specify the second parameter is the type of resource, cc.generated can be loaded into the picture SpriteFrame.\n\n\n// load SpriteFrame\ncc.loader.loadRes(\ntest assets/image\n, cc.SpriteFrame, function (err, spriteFrame) {\n    myNode.getComponent(cc.Sprite).spriteFrame = spriteFrame;\n});\n\n\n\n\n\n\nIf you specify a type parameter, you will find the specified resource type in the path.\nWhen you are in the same path includes multiple names simultaneously under a resource (for example,\ncontains both player.clip and player.psd), or the need to obtain a \"resource\" (for example, gets Texture2D SpriteFrame generated), should need to declare types.\n\n\n\n\nResource Release\n\n\nloadRes\n loaded in a single resource if you need to release, You can call \ncc.loader.releaseRes\n,\n\nreleaseRes\n incoming one with \nloadRes\n the same path parameter, type parameters are not supported\n\n\ncc.loader.releaseRes(\ntest assets/anim\n);\n\n\n\n\nAlso, You can also use \ncc.loader.releaseAsset\n to release the instance of a specific Asset.\n\n\ncc.loader.releaseAsset(spriteFrame);\n\n\n\n\nHow to dynamically load Raw Asset\n\n\nRaw Asset can be loaded directly from a remote server using a URL, you can also dynamically loaded from the item.\nIn the case of remote loading, The original Cocos2d constant loading method, using cc.loader.load can be. Raw Asset to the project, load the same way as Asset:\n\n\n// load Texture, don't add extension\ncc.loader.loadRes(\ntest assets/image\n, function (err, texture) {\n    ...\n});\n\n\n\n\ncc.url.raw\n\n\nAfter the success of Raw Asset loading, if you need to pass some form of URL API,\nyou still need to give the full path.You need to use \ncc.url.raw\n converted to a URL:\n\n\n// The original URL will complain! File not found\nvar texture = cc.textureCache.addImage(\nassets/res/textures/star.png\n); // Error! File not found\n\n\n\n\n// By cc.url.Raw, requiring you to declare resources directory and file name extension\nvar realUrl = cc.url.raw(\nres/textures/star.png\n);\nvar texture = cc.textureCache.addImage(realUrl); // OK!\n\n\n\n\nResource bulk loading\n\n\ncc.loader.loadResAll\n can load multiple resources under the same path:\n\n\n// loading all resource in the test assets directory\ncc.loader.loadResAll(\ntest assets\n, function (err, assets) {\n    // ...\n});\n\n// load all SpriteFrame in the sheep.plist atlas\ncc.loader.loadResAll(\ntest assets/sheep\n, cc.SpriteFrame, function (err, assets) {\n    // assets is a SpriteFrame array already contains all SpriteFrame.\n    // and loadRes('test assets/sheep', function (err, atlas) {...}) The entire SpriteAtlas object is obtained.\n});", 
            "title": "_Load Assets"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/load-assets/index.html#acquire-and-load-asset", 
            "text": "Cocos Creator has a whole set of uniform asset management mechanisms. In this tutorial, we will introduce   Classification of assets  How to set assets in the  Properties  panel   How to dynamically load Asset  How to dynamically load Raw Asset", 
            "title": "Acquire and load asset"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/load-assets/index.html#classification-of-assets", 
            "text": "Assets currently can be classified into two different types, one type is called  Asset , the other is called  Raw Asset .", 
            "title": "Classification of assets"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/load-assets/index.html#asset", 
            "text": "Most assets like  cc.SpriteFrame ,  cc.AnimationClip  and  cc.Prefab  all belong to Asset. The loading of Asset is uniform and automatic. Assets that rely on each other can be preloaded automatically.   For example, when the engine is loading the scene, it will first automatically load the assets linked to the scene and if these assets are linked to other assets, then these other assets will also be loaded first. Only when the loading is complete will the loading of the scene be finished.   Therefore, as long as you get an Asset object, then this object must be the one that has finished loading and can access all the asset data directly through the attributes of this object. If you are going to use these assets in the engine, the Asset object that the engine API receives must be a loaded one.  The script can define an Asset properties:  // NewScript.js\n\ncc.Class({\n    extends: cc.Component,\n    properties: {\n\n        spriteFrame: {\n            default: null,\n            type: cc.SpriteFrame\n        },\n\n    }\n});", 
            "title": "Asset"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/load-assets/index.html#raw-asset", 
            "text": "The object received by the existing API previously in Cocos2d is not the Asset object mentioned above but a URL presented by a character string. These former asset types that the API uses are called Raw Assets.  cc.Texture2D ,  cc.Font  and  cc.AudioClip  are all Raw Assets. If you are going to use Raw Assets in the engine, all you have to do is to pass the URL of the asset to the engine API, then the engine interior will automatically load the assets represented by this URL.  If you are going to declare a Raw Asset attribute type as  cc.Texture2D  in CCClass, you may want to define it first:  cc.Class({\n    extends: cc.Component,t a \n    properties: {\n\n        textureURL: {\n            default: null,\n            type: cc.Texture2D\n        }\n\n    }\n});  The problem with writing in this way is that  textureURL  in the code is actually a character string rather than a living example of  cc.Texture2D . To avoid confusing the two types here, use  url: cc.Texture2D  rather than  type: cc.Texture2D  when declaring the Raw Asset attribute in CCClass.  cc.Class({\n    extends: cc.Component,\n    properties: {\n\n        textureURL: {\n            default:  ,\n            url: cc.Texture2D\n        }\n\n    }\n});", 
            "title": "Raw Asset"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/load-assets/index.html#how-to-set-assets-in-the-properties-panel", 
            "text": "No matter whether using Assets or Raw Assets, as long as you define the type in the script, you can set assets easily in the  Properties  panel. Hypothetically, we could have a component like this:  // NewScript.js\n\ncc.Class({\n    extends: cc.Component,\n    properties: {\n\n        textureURL: {\n            default:  ,\n            url: cc.Texture2D\n        },\n        spriteFrame: {\n            default: null,\n            type: cc.SpriteFrame\n        },\n\n    }\n});  Here is how it looks like in the  Properties  panel after adding it into the scene:   Then we drag an image and a SpriteFrame separately from  Assets  to the corresponding attribute in the  Properties  panel:   The result is as follows:   In this way you can get the set asset directly from the script:      onLoad: function () {\n        var spriteFrame = this.spriteFrame;\n        var textureURL = this.textureURL;\n\n        spriteFrame.setTexture(textureURL);\n    }  Although it is very straight forward to set assets in the  Properties  panel, assets can only be pre-set in the scene without dynamic switching. If you need dynamic switching, you need to check the following contents out.", 
            "title": "How to set assets in the Properties panel"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/load-assets/index.html#how-to-dynamically-load", 
            "text": "All resources that require dynamically loaded via script, must be placed under  resources  folder or its subfolders, resources  need to be manually created in the assets folder and must be located in the root directory of the assets,\nlike this:   The  image/image ,  prefab ,  anim ,  font  is a common Asset, and image, audio is a common Raw Asset.   Inside  resources  folder resources, can be associated with dependence to other resources outside the folder, or resource reference could also be an external scene to. Project build time, but was released in   build   panel selected scenarios, resources  all the resources folder,  resources  folders associated with their dependence on external resources are exported.\nSo, if a resource does not need directly from the script  dynamic   loading, it won't be in the  resources  folder.", 
            "title": "How to dynamically load"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/load-assets/index.html#how-to-dynamically-load-asset", 
            "text": "Creator provides  cc.loader.loadRes  the API to load specific Asset that is located under the Resources directory.\nAnd  cc.loader. load  difference is that loadRe should only load a single Asset.\nInvoke, you only need to pass a relative path to the resources, and  Not  at the end of the path containing the file name extension.  // load Prefab\ncc.loader.loadRes( test assets/prefab , function (err, prefab) {\n    var newNode = cc.instantiate(prefab);\n    cc.director.getScene().addChild(newNode);\n});\n\n// load AnimationClip\ncc.loader.loadRes( test assets/anim , function (err, clip) {\n    myNode.getComponent(cc.Animation).addClip(clip,  anim );\n});\n\n// load SpriteAtlas (Atlas), and get one of them SpriteFrame\n// Note Atlas resource file (plist) usually of the same name and a picture file (PNG) placed in a directory,\n// So should need to in the second parameter specifies the resource type.\ncc.loader.loadRes( test assets/sheep , cc.SpriteAtlas, function (err, atlas) {\n    var frame = atlas.getSpriteFrame('sheep_down_0');\n    sprite.spriteFrame = frame;\n});", 
            "title": "How to dynamically load Asset"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/load-assets/index.html#independent-of-load-spriteframe", 
            "text": "After the photo settings for the Sprite will be in the Resource Manager to generate a corresponding SpriteFrame. But if test assets/image  is loaded directly, and the type will be cc.Texture2D. You must specify the second parameter is the type of resource, cc.generated can be loaded into the picture SpriteFrame.  // load SpriteFrame\ncc.loader.loadRes( test assets/image , cc.SpriteFrame, function (err, spriteFrame) {\n    myNode.getComponent(cc.Sprite).spriteFrame = spriteFrame;\n});   If you specify a type parameter, you will find the specified resource type in the path.\nWhen you are in the same path includes multiple names simultaneously under a resource (for example,\ncontains both player.clip and player.psd), or the need to obtain a \"resource\" (for example, gets Texture2D SpriteFrame generated), should need to declare types.", 
            "title": "Independent of load SpriteFrame"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/load-assets/index.html#resource-release", 
            "text": "loadRes  loaded in a single resource if you need to release, You can call  cc.loader.releaseRes , releaseRes  incoming one with  loadRes  the same path parameter, type parameters are not supported  cc.loader.releaseRes( test assets/anim );  Also, You can also use  cc.loader.releaseAsset  to release the instance of a specific Asset.  cc.loader.releaseAsset(spriteFrame);", 
            "title": "Resource Release"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/load-assets/index.html#how-to-dynamically-load-raw-asset", 
            "text": "Raw Asset can be loaded directly from a remote server using a URL, you can also dynamically loaded from the item.\nIn the case of remote loading, The original Cocos2d constant loading method, using cc.loader.load can be. Raw Asset to the project, load the same way as Asset:  // load Texture, don't add extension\ncc.loader.loadRes( test assets/image , function (err, texture) {\n    ...\n});", 
            "title": "How to dynamically load Raw Asset"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/load-assets/index.html#ccurlraw", 
            "text": "After the success of Raw Asset loading, if you need to pass some form of URL API,\nyou still need to give the full path.You need to use  cc.url.raw  converted to a URL:  // The original URL will complain! File not found\nvar texture = cc.textureCache.addImage( assets/res/textures/star.png ); // Error! File not found  // By cc.url.Raw, requiring you to declare resources directory and file name extension\nvar realUrl = cc.url.raw( res/textures/star.png );\nvar texture = cc.textureCache.addImage(realUrl); // OK!", 
            "title": "cc.url.raw"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/load-assets/index.html#resource-bulk-loading", 
            "text": "cc.loader.loadResAll  can load multiple resources under the same path:  // loading all resource in the test assets directory\ncc.loader.loadResAll( test assets , function (err, assets) {\n    // ...\n});\n\n// load all SpriteFrame in the sheep.plist atlas\ncc.loader.loadResAll( test assets/sheep , cc.SpriteFrame, function (err, assets) {\n    // assets is a SpriteFrame array already contains all SpriteFrame.\n    // and loadRes('test assets/sheep', function (err, atlas) {...}) The entire SpriteAtlas object is obtained.\n});", 
            "title": "Resource bulk loading"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/modular-script/index.html", 
            "text": "Modularize script\n\n\nCocos Creator allows you to split the code into multiple script files and they can be called by each other. To implement this, you need to know how to define and use the module in Cocos Creator. This step is called \nmodularize\n for short.\n\n\nIf you are not sure what modularization can do, you can consider it as:\n- \ninclude\n in C/C++\n- \nusing\n in C#\n- \nimport\n in Java and Python\n- \nlink\nin HTML\n\n\nModularization enables you to reference other script files in Cocos Creator:\n- Access parameters exported from other files\n- Call method other files that have been exported\n- Use type other files that have been exported\n- Use or inherit other Components\n\n\nJavaScript in Cocos Creator uses the Common JS standard that is almost the same as Node.js to realize modularization, in short:\n- Each individual script file forms a module\n- Each module is an individual action scope\n- Reference other modules in the \nsynchronized\n \nrequire\n method\n- Set \nmodule.exports\n as an exported variable\n\n\nIf you still don't quite understand, don't worry, we will explain it in here.\n\n\n\n\nIn this article, the two terms \"module\" and \"script\" are equivalent. All the \"comment\" parts belong to advanced contents that don't need to be understood at the very start.\nNo matter how we define the module, all user designation codes will eventually be compiled into native JavaScript by Cocos Creator and can be operated directly in the browser.\n\n\n\n\nReference module\n\n\nrequire\n\n\nOther than the interface provided by Cocos Creator, all the user-defined modules will need to call \nrequire\n to be accessed. For instance, we have a component defined at \nRotate.js\n:\n\n\n// Rotate.js\n\ncc.Class({\n   extends: cc.Component,\n   // ...\n});\n\n\n\n\nNow if you want to access it in another script, you can:\n\n\nvar Rotate = require(\nRotate\n);\n\n\n\n\nWhat \nrequire\n returned is the object exported by the module. Normally, we would save the result to a variable\uff08\nvar Rotate\n\uff09immediately. The incoming \nrequire\n character string is the module's \nfile name\n, the name contains neither route nor suffix and it is case sensitive.\n\n\nrequire complete example\n\n\nNext, we can use Rotate to derive a subclass and create a new script \nSinRotate.js\n:\n\n\n// SinRotate.js\n\nvar Rotate = require(\nRotate\n);\n\nvar SinRotate = cc.Class({\n    extends: Rotate,\n    update: function (dt) {\n        this.rotation += this.speed * Math.sin(dt);\n    }\n});\n\n\n\n\nHere, we define a new component named SinRotate, which is inherited from Rotate, and rewrite the \nupdate\n method.\n\n\n\n\nThis component can also be accessed by other scripts as long as you use \nrequire(\"SinRotate\")\n.\n\n\n\n\nComments\uff1a\n  - \nrequire\n could be called at any place in the script at any time.\n  - All of the script will be automatically required when the game is started. At this time, the defined code in each module will be executed once, so no matter how many times it is required, the same example will be returned.\n  - When debugging, any module in the project can be required in the \nConsole\n of \nDeveloper Tools\n.\n\n\nDefine module\n\n\nDefine component\n\n\nEach individual script file is a module, such as the new script \nRotate.js\n mentioned above:\n\n\n// Rotate.js\n\nvar Rotate = cc.Class({\n    extends: cc.Component,\n    properties: {\n        speed: 1\n    },\n    update: function () {\n        this.transform.rotation += this.speed;\n    }\n});\n\n\n\n\nWhen you declare a component in the script, Cocos Creator will acquiesce to export it so other scripts can use it by requiring this module.\n\n\nDefine regular JavaScript module\n\n\nYou can not only define a component in the module, but you can also export any JavaScript object. Let's imagine that there is a script \nconfig.js\n\n\n// config.js\n\nvar config = {\n    moveSpeed: 10,\n    version: \n0.15\n,\n    showTutorial: true,\n\n    load: function () {\n        // ...\n    }\n};\nconfig.load();\n\n\n\n\nNow, if we want to access the \nconfig\n object in another script:\n\n\n// player.js\n\nvar config = require(\nconfig\n);\ncc.log(\nspeed is\n, config.moveSpeed);\n\n\n\n\nThe result will report an error: \"TypeError: Cannot read property 'moveSpeed' of null\", this is because \nconfig\n has not been set as the export object. We also need to set \nmodule.exports\n as \nconfig\n at the end of \nconfig.js\n:\n\n\nmodule.exports = config;\n\n\n\n\nThe reason for doing this is because as long as there is another script that requires it, what they actually get will be the \nmodule.exports\n object in here.\n\n\n\n\nSo why can we define Component without setting \nexports\n? \n  Because Component is a special type in Cocos Creator, if a script defines Component without declaring \nexports\n, Cocos Creator will set \nexports\n as Component automatically.\n\n\n\n\nComplete code is as follows:\n\n\n// config.js\n\nvar config = {\n    moveSpeed: 10,\n    version: \n0.15\n,\n    showTutorial: true,\n\n    load: function () {\n        // ...\n    }\n};\nconfig.load();\n\nmodule.exports = config;\n\n\n\n\n// player.js\n\nvar config = require(\nconfig\n);\ncc.log(\nspeed is\n, config.moveSpeed);\n\n\n\n\nIn this way, it can output correctly: \"speed is 10\".\n\n\nMore examples\n\n\nExport variable\n\n\n\n\nmodule.exports\n is a null object\uff08\n{}\n\uff09and can be added in a new field directly.\n\n\n\n\n// foobar.js:\n\nmodule.exports.foo = function () {\n    cc.log(\nfoo\n);\n};\nmodule.exports.bar = function () {\n    cc.log(\nbar\n);\n};\n\n\n\n\n// test.js:\n\nvar foobar = require(\nfoobar\n);\nfoobar.foo();    // \nfoo\n\nfoobar.bar();    // \nbar\n\n\n\n\n\n\n\nmodule.exports\n value can be any JavaScript type.\n\n\n\n\n// foobar.js:\n\nmodule.exports = {\n    FOO: function () {\n        this.type = \nfoo\n;\n    },\n    bar: \nbar\n\n};\n\n\n\n\n// test.js:\n\nvar foobar = require(\nfoobar\n);\nvar foo = new foobar.FOO();\ncc.log(foo.type);      // \nfoo\n\ncc.log(foobar.bar);    // \nbar\n\n\n\n\n\nPackaging a private variable\n\n\nEach script is a single action scope where the local variable defined using \nvar\n in the script cannot be accessed by external modules. We can package the private variable in the module easily:\n\n\n// foobar.js:\n\nvar dirty = false;\nmodule.exports = {\n    setDirty: function () {\n        dirty = true;\n    },\n    isDirty: function () {\n        return dirty;\n    },\n};\n\n\n\n\n// test1.js:\n\nvar foo = require(\nfoobar\n);\ncc.log(typeof foo.dirty);        // \nundefined\n\nfoo.setDirty();\n\n\n\n\n// test2.js:\n\nvar foo = require(\nfoobar\n);\ncc.log(foo.isDirty());           // true\n\n\n\n\nCaution: Remember to add \nvar\n before the variable to be defined, otherwise it will become the global variable!\n\n\n// foobar.js:\n\ndirty = false;        // Setting dirty as the global variable is not recommended! One Should add var before it!\nmodule.exports = {\n    setDirty: function () {\n        dirty = true;\n    },\n};\n\n\n\n\nCircular reference\n\n\n(Coming Soon...)\n\n\nThird party module reference\n\n\nPlease refer to \nthird party module reference file", 
            "title": "_Modular Script"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/modular-script/index.html#modularize-script", 
            "text": "Cocos Creator allows you to split the code into multiple script files and they can be called by each other. To implement this, you need to know how to define and use the module in Cocos Creator. This step is called  modularize  for short.  If you are not sure what modularization can do, you can consider it as:\n-  include  in C/C++\n-  using  in C#\n-  import  in Java and Python\n-  link in HTML  Modularization enables you to reference other script files in Cocos Creator:\n- Access parameters exported from other files\n- Call method other files that have been exported\n- Use type other files that have been exported\n- Use or inherit other Components  JavaScript in Cocos Creator uses the Common JS standard that is almost the same as Node.js to realize modularization, in short:\n- Each individual script file forms a module\n- Each module is an individual action scope\n- Reference other modules in the  synchronized   require  method\n- Set  module.exports  as an exported variable  If you still don't quite understand, don't worry, we will explain it in here.   In this article, the two terms \"module\" and \"script\" are equivalent. All the \"comment\" parts belong to advanced contents that don't need to be understood at the very start.\nNo matter how we define the module, all user designation codes will eventually be compiled into native JavaScript by Cocos Creator and can be operated directly in the browser.", 
            "title": "Modularize script"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/modular-script/index.html#reference-module", 
            "text": "", 
            "title": "Reference module"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/modular-script/index.html#require", 
            "text": "Other than the interface provided by Cocos Creator, all the user-defined modules will need to call  require  to be accessed. For instance, we have a component defined at  Rotate.js :  // Rotate.js\n\ncc.Class({\n   extends: cc.Component,\n   // ...\n});  Now if you want to access it in another script, you can:  var Rotate = require( Rotate );  What  require  returned is the object exported by the module. Normally, we would save the result to a variable\uff08 var Rotate \uff09immediately. The incoming  require  character string is the module's  file name , the name contains neither route nor suffix and it is case sensitive.", 
            "title": "require"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/modular-script/index.html#require-complete-example", 
            "text": "Next, we can use Rotate to derive a subclass and create a new script  SinRotate.js :  // SinRotate.js\n\nvar Rotate = require( Rotate );\n\nvar SinRotate = cc.Class({\n    extends: Rotate,\n    update: function (dt) {\n        this.rotation += this.speed * Math.sin(dt);\n    }\n});  Here, we define a new component named SinRotate, which is inherited from Rotate, and rewrite the  update  method.   This component can also be accessed by other scripts as long as you use  require(\"SinRotate\") .   Comments\uff1a\n  -  require  could be called at any place in the script at any time.\n  - All of the script will be automatically required when the game is started. At this time, the defined code in each module will be executed once, so no matter how many times it is required, the same example will be returned.\n  - When debugging, any module in the project can be required in the  Console  of  Developer Tools .", 
            "title": "require complete example"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/modular-script/index.html#define-module", 
            "text": "", 
            "title": "Define module"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/modular-script/index.html#define-component", 
            "text": "Each individual script file is a module, such as the new script  Rotate.js  mentioned above:  // Rotate.js\n\nvar Rotate = cc.Class({\n    extends: cc.Component,\n    properties: {\n        speed: 1\n    },\n    update: function () {\n        this.transform.rotation += this.speed;\n    }\n});  When you declare a component in the script, Cocos Creator will acquiesce to export it so other scripts can use it by requiring this module.", 
            "title": "Define component"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/modular-script/index.html#define-regular-javascript-module", 
            "text": "You can not only define a component in the module, but you can also export any JavaScript object. Let's imagine that there is a script  config.js  // config.js\n\nvar config = {\n    moveSpeed: 10,\n    version:  0.15 ,\n    showTutorial: true,\n\n    load: function () {\n        // ...\n    }\n};\nconfig.load();  Now, if we want to access the  config  object in another script:  // player.js\n\nvar config = require( config );\ncc.log( speed is , config.moveSpeed);  The result will report an error: \"TypeError: Cannot read property 'moveSpeed' of null\", this is because  config  has not been set as the export object. We also need to set  module.exports  as  config  at the end of  config.js :  module.exports = config;  The reason for doing this is because as long as there is another script that requires it, what they actually get will be the  module.exports  object in here.   So why can we define Component without setting  exports ? \n  Because Component is a special type in Cocos Creator, if a script defines Component without declaring  exports , Cocos Creator will set  exports  as Component automatically.   Complete code is as follows:  // config.js\n\nvar config = {\n    moveSpeed: 10,\n    version:  0.15 ,\n    showTutorial: true,\n\n    load: function () {\n        // ...\n    }\n};\nconfig.load();\n\nmodule.exports = config;  // player.js\n\nvar config = require( config );\ncc.log( speed is , config.moveSpeed);  In this way, it can output correctly: \"speed is 10\".", 
            "title": "Define regular JavaScript module"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/modular-script/index.html#more-examples", 
            "text": "", 
            "title": "More examples"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/modular-script/index.html#export-variable", 
            "text": "module.exports  is a null object\uff08 {} \uff09and can be added in a new field directly.   // foobar.js:\n\nmodule.exports.foo = function () {\n    cc.log( foo );\n};\nmodule.exports.bar = function () {\n    cc.log( bar );\n};  // test.js:\n\nvar foobar = require( foobar );\nfoobar.foo();    //  foo \nfoobar.bar();    //  bar    module.exports  value can be any JavaScript type.   // foobar.js:\n\nmodule.exports = {\n    FOO: function () {\n        this.type =  foo ;\n    },\n    bar:  bar \n};  // test.js:\n\nvar foobar = require( foobar );\nvar foo = new foobar.FOO();\ncc.log(foo.type);      //  foo \ncc.log(foobar.bar);    //  bar", 
            "title": "Export variable"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/modular-script/index.html#packaging-a-private-variable", 
            "text": "Each script is a single action scope where the local variable defined using  var  in the script cannot be accessed by external modules. We can package the private variable in the module easily:  // foobar.js:\n\nvar dirty = false;\nmodule.exports = {\n    setDirty: function () {\n        dirty = true;\n    },\n    isDirty: function () {\n        return dirty;\n    },\n};  // test1.js:\n\nvar foo = require( foobar );\ncc.log(typeof foo.dirty);        //  undefined \nfoo.setDirty();  // test2.js:\n\nvar foo = require( foobar );\ncc.log(foo.isDirty());           // true  Caution: Remember to add  var  before the variable to be defined, otherwise it will become the global variable!  // foobar.js:\n\ndirty = false;        // Setting dirty as the global variable is not recommended! One Should add var before it!\nmodule.exports = {\n    setDirty: function () {\n        dirty = true;\n    },\n};", 
            "title": "Packaging a private variable"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/modular-script/index.html#circular-reference", 
            "text": "(Coming Soon...)", 
            "title": "Circular reference"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/modular-script/index.html#third-party-module-reference", 
            "text": "Please refer to  third party module reference file", 
            "title": "Third party module reference"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/third-party-module/index.html", 
            "text": "Third party JavaScript module reference\n\n\nIf you don't know anything about modular script, you should read the \nModular script\n file first.\n\n\nCurrently, Cocos Creator only supports the third party npm module reference. Of course, if what the script developer has written accords with the Node.js standard, it can also be referenced. You can find further introduction to Node.js and npm on the official documentation page:\n\n\n\n\nNode.js modules\n\n\nWhat is npm\n\n\n\n\nHow to use npm module\n\n\nWhen you find the npm module you need, the first step you need to do is install this module (take box2dweb-commonjs for example) in your own project directory:\n\n\n cd /path/to/project\n\n npm install box2dweb-commonjs\n\n\n\n\nThen all you have to do is to \nrequire\n the module in the component script where you need to use this module, then you are good to go:\n\n\nvar box2d = require('box2dweb-commonjs');\n\n\n\n\nIn this way, the third party module can be contained in your game automatically, even in the packaging process it can be packaged into the game script.\n\n\nCautions\n\n\n\n\nOnly supports pure JavaScript modules\n\uff1anpm contains varied modules, many of them use the API of Node.js which can not be referenced by the component because the ultimate operating environment of the component is a browser which does not have Node.js to support.\n\n\nNative environments do not support DOM API\n\uff1aas everyone knows, browsers contain a mass of DOM API. jQuery is one famous DOM operation library. Although modules using these API can operate in the HTML5 environment, they cannot operate in the native environment. This is because the native enviroment does not contain the web layout engine providing DOM API.\n\n\n\n\nOther probable module dependence patterns in the future\n\n\nTheoretically, \nrequire\n can be used to reference any JavaScript script. Although it is not currently recommended to reference third party modules in this way, it will still provide better support in the future.\n\n\nBesides, many developers are used to referencing external JavaScript script, even the off-line script in \nindex.html\n. Cocos Creator currently hasn't released how to use \nindex.html\n. Developers can only add references manually in the page file after packaging, but we are working on how to provide a more friendly way for developers to customize \nindex.html\n.", 
            "title": "_Third Party Module"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/third-party-module/index.html#third-party-javascript-module-reference", 
            "text": "If you don't know anything about modular script, you should read the  Modular script  file first.  Currently, Cocos Creator only supports the third party npm module reference. Of course, if what the script developer has written accords with the Node.js standard, it can also be referenced. You can find further introduction to Node.js and npm on the official documentation page:   Node.js modules  What is npm", 
            "title": "Third party JavaScript module reference"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/third-party-module/index.html#how-to-use-npm-module", 
            "text": "When you find the npm module you need, the first step you need to do is install this module (take box2dweb-commonjs for example) in your own project directory:   cd /path/to/project  npm install box2dweb-commonjs  Then all you have to do is to  require  the module in the component script where you need to use this module, then you are good to go:  var box2d = require('box2dweb-commonjs');  In this way, the third party module can be contained in your game automatically, even in the packaging process it can be packaged into the game script.", 
            "title": "How to use npm module"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/third-party-module/index.html#cautions", 
            "text": "Only supports pure JavaScript modules \uff1anpm contains varied modules, many of them use the API of Node.js which can not be referenced by the component because the ultimate operating environment of the component is a browser which does not have Node.js to support.  Native environments do not support DOM API \uff1aas everyone knows, browsers contain a mass of DOM API. jQuery is one famous DOM operation library. Although modules using these API can operate in the HTML5 environment, they cannot operate in the native environment. This is because the native enviroment does not contain the web layout engine providing DOM API.", 
            "title": "Cautions"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/third-party-module/index.html#other-probable-module-dependence-patterns-in-the-future", 
            "text": "Theoretically,  require  can be used to reference any JavaScript script. Although it is not currently recommended to reference third party modules in this way, it will still provide better support in the future.  Besides, many developers are used to referencing external JavaScript script, even the off-line script in  index.html . Cocos Creator currently hasn't released how to use  index.html . Developers can only add references manually in the page file after packaging, but we are working on how to provide a more friendly way for developers to customize  index.html .", 
            "title": "Other probable module dependence patterns in the future"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/web-debug-scripts/index.html", 
            "text": "Debug script in the browser\n\n\nComing soon...", 
            "title": "_Web Debug Scripts"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/web-debug-scripts/index.html#debug-script-in-the-browser", 
            "text": "Coming soon...", 
            "title": "Debug script in the browser"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/javascript-primer/index.html", 
            "text": "JavaScript quick start\n\n\n\n\nThis text is adapted from \nA JavaScript Primer For Meteor\n\n\n\n\nOverview\n\n\nThis text mainly introduces JavaScript. Beginners will have a general understanding about JavaScript and would have the right skills for Cocos Creator development after they master the contents of this text.\n\n\nJavaScript is a programming language full of controversy: it is named after Java, but in fact, it has nothing to do with Java. The creation of JavaScript \nonly took 10 days\n, but it managed to develop into the most popular Web development language in the world in 20 years. If you are looking for the reason behind the status and popularity of JavaScript nowadays, there's no doubt it is because of its easy-to-use language features. Of course, mastering JavaScript is a tough task, but learning knowledge enough to develop Web Apps and games is easy. If you have some basic programming skills, then it won't take you too long to get familiar with JavaScript's language features.\n\n\nIn addition, you may use some exsiting patterns while using Cocos Creator to develop a game under most circumstances. According to the Pareto principle (also known as the 80/20 principle), mastering  20% of one language is enough for you to handle more than 80% of situations. Now, let's learn enough JavaScript knowledge in the shortest time so that we can begin to develop a game with Cocos Creator.\n\n\nTry when you're reading\n\n\nIf you can see this article, then you already have a full-featured JavaScript development environment--I am talking about the browser you are using!\n\n\nAll the examples on this page, you can type them into your browser's console and check their running results. If you don't know how to do this, you can read \nGuidance of how to open the console in different browsers\n.\n\n\nAre you ready? Let's start learning JavaScript!\n\n\nVariable\n\n\nIn JavaScript, we declare a variable like this:\n\n\nvar a;\n\n\n\n\nFollowing the reserved word \nvar\n is a variable name. Then we can assign the variable:\n\n\nvar a = 12;\n\n\n\n\nWhen reading JavaScript code from others, you may also see variable declaration like this:\n\n\na = 12;\n\n\n\n\nIf you try in the browser's console, you will find JavaScript won't report an error when the variable declaration omits \nvar\n, but in the Cocos Creator project script, \nvar\n of variable declaration can not be omitted, otherwise the compiler will report an error.\n\n\nFunction\n\n\nIn JavaScript, we declare a function like this:\n\n\nvar myAwesomeFunction = function (myArgument) {\n    // does something\n}\n\n\n\n\nCall the function like this:\n\n\nmyAwesomeFunction(something);\n\n\n\n\nWe can see that function declaration, same as variable declaration, also follows the \nvar something = somethingElse\n pattern. Because in JavaScript, function and variable are essentially the same, we can introduce one function as a parameter into another function like this:\n\n\nsquare = function (a) {\n    return a * a;\n}\napplyOperation = function (f, a) {\n    return f(a);\n}\napplyOperation (square, 10); // 100\n\n\n\n\nReturned value\n\n\nThe returned value of a function is defined by a sentence beginning with \nreturn\n. Here, what we need to know is that the contents after the sentence beginning \nreturn\n in the function will not be executed.\n\n\nmyFunction = function (a) {\n    return a * 3;\n    explodeComputer(); // will never get executed (hopefully!)\n}\n\n\n\n\nIf\n\n\nIn JavaScript, a conditional judgement statement \nif\n should be used like this:\n\n\nif (foo) {\n    return bar;\n}\n\n\n\n\nIf/Else\n\n\nIf the value after \nif\n is false, the statement in \nelse\n will be executed:\n\n\nif (foo) {\n    function1();\n}\nelse {\n    function2();\n}\n\n\n\n\nAn If/Else conditional judgement can also be wrote into one line like this:\n\n\nfoo ? function1() : function2();\n\n\n\n\nWhen the value of \nfoo\n is true, the expression will send back the execution result of \nfunction1()\n, otherwise it will send back the execution result of \nfunction2()\n. When we need to assign variables according to the condition, writing it like this is very convenient:\n\n\nvar n = foo ? 1 : 2;\n\n\n\n\nThe statement above can be expressed as \"when \nfoo\n is true, assign \nn\n as 1, otherwise assign it as 2\".\n\n\nOf course, we can use \nelse if\n to handle more judgement types:\n\n\nif (foo) {\n    function1();\n}\nelse if (bar) {\n    function2();\n}\nelse {\n    function3();\n}\n\n\n\n\nJavaScript Array\n\n\nIn JavaScript, declare an array like this:\n\n\na = [123, 456, 789];\n\n\n\n\nAccess array members like this: (Start indexing from 0)\n\n\na[1]; // 456\n\n\n\n\nJavaScript Object\n\n\nWe declare an object like this:\n\n\nmyProfile = {\n    name: \nJare Guo\n,\n    email: \nblabla@gmail.com\n,\n    'zip code': 12345,\n    isInvited: true\n}\n\n\n\n\nIn the grammar for object declaration\uff08\nmyProfile = {...}\n\uff09, there is one pair of key values separated by a comma. Each pair includes one key (character string type, sometimes quoted by double quotation marks) and a value (could be any type: including string, number, boolean, variable name, array, object, and even function). We call such pairs of key values a property of the object, key is the property name and value is the property value.\n\n\nYou can nest other objects or arrays composed by a set of objects in the value\n\n\nmyProfile = {\n    name: \nJare Guo\n,\n    email: \nblabla@gmail.com\n,\n    city: \nXiamen\n,\n    points: 1234,\n    isInvited: true,\n    friends: [\n        {\n            name: \nJohnny\n,\n            email: \nblablabla@gmail.com\n\n        },\n        {\n            name: \nNantas\n,\n            email: \npiapiapia@gmail.com\n\n        }\n    ]\n}\n\n\n\n\nAccessing one property of the object is very easy, all we need to do is use dot grammar. It can also combine with the array member's access:\n\n\nmyProfile.name; // Jare Guo\nmyProfile.friends[1].name; // Nantas\n\n\n\n\nObjects are being largely used in JavaScript, and so is it in the function parameter passing. For example, in Cocos Creator, we can define the FireClass object like this:\n\n\nvar MyComponent = cc.Class({\n    extends: cc.Component\n});\n\n\n\n\n{extends: cc.Component}\n is an object acting as a function parameter. In most circumstances in JavaScript, we don't have to name an object when we use it and we may probably use it directly like this.\n\n\nAnonymous function\n\n\nWe have tried to use the grammar of the variable declaration to define functions:\n\n\nmyFunction = function (myArgument) {\n    // do something\n}\n\n\n\n\nNow let's go over the method of introducing a function as a parameter into other functions:\n\n\nsquare = function (a) {\n    return a * a;\n}\napplyOperation = function (f, a) {\n    return f(a);\n}\napplyOperation(square, 10); // 100\n\n\n\n\nWe have also learnt how lazy JavaScript's grammar can be, so we can use the method below to replace multiple function declarations above:\n\n\napplyOperation = function (f, a) {\n    return f(a);\n}\napplyOperation(\n    function(a){\n      return a*a;\n    },\n    10\n) // 100\n\n\n\n\nThis time, we don't declare the \nsquare\n function and pass \nsquare\n as a parameter. Instead, we write a new function body in the parameter spot. This is called anonymous function and is the most extensively used pattern in JavaScript.\n\n\nChain-type grammar\n\n\nNow, we will introduce a type of grammar often used in array and character string operation:\n\n\nvar myArray = [123, 456];\nmyArray.push(789) // 123, 456, 789\nvar myString = \nabcdef\n;\nmyString.replace(\na\n, \nz\n); // \nzbcdef\n\n\n\n\n\nThe point symbol in the code above means \"call \nreplace\n a function of the \nmyString\n character string object, and pass \na\n and \nz\n as parameters, then get the returned value\".\n\n\nThe biggest advantage of using point symbol expression is that you can link multiple tasks into one expression, which of course is on the condition of each function being called having the proper returned value. We won't spend too much time on introducing how to define a linkable function, but it's pretty simple to use them as long as you use the following pattern: \nsomething.function1().function2().function3()\n\n\nEach link in the chain will receive an original value, call a function and then pass the function execution result to the next step:\n\n\nvar n = 5;\nn.double().square(); //100\n\n\n\n\nThis\n\n\nthis\n could be the most difficult concept to understand and master in JavaScript.\n\n\nIn short, \nthis\n key word can give you access to the object being processed; like a chameleon,\nthis\n can also change according to the execution environment.\n\n\nIt is very complicated to explain the principle of \nthis\n, so let's use two kinds of tools to help us understand the value of \nthis\n in practice:\n\n\nFirst of all, the most common and frequently used is \nconsole.log()\n. It can output the information of an object to the browser console. Add one \nconsole.log()\n in the beginning of each function body to make sure we know what object the current operating environment is processing.\n\n\nmyFunction = function (a, b) {\n    console.log(this);\n    // do something\n}\n\n\n\n\nThe other method is to assign \nthis\n to another variable:\n\n\nmyFunction = function (a, b) {\n    var myObject = this;\n    // do something\n}\n\n\n\n\nAt first sight, it may seem to have no effect, but it actually allows you to use the variable \nmyObject\n to imply the initial execution function object safely without being concerned about \nthis\n maybe turning into other stuff in the code after. \n\n\nOperator\n\n\n=\n is the assigning operator, \na = 12\n means to assign\u201c12\u201d to the variable \na\n.\n\n\nIf you need to compare two values, you can use \n==\n, for example, \na == 12\n.\n\n\n===\n is a unique operator in JavaScript, it can tell whether the value and type in both ends are all exactly the same (type refers to string, number and so on). \n\n\na = \n12\n;\na == 12; // true\na === 12; // false\n\n\n\n\nIn most cases, we recommend you to use the operator \n===\n to compare the two values, because the situation that tries to compare two different types with the same value is very rare.\n\n\nFollowing is the comparison operator where JavaScript judges whether the two values are equal or not:\n\n\na = 12;\na !== 11; // true\n\n\n\n\nOperator \n!\n can also be used alone to negate a boolean value:\n\n\na = true;\n!a; // false\n\n\n\n\nOperator \n!\n will always get a boolean type value, so it can be used to transform a non-boolean type value into a boolean type:\n\n\na = 12;\n!a; // false\n!!a; // true\n\n\n\n\nOr\uff1a\n\n\na = 0;\n!a; // true\n!!a; // false\n\n\n\n\nCode style\n\n\nAt last, the following rules on code style can help us write more specific code:\n\n\n\n\nUse camel-case naming: define the variable name like \nmyRandomVariable\n, but not \nmy_random_variable\n\n\nType one \n;\n at each end of the line, although \n;\n in the end of a line can be ignored in JavaScript\n\n\nPut spacing before and after each keyword, such as \na = b + 1\n rather than \na=b+1\n\n\n\n\nCombine the knowledge we have learnt\n\n\nThe basic JavaScript grammar knowledge introduction has finished, now let's see whether we can understand an actual Cocos Creator script code:\n\n\nvar Comp = cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        target: {\n            default: null,\n            type: cc.Entity\n        }\n    },\n\n    onStart: function () {\n        this.target = cc.Entity.find('/Main Player/Bip/Head');\n    },\n\n    update: function () {\n        this.transform.worldPosition = this.target.transform.worldPosition;\n    }\n});\n\n\n\n\nThis piece of code defines a new component to the engine. This component has a \ntarget\n parameter, and it will be initialized into a specified object during execution and set itself to the same coordinate as the \ntarget\n in every frame during the execution process.\n\n\nLet's go through the function of each sentence (I will highlight useful grammar patterns):\n\n\nvar Comp = cc.Class({\n\uff1aHere we use the object \ncc\n , call object's \nClass()\n method (this method is one property of the \ncc\n object) by \ndot syntax \n, the parameter passing during the call is an anonymous \nJavaScript object\n \uff08\n{}\n\uff09.\n\n\ntarget: { default: null, type: cc.Entity }\n\uff1aThis pair of key values declare a property named \ntarget\n and its value is another JavaScript anonymous object which defines the default value and value type of the target.\n\n\nextends: cc.Component\n\uff1aThis pair of key values declare that the parent of this Class is cc.Component. cc.Component is Cocos Creator's built-in type.\n\n\nonStart: function () {\n\uff1aThis pair of key value defines a member method called \nonStart\n whose value is an anonymous function.\n\n\nthis.target = cc.Entity.find('\n\uff1aIn the context of this sentence, \nthis\n stands for the component being created, here we access the \ntarget\n property by \nthis.target\n.\n\n\nFurther study\n\n\nThis brief course cannot replace systematic JavaScript learning from any angle, however the grammar patterns introduced in here can help you understand the vast majority of code in Cocos Creator files and courses, at least from a grammar perspective.\n\n\nIf you prefer learning by practice like I do, then you may start to learn how to develop a game in Cocos Creator now following the course and files!\n\n\nJavaScript Resources\n\n\nHere are some JavaScript primers:\n\n\n\n\nJavaScript standard reference tutorial\n\n\nJavaScript secret garden", 
            "title": "_JavaScript Primer"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/javascript-primer/index.html#javascript-quick-start", 
            "text": "This text is adapted from  A JavaScript Primer For Meteor", 
            "title": "JavaScript quick start"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/javascript-primer/index.html#overview", 
            "text": "This text mainly introduces JavaScript. Beginners will have a general understanding about JavaScript and would have the right skills for Cocos Creator development after they master the contents of this text.  JavaScript is a programming language full of controversy: it is named after Java, but in fact, it has nothing to do with Java. The creation of JavaScript  only took 10 days , but it managed to develop into the most popular Web development language in the world in 20 years. If you are looking for the reason behind the status and popularity of JavaScript nowadays, there's no doubt it is because of its easy-to-use language features. Of course, mastering JavaScript is a tough task, but learning knowledge enough to develop Web Apps and games is easy. If you have some basic programming skills, then it won't take you too long to get familiar with JavaScript's language features.  In addition, you may use some exsiting patterns while using Cocos Creator to develop a game under most circumstances. According to the Pareto principle (also known as the 80/20 principle), mastering  20% of one language is enough for you to handle more than 80% of situations. Now, let's learn enough JavaScript knowledge in the shortest time so that we can begin to develop a game with Cocos Creator.", 
            "title": "Overview"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/javascript-primer/index.html#try-when-youre-reading", 
            "text": "If you can see this article, then you already have a full-featured JavaScript development environment--I am talking about the browser you are using!  All the examples on this page, you can type them into your browser's console and check their running results. If you don't know how to do this, you can read  Guidance of how to open the console in different browsers .  Are you ready? Let's start learning JavaScript!", 
            "title": "Try when you're reading"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/javascript-primer/index.html#variable", 
            "text": "In JavaScript, we declare a variable like this:  var a;  Following the reserved word  var  is a variable name. Then we can assign the variable:  var a = 12;  When reading JavaScript code from others, you may also see variable declaration like this:  a = 12;  If you try in the browser's console, you will find JavaScript won't report an error when the variable declaration omits  var , but in the Cocos Creator project script,  var  of variable declaration can not be omitted, otherwise the compiler will report an error.", 
            "title": "Variable"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/javascript-primer/index.html#function", 
            "text": "In JavaScript, we declare a function like this:  var myAwesomeFunction = function (myArgument) {\n    // does something\n}  Call the function like this:  myAwesomeFunction(something);  We can see that function declaration, same as variable declaration, also follows the  var something = somethingElse  pattern. Because in JavaScript, function and variable are essentially the same, we can introduce one function as a parameter into another function like this:  square = function (a) {\n    return a * a;\n}\napplyOperation = function (f, a) {\n    return f(a);\n}\napplyOperation (square, 10); // 100", 
            "title": "Function"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/javascript-primer/index.html#returned-value", 
            "text": "The returned value of a function is defined by a sentence beginning with  return . Here, what we need to know is that the contents after the sentence beginning  return  in the function will not be executed.  myFunction = function (a) {\n    return a * 3;\n    explodeComputer(); // will never get executed (hopefully!)\n}", 
            "title": "Returned value"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/javascript-primer/index.html#if", 
            "text": "In JavaScript, a conditional judgement statement  if  should be used like this:  if (foo) {\n    return bar;\n}", 
            "title": "If"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/javascript-primer/index.html#ifelse", 
            "text": "If the value after  if  is false, the statement in  else  will be executed:  if (foo) {\n    function1();\n}\nelse {\n    function2();\n}  An If/Else conditional judgement can also be wrote into one line like this:  foo ? function1() : function2();  When the value of  foo  is true, the expression will send back the execution result of  function1() , otherwise it will send back the execution result of  function2() . When we need to assign variables according to the condition, writing it like this is very convenient:  var n = foo ? 1 : 2;  The statement above can be expressed as \"when  foo  is true, assign  n  as 1, otherwise assign it as 2\".  Of course, we can use  else if  to handle more judgement types:  if (foo) {\n    function1();\n}\nelse if (bar) {\n    function2();\n}\nelse {\n    function3();\n}", 
            "title": "If/Else"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/javascript-primer/index.html#javascript-array", 
            "text": "In JavaScript, declare an array like this:  a = [123, 456, 789];  Access array members like this: (Start indexing from 0)  a[1]; // 456", 
            "title": "JavaScript Array"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/javascript-primer/index.html#javascript-object", 
            "text": "We declare an object like this:  myProfile = {\n    name:  Jare Guo ,\n    email:  blabla@gmail.com ,\n    'zip code': 12345,\n    isInvited: true\n}  In the grammar for object declaration\uff08 myProfile = {...} \uff09, there is one pair of key values separated by a comma. Each pair includes one key (character string type, sometimes quoted by double quotation marks) and a value (could be any type: including string, number, boolean, variable name, array, object, and even function). We call such pairs of key values a property of the object, key is the property name and value is the property value.  You can nest other objects or arrays composed by a set of objects in the value  myProfile = {\n    name:  Jare Guo ,\n    email:  blabla@gmail.com ,\n    city:  Xiamen ,\n    points: 1234,\n    isInvited: true,\n    friends: [\n        {\n            name:  Johnny ,\n            email:  blablabla@gmail.com \n        },\n        {\n            name:  Nantas ,\n            email:  piapiapia@gmail.com \n        }\n    ]\n}  Accessing one property of the object is very easy, all we need to do is use dot grammar. It can also combine with the array member's access:  myProfile.name; // Jare Guo\nmyProfile.friends[1].name; // Nantas  Objects are being largely used in JavaScript, and so is it in the function parameter passing. For example, in Cocos Creator, we can define the FireClass object like this:  var MyComponent = cc.Class({\n    extends: cc.Component\n});  {extends: cc.Component}  is an object acting as a function parameter. In most circumstances in JavaScript, we don't have to name an object when we use it and we may probably use it directly like this.", 
            "title": "JavaScript Object"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/javascript-primer/index.html#anonymous-function", 
            "text": "We have tried to use the grammar of the variable declaration to define functions:  myFunction = function (myArgument) {\n    // do something\n}  Now let's go over the method of introducing a function as a parameter into other functions:  square = function (a) {\n    return a * a;\n}\napplyOperation = function (f, a) {\n    return f(a);\n}\napplyOperation(square, 10); // 100  We have also learnt how lazy JavaScript's grammar can be, so we can use the method below to replace multiple function declarations above:  applyOperation = function (f, a) {\n    return f(a);\n}\napplyOperation(\n    function(a){\n      return a*a;\n    },\n    10\n) // 100  This time, we don't declare the  square  function and pass  square  as a parameter. Instead, we write a new function body in the parameter spot. This is called anonymous function and is the most extensively used pattern in JavaScript.", 
            "title": "Anonymous function"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/javascript-primer/index.html#chain-type-grammar", 
            "text": "Now, we will introduce a type of grammar often used in array and character string operation:  var myArray = [123, 456];\nmyArray.push(789) // 123, 456, 789\nvar myString =  abcdef ;\nmyString.replace( a ,  z ); //  zbcdef   The point symbol in the code above means \"call  replace  a function of the  myString  character string object, and pass  a  and  z  as parameters, then get the returned value\".  The biggest advantage of using point symbol expression is that you can link multiple tasks into one expression, which of course is on the condition of each function being called having the proper returned value. We won't spend too much time on introducing how to define a linkable function, but it's pretty simple to use them as long as you use the following pattern:  something.function1().function2().function3()  Each link in the chain will receive an original value, call a function and then pass the function execution result to the next step:  var n = 5;\nn.double().square(); //100", 
            "title": "Chain-type grammar"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/javascript-primer/index.html#this", 
            "text": "this  could be the most difficult concept to understand and master in JavaScript.  In short,  this  key word can give you access to the object being processed; like a chameleon, this  can also change according to the execution environment.  It is very complicated to explain the principle of  this , so let's use two kinds of tools to help us understand the value of  this  in practice:  First of all, the most common and frequently used is  console.log() . It can output the information of an object to the browser console. Add one  console.log()  in the beginning of each function body to make sure we know what object the current operating environment is processing.  myFunction = function (a, b) {\n    console.log(this);\n    // do something\n}  The other method is to assign  this  to another variable:  myFunction = function (a, b) {\n    var myObject = this;\n    // do something\n}  At first sight, it may seem to have no effect, but it actually allows you to use the variable  myObject  to imply the initial execution function object safely without being concerned about  this  maybe turning into other stuff in the code after.", 
            "title": "This"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/javascript-primer/index.html#operator", 
            "text": "=  is the assigning operator,  a = 12  means to assign\u201c12\u201d to the variable  a .  If you need to compare two values, you can use  == , for example,  a == 12 .  ===  is a unique operator in JavaScript, it can tell whether the value and type in both ends are all exactly the same (type refers to string, number and so on).   a =  12 ;\na == 12; // true\na === 12; // false  In most cases, we recommend you to use the operator  ===  to compare the two values, because the situation that tries to compare two different types with the same value is very rare.  Following is the comparison operator where JavaScript judges whether the two values are equal or not:  a = 12;\na !== 11; // true  Operator  !  can also be used alone to negate a boolean value:  a = true;\n!a; // false  Operator  !  will always get a boolean type value, so it can be used to transform a non-boolean type value into a boolean type:  a = 12;\n!a; // false\n!!a; // true  Or\uff1a  a = 0;\n!a; // true\n!!a; // false", 
            "title": "Operator"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/javascript-primer/index.html#code-style", 
            "text": "At last, the following rules on code style can help us write more specific code:   Use camel-case naming: define the variable name like  myRandomVariable , but not  my_random_variable  Type one  ;  at each end of the line, although  ;  in the end of a line can be ignored in JavaScript  Put spacing before and after each keyword, such as  a = b + 1  rather than  a=b+1", 
            "title": "Code style"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/javascript-primer/index.html#combine-the-knowledge-we-have-learnt", 
            "text": "The basic JavaScript grammar knowledge introduction has finished, now let's see whether we can understand an actual Cocos Creator script code:  var Comp = cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        target: {\n            default: null,\n            type: cc.Entity\n        }\n    },\n\n    onStart: function () {\n        this.target = cc.Entity.find('/Main Player/Bip/Head');\n    },\n\n    update: function () {\n        this.transform.worldPosition = this.target.transform.worldPosition;\n    }\n});  This piece of code defines a new component to the engine. This component has a  target  parameter, and it will be initialized into a specified object during execution and set itself to the same coordinate as the  target  in every frame during the execution process.  Let's go through the function of each sentence (I will highlight useful grammar patterns):  var Comp = cc.Class({ \uff1aHere we use the object  cc  , call object's  Class()  method (this method is one property of the  cc  object) by  dot syntax  , the parameter passing during the call is an anonymous  JavaScript object  \uff08 {} \uff09.  target: { default: null, type: cc.Entity } \uff1aThis pair of key values declare a property named  target  and its value is another JavaScript anonymous object which defines the default value and value type of the target.  extends: cc.Component \uff1aThis pair of key values declare that the parent of this Class is cc.Component. cc.Component is Cocos Creator's built-in type.  onStart: function () { \uff1aThis pair of key value defines a member method called  onStart  whose value is an anonymous function.  this.target = cc.Entity.find(' \uff1aIn the context of this sentence,  this  stands for the component being created, here we access the  target  property by  this.target .", 
            "title": "Combine the knowledge we have learnt"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/javascript-primer/index.html#further-study", 
            "text": "This brief course cannot replace systematic JavaScript learning from any angle, however the grammar patterns introduced in here can help you understand the vast majority of code in Cocos Creator files and courses, at least from a grammar perspective.  If you prefer learning by practice like I do, then you may start to learn how to develop a game in Cocos Creator now following the course and files!", 
            "title": "Further study"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/javascript-primer/index.html#javascript-resources", 
            "text": "Here are some JavaScript primers:   JavaScript standard reference tutorial  JavaScript secret garden", 
            "title": "JavaScript Resources"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/attributes/index.html", 
            "text": "Attribute reference\n\n\nAttribute inspector corresponding attributes\n\n\n\n\n\n\n\n\nParameter name\n\n\nExplanation\n\n\nType\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ntype\n\n\nrestrict the data type for attribute\n\n\n(Any)\n\n\nundefined\n\n\n\n\n\n\nvisible\n\n\nshow or hide in the \nattribute inspector\n panel\n\n\nboolean\n\n\n(note 1)\n\n\n\n\n\n\ndisplayName\n\n\nshow another name in the \nattribute inspector\n panel\n\n\nstring\n\n\n\n\n\n\n\n\ntooltip\n\n\nadd Tooltip for attribute in the \nattribute inspector\n panel\n\n\nstring\n\n\n\n\n\n\n\n\nmultiline\n\n\nuse multiple lined text box in the \nattribute inspector\n panel\n\n\nboolean\n\n\nfalse\n\n\n\n\n\n\nreadonly\n\n\nread-only in the \nattribute inspector\n panel\n\n\nboolean\n\n\nfalse\n\n\n\n\n\n\nrange\n\n\nrestrict the maximum and minimum values in slider form\n\n\n[min, max]\n\n\n\n\n\n\n\n\n\n\nSerialization associated attributes\n\n\nThese attributes cannot be used for the get method.\n\n\n\n\n\n\n\n\nParameter name\n\n\nExplanation\n\n\nType\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nserializable\n\n\nserialize this attribute\n\n\nboolean\n\n\ntrue\n\n\n\n\n\n\neditorOnly\n\n\nreject this attribute before exporting the project\n\n\nboolean\n\n\nfalse\n\n\n\n\n\n\n\n\nOther attributes\n\n\n\n\n\n\n\n\nParameter name\n\n\nExplanation\n\n\nType\n\n\nremark\n\n\n\n\n\n\n\n\n\n\ndefault\n\n\ndefine default for the attribute\n\n\n(Any)\n\n\n(note 2,3)\n\n\n\n\n\n\nurl\n\n\nthis attribute is the URL of an assigned asset\n\n\nfunction () {}\n\n\n\n\n\n\n\n\nnotify\n\n\ntrigger a specific method when altering the attribute\n\n\nfunction (oldValue) {}\n\n\nthe default attribute is needed to define\n\n\n\n\n\n\noverride\n\n\nwhen reloading the super class attribute, this parameter needs to be defined as true\n\n\nboolean\n\n\ndefault is false\n\n\n\n\n\n\nanimatable\n\n\nwhether this attribute can be altered by animation\n\n\nboolean\n\n\ndefault is true\n\n\n\n\n\n\n\n\nNote 1:\n The visibility default is determined by the attribute name. When the attribute name starts with an underscore \n_\n, then the default is set to hide, otherwise it is by default set to show.\n\n\nNote 2:\n Alterations to the serializable attribute default value won't influence a scene that has already been saved or opened.\n\n\nNote 3:\n Default can be defined as a function, so the default initialization for \nArray\n and \nObject\n can be done safely. For example:\n\n\n  properties: {\n    names: {\n      default: function () {\n        return ['foo', 'bar', 'foobar'];\n      },\n      type: [cc.String]\n    },\n  }", 
            "title": "_Attributes"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/attributes/index.html#attribute-reference", 
            "text": "", 
            "title": "Attribute reference"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/attributes/index.html#attribute-inspector-corresponding-attributes", 
            "text": "Parameter name  Explanation  Type  Default      type  restrict the data type for attribute  (Any)  undefined    visible  show or hide in the  attribute inspector  panel  boolean  (note 1)    displayName  show another name in the  attribute inspector  panel  string     tooltip  add Tooltip for attribute in the  attribute inspector  panel  string     multiline  use multiple lined text box in the  attribute inspector  panel  boolean  false    readonly  read-only in the  attribute inspector  panel  boolean  false    range  restrict the maximum and minimum values in slider form  [min, max]", 
            "title": "Attribute inspector corresponding attributes"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/attributes/index.html#serialization-associated-attributes", 
            "text": "These attributes cannot be used for the get method.     Parameter name  Explanation  Type  Default      serializable  serialize this attribute  boolean  true    editorOnly  reject this attribute before exporting the project  boolean  false", 
            "title": "Serialization associated attributes"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/attributes/index.html#other-attributes", 
            "text": "Parameter name  Explanation  Type  remark      default  define default for the attribute  (Any)  (note 2,3)    url  this attribute is the URL of an assigned asset  function () {}     notify  trigger a specific method when altering the attribute  function (oldValue) {}  the default attribute is needed to define    override  when reloading the super class attribute, this parameter needs to be defined as true  boolean  default is false    animatable  whether this attribute can be altered by animation  boolean  default is true     Note 1:  The visibility default is determined by the attribute name. When the attribute name starts with an underscore  _ , then the default is set to hide, otherwise it is by default set to show.  Note 2:  Alterations to the serializable attribute default value won't influence a scene that has already been saved or opened.  Note 3:  Default can be defined as a function, so the default initialization for  Array  and  Object  can be done safely. For example:    properties: {\n    names: {\n      default: function () {\n        return ['foo', 'bar', 'foobar'];\n      },\n      type: [cc.String]\n    },\n  }", 
            "title": "Other attributes"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/coding-standards/index.html", 
            "text": "Recommended coding standards\n\n\nThe following are the coding standards that the Cocos Creator development team use. They are included in the manual for game developers\u2019 and tool developers' reference.\n\n\nContent index\n\n\n\n\nNaming standards\n\n\nGrammar standards\n\n\nWriting standards\n\n\n\n\nNaming standards\n\n\n\n\nWhen we name the variables, functions and living examples, we use camelCase nomenclature\n\n\n\n\n```javascript\n   // bad\n   var FOOBar = {};\n   var foo_bar = {};\n   function FOOBar () {}\n\n\n// good\n   var fooBar = {};\n   function fooBar () {}\n   ```\n\n\n\n\nWhen we name types or modules, we use PascalCase nomenclature\n\n\n\n\n```javascript\n   // bad\n   var foobar = cc.Class({\n       foo: 'foo',\n       bar: 'bar',\n   });\n   var foobar = require('foo-bar');\n\n\n// good\n   var FooBar = cc.Class({\n       foo: 'foo',\n       bar: 'bar',\n   });\n   var FooBar = require('foo-bar');\n   ```\n\n\n\n\nUse underscores \n_\n when naming private attributes\n\n\n\n\n```javascript\n   // bad\n   this.\nfirstName\n = 'foobar';\n   this.firstName_ = 'foobar';\n\n\n// good\n   this._firstName = 'foobar';\n   ```\n\n\n\n\nWe use dash nomenclature for files\n\n\n\n\n```bash\n   // bad\n   fooBar.js\n   FooBar.js\n\n\n// good\n   foo-bar.js\n   ```\n\n\nGrammar standards\n\n\n\n\nUse \n{}\n to create an object\n\n\n\n\n```javascript\n   // bad\n   var obj = new Object();\n\n\n// good\n   var obj = {};\n   ```\n\n\n\n\nUse \n[]\n to create an array\n\n\n\n\n```javascript\n   // bad\n   var array = new Array();\n\n\n// good\n   var array = [];\n   ```\n\n\n\n\nTry your best to use single quotation marks \n''\n to define a string in js code\n\n\n\n\n```javascript\n   // bad\n   var str = \"Hello World\";\n\n\n// good\n   var str = 'Hello World';\n   ```\n\n\n\n\nWhen defining multi-lines string, try your best to use \n+\n \n\n\n\n\n```javascript\n   // bad\n    const errorMessage = 'This is a super long error that was thrown out because of Batman. When you stop to think about how Batman had anything to do with this, you would get nowhere fast.';\n\n\n// bad\nconst errorMessage = 'This is a super long error that was thrown out because \\\nof Batman. When you stop to think about how Batman had anything to do \\\nwith this, you would get nowhere \\\nfast.';\n\n// good\nconst errorMessage = 'This is a super long error that was thrown out because ' +\n  'of Batman. When you stop to think about how Batman had anything to do ' +\n  'with this, you would get nowhere fast.';\n\n\n\n```\n\n\n\n\nUse \n===\n and \n!==\n rather than \n==\n and \n!=\n.\n\n\n\n\nGrammar standards\n\n\n\n\nChoose quadruple spacing or double spacing for indentation according to your own habits and the primary code writer's format.\n\n\n\n\n```javascript\n   // bad\n   function() {\n   \u2219var name;\n   }\n\n\n// very bad\n   function() {\n   \u2219\u2219\n\u2219\u2219var name;\n   }\n\n\n// good\n   function() {\n   \u2219\u2219var name;\n   }\n\n\n// good\n   function() {\n   \u2219\u2219\u2219\u2219var name;\n   }\n   ```\n\n\n\n\nTry to put \n{\n and the expression in the same line\n\n\n\n\n```javascript\n   // bad\n   if ( isFoobar )\n   {\n   }\n\n\n// good\n   if ( isFoobar ) {\n   }\n\n\n// bad\n   function foobar()\n   {\n   }\n\n\n// good\n   function foobar() {\n   }\n\n\n// bad\n   var obj =\n   {\n       foo: 'foo',\n       bar: 'bar',\n   }\n\n\n// good\n   var obj = {\n       foo: 'foo',\n       bar: 'bar',\n   }\n   ```\n\n\n\n\nPut a space before \n{\n\n\n\n\n```javascript\n   // bad\n   function test(){\n       console.log('test');\n   }\n\n\n// good\n   function test() {\n       console.log('test');\n   }\n\n\n// bad\n   dog.set('attr',{\n       age: '1 year',\n       breed: 'Bernese Mountain Dog',\n   });\n\n\n// good\n   dog.set('attr', {\n       age: '1 year',\n       breed: 'Bernese Mountain Dog',\n   });\n   ```\n\n\n\n\nPlease put a space before \n(\n of the logic state expressions ( \nif\n, \nwhile\n )\n\n\n\n\n```javascript\n    // bad\n    if(isJedi) {\n        fight ();\n    }\n\n\n// good\nif (isJedi) {\n    fight();\n}\n```\n\n\n\n\n\nPlease put a space between operators\n\n\n\n\n```javascript\n   // bad\n   var x=y+5;\n\n\n// good\n   var x = y + 5;\n   ```\n\n\n\n\nPut a space between Block definitions\n\n\n\n\n```javascript\n   // bad\n   if (foo) {\n       return bar;\n   }\n   return baz;\n\n\n// good\n   if (foo) {\n       return bar;\n   }\n\n\nreturn baz;\n\n\n// bad\n   const obj = {\n       foo() {\n       },\n       bar() {\n       },\n   };\n   return obj;\n\n\n// good\n   const obj = {\n       foo() {\n       },\n\n\n   bar() {\n   },\n\n\n\n};\n\n\nreturn obj;\n\n\n// bad\n   const arr = [\n       function foo() {\n       },\n       function bar() {\n       },\n   ];\n   return arr;\n\n\n// good\n   const arr = [\n       function foo() {\n       },\n\n\n   function bar() {\n   },\n\n\n\n];\n\n\nreturn arr;\n   ```\n\n\n\n\nDo not use a comma to define\n\n\n\n\n```javascript\n   // bad\n   var story = [\n         once\n       , upon\n       , aTime\n   ];\n\n\n// good\n   var story = [\n       once,\n       upon,\n       aTime,\n   ];\n\n\n// bad\n   var hero = {\n         firstName: 'Ada'\n       , lastName: 'Lovelace'\n       , birthYear: 1815\n       , superPower: 'computers'\n   };\n\n\n// good\n   var hero = {\n       firstName: 'Ada',\n       lastName: 'Lovelace',\n       birthYear: 1815,\n       superPower: 'computers',\n   };\n   ```\n\n\nReference\n\n\nairbnb/es5", 
            "title": "_Coding Standards"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/coding-standards/index.html#recommended-coding-standards", 
            "text": "The following are the coding standards that the Cocos Creator development team use. They are included in the manual for game developers\u2019 and tool developers' reference.", 
            "title": "Recommended coding standards"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/coding-standards/index.html#content-index", 
            "text": "Naming standards  Grammar standards  Writing standards", 
            "title": "Content index"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/coding-standards/index.html#naming-standards", 
            "text": "When we name the variables, functions and living examples, we use camelCase nomenclature   ```javascript\n   // bad\n   var FOOBar = {};\n   var foo_bar = {};\n   function FOOBar () {}  // good\n   var fooBar = {};\n   function fooBar () {}\n   ```   When we name types or modules, we use PascalCase nomenclature   ```javascript\n   // bad\n   var foobar = cc.Class({\n       foo: 'foo',\n       bar: 'bar',\n   });\n   var foobar = require('foo-bar');  // good\n   var FooBar = cc.Class({\n       foo: 'foo',\n       bar: 'bar',\n   });\n   var FooBar = require('foo-bar');\n   ```   Use underscores  _  when naming private attributes   ```javascript\n   // bad\n   this. firstName  = 'foobar';\n   this.firstName_ = 'foobar';  // good\n   this._firstName = 'foobar';\n   ```   We use dash nomenclature for files   ```bash\n   // bad\n   fooBar.js\n   FooBar.js  // good\n   foo-bar.js\n   ```", 
            "title": "Naming standards"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/coding-standards/index.html#grammar-standards", 
            "text": "Use  {}  to create an object   ```javascript\n   // bad\n   var obj = new Object();  // good\n   var obj = {};\n   ```   Use  []  to create an array   ```javascript\n   // bad\n   var array = new Array();  // good\n   var array = [];\n   ```   Try your best to use single quotation marks  ''  to define a string in js code   ```javascript\n   // bad\n   var str = \"Hello World\";  // good\n   var str = 'Hello World';\n   ```   When defining multi-lines string, try your best to use  +     ```javascript\n   // bad\n    const errorMessage = 'This is a super long error that was thrown out because of Batman. When you stop to think about how Batman had anything to do with this, you would get nowhere fast.';  // bad\nconst errorMessage = 'This is a super long error that was thrown out because \\\nof Batman. When you stop to think about how Batman had anything to do \\\nwith this, you would get nowhere \\\nfast.';\n\n// good\nconst errorMessage = 'This is a super long error that was thrown out because ' +\n  'of Batman. When you stop to think about how Batman had anything to do ' +\n  'with this, you would get nowhere fast.';  ```   Use  ===  and  !==  rather than  ==  and  != .", 
            "title": "Grammar standards"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/coding-standards/index.html#grammar-standards_1", 
            "text": "Choose quadruple spacing or double spacing for indentation according to your own habits and the primary code writer's format.   ```javascript\n   // bad\n   function() {\n   \u2219var name;\n   }  // very bad\n   function() {\n   \u2219\u2219 \u2219\u2219var name;\n   }  // good\n   function() {\n   \u2219\u2219var name;\n   }  // good\n   function() {\n   \u2219\u2219\u2219\u2219var name;\n   }\n   ```   Try to put  {  and the expression in the same line   ```javascript\n   // bad\n   if ( isFoobar )\n   {\n   }  // good\n   if ( isFoobar ) {\n   }  // bad\n   function foobar()\n   {\n   }  // good\n   function foobar() {\n   }  // bad\n   var obj =\n   {\n       foo: 'foo',\n       bar: 'bar',\n   }  // good\n   var obj = {\n       foo: 'foo',\n       bar: 'bar',\n   }\n   ```   Put a space before  {   ```javascript\n   // bad\n   function test(){\n       console.log('test');\n   }  // good\n   function test() {\n       console.log('test');\n   }  // bad\n   dog.set('attr',{\n       age: '1 year',\n       breed: 'Bernese Mountain Dog',\n   });  // good\n   dog.set('attr', {\n       age: '1 year',\n       breed: 'Bernese Mountain Dog',\n   });\n   ```   Please put a space before  (  of the logic state expressions (  if ,  while  )   ```javascript\n    // bad\n    if(isJedi) {\n        fight ();\n    }  // good\nif (isJedi) {\n    fight();\n}\n```   Please put a space between operators   ```javascript\n   // bad\n   var x=y+5;  // good\n   var x = y + 5;\n   ```   Put a space between Block definitions   ```javascript\n   // bad\n   if (foo) {\n       return bar;\n   }\n   return baz;  // good\n   if (foo) {\n       return bar;\n   }  return baz;  // bad\n   const obj = {\n       foo() {\n       },\n       bar() {\n       },\n   };\n   return obj;  // good\n   const obj = {\n       foo() {\n       },     bar() {\n   },  };  return obj;  // bad\n   const arr = [\n       function foo() {\n       },\n       function bar() {\n       },\n   ];\n   return arr;  // good\n   const arr = [\n       function foo() {\n       },     function bar() {\n   },  ];  return arr;\n   ```   Do not use a comma to define   ```javascript\n   // bad\n   var story = [\n         once\n       , upon\n       , aTime\n   ];  // good\n   var story = [\n       once,\n       upon,\n       aTime,\n   ];  // bad\n   var hero = {\n         firstName: 'Ada'\n       , lastName: 'Lovelace'\n       , birthYear: 1815\n       , superPower: 'computers'\n   };  // good\n   var hero = {\n       firstName: 'Ada',\n       lastName: 'Lovelace',\n       birthYear: 1815,\n       superPower: 'computers',\n   };\n   ```", 
            "title": "Grammar standards"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/coding-standards/index.html#reference", 
            "text": "airbnb/es5", 
            "title": "Reference"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/size-provider/index.html", 
            "text": "Bind node size with SizeProvider\n\n\nWhat is SizeProvider\uff1f\n\n\nFor the convenience of editing, all Nodes in Cocos Creator come with a Content Size property whose behavior is not in full accord when the Nodes have different Components. Some Components need to forbid altering Size and sometimes they need to listen to the modification of Size. However sometimes they need to make Size equal to the value set by itself. So, Node provides a mechanism called SizeProvider to meet these application scenarios.\n\n\nDefinition of SizeProvider\n\n\nSizeProvider can be an object of any type as long as it has the following interface:\n\n\nfunction SizeProvider () {\n}\nSizeProvider.prototype = {\n    /**\n     * @return {cc.Size}\n     */\n    getContentSize: function () {\n        return this._size.clone();\n    },\n    /**\n     * @param {cc.Size|Number} sizeOrX\n     * @param {Number} [y]\n     */\n    setContentSize: function (sizeOrX, y) {\n        this._size = size.clone();\n    },\n    /**\n     * @return {Number}\n     */\n    _getWidth: function () {\n        return this._size.width;\n    },\n    /**\n     * @return {Number}\n     */\n    _getHeight: function () {\n        return this._size.height;\n    }\n};\n\n\n\n\nThe funny thing is, the original Node of Cocos2d \"happens to\" have this interface also, in which:\n- getContentSize is used to get the current size of Component, this method will be called when getting the size of Node.\n    You can return any size you need, but note that the returned object cannot be used in other places, or you will need to make a copy.\n- setContentSize is used to listen to the alteraton of Node size, this method will be called when getting the size of Node.\n    You can do any operation you want, but as long as the incoming parameter is read-only, you cannot save its reference or alter its value.\n\n\nThe implement mechanism of SizeProvider\n\n\ngetContentSize\n\n\nNode defines the property of _sizeProvider whose default is null. When getContentSize of Node is being called, if _sizeProvider is not null, it will call getContentSize of the provider right away\n\n\ngetContentSize: function (ignoreSizeProvider) {\n    if (this._sizeProvider \n !ignoreSizeProvider) {\n        var size = this._sizeProvider.getContentSize();\n        this._contentSize = size;\n        return size;\n    }a\n    else {\n        return cc.size(this._contentSize);\n    }\n}\n\n\n\n\nif _sizeProvider is null, it will return the _contentSize of Node itself. What we need to note is that _contentSize will synchronously update to the new size of _sizeProvider, but this update will only happen when the getContentSize of Node is being called.\n\n\nsetContentSize\n\n\nWhen the setContentSize of Node is being called, if _sizeProvider is null, it will call setContentSize from the provider:\n\n\nsetContentSize: function (sizeOrX, y) {\n    this._contentSize = size;\n    if (this._sizeProvider) {\n        this._sizeProvider.setContentSize(locContentSize);\n    }\n    // ...\n}\n\n\n\n\nRegister SizeProvider\n\n\nIn Component, you can register SizeProvider like this.\n\n\nonLoad: function () {\n    if ( !this.node._sizeProvider ) {\n        this._mySizeProvider = new MySizeProvider(this);\n        this.node._sizeProvider = this._mySizeProvider;\n    }\n    else {\n        cc.error('...');\n    }\n},\n\nonDestroy: function () {\n    if ( this._mySizeProvider \n this.node._sizeProvider === this._mySizeProvider ) {\n        this._mySizeProvider = null;\n        this.node._sizeProvider = null;\n    }\n},\n\n\n\n\nApplication scenario illustration\n\n\nMake Node size completely synchronized with SGNode size of Component\n\n\nRefer to the ComponentInSG type, since SGNode itself has achieved several interfaces of SizeProvider, it doesn't need to define its SizeProvider, instead, assign _sizeProvider as the SGNode object.\n\n\nonLoad: function () {\n    this._sgNode = this._createSgNode();\n    if ( !this.node._sizeProvider ) {\n        this.node._sizeProvider = this._sgNode;\n    }\n},\nonDestroy: function () {\n    if ( this.node._sizeProvider === this._sgNode ) {\n        this.node._sizeProvider = null;\n    }\n},\n\n\n\n\nNote\uff1aWhen Node size is changed, it will automatically synchronize the new size to ComponentInSG._sgNode\n\n\nMake Node size equal to any size\n\n\nThe code below makes Node size always equal to the screen size.\n\n\n// define SizeProvider, here you can define a global object without creating an object example\nvar screenSizeProvider = {\n    getContentSize: function () {\n        return cc.size(cc.visibleRect);\n    },\n    setContentSize: function (sizeOrX, y) {\n        // do nothing\n    },\n\n    _getWidth: function () {\n        return this.getContentSize().width;\n    },\n    _getHeight: function () {\n        return this.getContentSize().height;\n    },\n};\n\n// ...\n\n// define Component\nonLoad: function () {\n    this._sgNode = this._createSgNode();\n    if ( !this.node._sizeProvider ) {\n        this.node._sizeProvider = screenSizeProvider;\n    }\n},\nonDestroy: function () {\n    if ( this.node._sizeProvider === screenSizeProvider ) {\n        this.node._sizeProvider = null;\n    }\n},", 
            "title": "_Size Provider"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/size-provider/index.html#bind-node-size-with-sizeprovider", 
            "text": "What is SizeProvider\uff1f  For the convenience of editing, all Nodes in Cocos Creator come with a Content Size property whose behavior is not in full accord when the Nodes have different Components. Some Components need to forbid altering Size and sometimes they need to listen to the modification of Size. However sometimes they need to make Size equal to the value set by itself. So, Node provides a mechanism called SizeProvider to meet these application scenarios.", 
            "title": "Bind node size with SizeProvider"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/size-provider/index.html#definition-of-sizeprovider", 
            "text": "SizeProvider can be an object of any type as long as it has the following interface:  function SizeProvider () {\n}\nSizeProvider.prototype = {\n    /**\n     * @return {cc.Size}\n     */\n    getContentSize: function () {\n        return this._size.clone();\n    },\n    /**\n     * @param {cc.Size|Number} sizeOrX\n     * @param {Number} [y]\n     */\n    setContentSize: function (sizeOrX, y) {\n        this._size = size.clone();\n    },\n    /**\n     * @return {Number}\n     */\n    _getWidth: function () {\n        return this._size.width;\n    },\n    /**\n     * @return {Number}\n     */\n    _getHeight: function () {\n        return this._size.height;\n    }\n};  The funny thing is, the original Node of Cocos2d \"happens to\" have this interface also, in which:\n- getContentSize is used to get the current size of Component, this method will be called when getting the size of Node.\n    You can return any size you need, but note that the returned object cannot be used in other places, or you will need to make a copy.\n- setContentSize is used to listen to the alteraton of Node size, this method will be called when getting the size of Node.\n    You can do any operation you want, but as long as the incoming parameter is read-only, you cannot save its reference or alter its value.", 
            "title": "Definition of SizeProvider"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/size-provider/index.html#the-implement-mechanism-of-sizeprovider", 
            "text": "", 
            "title": "The implement mechanism of SizeProvider"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/size-provider/index.html#getcontentsize", 
            "text": "Node defines the property of _sizeProvider whose default is null. When getContentSize of Node is being called, if _sizeProvider is not null, it will call getContentSize of the provider right away  getContentSize: function (ignoreSizeProvider) {\n    if (this._sizeProvider   !ignoreSizeProvider) {\n        var size = this._sizeProvider.getContentSize();\n        this._contentSize = size;\n        return size;\n    }a\n    else {\n        return cc.size(this._contentSize);\n    }\n}  if _sizeProvider is null, it will return the _contentSize of Node itself. What we need to note is that _contentSize will synchronously update to the new size of _sizeProvider, but this update will only happen when the getContentSize of Node is being called.", 
            "title": "getContentSize"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/size-provider/index.html#setcontentsize", 
            "text": "When the setContentSize of Node is being called, if _sizeProvider is null, it will call setContentSize from the provider:  setContentSize: function (sizeOrX, y) {\n    this._contentSize = size;\n    if (this._sizeProvider) {\n        this._sizeProvider.setContentSize(locContentSize);\n    }\n    // ...\n}", 
            "title": "setContentSize"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/size-provider/index.html#register-sizeprovider", 
            "text": "In Component, you can register SizeProvider like this.  onLoad: function () {\n    if ( !this.node._sizeProvider ) {\n        this._mySizeProvider = new MySizeProvider(this);\n        this.node._sizeProvider = this._mySizeProvider;\n    }\n    else {\n        cc.error('...');\n    }\n},\n\nonDestroy: function () {\n    if ( this._mySizeProvider   this.node._sizeProvider === this._mySizeProvider ) {\n        this._mySizeProvider = null;\n        this.node._sizeProvider = null;\n    }\n},", 
            "title": "Register SizeProvider"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/size-provider/index.html#application-scenario-illustration", 
            "text": "", 
            "title": "Application scenario illustration"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/size-provider/index.html#make-node-size-completely-synchronized-with-sgnode-size-of-component", 
            "text": "Refer to the ComponentInSG type, since SGNode itself has achieved several interfaces of SizeProvider, it doesn't need to define its SizeProvider, instead, assign _sizeProvider as the SGNode object.  onLoad: function () {\n    this._sgNode = this._createSgNode();\n    if ( !this.node._sizeProvider ) {\n        this.node._sizeProvider = this._sgNode;\n    }\n},\nonDestroy: function () {\n    if ( this.node._sizeProvider === this._sgNode ) {\n        this.node._sizeProvider = null;\n    }\n},  Note\uff1aWhen Node size is changed, it will automatically synchronize the new size to ComponentInSG._sgNode", 
            "title": "Make Node size completely synchronized with SGNode size of Component"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/scripting/size-provider/index.html#make-node-size-equal-to-any-size", 
            "text": "The code below makes Node size always equal to the screen size.  // define SizeProvider, here you can define a global object without creating an object example\nvar screenSizeProvider = {\n    getContentSize: function () {\n        return cc.size(cc.visibleRect);\n    },\n    setContentSize: function (sizeOrX, y) {\n        // do nothing\n    },\n\n    _getWidth: function () {\n        return this.getContentSize().width;\n    },\n    _getHeight: function () {\n        return this.getContentSize().height;\n    },\n};\n\n// ...\n\n// define Component\nonLoad: function () {\n    this._sgNode = this._createSgNode();\n    if ( !this.node._sizeProvider ) {\n        this.node._sizeProvider = screenSizeProvider;\n    }\n},\nonDestroy: function () {\n    if ( this.node._sizeProvider === screenSizeProvider ) {\n        this.node._sizeProvider = null;\n    }\n},", 
            "title": "Make Node size equal to any size"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/publish/index.html", 
            "text": "The cross-platform release of games\n\n\n\n\nPublish -\n Web\n\n\nCocos Framework\n\n\nPublish -\n native\n\n\n\n\n\n\n\nContinue on to read about \nPublish -\n Web\n.", 
            "title": "_Getting Started"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/publish/index.html#the-cross-platform-release-of-games", 
            "text": "Publish -  Web  Cocos Framework  Publish -  native    Continue on to read about  Publish -  Web .", 
            "title": "The cross-platform release of games"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/publish/publish-web/index.html", 
            "text": "Release a Game on Web platform\n\n\nOpen main menu's \ndocument/constructing release\n and the constructing release window.\n\n\nCocos Creator provides page templates for two kinds of Web platforms. From the pop up menu of \nrelease platform\n, you can choose \nWeb Mobile\n or \nWeb Desktop\n. The major difference is that in \nWeb Mobile\n, the image will cover the whole browser window by default, while in  \nWeb Desktop\n\uff0cyou are allowed to designate the resolution of image, which doesn't change when you zoom on the browser window.\n\n\nRelease a path\n\n\nYou can designate a release path for the game by inputting a path in the \nrelease path\n input field or choosing one via the \n...\n browsing button. The following cross-platform release will create resources or projects in child folders of this release path.\n\n\nThe default release path is in the \nbuild\n under the project folder . If you use version control systems like git and svn, you can ignore the \nbuild\n folder in version control.\n\n\nConstruct and preview\n\n\nThe construction of Web platform is very easy. You only need to \n.zip\n scripts and resources in the game project and resource library, and then drop them into the designated release path. If you need test, the \n test mode\n is there for you. The sourcemap is preserved with versions thus constructed.\n\n\nClick the \nconstruct\n button, then a progress bar will appear on the top of the panel. When the progress bar reaches 100%, the construction is finished.\n\n\nNext, you can click the \npreview\n button to open the constructed game version in the browser for preview and test.\n\n\n\n\nA preview of the Web Desktop mode is shown above. You can see that the resolution of the game image is fixed and the game image doesn't fully cover the browser window.\n\n\nRelease a game on Web server\n\n\nIf you want to release or share your games on the Internet, click the \nopen\n button next to \nrelease path\n. After opening the release path, copy everything in the constructed \nweb-mobile\n or \nweb-desktop\n folders, and drop them into your Web server. Then you can see the game later there.\n\n\nFor the construction of Web server, you can search for solutions such as Apache, Nginx, IIS and Express on your own.\n\n\n\n\nContinue on to read about \nCocos Framework\n.", 
            "title": "_Publish --> Web"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/publish/publish-web/index.html#release-a-game-on-web-platform", 
            "text": "Open main menu's  document/constructing release  and the constructing release window.  Cocos Creator provides page templates for two kinds of Web platforms. From the pop up menu of  release platform , you can choose  Web Mobile  or  Web Desktop . The major difference is that in  Web Mobile , the image will cover the whole browser window by default, while in   Web Desktop \uff0cyou are allowed to designate the resolution of image, which doesn't change when you zoom on the browser window.", 
            "title": "Release a Game on Web platform"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/publish/publish-web/index.html#release-a-path", 
            "text": "You can designate a release path for the game by inputting a path in the  release path  input field or choosing one via the  ...  browsing button. The following cross-platform release will create resources or projects in child folders of this release path.  The default release path is in the  build  under the project folder . If you use version control systems like git and svn, you can ignore the  build  folder in version control.", 
            "title": "Release a path"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/publish/publish-web/index.html#construct-and-preview", 
            "text": "The construction of Web platform is very easy. You only need to  .zip  scripts and resources in the game project and resource library, and then drop them into the designated release path. If you need test, the   test mode  is there for you. The sourcemap is preserved with versions thus constructed.  Click the  construct  button, then a progress bar will appear on the top of the panel. When the progress bar reaches 100%, the construction is finished.  Next, you can click the  preview  button to open the constructed game version in the browser for preview and test.   A preview of the Web Desktop mode is shown above. You can see that the resolution of the game image is fixed and the game image doesn't fully cover the browser window.", 
            "title": "Construct and preview"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/publish/publish-web/index.html#release-a-game-on-web-server", 
            "text": "If you want to release or share your games on the Internet, click the  open  button next to  release path . After opening the release path, copy everything in the constructed  web-mobile  or  web-desktop  folders, and drop them into your Web server. Then you can see the game later there.  For the construction of Web server, you can search for solutions such as Apache, Nginx, IIS and Express on your own.   Continue on to read about  Cocos Framework .", 
            "title": "Release a game on Web server"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/publish/cocos-framework/index.html", 
            "text": "Install and configure Cocos Framework\n\n\nApart from the built-in game release function of Web version, Cocos Creator uses the JSB technology based on Cocos2d-x engine for the cross-platform release of original applications and Cocos Play smartphone web-based games. Before using Cocos Creator to zip and send games to original platforms, you need to configure the Cocos Framework and related development environment first.\n\n\nDownload and install Cocos Framework\n\n\nCocos Framework\n is the pre-compiled version of Cocos2d-x. Compared to the completed version, it is small, free of compilation and easy to install. The latest version of Cocos2d-x is v3.9. The following are download links for Cocos Framework v3.9:\n\n\n\n\nCocos Framework v3.9 for Windows\n\n\nCocos Framework v3.9 for Mac\n\n\n\n\nAfter downloading, run the installation package, follow the instructions, and get it done.\n\n\nYou can choose the target path when installing Cocos Framework for Windows. The Mac version will be installed under \n/Applications/Cocos/frameworks\n by default. Please confirm the installation path of your Cocos Framework, because it will be configured in Cocos Creator later.\n\n\nDownload SDK and NDK, which are needed for the Android platform release\n\n\nIf you have no plan to release your games on Android, or you have already have a complete Android development environment in your operating system, you can skip this section.\n\n\nDownload Android SDK and NDK in accordance with your operating system via the following links:\n\n\n\n\nAndroid SDK for Windows\n\n\nAndroid SDK for Mac\n\n\nAndroid NDK for Windows 32 Bit\n\n\nAndroid NDK for Windows 64 Bit\n\n\nAndroid NDK for Mac\n\n\n\n\nPlease unzip and drop them anywhere you like after downloading, because we need to set up the path of Android SDK and NDK later. Don't forget where you put the unzipped versions of the documents above.\n\n\nInstall C++ compiling environment\n\n\nThe compiling tool Cocos Console in Cocos Framework needs the following running environment:\n\n\n\n\nPython 2.7.5+, \ndownload page\n. Pay attention! Don't download Python 3.x version.\n\n\nIn Windows, the installation of Visual Studio 2013 or 2015 Community Edition is needed, \ndownload page\n\n\nIn Mac, the installation of Xcode and command line tool is needed, \ndownload page\n\n\n\n\nConfigure path in original release environments\n\n\nNext, let's go back to Cocos Creator to configure the environmental path of the constructing release original platform. Choose \ndocument/preference\n in the main menu, and open the preference window:\n\n\n\n\nWe need to configure the following four paths here:\n\n\n\n\nCocos Console\n. It's normally in the \n/tools/cocos2d-console/bin\n directory under Cocos Framework. The chosen path should include an executable file named \ncocos\n.\n\n\nNDK\n, choose the NDK path that has just been downloaded and unzipped. You can skip this if you don't need to compile on Android platform\n\n\nAndroid SDK\n, choose the Android SDK path that has just been downloaded and unzipped. You can skip this if you don't need to compile the Android platform\n\n\nANT\n, which will be put in the \ntools\n directory after installing Cocos Framework, which is at the same hierarchy as \nframeworks\n. The chosen path should include an executable file named \nant\n.\n\n\n\n\nClose the window after configuration is completed.\n\n\nNotes\n\n\nWe have received lots of feedback about original packing in the public beta, and some possible reasons are supplemented here:\n\n\n\n\n\n\nCheck the path\n\n\nThe path set up in preference settings should be guaranteed to be correct, for example: the path of ant should be set under the bin directory in the ant installation directory, the root directory of which is NDK, while the directory of Android SDK should include documents like build-tools, platforms, etc..\n\n\n\n\n\n\nCheck NDK version\n\n\nNo matter which version's engine is used, you must use versions later than NDK r9b. If Cocos2d-x framework is used, please use versions later than NDK r10, and r10e version is recommended.\n\n\n\n\n\n\nOn Windows platform, JAVA_HOME environmental variables need to be checked\n\n\nIf using Windows platform, please confirm if JAVA_HOME is included in your environmental variables. By right clicking My Computer, choosing property and opening the advanced tab, you can check and modify environmental variables. For effective running on Windows platform, you might need to restart the computer.\n\n\n\n\n\n\nCheck JAVA environment\n\n\nInput the following code into Mac terminal or Windows command line tool for check:\n\n\njava -version\n\n\nIf JAVA SE displays, there is no problem. If JRE displays, then you need to install \nJAVA SE running environment\n.\n\n\n\n\n\n\nCheck if the C++ compiling environment is correctly installed in Visual Studio\n\n\nWhen installing Visual Studio, the C++ compiling component is not ticked off by default. If Visual Studio wasn't installed, you need to install it and choose compiling components concerning C++.\n\n\n\n\n\n\nPackage name issue\n\n\nCheck the package name in the constructing release panel. Package names that include blank space, \n-\n, etc. are all illegal.\n\n\n\n\n\n\nIn the end, if zipping still fails, you can try to create a standard Cocos2d-x project and compile it. If the Cocos2d-x project is compilable and Cocos Creator couldn't be zipped, please send the bug to us by \nforum\n.\n\n\n\n\nContinue on to read about \nPublising -\n Native\n.", 
            "title": "_Cocos Framework"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/publish/cocos-framework/index.html#install-and-configure-cocos-framework", 
            "text": "Apart from the built-in game release function of Web version, Cocos Creator uses the JSB technology based on Cocos2d-x engine for the cross-platform release of original applications and Cocos Play smartphone web-based games. Before using Cocos Creator to zip and send games to original platforms, you need to configure the Cocos Framework and related development environment first.", 
            "title": "Install and configure Cocos Framework"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/publish/cocos-framework/index.html#download-and-install-cocos-framework", 
            "text": "Cocos Framework  is the pre-compiled version of Cocos2d-x. Compared to the completed version, it is small, free of compilation and easy to install. The latest version of Cocos2d-x is v3.9. The following are download links for Cocos Framework v3.9:   Cocos Framework v3.9 for Windows  Cocos Framework v3.9 for Mac   After downloading, run the installation package, follow the instructions, and get it done.  You can choose the target path when installing Cocos Framework for Windows. The Mac version will be installed under  /Applications/Cocos/frameworks  by default. Please confirm the installation path of your Cocos Framework, because it will be configured in Cocos Creator later.", 
            "title": "Download and install Cocos Framework"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/publish/cocos-framework/index.html#download-sdk-and-ndk-which-are-needed-for-the-android-platform-release", 
            "text": "If you have no plan to release your games on Android, or you have already have a complete Android development environment in your operating system, you can skip this section.  Download Android SDK and NDK in accordance with your operating system via the following links:   Android SDK for Windows  Android SDK for Mac  Android NDK for Windows 32 Bit  Android NDK for Windows 64 Bit  Android NDK for Mac   Please unzip and drop them anywhere you like after downloading, because we need to set up the path of Android SDK and NDK later. Don't forget where you put the unzipped versions of the documents above.", 
            "title": "Download SDK and NDK, which are needed for the Android platform release"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/publish/cocos-framework/index.html#install-c-compiling-environment", 
            "text": "The compiling tool Cocos Console in Cocos Framework needs the following running environment:   Python 2.7.5+,  download page . Pay attention! Don't download Python 3.x version.  In Windows, the installation of Visual Studio 2013 or 2015 Community Edition is needed,  download page  In Mac, the installation of Xcode and command line tool is needed,  download page", 
            "title": "Install C++ compiling environment"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/publish/cocos-framework/index.html#configure-path-in-original-release-environments", 
            "text": "Next, let's go back to Cocos Creator to configure the environmental path of the constructing release original platform. Choose  document/preference  in the main menu, and open the preference window:   We need to configure the following four paths here:   Cocos Console . It's normally in the  /tools/cocos2d-console/bin  directory under Cocos Framework. The chosen path should include an executable file named  cocos .  NDK , choose the NDK path that has just been downloaded and unzipped. You can skip this if you don't need to compile on Android platform  Android SDK , choose the Android SDK path that has just been downloaded and unzipped. You can skip this if you don't need to compile the Android platform  ANT , which will be put in the  tools  directory after installing Cocos Framework, which is at the same hierarchy as  frameworks . The chosen path should include an executable file named  ant .   Close the window after configuration is completed.", 
            "title": "Configure path in original release environments"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/publish/cocos-framework/index.html#notes", 
            "text": "We have received lots of feedback about original packing in the public beta, and some possible reasons are supplemented here:    Check the path  The path set up in preference settings should be guaranteed to be correct, for example: the path of ant should be set under the bin directory in the ant installation directory, the root directory of which is NDK, while the directory of Android SDK should include documents like build-tools, platforms, etc..    Check NDK version  No matter which version's engine is used, you must use versions later than NDK r9b. If Cocos2d-x framework is used, please use versions later than NDK r10, and r10e version is recommended.    On Windows platform, JAVA_HOME environmental variables need to be checked  If using Windows platform, please confirm if JAVA_HOME is included in your environmental variables. By right clicking My Computer, choosing property and opening the advanced tab, you can check and modify environmental variables. For effective running on Windows platform, you might need to restart the computer.    Check JAVA environment  Input the following code into Mac terminal or Windows command line tool for check:  java -version  If JAVA SE displays, there is no problem. If JRE displays, then you need to install  JAVA SE running environment .    Check if the C++ compiling environment is correctly installed in Visual Studio  When installing Visual Studio, the C++ compiling component is not ticked off by default. If Visual Studio wasn't installed, you need to install it and choose compiling components concerning C++.    Package name issue  Check the package name in the constructing release panel. Package names that include blank space,  - , etc. are all illegal.    In the end, if zipping still fails, you can try to create a standard Cocos2d-x project and compile it. If the Cocos2d-x project is compilable and Cocos Creator couldn't be zipped, please send the bug to us by  forum .   Continue on to read about  Publising -  Native .", 
            "title": "Notes"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/publish/publish-native/index.html", 
            "text": "Zip and release games on original platforms\n\n\nOpen \ndocument/constructing release\n in the main menu and the constructing release window.\n\n\nCurrently, there are five original platforms, which include: Cocos Runtime, Android, iOS, Mac and Windows. The options of release games on Mac and Windows will only appear in concerning operating systems.\n\n\n\n\nConfigure a Package Name\n\n\nAn input field named \npackage name\n will appear in the constructing release window after selecting an original platform, into which you can input the package name of your game (also called Package Name or Bundle ID). The package name is usually arranged in the reverse order of the product's website url, such as: \ncom.mycompany.myproduct\n.\n\n\nOnly numbers, letters and underscores can be included in the package name. Besides, the last section of package name should start with a letter, but not an underline or a number.\n\n\n\n\nConstruct an Original Project\n\n\nAfter selecting the release platform and setting up the package name and initial scene, the project can now be constructed. Click the \nconstruct\n button on the bottom right corner, and start constructing workflow.\n\n\n\n\nWhen compiling scripts and zipping resources, a progress bar will display on the top of the window. After the progress bar has reached 100%, please continue to wait unitl the construction of the project in \nconsole\n is finished. If it's successful, the diary as showed below will display:\n\n\nBuilt to \n/myProject/tutorial-blackjack/build/tutorial-blackjack\n successfully\n\n\n\n\nNext, you can choose to directly open the original preview provided by Cocos Creator, or manually open the constructed original project in IDE of corresponding platform for further preview, adjustment and release.\n\n\nDirect Preview\n\n\nClick the \npreview\n button on the bottom right corner, you can preview games of original platforms via the default method provided by Cocos Framework.\n\n\n\n\nOn Mac/iOS/Windows platforms, Cocos Simulator will be used to preview the game on the desktop. While on Android platform, you can  preview only after connecting your computer with smartphone via USB port and opening USB test on your computer.\n\n\nAfter clicking preview, a part of the constructing work will be continued, the real time progress of which will be seen on the console.\n\n\nUse an Original Project\n\n\n\n\nClick the \nopen\n button near the release path, the constructing release path will be opened in the document manager of operating system.\n\n\njsb\n of this path includes all the original constructing projects.\n\n\n\n\nThe red frames in the picture indicate projects of different original platforms. Next, only by using IDE(such as: Xcode,Eclipse,Visual Studio) that corresponds to the original platform to open these projects, can you make further operations like compilation, preview and release. For the usage instructions for original platform's IDE, please search related information on your own, which will not be discussed in detail here.", 
            "title": "_Publish --> Native"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/publish/publish-native/index.html#zip-and-release-games-on-original-platforms", 
            "text": "Open  document/constructing release  in the main menu and the constructing release window.  Currently, there are five original platforms, which include: Cocos Runtime, Android, iOS, Mac and Windows. The options of release games on Mac and Windows will only appear in concerning operating systems.", 
            "title": "Zip and release games on original platforms"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/publish/publish-native/index.html#configure-a-package-name", 
            "text": "An input field named  package name  will appear in the constructing release window after selecting an original platform, into which you can input the package name of your game (also called Package Name or Bundle ID). The package name is usually arranged in the reverse order of the product's website url, such as:  com.mycompany.myproduct .  Only numbers, letters and underscores can be included in the package name. Besides, the last section of package name should start with a letter, but not an underline or a number.", 
            "title": "Configure a Package Name"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/publish/publish-native/index.html#construct-an-original-project", 
            "text": "After selecting the release platform and setting up the package name and initial scene, the project can now be constructed. Click the  construct  button on the bottom right corner, and start constructing workflow.   When compiling scripts and zipping resources, a progress bar will display on the top of the window. After the progress bar has reached 100%, please continue to wait unitl the construction of the project in  console  is finished. If it's successful, the diary as showed below will display:  Built to  /myProject/tutorial-blackjack/build/tutorial-blackjack  successfully  Next, you can choose to directly open the original preview provided by Cocos Creator, or manually open the constructed original project in IDE of corresponding platform for further preview, adjustment and release.", 
            "title": "Construct an Original Project"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/publish/publish-native/index.html#direct-preview", 
            "text": "Click the  preview  button on the bottom right corner, you can preview games of original platforms via the default method provided by Cocos Framework.   On Mac/iOS/Windows platforms, Cocos Simulator will be used to preview the game on the desktop. While on Android platform, you can  preview only after connecting your computer with smartphone via USB port and opening USB test on your computer.  After clicking preview, a part of the constructing work will be continued, the real time progress of which will be seen on the console.", 
            "title": "Direct Preview"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/publish/publish-native/index.html#use-an-original-project", 
            "text": "Click the  open  button near the release path, the constructing release path will be opened in the document manager of operating system.  jsb  of this path includes all the original constructing projects.   The red frames in the picture indicate projects of different original platforms. Next, only by using IDE(such as: Xcode,Eclipse,Visual Studio) that corresponds to the original platform to open these projects, can you make further operations like compilation, preview and release. For the usage instructions for original platform's IDE, please search related information on your own, which will not be discussed in detail here.", 
            "title": "Use an Original Project"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/publish/setup-native-development/index.html", 
            "text": "Setup Native Development Environment\n\n\nApart from the built-in game release function of Web version, Cocos Creator uses the JSB technology based on Cocos2d-x engine for the cross-platform release of original applications and Cocos Play smartphone web-based games. Before using Cocos Creator to zip and send games to original platforms, you need to configure the Cocos Framework and related development environment first.\n\n\nDownload and install Cocos Framework\n\n\nCocos Framework\n is the pre-compiled version of Cocos2d-x. Compared to the completed version, it is small, free of compilation and easy to install. The latest version of Cocos2d-x is v3.9. The following are download links for Cocos Framework v3.9:\n\n\n\n\nCocos Framework v3.9 for Windows\n\n\nCocos Framework v3.9 for Mac\n\n\n\n\nAfter downloading, run the installation package, follow the instructions, and get it done.\n\n\nYou can choose the target path when installing Cocos Framework for Windows. The Mac version will be installed under \n/Applications/Cocos/frameworks\n by default. Please confirm the installation path of your Cocos Framework, because it will be configured in Cocos Creator later.\n\n\nDownload SDK and NDK, which are needed for the Android platform release\n\n\nIf you have no plan to release your games on Android, or you have already have a complete Android development environment in your operating system, you can skip this section.\n\n\nDownload Android SDK and NDK in accordance with your operating system via the following links:\n\n\n\n\nAndroid SDK for Windows\n\n\nAndroid SDK for Mac\n\n\nAndroid NDK for Windows 32 Bit\n\n\nAndroid NDK for Windows 64 Bit\n\n\nAndroid NDK for Mac\n\n\n\n\nPlease unzip and drop them anywhere you like after downloading, because we need to set up the path of Android SDK and NDK later. Don't forget where you put the unzipped versions of the documents above.\n\n\nInstall C++ compiling environment\n\n\nThe compiling tool Cocos Console in Cocos Framework needs the following running environment:\n\n\n\n\nPython 2.7.5+, \ndownload page\n. Pay attention! Don't download Python 3.x version.\n\n\nIn Windows, the installation of Visual Studio 2013 or 2015 Community Edition is needed, \ndownload page\n\n\nIn Mac, the installation of Xcode and command line tool is needed, \ndownload page\n\n\n\n\nConfigure path in original release environments\n\n\nNext, let's go back to Cocos Creator to configure the environmental path of the constructing release original platform. Choose \ndocument/preference\n in the main menu, and open the preference window:\n\n\n\n\nWe need to configure the following three paths here:\n\n\n\n\nNDK\n, choose the NDK path that has just been downloaded and unzipped. You can skip this if you don't need to compile on Android platform\n\n\nAndroid SDK\n, choose the Android SDK path that has just been downloaded and unzipped. You can skip this if you don't need to compile the Android platform\n\n\nANT\n, which will be put in the \ntools\n directory after installing Cocos Framework, which is at the same hierarchy as \nframeworks\n. The chosen path should include an executable file named \nant\n.\n\n\n\n\nClose the window after configuration is completed.\n\n\nNote\n: The configure will work when build native project. If the configure not works(some Mac may occur this situation), please try to set these settings to \nSystem Environment\n manually: COCOS_CONSOLE_ROOT, ANT_ROOT, NDK_ROOT, ANDROID_SDK_ROOT.\n\n\nNotes\n\n\nWe have received lots of feedback about original packing in the public beta, and some possible reasons are supplemented here:\n\n\n\n\n\n\nCheck the path\n\n\nThe path set up in preference settings should be guaranteed to be correct, for example: the path of ant should be set under the bin directory in the ant installation directory, the root directory of which is NDK, while the directory of Android SDK should include documents like build-tools, platforms, etc..\n\n\n\n\n\n\nCheck NDK version\n\n\nNo matter which version's engine is used, you must use versions later than NDK r9b. If Cocos2d-x framework is used, please use versions later than NDK r10, and r10e version is recommended.\n\n\n\n\n\n\nOn Windows platform, JAVA_HOME environmental variables need to be checked\n\n\nIf using Windows platform, please confirm if JAVA_HOME is included in your environmental variables. By right clicking My Computer, choosing property and opening the advanced tab, you can check and modify environmental variables. For effective running on Windows platform, you might need to restart the computer.\n\n\n\n\n\n\nCheck JAVA environment\n\n\nInput the following code into Mac terminal or Windows command line tool for check:\n\n\njava -version\n\n\nIf JAVA SE displays, there is no problem. If JRE displays, then you need to install \nJAVA SE running environment\n.\n\n\n\n\n\n\nCheck if the C++ compiling environment is correctly installed in Visual Studio\n\n\nWhen installing Visual Studio, the C++ compiling component is not ticked off by default. If Visual Studio wasn't installed, you need to install it and choose compiling components concerning C++.\n\n\n\n\n\n\nPackage name issue\n\n\nCheck the package name in the constructing release panel. Package names that include blank space, \n-\n, etc. are all illegal.\n\n\n\n\n\n\nIn the end, if zipping still fails, you can try to create a standard Cocos2d-x project and compile it. If the Cocos2d-x project is compilable and Cocos Creator couldn't be zipped, please send the bug to us by \nforum\n.\n\n\n\n\nContinue on to read about \nPublising -\n Native\n.", 
            "title": "_Publish --> Setup-Native-Development"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/publish/setup-native-development/index.html#setup-native-development-environment", 
            "text": "Apart from the built-in game release function of Web version, Cocos Creator uses the JSB technology based on Cocos2d-x engine for the cross-platform release of original applications and Cocos Play smartphone web-based games. Before using Cocos Creator to zip and send games to original platforms, you need to configure the Cocos Framework and related development environment first.", 
            "title": "Setup Native Development Environment"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/publish/setup-native-development/index.html#download-and-install-cocos-framework", 
            "text": "Cocos Framework  is the pre-compiled version of Cocos2d-x. Compared to the completed version, it is small, free of compilation and easy to install. The latest version of Cocos2d-x is v3.9. The following are download links for Cocos Framework v3.9:   Cocos Framework v3.9 for Windows  Cocos Framework v3.9 for Mac   After downloading, run the installation package, follow the instructions, and get it done.  You can choose the target path when installing Cocos Framework for Windows. The Mac version will be installed under  /Applications/Cocos/frameworks  by default. Please confirm the installation path of your Cocos Framework, because it will be configured in Cocos Creator later.", 
            "title": "Download and install Cocos Framework"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/publish/setup-native-development/index.html#download-sdk-and-ndk-which-are-needed-for-the-android-platform-release", 
            "text": "If you have no plan to release your games on Android, or you have already have a complete Android development environment in your operating system, you can skip this section.  Download Android SDK and NDK in accordance with your operating system via the following links:   Android SDK for Windows  Android SDK for Mac  Android NDK for Windows 32 Bit  Android NDK for Windows 64 Bit  Android NDK for Mac   Please unzip and drop them anywhere you like after downloading, because we need to set up the path of Android SDK and NDK later. Don't forget where you put the unzipped versions of the documents above.", 
            "title": "Download SDK and NDK, which are needed for the Android platform release"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/publish/setup-native-development/index.html#install-c-compiling-environment", 
            "text": "The compiling tool Cocos Console in Cocos Framework needs the following running environment:   Python 2.7.5+,  download page . Pay attention! Don't download Python 3.x version.  In Windows, the installation of Visual Studio 2013 or 2015 Community Edition is needed,  download page  In Mac, the installation of Xcode and command line tool is needed,  download page", 
            "title": "Install C++ compiling environment"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/publish/setup-native-development/index.html#configure-path-in-original-release-environments", 
            "text": "Next, let's go back to Cocos Creator to configure the environmental path of the constructing release original platform. Choose  document/preference  in the main menu, and open the preference window:   We need to configure the following three paths here:   NDK , choose the NDK path that has just been downloaded and unzipped. You can skip this if you don't need to compile on Android platform  Android SDK , choose the Android SDK path that has just been downloaded and unzipped. You can skip this if you don't need to compile the Android platform  ANT , which will be put in the  tools  directory after installing Cocos Framework, which is at the same hierarchy as  frameworks . The chosen path should include an executable file named  ant .   Close the window after configuration is completed.  Note : The configure will work when build native project. If the configure not works(some Mac may occur this situation), please try to set these settings to  System Environment  manually: COCOS_CONSOLE_ROOT, ANT_ROOT, NDK_ROOT, ANDROID_SDK_ROOT.", 
            "title": "Configure path in original release environments"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/publish/setup-native-development/index.html#notes", 
            "text": "We have received lots of feedback about original packing in the public beta, and some possible reasons are supplemented here:    Check the path  The path set up in preference settings should be guaranteed to be correct, for example: the path of ant should be set under the bin directory in the ant installation directory, the root directory of which is NDK, while the directory of Android SDK should include documents like build-tools, platforms, etc..    Check NDK version  No matter which version's engine is used, you must use versions later than NDK r9b. If Cocos2d-x framework is used, please use versions later than NDK r10, and r10e version is recommended.    On Windows platform, JAVA_HOME environmental variables need to be checked  If using Windows platform, please confirm if JAVA_HOME is included in your environmental variables. By right clicking My Computer, choosing property and opening the advanced tab, you can check and modify environmental variables. For effective running on Windows platform, you might need to restart the computer.    Check JAVA environment  Input the following code into Mac terminal or Windows command line tool for check:  java -version  If JAVA SE displays, there is no problem. If JRE displays, then you need to install  JAVA SE running environment .    Check if the C++ compiling environment is correctly installed in Visual Studio  When installing Visual Studio, the C++ compiling component is not ticked off by default. If Visual Studio wasn't installed, you need to install it and choose compiling components concerning C++.    Package name issue  Check the package name in the constructing release panel. Package names that include blank space,  - , etc. are all illegal.    In the end, if zipping still fails, you can try to create a standard Cocos2d-x project and compile it. If the Cocos2d-x project is compilable and Cocos Creator couldn't be zipped, please send the bug to us by  forum .   Continue on to read about  Publising -  Native .", 
            "title": "Notes"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/extension/index.html", 
            "text": "Extend the editor\n\n\nExtension of the Cocos Creator editor is achieved by adding plugin packages to \n~/.CocosCreator/packages\n.\nThe Cocos Creator plugins follow the package designing method of the node.js community, which describes your plugins using the \npackage.json\n document.\n\n\nStructure\n\n\nThe structure of a plugin package is generally as follows:\n\n\nMyPackage\n  |--(optional)panel\n  |   |--mypanel.html\n  |   |--(optional)mypanel.js\n  |   |--(optional)mypanel.css\n  |--(optional)assets\n  |     |--my-asset\n  |       |--my-asset-inspector.html\n  |--main.js\n  |--package.json\n\n\n\n\nThe above package includes the general structure of the whole plugin package:\n\n\n\n\nmain.js\n: This is the entry document of the plugin package. In the initial phase of the plugin package, the loading of plugins will be implemented by running this entry document.\n\n\npackage.json\n: This is a file containing a description of the plugin package, which records the main content of the package, panel information, etc. Within the entire plugin package, it's the crucial document that can be loaded and unloaded.\n\n\npanel\n: This is the panel folder. If you want to define your tool set by yourself, then you need to start from the panel folder.\n\n\nassets\n: This is the resource folder. If you want to define your resource extension scheme by yourself, then you need to start from the resource folder.\n\n\n\n\nDetailed introduction to the package.json document\n\n\nEvery package needs a \npackage.json\n document to describe its function. Only in this way can the Cocos Creator editor know\nwhat extensions this package needs and load them correctly. It's worth mentioning that, although the definition of \npackage.json\n on many fields is similar to\nthat of the npm package in node.js, they are still used for different products. Therefore, packages downloaded from the npm community cannot be directly put\ninto Cocos Creator and function as plugins.\n\n\nHere's a simple package document description:\n\n\n{\n  \nname\n: \ndemo-simple\n,\n  \nversion\n: \n0.0.1\n,\n  \ndescription\n: \nSimple Demo\n,\n  \nauthor\n: \nCocos Creator\n,\n  \nmain\n: \nmain.js\n,\n  \nmenus\n: {\n    \nExamples/Simple\n: {\n      \nmessage\n: \ndemo-simple:open\n\n    }\n  }\n}\n\n\n\n\nExplanations:\n\n\n\n\nname\n String - defines the package name; the package name is unique and is associated with the name you used to login on the official website server\n\n\nversion\n String - version number. \nsemver\n format is recommended to manage your package version\n\n\ndescription\n String (optional) __ a short phrase describing what the package does\n\n\nauthor\n String (optional) - package author\n\n\nbuild\n Boolean (optional) - whether to use third-party tools to code this package or not\n\n\nhosts\n Object (optional) - host version; normally our host is Cocos Creator; by defining the host version, you can pre-test if the current Cocos Creator version can load this package\n\n\nmain\n String (optional) - entry document\n\n\ndependencies\n Object (optional) - dependency list; the dependency lists of other packages can be written here; Cocos Creator will help you load other packages according to the dependency lists\n\n\n\n\nEntry document\n\n\nAfter defining the \npackage.json\n document, the entry document \nmain.js\n needs to be written next. An entry document is generally as follows:\n\n\nmodule.exports = {\n  load () {\n    // implement when package is loaded correctly\n  },\n\n  unload () {\n    // implement when package is unloaded correctly\n  }\n};\n\n\n\n\nMore contents\n\n\nCurrently, the plugin system is not officially open. There still are some tests and documental works that need to be finished. The whole plugin system will be opened step by step.\nThe developers through the use of plugins are developing Cocos Creator's main menu, tool panel, user-defined resource and other contents.\n\n\nComing soon!\n\n\nThe above package includes the general structure of the whole plugin package:\n\n\n\n\nmain.js\n: This is the entry document of the plugin package. In the initial phase of the plugin package, the loading of plugins will be implemented by running this entry document.\n\n\npackage.json\n: This is the descriptive document of the plugin package, which records the main content of this package, panel information, etc. It's the key document that can be loaded and unloaded in the entire plugin package.\n\n\npanel\n: This is the panel folder. If you want to define your tool set by yourself, then you need to start from the panel folder.\n\n\nassets\n: This is the resource folder. If you want to define your resource extension scheme by yourself, then you need to start from the resource folder.\n\n\n\n\nDetailed introduction to package.json document\n\n\nEvery package needs a \npackage.json\n document to describe its function. Only in this way can the Cocos Creator editor know\nwhat extensions this package needs and load the extensions correctly. It's worth mentioning that, though the definition of \npackage.json\n on many fields is similar to\nthat of the npm package in node.js, they still are used for different products. Therefore, packages downloaded from the npm community can not be directly put\ninto Cocos Creator and function as plugins.\n\n\nHere's a simple package document description:\n\n\n{\n  \nname\n: \ndemo-simple\n,\n  \nversion\n: \n0.0.1\n,\n  \ndescription\n: \nSimple Demo\n,\n  \nauthor\n: \nCocos Creator\n,\n  \nmain\n: \nmain.js\n,\n  \nmenus\n: {\n    \nExamples/Simple\n: {\n      \nmessage\n: \ndemo-simple:open\n\n    }\n  }\n}\n\n\n\n\nExplanations:\n\n\n\n\nname\n String - defines the package name; the package name is unique in the set, which is associated with the name you used to login on the offical website server\n\n\nversion\n String - version number. \nsemver\n format is recommended to manage your package version\n\n\ndescription\n String (optional) - describe what the package does with one line\n\n\nauthor\n String (optional) - package author\n\n\nbuild\n Boolean (optional) - whether use third-party tool to code this package or not\n\n\nhosts\n Object (optional) - host version; normally our host is Cocos Creator; by defining the host version, one can pre-test if the current Cocos Creator version can load this package\n\n\nmain\n String (optional) - entry document\n\n\ndependencies\n Object (optional) - dependency list; the dependency lists of other packages can be written here; Cocos Creator will help you load other packages according to dependency lists\n\n\n\n\nEntry document\n\n\nAfter defining the descriptive document, the entry document \nmain.js\n needs to be written next. An entry document is generally as follows:\n\n\nmodule.exports = {\n  load () {\n    // implement when package is loaded correctly\n  },\n\n  unload () {\n    // implement when package is unloaded correctly\n  }\n};\n\n\n\n\nMore contents\n\n\nCurrently, the plugin system is not officially open. There still are some tests and documental works need to be finished. The whole plugin system will be opened step by step.\nLet developers develop Cocos Creator's main menu, tool panel, user-defined resource and other contents by plugins.\n\n\nComing soon!", 
            "title": "_Extensions"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/extension/index.html#extend-the-editor", 
            "text": "Extension of the Cocos Creator editor is achieved by adding plugin packages to  ~/.CocosCreator/packages .\nThe Cocos Creator plugins follow the package designing method of the node.js community, which describes your plugins using the  package.json  document.", 
            "title": "Extend the editor"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/extension/index.html#structure", 
            "text": "The structure of a plugin package is generally as follows:  MyPackage\n  |--(optional)panel\n  |   |--mypanel.html\n  |   |--(optional)mypanel.js\n  |   |--(optional)mypanel.css\n  |--(optional)assets\n  |     |--my-asset\n  |       |--my-asset-inspector.html\n  |--main.js\n  |--package.json  The above package includes the general structure of the whole plugin package:   main.js : This is the entry document of the plugin package. In the initial phase of the plugin package, the loading of plugins will be implemented by running this entry document.  package.json : This is a file containing a description of the plugin package, which records the main content of the package, panel information, etc. Within the entire plugin package, it's the crucial document that can be loaded and unloaded.  panel : This is the panel folder. If you want to define your tool set by yourself, then you need to start from the panel folder.  assets : This is the resource folder. If you want to define your resource extension scheme by yourself, then you need to start from the resource folder.", 
            "title": "Structure"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/extension/index.html#detailed-introduction-to-the-packagejson-document", 
            "text": "Every package needs a  package.json  document to describe its function. Only in this way can the Cocos Creator editor know\nwhat extensions this package needs and load them correctly. It's worth mentioning that, although the definition of  package.json  on many fields is similar to\nthat of the npm package in node.js, they are still used for different products. Therefore, packages downloaded from the npm community cannot be directly put\ninto Cocos Creator and function as plugins.  Here's a simple package document description:  {\n   name :  demo-simple ,\n   version :  0.0.1 ,\n   description :  Simple Demo ,\n   author :  Cocos Creator ,\n   main :  main.js ,\n   menus : {\n     Examples/Simple : {\n       message :  demo-simple:open \n    }\n  }\n}  Explanations:   name  String - defines the package name; the package name is unique and is associated with the name you used to login on the official website server  version  String - version number.  semver  format is recommended to manage your package version  description  String (optional) __ a short phrase describing what the package does  author  String (optional) - package author  build  Boolean (optional) - whether to use third-party tools to code this package or not  hosts  Object (optional) - host version; normally our host is Cocos Creator; by defining the host version, you can pre-test if the current Cocos Creator version can load this package  main  String (optional) - entry document  dependencies  Object (optional) - dependency list; the dependency lists of other packages can be written here; Cocos Creator will help you load other packages according to the dependency lists", 
            "title": "Detailed introduction to the package.json document"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/extension/index.html#entry-document", 
            "text": "After defining the  package.json  document, the entry document  main.js  needs to be written next. An entry document is generally as follows:  module.exports = {\n  load () {\n    // implement when package is loaded correctly\n  },\n\n  unload () {\n    // implement when package is unloaded correctly\n  }\n};", 
            "title": "Entry document"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/extension/index.html#more-contents", 
            "text": "Currently, the plugin system is not officially open. There still are some tests and documental works that need to be finished. The whole plugin system will be opened step by step.\nThe developers through the use of plugins are developing Cocos Creator's main menu, tool panel, user-defined resource and other contents.  Coming soon!  The above package includes the general structure of the whole plugin package:   main.js : This is the entry document of the plugin package. In the initial phase of the plugin package, the loading of plugins will be implemented by running this entry document.  package.json : This is the descriptive document of the plugin package, which records the main content of this package, panel information, etc. It's the key document that can be loaded and unloaded in the entire plugin package.  panel : This is the panel folder. If you want to define your tool set by yourself, then you need to start from the panel folder.  assets : This is the resource folder. If you want to define your resource extension scheme by yourself, then you need to start from the resource folder.", 
            "title": "More contents"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/extension/index.html#detailed-introduction-to-packagejson-document", 
            "text": "Every package needs a  package.json  document to describe its function. Only in this way can the Cocos Creator editor know\nwhat extensions this package needs and load the extensions correctly. It's worth mentioning that, though the definition of  package.json  on many fields is similar to\nthat of the npm package in node.js, they still are used for different products. Therefore, packages downloaded from the npm community can not be directly put\ninto Cocos Creator and function as plugins.  Here's a simple package document description:  {\n   name :  demo-simple ,\n   version :  0.0.1 ,\n   description :  Simple Demo ,\n   author :  Cocos Creator ,\n   main :  main.js ,\n   menus : {\n     Examples/Simple : {\n       message :  demo-simple:open \n    }\n  }\n}  Explanations:   name  String - defines the package name; the package name is unique in the set, which is associated with the name you used to login on the offical website server  version  String - version number.  semver  format is recommended to manage your package version  description  String (optional) - describe what the package does with one line  author  String (optional) - package author  build  Boolean (optional) - whether use third-party tool to code this package or not  hosts  Object (optional) - host version; normally our host is Cocos Creator; by defining the host version, one can pre-test if the current Cocos Creator version can load this package  main  String (optional) - entry document  dependencies  Object (optional) - dependency list; the dependency lists of other packages can be written here; Cocos Creator will help you load other packages according to dependency lists", 
            "title": "Detailed introduction to package.json document"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/extension/index.html#entry-document_1", 
            "text": "After defining the descriptive document, the entry document  main.js  needs to be written next. An entry document is generally as follows:  module.exports = {\n  load () {\n    // implement when package is loaded correctly\n  },\n\n  unload () {\n    // implement when package is unloaded correctly\n  }\n};", 
            "title": "Entry document"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/extension/index.html#more-contents_1", 
            "text": "Currently, the plugin system is not officially open. There still are some tests and documental works need to be finished. The whole plugin system will be opened step by step.\nLet developers develop Cocos Creator's main menu, tool panel, user-defined resource and other contents by plugins.  Coming soon!", 
            "title": "More contents"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/advanced-topics/index.html", 
            "text": "Advanced Topics\n\n\nThis chapter will introduce \nadvanced concepts\n.\n\n\n\n\nBuild To Lua\n\n\n\n\n\n\n\nContinue on to read about \nBuild To Lua\n.", 
            "title": "_Advanced Topics"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/advanced-topics/index.html#advanced-topics", 
            "text": "This chapter will introduce  advanced concepts .   Build To Lua    Continue on to read about  Build To Lua .", 
            "title": "Advanced Topics"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/advanced-topics/build-to-lua/index.html", 
            "text": "Lua Engine Support\n\n\nCocos Creator\n developers that use Lua can build scenes and UI, and use Lua script to control nodes and UIs in game.\n\n\nMain features\n\n\nCurrently supported features:\n\n\n\n\nSprite\n - Sprite image renderer\n\n\nCanvas\n - Mainly used for responsive multi-resolution design\n\n\nWidget\n - You can set up automatic alignment with responsive Canvas or elements\n\n\nButton\n - Response to player interaction\n\n\nEditBox\n - For players to enter text\n\n\nParticleSystem\n - Renderer for particle effects\n\n\nTileMap\n - Renderer for map generated by Tiled Map Editor\n\n\nAnimation\n - Currently only sprite animation supported\n\n\nLabel (System Font)\n - Currently only system font supported\n\n\nComponent with Lifetime events\n - Components and life cycle management\n\n\n\n\nInstructions for use\n\n\nThere are three steps needed to use scenes created by \nCocos Creator\n in Lua project.\nThis will be further streamlined in coming versions.\n\n\nSetup\n\n\n\n\n\n\nFirst you need to download the latest version of the \nCreator-Lua template project\n.\n\n\nOr you can pull from \nGitHub\n:\n\n\nsh\n$ git clone https://github.com/dualface/creator-lua.git\n\n\nFor the rest of this document we refer to this as \nPATH-TO-CREATOR-LUA\n.\n\n\n\n\n\n\nCreate a new project Lua:\n  \nsh\n  cocos new -l lua GAME-NAME\n\n\n\n\n\n\nRemove Lua Project \nsrc\n and\nres\n directory of all files. \n\n\n\n\n\n\nCopy the \nPATH-TO-CREATOR-LUA/lua-project/src\n files and all subdirectories in the \ndirectory to \nsrc\n Lua project.\n\n\n\n\n\n\nCopy the \nPATH-TO-CREATOR-LUA /lua-project/convert-creator-build.sh\n and \n\nPATH-TO-CREATOR-LUA /lua-project/convert-creator-build.bat\n project file to the Lua \ndirectory.\n\n\n\n\n\n\nBuilding A Scene\n\n\n\n\nIn \nCocos Creator\n, save the edited scenes, and then select the menu \n\nProject -\n Build publish\n.\n\n\n\n\nPublish the platform of choice for the \nLua\n\n\n\n\n\n\n\n\nClick the \nBuild\n button\n\n\n\n\n\n\nAfter completion the publishing path will contain all the scenes and their resources. These \nresources can not be used in a Lua project without being converted.\n\n\nConverting to Lua format\n\n\n\n\nFrom the command-line goto the Lua project directory.\n\n\nIf you are on OSX or Linux, run \n./convert-creator-build.sh ../creator-project/build/lua\n. \nIf you are on Windows, run \nconvert-creator-build.bat .. \\creator-project\\build\\lua\n.\n\n\nYou will see \ndone\n if everything converts successfully.\n\n\n\n\nAfter the conversion is complete, open the operation of the project (or use \ncocos run\n command), \nyou can see the effect of the scene:\n\n\n\n\nPrecautions\n\n\nAfter every change made to the Scene you need to do \nbuild -\n Convert\n operation.", 
            "title": "_Build To Lua"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/advanced-topics/build-to-lua/index.html#lua-engine-support", 
            "text": "Cocos Creator  developers that use Lua can build scenes and UI, and use Lua script to control nodes and UIs in game.", 
            "title": "Lua Engine Support"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/advanced-topics/build-to-lua/index.html#main-features", 
            "text": "Currently supported features:   Sprite  - Sprite image renderer  Canvas  - Mainly used for responsive multi-resolution design  Widget  - You can set up automatic alignment with responsive Canvas or elements  Button  - Response to player interaction  EditBox  - For players to enter text  ParticleSystem  - Renderer for particle effects  TileMap  - Renderer for map generated by Tiled Map Editor  Animation  - Currently only sprite animation supported  Label (System Font)  - Currently only system font supported  Component with Lifetime events  - Components and life cycle management", 
            "title": "Main features"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/advanced-topics/build-to-lua/index.html#instructions-for-use", 
            "text": "There are three steps needed to use scenes created by  Cocos Creator  in Lua project.\nThis will be further streamlined in coming versions.", 
            "title": "Instructions for use"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/advanced-topics/build-to-lua/index.html#setup", 
            "text": "First you need to download the latest version of the  Creator-Lua template project .  Or you can pull from  GitHub :  sh\n$ git clone https://github.com/dualface/creator-lua.git  For the rest of this document we refer to this as  PATH-TO-CREATOR-LUA .    Create a new project Lua:\n   sh\n  cocos new -l lua GAME-NAME    Remove Lua Project  src  and res  directory of all files.     Copy the  PATH-TO-CREATOR-LUA/lua-project/src  files and all subdirectories in the \ndirectory to  src  Lua project.    Copy the  PATH-TO-CREATOR-LUA /lua-project/convert-creator-build.sh  and  PATH-TO-CREATOR-LUA /lua-project/convert-creator-build.bat  project file to the Lua \ndirectory.", 
            "title": "Setup"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/advanced-topics/build-to-lua/index.html#building-a-scene", 
            "text": "In  Cocos Creator , save the edited scenes, and then select the menu  Project -  Build publish .   Publish the platform of choice for the  Lua     Click the  Build  button    After completion the publishing path will contain all the scenes and their resources. These \nresources can not be used in a Lua project without being converted.", 
            "title": "Building A Scene"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/advanced-topics/build-to-lua/index.html#converting-to-lua-format", 
            "text": "From the command-line goto the Lua project directory.  If you are on OSX or Linux, run  ./convert-creator-build.sh ../creator-project/build/lua . \nIf you are on Windows, run  convert-creator-build.bat .. \\creator-project\\build\\lua .  You will see  done  if everything converts successfully.   After the conversion is complete, open the operation of the project (or use  cocos run  command), \nyou can see the effect of the scene:", 
            "title": "Converting to Lua format"
        }, 
        {
            "location": "/editors_and_tools/creator-chapters/advanced-topics/build-to-lua/index.html#precautions", 
            "text": "After every change made to the Scene you need to do  build -  Convert  operation.", 
            "title": "Precautions"
        }, 
        {
            "location": "/editors_and_tools/cocos/index.html", 
            "text": "Cocos\n\n\nWhat is Cocos?\n\n\nCocos is a platform to create games: it includes an editor, a game engine, it also\nincludes integration with the popular services every developer expects... everything\nis packaged in a convenient installer. It is a complete \necosystem\n.\n\n\n\n\nHistorically, developers would download either a \n.zip\n of the latest\nrelease or become bleeding edge by staying in sync with our \nGitHub\n repo. When dealing with new releases, this was a manual integration effort for\ndevelopers. If you had multiple projects, depending upon your setup, you may have\neven had to perform a manual integration for each project.\n\n\nNot anymore, utilizing \nCocos\n. \nCocos\n had been available as a console only\napp with limited functionality for creating projects as well as compiling and\nrunning your applications. However, now, it is your simple solutions to managing\nyour entire project base. \nCocos\n provides:\n\n\n\n\n\n\n\nA unified setup for both \nCocos2d-x\n and \nCocos\n. This allows you to stay\n  up to date with the latest \nCocos2d-x\n releases. This includes using precompiled\n  binaries and source code, in a single place.\n\n\nEasy integration with \nSDKs\n for 3rd party services: Facebook, IAP and many more.\n\n\nDevelopers a channel to provide feedback and get support, directly within \nCocos\n,\n  making it simple to contact the engine team for help.\u3000\n\n\n\n\nWhat is the workflow?\n\n\nHistorically, you probably downloaded a \n.zip\n from the website or if you stayed\na hipster and pulled from the \nGitHub\n repo.\nDownloading the \n.zip\n will no longer be available. \nGithub\n, however, will always remain available.\n\n\nThe workflow is now to use \nCocos\n for everything! Yes, it handles everything\nfrom \ncreating\n projects, \nediting\n project properties and settings,\n\nintegrating\n SDKBOX services, \ncompiling and running\n your code and \nbuilding\n\nyour user interface in \nCocos Studio\n.\n\n\nCocos\n is simple with a clean, modern interface for maximizing your productivity.\nTake a look:\n\n\nThe main window:\n\n\n\n\nCreating a new project:\n\n\n\n\nNow all of your projects in a single place:\n\n\n\n\nPrecompiled libraries versus source code\n\n\nCocos\n now makes it easy for developers to use precompiled libraries instead\nof the source code. Why might you want to do this? Speed for one! Using precompiled\nlibraries eliminates the need to compile the \nCocos2d-x\n source each time. This\neliminates the long thumb twiddling between compile sessions. Second, updating to\nthe latest version is simple. You download directly from within \nCocos\n and \nmodify\n\nyour projects settings to switch to the latest version.\n\n\nSDK Integration\n\n\nCocos\n provides many services that you can integrate into your apps for \nFREE\n\nand you can add services to your apps quickly and stay on top of services updates.\nAs new versions of \nSDKs\n become available you can download directly from within\n\nCocos\n and \nmodify\n your projects settings to update to the latest version.\n\n\nCurrently, \nSDKBOX\n is integrated into \nCocos\n. You can read more about\n\nSDKBOX\n and the services it offers in the \nServices Docs\n.\n\n\nUsing Cocos\n\n\nCreating a new project\n\n\nCreating a new project with \nCocos\n is easy, just follow a few simple steps.\nUsing \nCocos\n, you are creating a \nCocos2d-x\n project with complete flexibility\nto change your projects settings at any time. To create a new new project:\n\n\n\n\nOpen \nCocos\n\n\nClick \nNew Project\n\n\nSpecify your project settings. Let's make sure we know what the settings are:\n\n\n\n\n\n \n\n  \nSetting\n\n  \nDescription\n\n \n\n \n\n  \nProject Name\n\n  \nthe name of the project to be created.\n\n \n\n \n\n  \nProject Path\n\n  \nthe folder in which your projects are located.\n\n \n\n \n\n  \nEngine Version\n\n  \nversion of Cocos2d-x you will use to create this project.\n\n \n\n \n\n  \nEngine Type\n\n  \nPrecompiled Library:\n a static library of the cocos2d-x source code. This would speed up compile times as there is no need to continually build the engine's source.\n\n  \n\n  \nSource Code:\n cocos2d-x source code.\n\n  \n\n  \n\n \n\n \n\n  \nProject Language\n\n  \nLua:\n based on cocos2d-x Lua binding. It can run on Android, iOS, Windows Phone, Windows, Mac.\n\n  \n\n  \nJavaScript:\n based on cocos2d-js, also includes cocos2d-x JavaScript bindings. The JavaScript bindings are compatible with HTML5. You can run code in cocos2d-x runtime and HTML5 native engine. The default settings will be JavaScript bindings if the projects are built for running on Android, iOS, Windows Phone, Windows and Mac. The default settings will be cocos2d-js if the projects are for HTML5.\n\n  \n\n  \nC++:\n based on cocos2d-x, It can run on Android, iOS, Windows Phone, Windows, Mac.\n\n  \n\n \n\n \n\n  \nEditor\n\n  \nwhether or not to create a Cocos Studio project. Cocos Studio is the official editor of Cocos2d-x.\n\n \n\n \n\n  \nSDKs\n\n  \nwhich SDK services are available to add to your project. These services wrap\n  up all the libraries and APIs from the service providers. All will be integrated\n  for you to update the settings and call the service from your project.\n\n \n\n\n\n\n\n\n\nClick \nCreate", 
            "title": "Cocos Launcher"
        }, 
        {
            "location": "/editors_and_tools/cocos/index.html#cocos", 
            "text": "", 
            "title": "Cocos"
        }, 
        {
            "location": "/editors_and_tools/cocos/index.html#what-is-cocos", 
            "text": "Cocos is a platform to create games: it includes an editor, a game engine, it also\nincludes integration with the popular services every developer expects... everything\nis packaged in a convenient installer. It is a complete  ecosystem .   Historically, developers would download either a  .zip  of the latest\nrelease or become bleeding edge by staying in sync with our  GitHub  repo. When dealing with new releases, this was a manual integration effort for\ndevelopers. If you had multiple projects, depending upon your setup, you may have\neven had to perform a manual integration for each project.  Not anymore, utilizing  Cocos .  Cocos  had been available as a console only\napp with limited functionality for creating projects as well as compiling and\nrunning your applications. However, now, it is your simple solutions to managing\nyour entire project base.  Cocos  provides:    A unified setup for both  Cocos2d-x  and  Cocos . This allows you to stay\n  up to date with the latest  Cocos2d-x  releases. This includes using precompiled\n  binaries and source code, in a single place.  Easy integration with  SDKs  for 3rd party services: Facebook, IAP and many more.  Developers a channel to provide feedback and get support, directly within  Cocos ,\n  making it simple to contact the engine team for help.", 
            "title": "What is Cocos?"
        }, 
        {
            "location": "/editors_and_tools/cocos/index.html#what-is-the-workflow", 
            "text": "Historically, you probably downloaded a  .zip  from the website or if you stayed\na hipster and pulled from the  GitHub  repo.\nDownloading the  .zip  will no longer be available.  Github , however, will always remain available.  The workflow is now to use  Cocos  for everything! Yes, it handles everything\nfrom  creating  projects,  editing  project properties and settings, integrating  SDKBOX services,  compiling and running  your code and  building \nyour user interface in  Cocos Studio .  Cocos  is simple with a clean, modern interface for maximizing your productivity.\nTake a look:  The main window:   Creating a new project:   Now all of your projects in a single place:", 
            "title": "What is the workflow?"
        }, 
        {
            "location": "/editors_and_tools/cocos/index.html#precompiled-libraries-versus-source-code", 
            "text": "Cocos  now makes it easy for developers to use precompiled libraries instead\nof the source code. Why might you want to do this? Speed for one! Using precompiled\nlibraries eliminates the need to compile the  Cocos2d-x  source each time. This\neliminates the long thumb twiddling between compile sessions. Second, updating to\nthe latest version is simple. You download directly from within  Cocos  and  modify \nyour projects settings to switch to the latest version.", 
            "title": "Precompiled libraries versus source code"
        }, 
        {
            "location": "/editors_and_tools/cocos/index.html#sdk-integration", 
            "text": "Cocos  provides many services that you can integrate into your apps for  FREE \nand you can add services to your apps quickly and stay on top of services updates.\nAs new versions of  SDKs  become available you can download directly from within Cocos  and  modify  your projects settings to update to the latest version.  Currently,  SDKBOX  is integrated into  Cocos . You can read more about SDKBOX  and the services it offers in the  Services Docs .", 
            "title": "SDK Integration"
        }, 
        {
            "location": "/editors_and_tools/cocos/index.html#using-cocos", 
            "text": "", 
            "title": "Using Cocos"
        }, 
        {
            "location": "/editors_and_tools/cocos/index.html#creating-a-new-project", 
            "text": "Creating a new project with  Cocos  is easy, just follow a few simple steps.\nUsing  Cocos , you are creating a  Cocos2d-x  project with complete flexibility\nto change your projects settings at any time. To create a new new project:   Open  Cocos  Click  New Project  Specify your project settings. Let's make sure we know what the settings are:   \n  \n   Setting \n   Description \n  \n  \n   Project Name \n   the name of the project to be created. \n  \n  \n   Project Path \n   the folder in which your projects are located. \n  \n  \n   Engine Version \n   version of Cocos2d-x you will use to create this project. \n  \n  \n   Engine Type \n   Precompiled Library:  a static library of the cocos2d-x source code. This would speed up compile times as there is no need to continually build the engine's source. \n   \n   Source Code:  cocos2d-x source code. \n   \n   \n  \n  \n   Project Language \n   Lua:  based on cocos2d-x Lua binding. It can run on Android, iOS, Windows Phone, Windows, Mac. \n   \n   JavaScript:  based on cocos2d-js, also includes cocos2d-x JavaScript bindings. The JavaScript bindings are compatible with HTML5. You can run code in cocos2d-x runtime and HTML5 native engine. The default settings will be JavaScript bindings if the projects are built for running on Android, iOS, Windows Phone, Windows and Mac. The default settings will be cocos2d-js if the projects are for HTML5. \n   \n   C++:  based on cocos2d-x, It can run on Android, iOS, Windows Phone, Windows, Mac. \n   \n  \n  \n   Editor \n   whether or not to create a Cocos Studio project. Cocos Studio is the official editor of Cocos2d-x. \n  \n  \n   SDKs \n   which SDK services are available to add to your project. These services wrap\n  up all the libraries and APIs from the service providers. All will be integrated\n  for you to update the settings and call the service from your project. \n     Click  Create", 
            "title": "Creating a new project"
        }, 
        {
            "location": "/services/sdkbox/index.html", 
            "text": "SDKBOX - The Cure for SDK Fatigue\n\n\nSDKBOX makes it EASY and FREE for Cocos2d-x developers to integrate popular 3rd party SDKs into their games. All SDKBOX plugins are TESTED and CERTIFIED. No matter which version of Cocos2d-x that you are using, C++ or Javascript or Lua, SDKBOX will reduce your integration time from days or weeks down to minutes!\n\n\n\n\nUse SDKBOX from Cocos\n\n\nPrerequisite\n\n\nFirst, select the SDKs you need in Cocos using \"create a project\" or \"edit a project\". All selected SDKs will be automatically installed in your project.\n\n\nNext Step\n\n\n\n\nYou need to update the SDKs' configuration in \nsdkbox_config.json\n. Then you can start to call SDKs' APIs in your game.\n\n\nPlease checkout the documentation for \ndetailed instructions for each plugin\n.\n\n\n\n\nUse SDKBOX Installer\n\n\nSDKBOX Installer is an optional command line tool for any version of Cocos2d-x projects, including both v2.x and v3.x. It lets you integrate SDK plugins by a single line of command. (\nLearn more\n)\n\n\nInstall SDKBOX manually\n\n\nIf you prefer to see exactly which libraries and assets are needed for an integration, you can download the plugin bundle file. A bundle packages everything including SDK libs, instructions, and sample code. You can download the bundle files from \nthe SDKBOX Plugins page\n.", 
            "title": "SDKBOX"
        }, 
        {
            "location": "/services/sdkbox/index.html#sdkbox-the-cure-for-sdk-fatigue", 
            "text": "SDKBOX makes it EASY and FREE for Cocos2d-x developers to integrate popular 3rd party SDKs into their games. All SDKBOX plugins are TESTED and CERTIFIED. No matter which version of Cocos2d-x that you are using, C++ or Javascript or Lua, SDKBOX will reduce your integration time from days or weeks down to minutes!", 
            "title": "SDKBOX - The Cure for SDK Fatigue"
        }, 
        {
            "location": "/services/sdkbox/index.html#use-sdkbox-from-cocos", 
            "text": "", 
            "title": "Use SDKBOX from Cocos"
        }, 
        {
            "location": "/services/sdkbox/index.html#prerequisite", 
            "text": "First, select the SDKs you need in Cocos using \"create a project\" or \"edit a project\". All selected SDKs will be automatically installed in your project.", 
            "title": "Prerequisite"
        }, 
        {
            "location": "/services/sdkbox/index.html#next-step", 
            "text": "You need to update the SDKs' configuration in  sdkbox_config.json . Then you can start to call SDKs' APIs in your game.  Please checkout the documentation for  detailed instructions for each plugin .", 
            "title": "Next Step"
        }, 
        {
            "location": "/services/sdkbox/index.html#use-sdkbox-installer", 
            "text": "SDKBOX Installer is an optional command line tool for any version of Cocos2d-x projects, including both v2.x and v3.x. It lets you integrate SDK plugins by a single line of command. ( Learn more )", 
            "title": "Use SDKBOX Installer"
        }, 
        {
            "location": "/services/sdkbox/index.html#install-sdkbox-manually", 
            "text": "If you prefer to see exactly which libraries and assets are needed for an integration, you can download the plugin bundle file. A bundle packages everything including SDK libs, instructions, and sample code. You can download the bundle files from  the SDKBOX Plugins page .", 
            "title": "Install SDKBOX manually"
        }, 
        {
            "location": "/tutorials/javascript/javascript/index.html", 
            "text": "JavaScript Tutorials\n\n\nParkour Game Tutorials of Cocos2d-JS v3.x\n\n\nStep 1: Hello World Cocos2d-JS\n\n\nStep 2: Make Your First Game Scene\n\n\nStep 3: Design and Make Your Gameplay Scene\n\n\nStep 4: Let the Player Run Animations\n\n\nStep 5: Add Chipmunk Physic Engine to Our Game\n\n\nStep 6: Explorer with TiledMap and Display\n\n\nStep 7: Add Coin and Obstacles Into Our Game\n\n\nStep 8: Implement Game Over Logic and More\n\n\nStep 9: Add Audio Effect into Parkour Game\n\n\nParkour Game Tutorials of Cocos2d-html5 v2.2.x\n\n\nStep 1: Setting up Cocos2d-HTML5 Development Environment\n\n\nStep 2: Hello World Cocos2d-HTML5\n\n\nStep 3: Make Your First Game Scene\n\n\nStep 4: Design and Make Your Gameplay Scene\n\n\nStep 5: Let the Player Run Animations\n\n\nStep 6: Add Chipmunk Physic Engine to Our Game\n\n\nStep 7: Explorer with TiledMap and Camera\n\n\nStep 8: Add Coin and Obstacles Into Our Game\n\n\nStep 9: Implement Game Over Logic and More\n\n\nStep 10: Add Audio Effect into Parkour Game", 
            "title": "Parkour Game Tutorials for Cocos2d-JS"
        }, 
        {
            "location": "/tutorials/javascript/javascript/index.html#javascript-tutorials", 
            "text": "", 
            "title": "JavaScript Tutorials"
        }, 
        {
            "location": "/tutorials/javascript/javascript/index.html#parkour-game-tutorials-of-cocos2d-js-v3x", 
            "text": "", 
            "title": "Parkour Game Tutorials of Cocos2d-JS v3.x"
        }, 
        {
            "location": "/tutorials/javascript/javascript/index.html#step-1-hello-world-cocos2d-js", 
            "text": "", 
            "title": "&emsp;&emsp;Step 1: Hello World Cocos2d-JS"
        }, 
        {
            "location": "/tutorials/javascript/javascript/index.html#step-2-make-your-first-game-scene", 
            "text": "", 
            "title": "&emsp;&emsp;Step 2: Make Your First Game Scene"
        }, 
        {
            "location": "/tutorials/javascript/javascript/index.html#step-3-design-and-make-your-gameplay-scene", 
            "text": "", 
            "title": "&emsp;&emsp;Step 3: Design and Make Your Gameplay Scene"
        }, 
        {
            "location": "/tutorials/javascript/javascript/index.html#step-4-let-the-player-run-animations", 
            "text": "", 
            "title": "&emsp;&emsp;Step 4: Let the Player Run Animations"
        }, 
        {
            "location": "/tutorials/javascript/javascript/index.html#step-5-add-chipmunk-physic-engine-to-our-game", 
            "text": "", 
            "title": "&emsp;&emsp;Step 5: Add Chipmunk Physic Engine to Our Game"
        }, 
        {
            "location": "/tutorials/javascript/javascript/index.html#step-6-explorer-with-tiledmap-and-display", 
            "text": "", 
            "title": "&emsp;&emsp;Step 6: Explorer with TiledMap and Display"
        }, 
        {
            "location": "/tutorials/javascript/javascript/index.html#step-7-add-coin-and-obstacles-into-our-game", 
            "text": "", 
            "title": "&emsp;&emsp;Step 7: Add Coin and Obstacles Into Our Game"
        }, 
        {
            "location": "/tutorials/javascript/javascript/index.html#step-8-implement-game-over-logic-and-more", 
            "text": "", 
            "title": "&emsp;&emsp;Step 8: Implement Game Over Logic and More"
        }, 
        {
            "location": "/tutorials/javascript/javascript/index.html#step-9-add-audio-effect-into-parkour-game", 
            "text": "", 
            "title": "&emsp;&emsp;Step 9: Add Audio Effect into Parkour Game"
        }, 
        {
            "location": "/tutorials/javascript/javascript/index.html#parkour-game-tutorials-of-cocos2d-html5-v22x", 
            "text": "", 
            "title": "Parkour Game Tutorials of Cocos2d-html5 v2.2.x"
        }, 
        {
            "location": "/tutorials/javascript/javascript/index.html#step-1-setting-up-cocos2d-html5-development-environment", 
            "text": "", 
            "title": "&emsp;&emsp;Step 1: Setting up Cocos2d-HTML5 Development Environment"
        }, 
        {
            "location": "/tutorials/javascript/javascript/index.html#step-2-hello-world-cocos2d-html5", 
            "text": "", 
            "title": "&emsp;&emsp;Step 2: Hello World Cocos2d-HTML5"
        }, 
        {
            "location": "/tutorials/javascript/javascript/index.html#step-3-make-your-first-game-scene", 
            "text": "", 
            "title": "&emsp;&emsp;Step 3: Make Your First Game Scene"
        }, 
        {
            "location": "/tutorials/javascript/javascript/index.html#step-4-design-and-make-your-gameplay-scene", 
            "text": "", 
            "title": "&emsp;&emsp;Step 4: Design and Make Your Gameplay Scene"
        }, 
        {
            "location": "/tutorials/javascript/javascript/index.html#step-5-let-the-player-run-animations", 
            "text": "", 
            "title": "&emsp;&emsp;Step 5: Let the Player Run Animations"
        }, 
        {
            "location": "/tutorials/javascript/javascript/index.html#step-6-add-chipmunk-physic-engine-to-our-game", 
            "text": "", 
            "title": "&emsp;&emsp;Step 6: Add Chipmunk Physic Engine to Our Game"
        }, 
        {
            "location": "/tutorials/javascript/javascript/index.html#step-7-explorer-with-tiledmap-and-camera", 
            "text": "", 
            "title": "&emsp;&emsp;Step 7: Explorer with TiledMap and Camera"
        }, 
        {
            "location": "/tutorials/javascript/javascript/index.html#step-8-add-coin-and-obstacles-into-our-game", 
            "text": "", 
            "title": "&emsp;&emsp;Step 8: Add Coin and Obstacles Into Our Game"
        }, 
        {
            "location": "/tutorials/javascript/javascript/index.html#step-9-implement-game-over-logic-and-more", 
            "text": "", 
            "title": "&emsp;&emsp;Step 9: Implement Game Over Logic and More"
        }, 
        {
            "location": "/tutorials/javascript/javascript/index.html#step-10-add-audio-effect-into-parkour-game", 
            "text": "", 
            "title": "&emsp;&emsp;Step 10: Add Audio Effect into Parkour Game"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter2/en/index.html", 
            "text": "Hello World of Cocos2d-JS\n\n\nIn this tutorial, you will learn how to setup a new Cocos2d-JS project from scratch. We will start with a brief description of Cocos2d-JS's directory structure.\n\n\nThe Cocos2d-JS directory structure\n\n\nHere is the Cocos2d-JS directory structure:\n\n\nFigure1\n\n\n\n\nUnderstanding the directory structures\n\n\nThe directory structure can be separated into three parts:\n\n\nPart 1: engine related folders\n\n\n\n\nframeworks\n directory: hosts the Cocos2d-html5 engine and the Cocos2d-x JavaScript Bindings.\n\n\nCocos2d-html5\n directory: holds all the engine modules of Cocos2d-html5, such as engine core modules, audio module, external physics library, CocosBuilder Reader, CocoStudio Reader and other modules. All of the modules are implemented in JS and can be run on the web.\n\n\njs-bindings\n directory: hosts the Cocos2d-x engine, project files of bindings and the external prebuilt SpiderMonkey library. The exported API is writen in JS, and the base modules are implemented in C++. They can be run on native platforms such as iOS, android, Mac, win32 and so on.\n\n\n\n\n\n\n\n\nPart 2: tests, sample games and templates\n\n\n\n\n\n\ntemplate\n directory: used for creating new Cocos2d-JS projects. It includes the HTML5 project and native projects by default. It is used by cocos console to create new projects.\n\n\n\n\n\n\nsamples directory\n: contains all the tests of Cocos2d-JS. It also includes the playable sample game MoonWarriors. All the tests and games can be launched by cocos console and run on web or native platforms with JavaScript binding.\n\n\n\n\n\n\nPart 3: miscellaneous\n\n\n\n\nREADME\n contains some introduction of Cocos2d-JS.\n\n\nLICENSE\n the license of Cocos2d-JS is MIT. You can refer to the license folder under engine root folder to get more details about the licenses of Cocos2d-html5 and Cocos2d-x.\n\n\ntools\n directory: includes cocos console tool and bindings-generator. The template folder contains a build.xml which is a config file for the closure compiler, which can package your game into one single file via Ant.\n\n\nbuild\n directory: contains project files for built-in samples.\n\n\ndocs\n directory: contains JavaScript coding style guide and release notes.\n\n\nCHANGELOG\n contains the changed information of all versions.\n\n\nsetup.py\n a python script for the development environment setup.\n\n\n\n\nTaking a look at the built-in examples\n\n\nWhen you have downloaded and configured your Cocos2d-JS development environment successfully, it is highly recommended to take a look at the built-in examples. These cover over 90% of Cocos2d-JS's features. It is also the most valuable learning resource that you can currently get.\n\n\nTaking a look at the tests\n\n\nGo to the directory \nCocos2d-JS/samples/js-tests\n and run the tests using the cocos console.\n\n\n    cocos run -p web\n\n\n\n\nYou will see all the built-in tests of Cocos2d-JS. Here is the screenshot:\n\n\nFigure 2\n\n\n\n\nThe tests are the best learning resources for you. The tests show nearly every feature of Cocos2d-html5. You can tweak these tests files and you will immediately see the result when you refresh the webpage. It is better to have a taste of Cocos2d-html5 this way than reading a lot of documentation at the very beginning.\n\n\nYou also can run the tests on iOS, Android or Mac.\n\n\n    cocos run -p ios|android|mac\n\n\n\n\nTaking a look at the sample games\n\n\nThere are a full game samples included with Cocos2d-JS. All of the source code is completely free and open to you. In this chapter we will take a look at the sample game MoonWarrior.\n\n\nMoonWarrior\n\n\nGo the root of the \njs-moonwariors\n directory and launch it using the cocos console.\n\n\n    cocos run -p web|ios|android|mac\n\n\n\n\nIt is a vertical shooting game. In this game sample, many useful game techniques are applied, including tiled-map, animations, parallax background etc. Here is the screenshot, you can dive into the source code for more information:\n\n\nFigure 3\n\n\n\n\nSetting up the Parkour project\n\n\nIt is time to create the Parkour project. This project will evolve throughout these tutorials to become a fun parkour game.\n\n\nMaking the project skeleton\n\n\nAs mentioned before, you can create a new project with a specified name. Go to your workspace and use cocos console to create the \nParkour\n project using the command:\n\n\n    cocos new Parkour -l js\n\n\n\n\nNow open WebStorm and open the Parkour directory. The project navigator should look like this:\n\n\nFigure 4\n\n\n\n\nRight click \nindex.html\n in WebStorm and choose \nDebug 'index.html'\n. Chrome will automatically. You have successfully set up a new project. Cheers! The browser address is:\n\n\nhttp://localhost:63342/Parkour/index.html\n\n\n\n\nYou should be greeted by the classic \nHello World\n screenshot:\n\n\nFigure 5\n\n\n\n\nSample game template code analysis\n\n\nThe \ntemplate\n brings us so many things, but we don't know anything about it yet.\n\n\nSuch as what is the main entry of the template program? How are these files organized? What does each file do in the sample application? In this section, these topics will be explained.\n\n\nTaking a look at all the files of the project\n\n\nFirst, let's take a look at all the files and the directory structure of Figure 4, which we showed before.\n\n\nIn Figure 4, we can see:\n\n\n\n\n\n\nThe \nres\n directory. It contains all the resource files needed by our project. Right now it only contains some sample images. If you want you can add some meta files for your game or some awesome game music, you should put them in this folder. You should choose a proper name for each file.\n\n\n\n\n\n\nThe \nsrc\n folder. It contains all of your actual game logic. If your game consists of hundreds of JavaScript source files, you might want to organize them into small chunks using subfolders. Right now our template has two JavaScript source files. The \napp.js\n file contains the first scene's code. The \nresource.js\n file defines some global variables for the resources.\n\n\n\n\n\n\nThe \nindex.html\n file is the entry point of a HTML5 based web application. It is a HTML5 compatible format. It defines some meta data like setting the viewpoint and fullscreen parameters.\n\n\n\n\n\n\nThe \nproject.json\n file is the configuration file for our project. Please refer to \nproject.json\n for more details.\n\n\n\n\n\n\nThe \nmain.js\n is the place to create your first game scene and show it in the browser. You also can define the resolution policy and preload your resources in it.\n\n\n\n\n\n\nNow that you known what these files and folder are for, it is time to understand the source code and the execution path.\n\n\nAnalysis of the project's execution path\n\n\nIt is very important to know a program's execution path.\n\n\nIn our project, the game is loaded into browser from index.html. Then it moves to \nframeworks/Cocos2d-html5/CCBoot.js\n. In this file, it will try to load the project configuration from the project.json file.\n\n\n{\n    \nproject_type\n: \njavascript\n,\n\n    \ndebugMode\n : 1,\n    \nshowFPS\n : true,\n    \nframeRate\n : 60,\n    \nid\n : \ngameCanvas\n,\n    \nrenderMode\n : 0,\n    \nengineDir\n:\nframeworks/cocos2d-html5\n,\n\n    \nmodules\n : [\ncocos2d\n],\n\n    \njsList\n : [\n        \nsrc/resource.js\n,\n        \nsrc/app.js\n\n    ]\n}\n\n\n\n\n\nIn this piece of code from project.json, there is a object property named \nengineDir\n which is the key point to decide the execution path of the following program. In the default case, we have specified the engineDir.\n\n\nThe main.js file will be loaded after \nframeworks/Cocos2d-html5/CCBoot.js\n file and it will initialize the configuration and load all the JavaScript files specified by \nmodules\n and \njsList\n in our project.json file.\n\n\nMaking some little tweaks of the project\n\n\nBefore we actually do some real coding, we have to make some small tweaks and get our hands dirty.\n\n\nHiding the FPS in the left corner of your game screen\n\n\nThe section may be a little bit trivial. We can achieve this by modifying \nshowFPS\n property to \nfalse\n in \nproject.json\n.\n\n\nHere is the code:\n\n\n{\n    \nproject_type\n: \njavascript\n,\n\n    \ndebugMode\n : 1,\n    \nshowFPS\n : false,\n    \nframeRate\n : 60,\n    \nid\n : \ngameCanvas\n,\n    \nrenderMode\n : 0,\n    \nengineDir\n:\nframeworks/Cocos2d-html5\n,\n\n    \nmodules\n : [\ncocos2d\n],\n\n    \njsList\n : [\n        \nsrc/resource.js\n,\n        \nsrc/app.js\n\n    ]\n}\n\n\n\n\nThere are many thing we can tweak by modifying this object's properties. Here is a table with each property's intention:\n\n\n\n\n\n\n\n\nproperty name\n\n\noptions\n\n\nexplanation\n\n\n\n\n\n\n\n\n\n\ndebugMode\n\n\n0, 1, 2, 3, 4, 5, 6\n\n\n0: close all 1: info level 2: warn level 3: error level 4: info level with web page 5: warn level with web page 6: error level with web page\n\n\n\n\n\n\nshowFPS\n\n\ntrue or false\n\n\ntoggle FPS visibility\n\n\n\n\n\n\nid\n\n\n\"gameCanvas\"\n\n\nthe dom element to run cocos2d on\n\n\n\n\n\n\nframeRate\n\n\na positive number above 24, usually between 30 and 60\n\n\nadjust the frame rate of your game\n\n\n\n\n\n\nrenderMode\n\n\n0, 1, 2\n\n\nChoose of RenderMode: 0(default), 1(Canvas only), 2(WebGL only)\n\n\n\n\n\n\nengineDir\n\n\nthe engine directory related for your project\n\n\nspecify the directory the engine code\n\n\n\n\n\n\nmodules\n\n\nengine modules\n\n\nyou could customize your engine using modules. Module names are in moduleConfig.json which is located in root of the \nframeorks/Cocos2d-html5\n directory\n\n\n\n\n\n\njsList\n\n\na list of your game source code\n\n\nadd your own file lists after app.js\n\n\n\n\n\n\n\n\nModify the design resolution size\n\n\nCurrently, Cocos2d-JS takes web browser's full screen as a game canvas. We don't need to manually adjust the canvas size any more. We just need to care about the choosing the resolution size in order to let our game to run seamlessly on iOS and Android with the JavaScript binding technique. We should change the design resolution size to 480*320. Open you main.js and in the function \ncc.game.onStart\n change the Resolution Size to 480 by 320.\n\n\nYou should also change the resolution policy to \nSHOW_ALL\n:\n\n\n    cc.view.setDesignResolutionSize(480, 320, cc.ResolutionPolicy.SHOW_ALL);\n\n\n\n\nIf you are curious about why you should do this, please refer to \nResolution Policy Design for Cocos2d-html5\n for more information.\n\n\nSummary\n\n\nIn this tutorial, we have talked about the directory structure and the built-in tests as well as a sample game of Cocos2d-JS. We also created our first project based on the template provided by Cocos2d-JS. In the last part, we took a look at the files and the code structure of the template.\n\n\nWhere to go from here?\n\n\nIn the next tutorial, you will learn how to set up your game's main menu scene. We will do more coding with Cocos2d-JS.", 
            "title": "_Chapter2"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter2/en/index.html#hello-world-of-cocos2d-js", 
            "text": "In this tutorial, you will learn how to setup a new Cocos2d-JS project from scratch. We will start with a brief description of Cocos2d-JS's directory structure.", 
            "title": "Hello World of Cocos2d-JS"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter2/en/index.html#the-cocos2d-js-directory-structure", 
            "text": "Here is the Cocos2d-JS directory structure:  Figure1", 
            "title": "The Cocos2d-JS directory structure"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter2/en/index.html#understanding-the-directory-structures", 
            "text": "The directory structure can be separated into three parts:", 
            "title": "Understanding the directory structures"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter2/en/index.html#part-1-engine-related-folders", 
            "text": "frameworks  directory: hosts the Cocos2d-html5 engine and the Cocos2d-x JavaScript Bindings.  Cocos2d-html5  directory: holds all the engine modules of Cocos2d-html5, such as engine core modules, audio module, external physics library, CocosBuilder Reader, CocoStudio Reader and other modules. All of the modules are implemented in JS and can be run on the web.  js-bindings  directory: hosts the Cocos2d-x engine, project files of bindings and the external prebuilt SpiderMonkey library. The exported API is writen in JS, and the base modules are implemented in C++. They can be run on native platforms such as iOS, android, Mac, win32 and so on.", 
            "title": "Part 1: engine related folders"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter2/en/index.html#part-2-tests-sample-games-and-templates", 
            "text": "template  directory: used for creating new Cocos2d-JS projects. It includes the HTML5 project and native projects by default. It is used by cocos console to create new projects.    samples directory : contains all the tests of Cocos2d-JS. It also includes the playable sample game MoonWarriors. All the tests and games can be launched by cocos console and run on web or native platforms with JavaScript binding.", 
            "title": "Part 2: tests, sample games and templates"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter2/en/index.html#part-3-miscellaneous", 
            "text": "README  contains some introduction of Cocos2d-JS.  LICENSE  the license of Cocos2d-JS is MIT. You can refer to the license folder under engine root folder to get more details about the licenses of Cocos2d-html5 and Cocos2d-x.  tools  directory: includes cocos console tool and bindings-generator. The template folder contains a build.xml which is a config file for the closure compiler, which can package your game into one single file via Ant.  build  directory: contains project files for built-in samples.  docs  directory: contains JavaScript coding style guide and release notes.  CHANGELOG  contains the changed information of all versions.  setup.py  a python script for the development environment setup.", 
            "title": "Part 3: miscellaneous"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter2/en/index.html#taking-a-look-at-the-built-in-examples", 
            "text": "When you have downloaded and configured your Cocos2d-JS development environment successfully, it is highly recommended to take a look at the built-in examples. These cover over 90% of Cocos2d-JS's features. It is also the most valuable learning resource that you can currently get.", 
            "title": "Taking a look at the built-in examples"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter2/en/index.html#taking-a-look-at-the-tests", 
            "text": "Go to the directory  Cocos2d-JS/samples/js-tests  and run the tests using the cocos console.      cocos run -p web  You will see all the built-in tests of Cocos2d-JS. Here is the screenshot:  Figure 2   The tests are the best learning resources for you. The tests show nearly every feature of Cocos2d-html5. You can tweak these tests files and you will immediately see the result when you refresh the webpage. It is better to have a taste of Cocos2d-html5 this way than reading a lot of documentation at the very beginning.  You also can run the tests on iOS, Android or Mac.      cocos run -p ios|android|mac", 
            "title": "Taking a look at the tests"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter2/en/index.html#taking-a-look-at-the-sample-games", 
            "text": "There are a full game samples included with Cocos2d-JS. All of the source code is completely free and open to you. In this chapter we will take a look at the sample game MoonWarrior.", 
            "title": "Taking a look at the sample games"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter2/en/index.html#moonwarrior", 
            "text": "Go the root of the  js-moonwariors  directory and launch it using the cocos console.      cocos run -p web|ios|android|mac  It is a vertical shooting game. In this game sample, many useful game techniques are applied, including tiled-map, animations, parallax background etc. Here is the screenshot, you can dive into the source code for more information:  Figure 3", 
            "title": "MoonWarrior"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter2/en/index.html#setting-up-the-parkour-project", 
            "text": "It is time to create the Parkour project. This project will evolve throughout these tutorials to become a fun parkour game.", 
            "title": "Setting up the Parkour project"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter2/en/index.html#making-the-project-skeleton", 
            "text": "As mentioned before, you can create a new project with a specified name. Go to your workspace and use cocos console to create the  Parkour  project using the command:      cocos new Parkour -l js  Now open WebStorm and open the Parkour directory. The project navigator should look like this:  Figure 4   Right click  index.html  in WebStorm and choose  Debug 'index.html' . Chrome will automatically. You have successfully set up a new project. Cheers! The browser address is:  http://localhost:63342/Parkour/index.html  You should be greeted by the classic  Hello World  screenshot:  Figure 5", 
            "title": "Making the project skeleton"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter2/en/index.html#sample-game-template-code-analysis", 
            "text": "The  template  brings us so many things, but we don't know anything about it yet.  Such as what is the main entry of the template program? How are these files organized? What does each file do in the sample application? In this section, these topics will be explained.", 
            "title": "Sample game template code analysis"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter2/en/index.html#taking-a-look-at-all-the-files-of-the-project", 
            "text": "First, let's take a look at all the files and the directory structure of Figure 4, which we showed before.  In Figure 4, we can see:    The  res  directory. It contains all the resource files needed by our project. Right now it only contains some sample images. If you want you can add some meta files for your game or some awesome game music, you should put them in this folder. You should choose a proper name for each file.    The  src  folder. It contains all of your actual game logic. If your game consists of hundreds of JavaScript source files, you might want to organize them into small chunks using subfolders. Right now our template has two JavaScript source files. The  app.js  file contains the first scene's code. The  resource.js  file defines some global variables for the resources.    The  index.html  file is the entry point of a HTML5 based web application. It is a HTML5 compatible format. It defines some meta data like setting the viewpoint and fullscreen parameters.    The  project.json  file is the configuration file for our project. Please refer to  project.json  for more details.    The  main.js  is the place to create your first game scene and show it in the browser. You also can define the resolution policy and preload your resources in it.    Now that you known what these files and folder are for, it is time to understand the source code and the execution path.", 
            "title": "Taking a look at all the files of the project"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter2/en/index.html#analysis-of-the-projects-execution-path", 
            "text": "It is very important to know a program's execution path.  In our project, the game is loaded into browser from index.html. Then it moves to  frameworks/Cocos2d-html5/CCBoot.js . In this file, it will try to load the project configuration from the project.json file.  {\n     project_type :  javascript ,\n\n     debugMode  : 1,\n     showFPS  : true,\n     frameRate  : 60,\n     id  :  gameCanvas ,\n     renderMode  : 0,\n     engineDir : frameworks/cocos2d-html5 ,\n\n     modules  : [ cocos2d ],\n\n     jsList  : [\n         src/resource.js ,\n         src/app.js \n    ]\n}  In this piece of code from project.json, there is a object property named  engineDir  which is the key point to decide the execution path of the following program. In the default case, we have specified the engineDir.  The main.js file will be loaded after  frameworks/Cocos2d-html5/CCBoot.js  file and it will initialize the configuration and load all the JavaScript files specified by  modules  and  jsList  in our project.json file.", 
            "title": "Analysis of the project's execution path"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter2/en/index.html#making-some-little-tweaks-of-the-project", 
            "text": "Before we actually do some real coding, we have to make some small tweaks and get our hands dirty.", 
            "title": "Making some little tweaks of the project"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter2/en/index.html#hiding-the-fps-in-the-left-corner-of-your-game-screen", 
            "text": "The section may be a little bit trivial. We can achieve this by modifying  showFPS  property to  false  in  project.json .  Here is the code:  {\n     project_type :  javascript ,\n\n     debugMode  : 1,\n     showFPS  : false,\n     frameRate  : 60,\n     id  :  gameCanvas ,\n     renderMode  : 0,\n     engineDir : frameworks/Cocos2d-html5 ,\n\n     modules  : [ cocos2d ],\n\n     jsList  : [\n         src/resource.js ,\n         src/app.js \n    ]\n}  There are many thing we can tweak by modifying this object's properties. Here is a table with each property's intention:     property name  options  explanation      debugMode  0, 1, 2, 3, 4, 5, 6  0: close all 1: info level 2: warn level 3: error level 4: info level with web page 5: warn level with web page 6: error level with web page    showFPS  true or false  toggle FPS visibility    id  \"gameCanvas\"  the dom element to run cocos2d on    frameRate  a positive number above 24, usually between 30 and 60  adjust the frame rate of your game    renderMode  0, 1, 2  Choose of RenderMode: 0(default), 1(Canvas only), 2(WebGL only)    engineDir  the engine directory related for your project  specify the directory the engine code    modules  engine modules  you could customize your engine using modules. Module names are in moduleConfig.json which is located in root of the  frameorks/Cocos2d-html5  directory    jsList  a list of your game source code  add your own file lists after app.js", 
            "title": "Hiding the FPS in the left corner of your game screen"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter2/en/index.html#modify-the-design-resolution-size", 
            "text": "Currently, Cocos2d-JS takes web browser's full screen as a game canvas. We don't need to manually adjust the canvas size any more. We just need to care about the choosing the resolution size in order to let our game to run seamlessly on iOS and Android with the JavaScript binding technique. We should change the design resolution size to 480*320. Open you main.js and in the function  cc.game.onStart  change the Resolution Size to 480 by 320.  You should also change the resolution policy to  SHOW_ALL :      cc.view.setDesignResolutionSize(480, 320, cc.ResolutionPolicy.SHOW_ALL);  If you are curious about why you should do this, please refer to  Resolution Policy Design for Cocos2d-html5  for more information.", 
            "title": "Modify the design resolution size"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter2/en/index.html#summary", 
            "text": "In this tutorial, we have talked about the directory structure and the built-in tests as well as a sample game of Cocos2d-JS. We also created our first project based on the template provided by Cocos2d-JS. In the last part, we took a look at the files and the code structure of the template.", 
            "title": "Summary"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter2/en/index.html#where-to-go-from-here", 
            "text": "In the next tutorial, you will learn how to set up your game's main menu scene. We will do more coding with Cocos2d-JS.", 
            "title": "Where to go from here?"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter3/en/index.html", 
            "text": "Making Your First Game Scene\n\n\nBefore creating the first scene for your game, you should be familiar with some basic concepts of Cocos2d. If you are already familiar with these concepts, you can skip to the next section.\n\n\nBasic concepts\n\n\nIn a Cocos2d game, every element is a node. The game is constructed mostly by three kinds of nodes:\n\n\n\n\n\n\nScene\n\n\n\n\n\n\nLayer \n\n\n\n\n\n\nSprite \n\n\n\n\n\n\nFor now we will focus on the Layers in this game, you can find more details about the Scene and Sprite \nhere\n.\n\n\nLayer\n\n\nA cc.Layer is a cc.Node which knows how to draw itself and may be semi-transparent, allowing players to see other layers behind them. cc.Layer is very useful for defining your game's appearance and behaviour, so it will take a lot of time to deal with cc.Layer subclasses to reach your expectation.\n\n\n\n\nWhile complex applications will require you to define custom cc.Layer subclasses, Cocos2d provides several predefined layers. Some examples include cc.Menu (a simple menu layer), cc.ColorLayer (a layer that draws a solid color), and cc.LayerMultiplex (a layer that lets you multiplex its children, activating one at a time while disabling the others).\n\n\nLayers may contain any cc.Node as a child, including cc.Sprite, cc.Label, and even other cc.Layer objects. Because layers are a subclass of cc.Node, they can be transformed manually or by using a cc.Action.\n\n\nCoordinate system\n\n\nCocos2d-JS uses the same coordinate system as OpenGL, which is the so-called \u201cRight-handed Cartesian Coordinate System\u201d. It is popular in the gaming industry, however, it is  different from the traditional top left coordinate system which used in web-page design. \n\n\n\n\nMore details about the coordinate system can be found \nhere\n.\n\n\nAnchor point\n\n\nThe anchor point is used for both positioning and rotation of an object. The anchor point's coordinate is a relative coordinate. For example, the anchor point in position (0, 0), which we always define in Cocos2d-x as cc.p(0 , 0), corresponds to the most bottom-left point of that object, while cc.p(0.5, 0.5) corresponds to the center of the object. When setting the position of an object, the object is positioned such that the anchor point will be at the coordinates specified with the setPosition() call. Similarly, when rotating the object, it is rotated around the anchor point.\n\n\nThe properties can be set as attributes in Cocos2d-JS v3.0.\n\n\nFor example, this sprite has an anchorPoint of cc.p(0, 0) and a position of cc.p(0,0):\n\n\n // create sprite \n    var sprite = new cc.Sprite ( \nbottomleft.png\n ) ; \n    sprite.attr({\n            x: 0,\n            y: 0,\n            anchorX: 0,\n            anchorY: 0\n        });\n    this.addChild ( sprite ) ;\n\n\n\n\nAction\n\n\nMore details about Actions can be found \nhere\n.\n\n\nExample of moving a sprite using the cc.MoveBy action:\n\n\n// Move a sprite 50 pixels to the right, and 10 pixels to the top over 2 seconds.\nsprite.runAction(new cc.MoveBy(2, cc.p(50, 10)));\n\n\n\n\nAnimation\n\n\nMore details about Animations can be found \nhere\n.\n\n\nExample of playing an animation:\n\n\n var animation = new cc.Animation ( ) ;\n\n for ( var i = 1 ; i \n 15 ; i ++ ) {         \n    var frameName = \nres/Images/grossini_dance_\n + ( ( i \n 10 ) ? ( \n0\n + i ) : i ) + \n.png\n ; \n    animation.addSpriteFrameWithFile ( frameName ) ;\n }\n\n animation.setDelayPerUnit ( 2.8 / 14 ) ; \n animation.setRestoreOriginalFrame ( true ) ; \n var action = new cc.Animate ( animation ) ; \n sprite.runAction ( new cc.Sequence( action, action.reverse ( ) ) ) ;\n\n\n\n\n\nScheduler and Timer callbacks\n\n\nMore details about Scheduler and Timer Callback can be found \nhere\n.\n\n\nEventManager\n\n\nCocos2d-JS v3.0 migrated a new mechanism for responding to user events. \n\n\nThe basics:\n\n\n\n\nEvent listeners\n encapsulate your event processing code.\n\n\nEvent Manager\n manages listeners of user events.\n\n\nEvent objects\n contain information about the event.\n\n\n\n\nTo respond to events, you must first create a cc.EventListener. There are five different kinds of EventListeners:\n\n\n\n\ncc.EventListenerTouch - responds to touch events\n\n\ncc.EventListenerKeyboard - responds to keyboard events\n\n\ncc.EventListenerAcceleration - responds to accelerometer events\n\n\ncc.EventListenMouse - responds to mouse events\n\n\ncc.EventListenerCustom - responds to custom events\n\n\n\n\nThen, attach your event processing code to the appropriate callback on the event listener (e.g. \nonTouchBegan\n for \nEventListenerTouch\n listeners, or \nonKeyPressed\n for keyboard event listeners).\n\n\nNext, register your EventListener with the \ncc.eventManager\n.\n\n\nWhen events occur (for example, the user touches the screen or types on the keyboard), the \ncc.eventManager\n distributes \nEvent objects\n (e.g. \nEventTouch\n, \nEventKeyboard\n) to the appropriate EventListeners by calling your callbacks. Each Event object contains information about the event (for example, the coordinates where the touch occurred).\n\n\nPlease refer to \nEventManager\n for more details.\n\n\nMaking the game scene\n\n\nIn last tutorial, we have analysed the execution path of a Cocos2d-JS game. Our first game scene is loaded in the function \ncc.game.onStart\n of main.js. Here is the code snippet which does the real trick:\n\n\ncc.game.onStart = function(){\n    cc.view.setDesignResolutionSize(480, 320, cc.ResolutionPolicy.SHOW_ALL);\n    cc.view.resizeWithBrowserSize(true);\n    //load resources\n    cc.LoaderScene.preload(g_resources, function () {\n        cc.director.runScene(new HelloWorldScene());\n    }, this);\n};\n\n\n\n\nHere, we use cc.LoaderScene to preload the resources of our game and after loading all resources, the director will run our first scene. \n\n\nNote:\n\n\nThe \ncc.game\n is actual game object which will initialize game configuration and launch games.\n\n\nCleanup work\n\n\nBefore we can create our own scene, we need to clean some stuff up.\n\n\nCleanup the app.js\n\n\nThis process is very simple. First, we should delete all the contents of app.js, because we will rewrite it from scratch.\n\n\nSecondly, we should change this line in main.js:\n\n\ncc.director.runScene(new HelloWorldScene());\n\n\n\n\nto \n\n\ncc.director.runScene(new MenuScene());\n\n\n\n\nWhen the game starts, we want to run the MenuScene which we will define instead of the HelloWorldScene.\n\n\nAt last, we should add the resources for our scene and define some resource variables for easy access.\n\n\n\n\nOpen resource.js and change its content to:\n\n\nvar res = {\n    helloBG_png : \nres/helloBG.png\n,\n    start_n_png : \nres/start_n.png\n,\n    start_s_png : \nres/start_s.png\n\n};\n\nvar g_resources = [\n    //image\n    res.helloBG_png,\n    res.start_n_png,\n    res.start_s_png\n];\n\n\n\n\nDefine your first scene, the MenuScene\n\n\nOpen app.js and start to define the MenuLayer:\n\n\nvar MenuLayer = cc.Layer.extend({\n    ctor : function(){\n        //1. call super class's ctor function\n        this._super();\n    },\n    init:function(){\n        //call super class's super function\n        this._super();\n\n        //2. get the screen size of your game canvas\n        var winsize = cc.director.getWinSize();\n\n        //3. calculate the center point\n        var centerpos = cc.p(winsize.width / 2, winsize.height / 2);\n\n        //4. create a background image and set it's position at the center of the screen\n        var spritebg = new cc.Sprite(res.helloBG_png);\n        spritebg.setPosition(centerpos);\n        this.addChild(spritebg);\n\n        //5.\n        cc.MenuItemFont.setFontSize(60);\n\n        //6.create a menu and assign onPlay event callback to it\n        var menuItemPlay = new cc.MenuItemSprite(\n            new cc.Sprite(res.start_n_png), // normal state image\n            new cc.Sprite(res.start_s_png), // select state image\n            this.onPlay, this);\n        var menu = new cc.Menu(menuItemPlay);  //7. create the menu\n        menu.setPosition(centerpos);\n        this.addChild(menu);\n    },\n\n    onPlay : function(){\n        cc.log(\n==onplay clicked\n);\n    }\n});\n\n\n\n\nLet's go through all the details from 1-6:\n\n\n\n\nIt calls the init function of its super class.\n\n\nGet the screen size of you game.\n\n\nCalculate the center point of your screen which will be used to center background images.\n\n\nCreate a background image using a file name and set its position to the center of the screen. Then, add the sprite to MenuLayer as a child.\n\n\nCall the MenuItemFont's setFontSize function to adjust the font size. It is not used in this example, but if you want to use MenuItemFont to create some menu items, it will affect the menu item label size.\n\n\nCreate a menu with two images, one for the normal state and another for the selected state. Then the menu's position is set to the center of the screen. At last, the menu is added to the current layer.\n\n\n\n\nWe should also define a Menu scene:\n\n\nvar MenuScene = cc.Scene.extend({\n    onEnter:function () {\n        this._super();\n        var layer = new MenuLayer();\n        layer.init();\n        this.addChild(layer);\n    }\n});\n\n\n\n\nThe process of creating a MenuScene is very straightforward. You defined a variable which derived from cc.Scene. You should remember the sign \nextend\n, which is used for external classes.\n\n\nOnce the scene is created, the \nonEnter\n function should be defined. It defines the MenuLayer as it's child. We can also define a \nctor\n function instead of the onEnter function. The onEnter function is called after ctor function.\n\n\nSummary\n\n\nIn this tutorial, you were introduced to the basic concepts of programming Cocos2d-JS games. You were also giving a detailed explanation of how to set up your first game scene. We hope you enjoyed it! The related sample project can be downloaded \nhere\n. It only includes user part and doesn't includes frameworks. You could use them to replace the corresponding parts of Cocos2d-JS template.\n\n\nWhere to go from here\n\n\nIn the next chapter, you will learn how to define your game scene with the various game layers, how to design these layers and what the responsibility of each layer is.", 
            "title": "_Chapter3"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter3/en/index.html#making-your-first-game-scene", 
            "text": "Before creating the first scene for your game, you should be familiar with some basic concepts of Cocos2d. If you are already familiar with these concepts, you can skip to the next section.", 
            "title": "Making Your First Game Scene"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter3/en/index.html#basic-concepts", 
            "text": "In a Cocos2d game, every element is a node. The game is constructed mostly by three kinds of nodes:    Scene    Layer     Sprite     For now we will focus on the Layers in this game, you can find more details about the Scene and Sprite  here .", 
            "title": "Basic concepts"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter3/en/index.html#layer", 
            "text": "A cc.Layer is a cc.Node which knows how to draw itself and may be semi-transparent, allowing players to see other layers behind them. cc.Layer is very useful for defining your game's appearance and behaviour, so it will take a lot of time to deal with cc.Layer subclasses to reach your expectation.   While complex applications will require you to define custom cc.Layer subclasses, Cocos2d provides several predefined layers. Some examples include cc.Menu (a simple menu layer), cc.ColorLayer (a layer that draws a solid color), and cc.LayerMultiplex (a layer that lets you multiplex its children, activating one at a time while disabling the others).  Layers may contain any cc.Node as a child, including cc.Sprite, cc.Label, and even other cc.Layer objects. Because layers are a subclass of cc.Node, they can be transformed manually or by using a cc.Action.", 
            "title": "Layer"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter3/en/index.html#coordinate-system", 
            "text": "Cocos2d-JS uses the same coordinate system as OpenGL, which is the so-called \u201cRight-handed Cartesian Coordinate System\u201d. It is popular in the gaming industry, however, it is  different from the traditional top left coordinate system which used in web-page design.    More details about the coordinate system can be found  here .", 
            "title": "Coordinate system"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter3/en/index.html#anchor-point", 
            "text": "The anchor point is used for both positioning and rotation of an object. The anchor point's coordinate is a relative coordinate. For example, the anchor point in position (0, 0), which we always define in Cocos2d-x as cc.p(0 , 0), corresponds to the most bottom-left point of that object, while cc.p(0.5, 0.5) corresponds to the center of the object. When setting the position of an object, the object is positioned such that the anchor point will be at the coordinates specified with the setPosition() call. Similarly, when rotating the object, it is rotated around the anchor point.  The properties can be set as attributes in Cocos2d-JS v3.0.  For example, this sprite has an anchorPoint of cc.p(0, 0) and a position of cc.p(0,0):   // create sprite \n    var sprite = new cc.Sprite (  bottomleft.png  ) ; \n    sprite.attr({\n            x: 0,\n            y: 0,\n            anchorX: 0,\n            anchorY: 0\n        });\n    this.addChild ( sprite ) ;", 
            "title": "Anchor point"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter3/en/index.html#action", 
            "text": "More details about Actions can be found  here .  Example of moving a sprite using the cc.MoveBy action:  // Move a sprite 50 pixels to the right, and 10 pixels to the top over 2 seconds.\nsprite.runAction(new cc.MoveBy(2, cc.p(50, 10)));", 
            "title": "Action"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter3/en/index.html#animation", 
            "text": "More details about Animations can be found  here .  Example of playing an animation:   var animation = new cc.Animation ( ) ;\n\n for ( var i = 1 ; i   15 ; i ++ ) {         \n    var frameName =  res/Images/grossini_dance_  + ( ( i   10 ) ? (  0  + i ) : i ) +  .png  ; \n    animation.addSpriteFrameWithFile ( frameName ) ;\n }\n\n animation.setDelayPerUnit ( 2.8 / 14 ) ; \n animation.setRestoreOriginalFrame ( true ) ; \n var action = new cc.Animate ( animation ) ; \n sprite.runAction ( new cc.Sequence( action, action.reverse ( ) ) ) ;", 
            "title": "Animation"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter3/en/index.html#scheduler-and-timer-callbacks", 
            "text": "More details about Scheduler and Timer Callback can be found  here .", 
            "title": "Scheduler and Timer callbacks"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter3/en/index.html#eventmanager", 
            "text": "Cocos2d-JS v3.0 migrated a new mechanism for responding to user events.   The basics:   Event listeners  encapsulate your event processing code.  Event Manager  manages listeners of user events.  Event objects  contain information about the event.   To respond to events, you must first create a cc.EventListener. There are five different kinds of EventListeners:   cc.EventListenerTouch - responds to touch events  cc.EventListenerKeyboard - responds to keyboard events  cc.EventListenerAcceleration - responds to accelerometer events  cc.EventListenMouse - responds to mouse events  cc.EventListenerCustom - responds to custom events   Then, attach your event processing code to the appropriate callback on the event listener (e.g.  onTouchBegan  for  EventListenerTouch  listeners, or  onKeyPressed  for keyboard event listeners).  Next, register your EventListener with the  cc.eventManager .  When events occur (for example, the user touches the screen or types on the keyboard), the  cc.eventManager  distributes  Event objects  (e.g.  EventTouch ,  EventKeyboard ) to the appropriate EventListeners by calling your callbacks. Each Event object contains information about the event (for example, the coordinates where the touch occurred).  Please refer to  EventManager  for more details.", 
            "title": "EventManager"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter3/en/index.html#making-the-game-scene", 
            "text": "In last tutorial, we have analysed the execution path of a Cocos2d-JS game. Our first game scene is loaded in the function  cc.game.onStart  of main.js. Here is the code snippet which does the real trick:  cc.game.onStart = function(){\n    cc.view.setDesignResolutionSize(480, 320, cc.ResolutionPolicy.SHOW_ALL);\n    cc.view.resizeWithBrowserSize(true);\n    //load resources\n    cc.LoaderScene.preload(g_resources, function () {\n        cc.director.runScene(new HelloWorldScene());\n    }, this);\n};  Here, we use cc.LoaderScene to preload the resources of our game and after loading all resources, the director will run our first scene.   Note:  The  cc.game  is actual game object which will initialize game configuration and launch games.", 
            "title": "Making the game scene"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter3/en/index.html#cleanup-work", 
            "text": "Before we can create our own scene, we need to clean some stuff up.", 
            "title": "Cleanup work"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter3/en/index.html#cleanup-the-appjs", 
            "text": "This process is very simple. First, we should delete all the contents of app.js, because we will rewrite it from scratch.  Secondly, we should change this line in main.js:  cc.director.runScene(new HelloWorldScene());  to   cc.director.runScene(new MenuScene());  When the game starts, we want to run the MenuScene which we will define instead of the HelloWorldScene.  At last, we should add the resources for our scene and define some resource variables for easy access.   Open resource.js and change its content to:  var res = {\n    helloBG_png :  res/helloBG.png ,\n    start_n_png :  res/start_n.png ,\n    start_s_png :  res/start_s.png \n};\n\nvar g_resources = [\n    //image\n    res.helloBG_png,\n    res.start_n_png,\n    res.start_s_png\n];", 
            "title": "Cleanup the app.js"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter3/en/index.html#define-your-first-scene-the-menuscene", 
            "text": "Open app.js and start to define the MenuLayer:  var MenuLayer = cc.Layer.extend({\n    ctor : function(){\n        //1. call super class's ctor function\n        this._super();\n    },\n    init:function(){\n        //call super class's super function\n        this._super();\n\n        //2. get the screen size of your game canvas\n        var winsize = cc.director.getWinSize();\n\n        //3. calculate the center point\n        var centerpos = cc.p(winsize.width / 2, winsize.height / 2);\n\n        //4. create a background image and set it's position at the center of the screen\n        var spritebg = new cc.Sprite(res.helloBG_png);\n        spritebg.setPosition(centerpos);\n        this.addChild(spritebg);\n\n        //5.\n        cc.MenuItemFont.setFontSize(60);\n\n        //6.create a menu and assign onPlay event callback to it\n        var menuItemPlay = new cc.MenuItemSprite(\n            new cc.Sprite(res.start_n_png), // normal state image\n            new cc.Sprite(res.start_s_png), // select state image\n            this.onPlay, this);\n        var menu = new cc.Menu(menuItemPlay);  //7. create the menu\n        menu.setPosition(centerpos);\n        this.addChild(menu);\n    },\n\n    onPlay : function(){\n        cc.log( ==onplay clicked );\n    }\n});  Let's go through all the details from 1-6:   It calls the init function of its super class.  Get the screen size of you game.  Calculate the center point of your screen which will be used to center background images.  Create a background image using a file name and set its position to the center of the screen. Then, add the sprite to MenuLayer as a child.  Call the MenuItemFont's setFontSize function to adjust the font size. It is not used in this example, but if you want to use MenuItemFont to create some menu items, it will affect the menu item label size.  Create a menu with two images, one for the normal state and another for the selected state. Then the menu's position is set to the center of the screen. At last, the menu is added to the current layer.   We should also define a Menu scene:  var MenuScene = cc.Scene.extend({\n    onEnter:function () {\n        this._super();\n        var layer = new MenuLayer();\n        layer.init();\n        this.addChild(layer);\n    }\n});  The process of creating a MenuScene is very straightforward. You defined a variable which derived from cc.Scene. You should remember the sign  extend , which is used for external classes.  Once the scene is created, the  onEnter  function should be defined. It defines the MenuLayer as it's child. We can also define a  ctor  function instead of the onEnter function. The onEnter function is called after ctor function.", 
            "title": "Define your first scene, the MenuScene"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter3/en/index.html#summary", 
            "text": "In this tutorial, you were introduced to the basic concepts of programming Cocos2d-JS games. You were also giving a detailed explanation of how to set up your first game scene. We hope you enjoyed it! The related sample project can be downloaded  here . It only includes user part and doesn't includes frameworks. You could use them to replace the corresponding parts of Cocos2d-JS template.", 
            "title": "Summary"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter3/en/index.html#where-to-go-from-here", 
            "text": "In the next chapter, you will learn how to define your game scene with the various game layers, how to design these layers and what the responsibility of each layer is.", 
            "title": "Where to go from here"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter4/en/index.html", 
            "text": "Design and Make Your Gameplay Scene\n\n\nIntroduction\n\n\nIn this tutorial, you will learn how to design and construct the gameplay scene. Every game needs some kind of gameplay scene. This tutorial will show the general scenario of a gameplay scene.\n\n\nFrom the previous tutorial, we know that we can use different layers to separate the logic of a specified scene.\n\n\nHere is the final result of our gameplay scene:\n\n\n\n\nThere is a background with some buildings, our hero and some HUD(heads-up display) elements to show some statistics about the current game. We divide the gameplay scene into three parts: the background layer, the animation layer and the status layer.\n\n\nBackground Layer\n\n\nBasically, every game needs a background of some sort. Sometimes the background is just a static image which occupies the entire screen. Other times you may want the background layer to move at a constant or varying speed. Sometimes the background even shows us parallax effects--different layers move at various speed, the nearest layer moves faster and the farthest layer moves slower to simulate that objects are near or far. \n\n\nIn later tutorials, we will introduce tiled maps which are very useful to construct parallax background. In this tutorial, in order to keep things simple, we just use a simple static image to represent the game's background.\n\n\nNote\n:\nWe can move the background to mimic the effect of our game hero running, keeping the hero at the center of the screen. We will see many such tricks during our development process.\n\n\nAnimation Layer(Gameplay Layer)\n\n\nThe animation layer contains all game elements that animate, collision detection and other game logic. This layer is sometimes also called the \nGameplayLayer\n. You can choose to name it what you want. In this layer, we organize the key part of our gameplay. In general, we will design game objects, s level spawner(which are also called level managers), collision detection between different game objects and check if the player has won or lost the game.\n\n\nIn theory, we don't need to separate this layer into smaller layers. We can use composition and delegation to handle things properly. \n\n\nStatus Layer(HUD Layer)\n\n\nIn video gaming, the HUD (head-up display) is the method by which information is visually relayed to the player as part of a game's user interface. It takes its name from the head-up displays used in modern aircraft.\n\n\nThe HUD is frequently used to simultaneously display several pieces of information including the main character's health, items and an indication of game's progression (such as score or level). You can refer to \nthis link\n for more information on HUDs.\n\n\nTo make things simpler, we put this information into a separate layer called StatusLayer. Because these items are always displayed on top of other game elements, placing them on a separate layer will make our life easier without caring about the Z-order display issues.\n\n\nCoding in action\n\n\nPreparation\n\n\nStart by adding two images(\nPlayBG.png\n and \nrunner.png\n) to the \nres\n directory.\n\n\nIn the previous tutorial, we have added all resources variables in \nresource.js\n. Since two more images have been added, \nresource.js\n should also be changed to this:\n\n\nvar res = {\n    helloBG_png : \nres/helloBG.png\n,\n    start_n_png : \nres/start_n.png\n,\n    start_s_png : \nres/start_s.png\n,\n    PlayBG_png  : \nres/PlayBG.png\n,\n    runner_png  : \nres/runner.png\n\n};\n\nvar g_resources = [\n    //image\n    res.helloBG_png,\n    res.start_n_png,\n    res.start_s_png,\n    res.PlayBG_png,\n    res.runner_png\n];\n\n\n\n\nHere we have added two global variables named \nPlayBG_png\n and \nrunner_png\n. Now when we want to create a sprite in another js files, we can easily access these variables.\n\n\nSince we will add four JavaScript files: PlayScene.js, AnimationLayer.js, BackgroundLayer.js and StatusLayer.js.  We need to tell the Cocos2d-x engine to load these files when the game starts. We do this by changing \nproject.json\n to make it aware of the new source files:\n\n\n \njsList\n : [\n        \nsrc/resource.js\n,\n        \nsrc/app.js\n,\n        \nsrc/AnimationLayer.js\n,\n        \nsrc/BackgroundLayer.js\n,\n        \nsrc/PlayScene.js\n,\n        \nsrc/StatusLayer.js\n\n    ]\n\n\n\n\nIn the future, each time when you add a new JavaScript file into your game, you should change the attribute \njsList\n and add more source code file paths to the end of the array.\n\n\nLastly, we should display the PlayScene when we click the button in the first MenuScene. Here is the code snippet:\n\n\n    //this is the callback when the menu is clicked\n    onPlay : function(){\n        cc.log(\n==onplay clicked\n);\n        cc.director.runScene(new PlayScene());\n    }\n\n\n\n\nCoding the PlayScene(PlayScene.js)\n\n\nSince background layer, animation layer and status layer should be displayed in a different order. We can specify the order explicitly when calling the \naddChild\n method or we can add them as PlayScene's children in the right order. In this tutorial, we will add them in the right order.\n\n\nHere is the code snippet of PlayScene:\n\n\nvar PlayScene = cc.Scene.extend({\n    onEnter:function () {\n        this._super();\n        //add three layer in the right order\n        this.addChild(new BackgroundLayer());\n        this.addChild(new AnimationLayer());\n        this.addChild(new StatusLayer());\n    }\n});\n\n\n\n\nCoding the BackgroundLayer(BackgroundLayer.js)\n\n\nHere is our background image:\n\n\n\nHere is the code snippet:\n\n\nvar BackgroundLayer = cc.Layer.extend({\n    ctor:function () {\n        this._super();\n        this.init();\n    },\n\n    init:function () {\n        this._super();\n        var winsize = cc.director.getWinSize();\n\n        //create the background image and position it at the center of screen\n        var centerPos = cc.p(winsize.width / 2, winsize.height / 2);\n        var spriteBG = new cc.Sprite(res.PlayBG_png);\n        spriteBG.setPosition(centerPos);\n        this.addChild(spriteBG);\n    }\n});\n\n\n\n\n\nCoding the AnimationLayer(AnimationLayer.js)\n\n\nHere is our main character:\n\n\n\nIn this section, we will run actions on the hero. We will run the \nMoveTo\n action on the sprite to move the sprite from (80,85) to (300,85) in two seconds.\n\n\nHere is the code snippet of AnimationLayer:\n\n\nvar AnimationLayer = cc.Layer.extend({\n    ctor:function () {\n        this._super();\n        this.init();\n    },\n    init:function () {\n        this._super();\n\n        //create the hero sprite\n        var spriteRunner = new cc.Sprite(res.runner_png);\n        spriteRunner.attr({x: 80, y: 85});\n\n        //create the move action\n        var actionTo = new cc.MoveTo(2, cc.p(300, 85));\n        spriteRunner.runAction(new cc.Sequence(actionTo));\n        this.addChild(spriteRunner);\n    }\n});\n\n\n\n\nCoding the StatusLayer(StatusLayer.js)\n\n\nIn this section, we will add two indicators: the coin quantity indicator and the distance indicator. Both indicators are labels in Cocos2d-html5. Labels are very useful to display HUD information to players and the code to create and use labels is very easy thanks to cocos2d framework.\n\n\nHere is the code snippet we need to set up the layer:\n\n\nvar StatusLayer = cc.Layer.extend({\n    labelCoin:null,\n    labelMeter:null,\n    coins:0,\n\n    ctor:function () {\n        this._super();\n        this.init();\n    },\n\n    init:function () {\n        this._super();\n\n        var winsize = cc.director.getWinSize();\n\n        this.labelCoin = new cc.LabelTTF(\nCoins:0\n, \nHelvetica\n, 20);\n        this.labelCoin.setColor(cc.color(0,0,0));//black color\n        this.labelCoin.setPosition(cc.p(70, winsize.height - 20));\n        this.addChild(this.labelCoin);\n\n        this.labelMeter = new cc.LabelTTF(\n0M\n, \nHelvetica\n, 20);\n        this.labelMeter.setPosition(cc.p(winsize.width - 70, winsize.height - 20));\n        this.addChild(this.labelMeter);\n    }\n});\n\n\n\n\nWe can use \nnew cc.LabelTTF\n for creating a text label. The first parameter is the displayed texts, the second parameter is the font family and the third parameter is the font size. We can also use the \nsetColor\n function of LabelTTF to set the color of labels. \ncc.color(0,0,0)\n represents the color black.\n\n\nSummary\n\n\nIn this tutorial, we have divided the game scene into different layers. Each layer has it's own logic and responsibility. You can download the entire project \nhere\n.\n\n\nThe code and logic are pretty straightforward, so we haven't cover them all in details. If you have any questions or suggestions, let us know and we will do our best to support you.\n\n\nWhere to go from here\n\n\nIn the next tutorial, you will learn how to run animations on the runner and how to pack small images into a sprite sheet. You will also be introduced to an awesome tools named \nTexturePacker\n.", 
            "title": "_Chapter4"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter4/en/index.html#design-and-make-your-gameplay-scene", 
            "text": "", 
            "title": "Design and Make Your Gameplay Scene"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter4/en/index.html#introduction", 
            "text": "In this tutorial, you will learn how to design and construct the gameplay scene. Every game needs some kind of gameplay scene. This tutorial will show the general scenario of a gameplay scene.  From the previous tutorial, we know that we can use different layers to separate the logic of a specified scene.  Here is the final result of our gameplay scene:   There is a background with some buildings, our hero and some HUD(heads-up display) elements to show some statistics about the current game. We divide the gameplay scene into three parts: the background layer, the animation layer and the status layer.", 
            "title": "Introduction"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter4/en/index.html#background-layer", 
            "text": "Basically, every game needs a background of some sort. Sometimes the background is just a static image which occupies the entire screen. Other times you may want the background layer to move at a constant or varying speed. Sometimes the background even shows us parallax effects--different layers move at various speed, the nearest layer moves faster and the farthest layer moves slower to simulate that objects are near or far.   In later tutorials, we will introduce tiled maps which are very useful to construct parallax background. In this tutorial, in order to keep things simple, we just use a simple static image to represent the game's background.  Note :\nWe can move the background to mimic the effect of our game hero running, keeping the hero at the center of the screen. We will see many such tricks during our development process.", 
            "title": "Background Layer"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter4/en/index.html#animation-layergameplay-layer", 
            "text": "The animation layer contains all game elements that animate, collision detection and other game logic. This layer is sometimes also called the  GameplayLayer . You can choose to name it what you want. In this layer, we organize the key part of our gameplay. In general, we will design game objects, s level spawner(which are also called level managers), collision detection between different game objects and check if the player has won or lost the game.  In theory, we don't need to separate this layer into smaller layers. We can use composition and delegation to handle things properly.", 
            "title": "Animation Layer(Gameplay Layer)"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter4/en/index.html#status-layerhud-layer", 
            "text": "In video gaming, the HUD (head-up display) is the method by which information is visually relayed to the player as part of a game's user interface. It takes its name from the head-up displays used in modern aircraft.  The HUD is frequently used to simultaneously display several pieces of information including the main character's health, items and an indication of game's progression (such as score or level). You can refer to  this link  for more information on HUDs.  To make things simpler, we put this information into a separate layer called StatusLayer. Because these items are always displayed on top of other game elements, placing them on a separate layer will make our life easier without caring about the Z-order display issues.", 
            "title": "Status Layer(HUD Layer)"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter4/en/index.html#coding-in-action", 
            "text": "", 
            "title": "Coding in action"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter4/en/index.html#preparation", 
            "text": "Start by adding two images( PlayBG.png  and  runner.png ) to the  res  directory.  In the previous tutorial, we have added all resources variables in  resource.js . Since two more images have been added,  resource.js  should also be changed to this:  var res = {\n    helloBG_png :  res/helloBG.png ,\n    start_n_png :  res/start_n.png ,\n    start_s_png :  res/start_s.png ,\n    PlayBG_png  :  res/PlayBG.png ,\n    runner_png  :  res/runner.png \n};\n\nvar g_resources = [\n    //image\n    res.helloBG_png,\n    res.start_n_png,\n    res.start_s_png,\n    res.PlayBG_png,\n    res.runner_png\n];  Here we have added two global variables named  PlayBG_png  and  runner_png . Now when we want to create a sprite in another js files, we can easily access these variables.  Since we will add four JavaScript files: PlayScene.js, AnimationLayer.js, BackgroundLayer.js and StatusLayer.js.  We need to tell the Cocos2d-x engine to load these files when the game starts. We do this by changing  project.json  to make it aware of the new source files:    jsList  : [\n         src/resource.js ,\n         src/app.js ,\n         src/AnimationLayer.js ,\n         src/BackgroundLayer.js ,\n         src/PlayScene.js ,\n         src/StatusLayer.js \n    ]  In the future, each time when you add a new JavaScript file into your game, you should change the attribute  jsList  and add more source code file paths to the end of the array.  Lastly, we should display the PlayScene when we click the button in the first MenuScene. Here is the code snippet:      //this is the callback when the menu is clicked\n    onPlay : function(){\n        cc.log( ==onplay clicked );\n        cc.director.runScene(new PlayScene());\n    }", 
            "title": "Preparation"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter4/en/index.html#coding-the-playsceneplayscenejs", 
            "text": "Since background layer, animation layer and status layer should be displayed in a different order. We can specify the order explicitly when calling the  addChild  method or we can add them as PlayScene's children in the right order. In this tutorial, we will add them in the right order.  Here is the code snippet of PlayScene:  var PlayScene = cc.Scene.extend({\n    onEnter:function () {\n        this._super();\n        //add three layer in the right order\n        this.addChild(new BackgroundLayer());\n        this.addChild(new AnimationLayer());\n        this.addChild(new StatusLayer());\n    }\n});", 
            "title": "Coding the PlayScene(PlayScene.js)"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter4/en/index.html#coding-the-backgroundlayerbackgroundlayerjs", 
            "text": "Here is our background image:  Here is the code snippet:  var BackgroundLayer = cc.Layer.extend({\n    ctor:function () {\n        this._super();\n        this.init();\n    },\n\n    init:function () {\n        this._super();\n        var winsize = cc.director.getWinSize();\n\n        //create the background image and position it at the center of screen\n        var centerPos = cc.p(winsize.width / 2, winsize.height / 2);\n        var spriteBG = new cc.Sprite(res.PlayBG_png);\n        spriteBG.setPosition(centerPos);\n        this.addChild(spriteBG);\n    }\n});", 
            "title": "Coding the BackgroundLayer(BackgroundLayer.js)"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter4/en/index.html#coding-the-animationlayeranimationlayerjs", 
            "text": "Here is our main character:  In this section, we will run actions on the hero. We will run the  MoveTo  action on the sprite to move the sprite from (80,85) to (300,85) in two seconds.  Here is the code snippet of AnimationLayer:  var AnimationLayer = cc.Layer.extend({\n    ctor:function () {\n        this._super();\n        this.init();\n    },\n    init:function () {\n        this._super();\n\n        //create the hero sprite\n        var spriteRunner = new cc.Sprite(res.runner_png);\n        spriteRunner.attr({x: 80, y: 85});\n\n        //create the move action\n        var actionTo = new cc.MoveTo(2, cc.p(300, 85));\n        spriteRunner.runAction(new cc.Sequence(actionTo));\n        this.addChild(spriteRunner);\n    }\n});", 
            "title": "Coding the AnimationLayer(AnimationLayer.js)"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter4/en/index.html#coding-the-statuslayerstatuslayerjs", 
            "text": "In this section, we will add two indicators: the coin quantity indicator and the distance indicator. Both indicators are labels in Cocos2d-html5. Labels are very useful to display HUD information to players and the code to create and use labels is very easy thanks to cocos2d framework.  Here is the code snippet we need to set up the layer:  var StatusLayer = cc.Layer.extend({\n    labelCoin:null,\n    labelMeter:null,\n    coins:0,\n\n    ctor:function () {\n        this._super();\n        this.init();\n    },\n\n    init:function () {\n        this._super();\n\n        var winsize = cc.director.getWinSize();\n\n        this.labelCoin = new cc.LabelTTF( Coins:0 ,  Helvetica , 20);\n        this.labelCoin.setColor(cc.color(0,0,0));//black color\n        this.labelCoin.setPosition(cc.p(70, winsize.height - 20));\n        this.addChild(this.labelCoin);\n\n        this.labelMeter = new cc.LabelTTF( 0M ,  Helvetica , 20);\n        this.labelMeter.setPosition(cc.p(winsize.width - 70, winsize.height - 20));\n        this.addChild(this.labelMeter);\n    }\n});  We can use  new cc.LabelTTF  for creating a text label. The first parameter is the displayed texts, the second parameter is the font family and the third parameter is the font size. We can also use the  setColor  function of LabelTTF to set the color of labels.  cc.color(0,0,0)  represents the color black.", 
            "title": "Coding the StatusLayer(StatusLayer.js)"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter4/en/index.html#summary", 
            "text": "In this tutorial, we have divided the game scene into different layers. Each layer has it's own logic and responsibility. You can download the entire project  here .  The code and logic are pretty straightforward, so we haven't cover them all in details. If you have any questions or suggestions, let us know and we will do our best to support you.", 
            "title": "Summary"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter4/en/index.html#where-to-go-from-here", 
            "text": "In the next tutorial, you will learn how to run animations on the runner and how to pack small images into a sprite sheet. You will also be introduced to an awesome tools named  TexturePacker .", 
            "title": "Where to go from here"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter5/en/index.html", 
            "text": "Let the Player Run Animations\n\n\nIntroduction\n\n\nIn the last tutorial, we have moved the player from one point to another. But the movement is a little wired. In this tutorial, I will show you\nhow to run animations on the player. Thus the player's movement will be more realistic.\n\n\nBefore that, I want to show you an awesome tool named \nTexturePacker\n. \n\n\nIntroduction to TexturePacker\n\n\nTexturePacker is a cross-platform GUI and command line tool to create sprite sheets!\nIf you want to learn more about TexturePacker, go to \nthis website\n for more information.\n\n\nHere I will give you a brief introduction for using TexturePacker to generate the animation files we need in our game.\n\n\nBuild Your Own Animations with TexturePacker\n\n\nHere is the building process:\n\n\n\n\nOpen TexturePacker and drag the folder \nTexturePacker\n under \nres/TexturePacker\n  in to TexturePacker's sprite area.\n\n\n\n\n\n\nWhen you add new images into the \nTexturePacker\n folder, TexturePacker will automatically detect the changes and load the images.\n\n\n\n\n\n\nChoose \"Data format\" to \"cocos2d\" and \"Texture format\" to \"png\" from the Settings panel(which is the default settings).\n\n\n\n\n\n\nSpecify the \nData file\n and \nTexture file\n path. Here we set the path at \nres\n directory and we set the data file name to \"running.plist\" and the texture file to \"running.png\".\n\n\n\n\n\n\n\n\n\n\nClick \npublish\n. Now a dialog will appear, if there are no errors, then it will  generate \"running.png\" and \"running.plist\" in the right place.\n\n\n\n\n\n\nOk, we have successfully generate the running animation files. Next let's play with the generated animation files.\n\n\nLoad Animations Files in Cocos2d-JS\n\n\nPreparation\n\n\nAt first, we should add the running.plist and running.png  to \nresource.js\n file.\n\n\nvar res = {\n    helloBG_png : \nres/helloBG.png\n,\n    start_n_png : \nres/start_n.png\n,\n    start_s_png : \nres/start_s.png\n,\n    PlayBG_png  : \nres/PlayBG.png\n,\n    runner_png  : \nres/running.png\n,\n    runner_plist : \nres/running.plist\n\n};\n\nvar g_resources = [\n    //image\n    res.helloBG_png,\n    res.start_n_png,\n    res.start_s_png,\n    res.PlayBG_png,\n    res.runner_png,\n    res.runner_plist\n];\n\n\n\n\nHere, we have changed the variable \nrunner_png\n's value to \"running.png\" which is a spritesheet. We will create our player sprite from the \nrunning.png\n\nin the future.\n\n\nCreate Player Animation\n\n\nAt first, we should add the following member variables in \nAnimationLayer.js\n:\n\n\nspriteSheet:null,\nrunningAction:null,\nsprite:null,\n\n\n\n\nThen we should replace the player creation method to:\n\n\nthis.sprite = new cc.Sprite(\n#runner0.png\n);\n\n\n\n\nThe dash (\"#\") character at the beginning of the sprite's filename is a convention, and that means it will create a sprite from the sprite frame's name. In our case \"runner0.png\" is part of the sprite sheet.\n\n\nWe can easily create a animation with the following code:\n\n\n//1.load spritesheet \n cc.spriteFrameCache.addSpriteFrames(res.runner_plist);\n\n//2.create spriteframe array\nvar animFrames = [];\nfor (var i = 0; i \n 8; i++) {\n    var str = \nrunner\n + i + \n.png\n;\n    var frame = cc.spriteFrameCache.getSpriteFrame(str);\n    animFrames.push(frame);\n}\n//3.create a animation with the spriteframe array along with a period time\nvar animation = new cc.Animation(animFrames, 0.1);\n\n//4.wrap the animate action with a repeat forever action\nthis.runningAction = new cc.RepeatForever(new cc.Animate(animation));\n\n\n\n\nThe animation is constructed from a series of small images(from runner0.png to runner7.png) in the spritesheet.\n\n\nHere is the completely process to create a animation in Cocos2d-JS:\n\n\n\n\nLoad spritesheet plist file into SpriteFrameCache class.\n\n\nAdd animation frames to the array \nanimFrames\n\n\nCreate a cc.Animation object from the animation frame array along with a delay time between each sprite frame.\n\n\nCreate the final cc.Animate object and wrap it when a RepeatForever action. Thus the animation will run infinite.\n\n\n\n\nGenerally, if we use animations in Cocos2-JS, we always use \nSpriteBatchNode\n to boost game performance in WebGL mode or in Cocos2d-x JSB mode.\n\n\nThe final code of the \nAnimationLayer.js\n is:\n\n\nvar AnimationLayer = cc.Layer.extend({\n    spriteSheet:null,\n    runningAction:null,\n    sprite:null,\n    ctor:function () {\n        this._super();\n        this.init();\n    },\n\n    init:function () {\n        this._super();\n\n        // create sprite sheet\n        cc.spriteFrameCache.addSpriteFrames(res.runner_plist);\n        this.spriteSheet = new cc.SpriteBatchNode(res.runner_png);\n        this.addChild(this.spriteSheet);\n\n\n        // init runningAction\n        var animFrames = [];\n        for (var i = 0; i \n 8; i++) {\n            var str = \nrunner\n + i + \n.png\n;\n            var frame = cc.spriteFrameCache.getSpriteFrame(str);\n            animFrames.push(frame);\n        }\n\n        var animation = new cc.Animation(animFrames, 0.1);\n        this.runningAction = new cc.RepeatForever(new cc.Animate(animation));\n        this.sprite = new cc.Sprite(\n#runner0.png\n);\n        this.sprite.attr({x:80, y:85});\n        this.sprite.runAction(this.runningAction);\n        this.spriteSheet.addChild(this.sprite);\n    }\n});\n\n\n\n\nNow, you can run the project and you will get a infinite running player in your game screen.\n\n\n\n\nSummary\n\n\nIn this tutorial, we have learned how to use TexturePacker to generate animation and how to run animation on a sprite within Cocos2d-JS.\n\n\nYou can download the entire project from \nhere\n.\n\n\nWhere to Go from Here?\n\n\nIn the next tutorial, we will add chipmunk physics into our game world. Thus our game will look more realistic.", 
            "title": "_Chapter5"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter5/en/index.html#let-the-player-run-animations", 
            "text": "", 
            "title": "Let the Player Run Animations"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter5/en/index.html#introduction", 
            "text": "In the last tutorial, we have moved the player from one point to another. But the movement is a little wired. In this tutorial, I will show you\nhow to run animations on the player. Thus the player's movement will be more realistic.  Before that, I want to show you an awesome tool named  TexturePacker .", 
            "title": "Introduction"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter5/en/index.html#introduction-to-texturepacker", 
            "text": "TexturePacker is a cross-platform GUI and command line tool to create sprite sheets!\nIf you want to learn more about TexturePacker, go to  this website  for more information.  Here I will give you a brief introduction for using TexturePacker to generate the animation files we need in our game.", 
            "title": "Introduction to TexturePacker"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter5/en/index.html#build-your-own-animations-with-texturepacker", 
            "text": "Here is the building process:   Open TexturePacker and drag the folder  TexturePacker  under  res/TexturePacker   in to TexturePacker's sprite area.    When you add new images into the  TexturePacker  folder, TexturePacker will automatically detect the changes and load the images.    Choose \"Data format\" to \"cocos2d\" and \"Texture format\" to \"png\" from the Settings panel(which is the default settings).    Specify the  Data file  and  Texture file  path. Here we set the path at  res  directory and we set the data file name to \"running.plist\" and the texture file to \"running.png\".      Click  publish . Now a dialog will appear, if there are no errors, then it will  generate \"running.png\" and \"running.plist\" in the right place.    Ok, we have successfully generate the running animation files. Next let's play with the generated animation files.", 
            "title": "Build Your Own Animations with TexturePacker"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter5/en/index.html#load-animations-files-in-cocos2d-js", 
            "text": "", 
            "title": "Load Animations Files in Cocos2d-JS"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter5/en/index.html#preparation", 
            "text": "At first, we should add the running.plist and running.png  to  resource.js  file.  var res = {\n    helloBG_png :  res/helloBG.png ,\n    start_n_png :  res/start_n.png ,\n    start_s_png :  res/start_s.png ,\n    PlayBG_png  :  res/PlayBG.png ,\n    runner_png  :  res/running.png ,\n    runner_plist :  res/running.plist \n};\n\nvar g_resources = [\n    //image\n    res.helloBG_png,\n    res.start_n_png,\n    res.start_s_png,\n    res.PlayBG_png,\n    res.runner_png,\n    res.runner_plist\n];  Here, we have changed the variable  runner_png 's value to \"running.png\" which is a spritesheet. We will create our player sprite from the  running.png \nin the future.", 
            "title": "Preparation"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter5/en/index.html#create-player-animation", 
            "text": "At first, we should add the following member variables in  AnimationLayer.js :  spriteSheet:null,\nrunningAction:null,\nsprite:null,  Then we should replace the player creation method to:  this.sprite = new cc.Sprite( #runner0.png );  The dash (\"#\") character at the beginning of the sprite's filename is a convention, and that means it will create a sprite from the sprite frame's name. In our case \"runner0.png\" is part of the sprite sheet.  We can easily create a animation with the following code:  //1.load spritesheet \n cc.spriteFrameCache.addSpriteFrames(res.runner_plist);\n\n//2.create spriteframe array\nvar animFrames = [];\nfor (var i = 0; i   8; i++) {\n    var str =  runner  + i +  .png ;\n    var frame = cc.spriteFrameCache.getSpriteFrame(str);\n    animFrames.push(frame);\n}\n//3.create a animation with the spriteframe array along with a period time\nvar animation = new cc.Animation(animFrames, 0.1);\n\n//4.wrap the animate action with a repeat forever action\nthis.runningAction = new cc.RepeatForever(new cc.Animate(animation));  The animation is constructed from a series of small images(from runner0.png to runner7.png) in the spritesheet.  Here is the completely process to create a animation in Cocos2d-JS:   Load spritesheet plist file into SpriteFrameCache class.  Add animation frames to the array  animFrames  Create a cc.Animation object from the animation frame array along with a delay time between each sprite frame.  Create the final cc.Animate object and wrap it when a RepeatForever action. Thus the animation will run infinite.   Generally, if we use animations in Cocos2-JS, we always use  SpriteBatchNode  to boost game performance in WebGL mode or in Cocos2d-x JSB mode.  The final code of the  AnimationLayer.js  is:  var AnimationLayer = cc.Layer.extend({\n    spriteSheet:null,\n    runningAction:null,\n    sprite:null,\n    ctor:function () {\n        this._super();\n        this.init();\n    },\n\n    init:function () {\n        this._super();\n\n        // create sprite sheet\n        cc.spriteFrameCache.addSpriteFrames(res.runner_plist);\n        this.spriteSheet = new cc.SpriteBatchNode(res.runner_png);\n        this.addChild(this.spriteSheet);\n\n\n        // init runningAction\n        var animFrames = [];\n        for (var i = 0; i   8; i++) {\n            var str =  runner  + i +  .png ;\n            var frame = cc.spriteFrameCache.getSpriteFrame(str);\n            animFrames.push(frame);\n        }\n\n        var animation = new cc.Animation(animFrames, 0.1);\n        this.runningAction = new cc.RepeatForever(new cc.Animate(animation));\n        this.sprite = new cc.Sprite( #runner0.png );\n        this.sprite.attr({x:80, y:85});\n        this.sprite.runAction(this.runningAction);\n        this.spriteSheet.addChild(this.sprite);\n    }\n});  Now, you can run the project and you will get a infinite running player in your game screen.", 
            "title": "Create Player Animation"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter5/en/index.html#summary", 
            "text": "In this tutorial, we have learned how to use TexturePacker to generate animation and how to run animation on a sprite within Cocos2d-JS.  You can download the entire project from  here .", 
            "title": "Summary"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter5/en/index.html#where-to-go-from-here", 
            "text": "In the next tutorial, we will add chipmunk physics into our game world. Thus our game will look more realistic.", 
            "title": "Where to Go from Here?"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter6/en/index.html", 
            "text": "Add Chipmunk Physic Engine to Our Game\n\n\nIntroduction\n\n\nCocos2d-JS can give us the power to create impressive game world. But it lacks some sort of realistic.\nThough we can do complex compute to make the game world more realistic, but there is an another option\nwhich can ease our life. The answer is \nphysic engine\n.\n\n\nPhysic engine provides gravity, collide detection and physic simulation which can make our game world looks more realistic.\n\n\nIn this tutorial, we will introduce Chipmunk physics engine into our parkour game.\n\n\nWhy Chipmunk Physics?\n\n\nWhy should we choose Chipmunk physic engine? Because it is give us much more power than any other 2D physics engine.\n\n\nDespite Chipmunk physic engine, there is another option - Box2D.\n\n\nBox2D is a nice 2D physic engine and it has been existed for a very long time. Many 2d games have been using Box2D for their game physics.\n\n\nBut Chipmunk has it's own advantages. You can go to Chipmunk's \nwebsite\n for more information.\n\n\nEnable Chipmunk Physic in Cocos2d-JS\n\n\nPreparation\n\n\nAt first, let's enable Chipmunk in Cocos2d-JS.\n\n\nOpen \nproject.json\n file, and modify:\n\n\n \nmodules\n : [\ncocos2d\n],\n ```\n\nto:\n\n\n\n\n\n\"modules\" : [\"cocos2d\",\"chipmunk\"],\n ```\n\n\nThus, when Cocos2d-JS finish launching, it will load Chipmunk library automatically.\n\n\nNext, let's create a new file named \nglobals.js\n and add two global variables into it.\n\n\nvar g_groundHeight = 57;\nvar g_runnerStartX = 80;\n\n\n\n\nAt last, we should tell the framework to load \nglobals.js\n file when engine launches.\nAppend \nglobals.js\n path to the end of \njsList\n array:\n\n\n    \njsList\n : [\n        \nsrc/resource.js\n,\n        \nsrc/app.js\n,\n        \nsrc/AnimationLayer.js\n,\n        \nsrc/BackgroundLayer.js\n,\n        \nsrc/PlayScene.js\n,\n        \nsrc/StatusLayer.js\n,\n        \nsrc/globals.js\n\n\n    ]\n\n\n\n\nNote:\n Whenever you add a new file in Cocos2d-JS, you should remember to add it to the \njsList\n array.\n\n\nInitialize Chipmunk physic world\n\n\nIn Chipmunk, there is a \nspace\n object to represent the physic world.\n\n\nAt first, let's add a new member variable named \nspace\n  in \nPlayScene.js\n file:\n\n\nspace:null,\n\n\n\n\nIn general, one game needs only a \nspace\n object. The space object can be shared by different layers.\nWe usually put the \nspace initialize code\n in PlayScene.\n\n\nHere is the code to setup the physic world:\n\n\n    // init space of chipmunk\n    initPhysics:function() {\n        //1. new space object \n        this.space = new cp.Space();\n        //2. setup the  Gravity\n        this.space.gravity = cp.v(0, -350);\n\n        // 3. set up Walls\n        var wallBottom = new cp.SegmentShape(this.space.staticBody,\n            cp.v(0, g_groundHeight),// start point\n            cp.v(4294967295, g_groundHeight),// MAX INT:4294967295\n            0);// thickness of wall\n        this.space.addStaticShape(wallBottom);\n    },\n\n\n\n\nThe above code is self-explanatory so we can safely leave it out. If you want to know the details of these API, you should\nrefer to Chipmunk's official documentation for more information.\n\n\nNext, let's define our game's main loop:\n\n\n    update:function (dt) {\n        // chipmunk step\n        this.space.step(dt);\n    }\n\n\n\n\nIn the \nupdate\n function, we tell Chipmunk start to simulate physics.\n\n\nBefore we go any further, let's add a minor change to \nAnimationLayer\n. Since we will create physic actor in AnimationLayer, so\nwe should modify the constructor of AnimationLayer to pass the \nspace\n object in.\n\n\nctor:function (space) {\n        this._super();\n        this.space = space;\n        this.init();\n    },\n\n\n\n\nOf course, we should define a weak ref member variable in AnimationLayer and initialize it to \nnull\n.\n\n\nThus our preparation work has been done. let's wrap the end and call these method in \nonEnter\n function:\n\n\n    onEnter:function () {\n        this._super();\n        this.initPhysics();\n\n        this.addChild(new BackgroundLayer());\n        this.addChild(new AnimationLayer(this.space));\n        this.addChild(new StatusLayer());\n\n        this.scheduleUpdate();\n    },\n\n\n\n\nNote\n\nYou should initilize the space of physics and pass it to AnimationLayer.\n\n\nAdd Physics Component to the Runner Sprite\n\n\nIn the last tutorial, we create the runner by using spritsheet. In this section, we will rewrite the runner by using \nPhysicsSprite\n.\n\n\nThe PhysicsSprite is a reusable component which can combine the physic body with a cocos2d sprite.\n\n\nHere is the code to create the runner with PhysicsSprite:\n\n\n        //1. create PhysicsSprite with a sprite frame name\n        this.sprite = new cc.PhysicsSprite(\n#runner0.png\n);\n        var contentSize = this.sprite.getContentSize();\n        // 2. init the runner physic body\n        this.body = new cp.Body(1, cp.momentForBox(1, contentSize.width, contentSize.height));\n        //3. set the position of the runner\n        this.body.p = cc.p(g_runnerStartX, g_groundHeight + contentSize.height / 2);\n        //4. apply impulse to the body\n        this.body.applyImpulse(cp.v(150, 0), cp.v(0, 0));//run speed\n        //5. add the created body to space\n        this.space.addBody(this.body);\n        //6. create the shape for the body\n        this.shape = new cp.BoxShape(this.body, contentSize.width - 14, contentSize.height);\n        //7. add shape to space\n        this.space.addShape(this.shape);\n        //8. set body to the physic sprite\n        this.sprite.setBody(this.body);\n\n\n\n\nThe code and comment are self-explanatory. Add these code in \nAnimationLayer\n's \ninit\n method.\n\n\nDebug and Test\n\n\nCongratulations. You have done all the bolts and nuts. You can just press the \ndebug\n button within \nWebstorm\n.\n\n\n\n\nNow you can see the runner run pass through the screen.\n\n\nSummary\n\n\nIn this tutorial, we have show you how to setup Chipmunk physic world, how to setup the physic world boundary, how to create a rigid body and the associated\nshape. we also add physics to sprite to make it act more realistic. You can grab the entire source code from \nhere\n.\n\n\nWhere to go from here\n\n\nIn the next tutorial, we will introduce the camera movement into the game. And we will also replace the background image with tiledMap.\nMore importantly we will make the background infinite loop displayed in the game. Keep tuning with the next tutorial.", 
            "title": "_Chapter6"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter6/en/index.html#add-chipmunk-physic-engine-to-our-game", 
            "text": "", 
            "title": "Add Chipmunk Physic Engine to Our Game"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter6/en/index.html#introduction", 
            "text": "Cocos2d-JS can give us the power to create impressive game world. But it lacks some sort of realistic.\nThough we can do complex compute to make the game world more realistic, but there is an another option\nwhich can ease our life. The answer is  physic engine .  Physic engine provides gravity, collide detection and physic simulation which can make our game world looks more realistic.  In this tutorial, we will introduce Chipmunk physics engine into our parkour game.", 
            "title": "Introduction"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter6/en/index.html#why-chipmunk-physics", 
            "text": "Why should we choose Chipmunk physic engine? Because it is give us much more power than any other 2D physics engine.  Despite Chipmunk physic engine, there is another option - Box2D.  Box2D is a nice 2D physic engine and it has been existed for a very long time. Many 2d games have been using Box2D for their game physics.  But Chipmunk has it's own advantages. You can go to Chipmunk's  website  for more information.", 
            "title": "Why Chipmunk Physics?"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter6/en/index.html#enable-chipmunk-physic-in-cocos2d-js", 
            "text": "", 
            "title": "Enable Chipmunk Physic in Cocos2d-JS"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter6/en/index.html#preparation", 
            "text": "At first, let's enable Chipmunk in Cocos2d-JS.  Open  project.json  file, and modify:    modules  : [ cocos2d ],\n ```\n\nto:  \"modules\" : [\"cocos2d\",\"chipmunk\"],\n ```  Thus, when Cocos2d-JS finish launching, it will load Chipmunk library automatically.  Next, let's create a new file named  globals.js  and add two global variables into it.  var g_groundHeight = 57;\nvar g_runnerStartX = 80;  At last, we should tell the framework to load  globals.js  file when engine launches.\nAppend  globals.js  path to the end of  jsList  array:       jsList  : [\n         src/resource.js ,\n         src/app.js ,\n         src/AnimationLayer.js ,\n         src/BackgroundLayer.js ,\n         src/PlayScene.js ,\n         src/StatusLayer.js ,\n         src/globals.js \n\n    ]  Note:  Whenever you add a new file in Cocos2d-JS, you should remember to add it to the  jsList  array.", 
            "title": "Preparation"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter6/en/index.html#initialize-chipmunk-physic-world", 
            "text": "In Chipmunk, there is a  space  object to represent the physic world.  At first, let's add a new member variable named  space   in  PlayScene.js  file:  space:null,  In general, one game needs only a  space  object. The space object can be shared by different layers.\nWe usually put the  space initialize code  in PlayScene.  Here is the code to setup the physic world:      // init space of chipmunk\n    initPhysics:function() {\n        //1. new space object \n        this.space = new cp.Space();\n        //2. setup the  Gravity\n        this.space.gravity = cp.v(0, -350);\n\n        // 3. set up Walls\n        var wallBottom = new cp.SegmentShape(this.space.staticBody,\n            cp.v(0, g_groundHeight),// start point\n            cp.v(4294967295, g_groundHeight),// MAX INT:4294967295\n            0);// thickness of wall\n        this.space.addStaticShape(wallBottom);\n    },  The above code is self-explanatory so we can safely leave it out. If you want to know the details of these API, you should\nrefer to Chipmunk's official documentation for more information.  Next, let's define our game's main loop:      update:function (dt) {\n        // chipmunk step\n        this.space.step(dt);\n    }  In the  update  function, we tell Chipmunk start to simulate physics.  Before we go any further, let's add a minor change to  AnimationLayer . Since we will create physic actor in AnimationLayer, so\nwe should modify the constructor of AnimationLayer to pass the  space  object in.  ctor:function (space) {\n        this._super();\n        this.space = space;\n        this.init();\n    },  Of course, we should define a weak ref member variable in AnimationLayer and initialize it to  null .  Thus our preparation work has been done. let's wrap the end and call these method in  onEnter  function:      onEnter:function () {\n        this._super();\n        this.initPhysics();\n\n        this.addChild(new BackgroundLayer());\n        this.addChild(new AnimationLayer(this.space));\n        this.addChild(new StatusLayer());\n\n        this.scheduleUpdate();\n    },  Note \nYou should initilize the space of physics and pass it to AnimationLayer.", 
            "title": "Initialize Chipmunk physic world"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter6/en/index.html#add-physics-component-to-the-runner-sprite", 
            "text": "In the last tutorial, we create the runner by using spritsheet. In this section, we will rewrite the runner by using  PhysicsSprite .  The PhysicsSprite is a reusable component which can combine the physic body with a cocos2d sprite.  Here is the code to create the runner with PhysicsSprite:          //1. create PhysicsSprite with a sprite frame name\n        this.sprite = new cc.PhysicsSprite( #runner0.png );\n        var contentSize = this.sprite.getContentSize();\n        // 2. init the runner physic body\n        this.body = new cp.Body(1, cp.momentForBox(1, contentSize.width, contentSize.height));\n        //3. set the position of the runner\n        this.body.p = cc.p(g_runnerStartX, g_groundHeight + contentSize.height / 2);\n        //4. apply impulse to the body\n        this.body.applyImpulse(cp.v(150, 0), cp.v(0, 0));//run speed\n        //5. add the created body to space\n        this.space.addBody(this.body);\n        //6. create the shape for the body\n        this.shape = new cp.BoxShape(this.body, contentSize.width - 14, contentSize.height);\n        //7. add shape to space\n        this.space.addShape(this.shape);\n        //8. set body to the physic sprite\n        this.sprite.setBody(this.body);  The code and comment are self-explanatory. Add these code in  AnimationLayer 's  init  method.", 
            "title": "Add Physics Component to the Runner Sprite"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter6/en/index.html#debug-and-test", 
            "text": "Congratulations. You have done all the bolts and nuts. You can just press the  debug  button within  Webstorm .   Now you can see the runner run pass through the screen.", 
            "title": "Debug and Test"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter6/en/index.html#summary", 
            "text": "In this tutorial, we have show you how to setup Chipmunk physic world, how to setup the physic world boundary, how to create a rigid body and the associated\nshape. we also add physics to sprite to make it act more realistic. You can grab the entire source code from  here .", 
            "title": "Summary"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter6/en/index.html#where-to-go-from-here", 
            "text": "In the next tutorial, we will introduce the camera movement into the game. And we will also replace the background image with tiledMap.\nMore importantly we will make the background infinite loop displayed in the game. Keep tuning with the next tutorial.", 
            "title": "Where to go from here"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter7/en/index.html", 
            "text": "Explorer with TiledMap and Display\n\n\nIntroduction\n\n\nIn this tutorial, I will show you how to add TiledMap to the parkour game as the new background.\n\n\nWe will also learn how to make the background to scroll infinitely and the player to run infinitely.\n\n\nThe magic behind these is all about moving the cocos2d layer.\n\n\nDo Some Preparation Stuff\n\n\nBefore we get our hands dirty, let's add the resource files and the corresponding names to our game.\n\n\nSetup Resource and Globals\n\n\nSince we will need to refer to other layers within each layers. So the best way to retrieve the layer is via \ntag\n.\n\n\nAdd the following code into \nglobals.js\n:\n\n\nif(typeof TagOfLayer == \nundefined\n) {\n    var TagOfLayer = {};\n    TagOfLayer.background = 0;\n    TagOfLayer.Animation = 1;\n    TagOfLayer.Status = 2;\n};\n\n\n\n\nHere we give background layer, animation layer and status layer a tag name, thus we can retrieve other layer by tag.\n\n\nWe also need add the resource variables in \nresource.js\n:\n\n\n//Our two tiled map are named s_map00 and s_map01.\nvar res = {\n    helloBG_png : \nres/helloBG.png\n,\n    start_n_png : \nres/start_n.png\n,\n    start_s_png : \nres/start_s.png\n,\n    PlayBG_png  : \nres/PlayBG.png\n,\n    runner_png  : \nres/running.png\n,\n    runner_plist : \nres/running.plist\n,\n    map_png: \nres/map.png\n,\n    map00_tmx: \nres/map00.tmx\n,\n    map01_tmx: \nres/map01.tmx\n\n};\n\nvar g_resources = [\n    //image\n    res.helloBG_png,\n    res.start_n_png,\n    res.start_s_png,\n    res.PlayBG_png,\n    res.runner_png,\n    res.runner_plist,\n    res.map_png,\n    res.map00_tmx,\n    res.map01_tmx\n];\n\n\n\n\nThe above code is self-explanation so let's go to the next section.\n\n\nEnable Chipmunk Debug Drawing\n\n\nIf we are doing Chipmunk physics, you'd better to enable debug drawing. So the debug process will be more handy.\n\n\nAdd the following code into \nAnimationLayer.js\n 's ctor function:\n\n\nthis._debugNode = new cc.PhysicsDebugNode(this.space);\n// Parallax ratio and offset\nthis.addChild(this._debugNode, 10);\n\n\n\n\nWhen you run the game again, you will see a red box above the running player:\n\n\n\n\nIntroduction to TiledMap\n\n\nTiledMap is a very common used concepts in 2d games. It is useful for building large level map and some parallax scrolling background.\n\n\nTiledMap consumes less memory than normal PNG file. If you want to build some huge level map, it is definitely your right choice.\n\n\nWithout further ado, let's dive into the TiledMap.\n\n\nDesign and Make the TiledMap Background\n\n\nAt first, you should download TiledMap. You can download it from \nhere\n. TiledMap is a cross platform software and there are many different kinds of version available. You can choose a version according to your operating system. After downloading the Tiled editor, you should be\nfamiliar with it's usage. You may want to take a look at it's \ndocumentation\n.\n\n\nWhen you feel comfortable with Tiled, you can design your tiled map with the tilesets we provided.\n\n\nThe detail process of making the two tiled map is out of scope of this tutorial.\n\n\n(\nNote: If you can't make the tiled map by yourself, you can safely skip the process and use the tiled map provided by us.\n)\n\n\n\n\nReplace Previous Background with TiledMap\n\n\nNow, it's time to replace the old static background image with our new awesome tiled map.\n\n\nWe will do this in \nBackgroundLayer.js\n. At first, we should add four member variables in BackgroundLayer class:\n\n\nmap00:null,\nmap01:null,\nmapWidth:0,\nmapIndex:0,\n\n\n\n\nThe we should delete the old code we needed to create the static background.\n\n\n(\nNote\n: Here I uncomment the code snippets, you can safely delete all of them.)\n\n\n//        var winSize = cc.Director.getInstance().getWinSize();\n//\n//        var centerPos = cc.p(winSize.width / 2, winSize.height / 2);\n//        var spriteBG = new cc.Sprite(s_PlayBG);\n//        spriteBG.setPosition(centerPos);\n//        this.addChild(spriteBG);\n\n\n\n\nAt last, we will add the new code snippets to create the tiled map background.\n\n\nthis.map00 = new cc.TMXTiledMap(res.map00_tmx);\nthis.addChild(this.map00);\nthis.mapWidth = this.map00.getContentSize().width;\nthis.map01 = new cc.TMXTiledMap(res.map01_tmx);\nthis.map01.setPosition(cc.p(this.mapWidth, 0));\nthis.addChild(this.map01);\n\n\n\n\nSave all the changes and run it:\n\n\n\n\nHere, we add two maps. The \nmap01\n is right beside the \nmap00\n background. In the later section, We will explain why we should add two maps.\n\n\nIntroduction to Scene Display\n\n\nSince the physic body will move right infinitely and the sprite will synchronize it's position with the physic body.\n\n\nA few seconds later, the player will go outside of the screen, just as it is in the last tutorial.\n\n\nSo we need to move the game layer's x position each frame to make it in a visible range. Here is the code snippets of AnimationLayer.js:\n\n\ngetEyeX:function () {\n    return this.sprite.getPositionX() - g_runnerStartX;\n},\n\n\n\n\nHere the \ngetEyeX\n function computes the \ndelta\n movement of animation layer. \n\n\nWe should move the same \ndelta\n movement of \nthis.gameLayer\n which contains background layer and animation layer in opposite direction, so we could call the \nupdate\n method each frame by adding the following code at the end of \nupdate\n method in PlayScene.js:\n\n\n     update:function (dt) {\n        // chipmunk step\n        this.space.step(dt);\n\n        var animationLayer = this.gameLayer.getChildByTag(TagOfLayer.Animation);\n        var eyeX = animationLayer.getEyeX();\n\n        this.gameLayer.setPosition(cc.p(-eyeX,0));\n    }\n\n\n\n\n\nMove the Background Layer\n\n\nThe process to setup the movement of background layer is almost the same as we do in the last section. But we need to do some calculations of the two tiled map.\n\n\nSo let's do it. Add a new member function \ncheckAndReload\n to BackgroundLayer:\n\n\n    checkAndReload:function (eyeX) {\n        var newMapIndex = parseInt(eyeX / this.mapWidth);\n        if (this.mapIndex == newMapIndex) {\n            return false;\n        }\n        if (0 == newMapIndex % 2) {\n            // change mapSecond\n            this.map01.setPositionX(this.mapWidth * (newMapIndex + 1));\n        } else {\n            // change mapFirst\n            this.map00.setPositionX(this.mapWidth * (newMapIndex + 1));\n        }\n        this.mapIndex = newMapIndex;\n        return true;\n    },\n\n\n\n\nWhen the eyeX has exceeded the width of the screen, the expression \nparseInt(eyeX / this.mapWidth)\n will get a value greater than 0.\n\n\nWe will use the \nnewMapIndex\n to decide which map need to move and how many pixels need to move.\n\n\nThen we should call this function in each frame.\n\n\n    update:function (dt) {\n        var animationLayer = this.getParent().getChildByTag(TagOfLayer.Animation);\n        var eyeX = animationLayer.getEyeX();\n        this.checkAndReload(eyeX);\n    }\n\n\n\n\nAt last, we should call \nscheduleUpdate\n at the end of background layer's init method:\n\n\n this.scheduleUpdate();\n\n\n\n\nWrap it up\n\n\nOk. We should do some last ending work.\n\n\nModify the \nonEnter\n method of PlayScene to add \ntag\n of layers, and add background layer and animation layer to game layer:\n\n\n    onEnter:function () {\n        this._super();\n        this.initPhysics();\n        this.gameLayer = new cc.Layer();\n\n        //add Background layer and Animation layer to gameLayer\n        this.gameLayer.addChild(new BackgroundLayer(), 0, TagOfLayer.background);\n        this.gameLayer.addChild(new AnimationLayer(this.space), 0, TagOfLayer.Animation);\n        this.addChild(this.gameLayer);\n        this.addChild(new StatusLayer(), 0, TagOfLayer.Status);\n\n        this.scheduleUpdate();\n    },\n\n\n\n\nCheers! You have successfully finish this tutorial. Run and take a look at it.\n\n\nNote\n: If you don't want to display the debug drawing information of a chipmunk rigid body. You can safely add the following code right after the creation\nof the PhysicsDebugNode:\n\n\nthis._debugNode.setVisible(false);\n\n\n\n\nSummary\n\n\nIn this tutorial, we have met TiledMap and display. These two concepts are very important ones when you development a physic endless running game.\n\n\nYou can download the entire project from \nhere\n.\n\n\nWhere to go from here?\n\n\nIn the next tutorial, we will add coins and obstacles into our game. At that tutorial, we will also learn how to refactor our game code and make it more extensible.\n\n\nWe will also do some cleanup work in PlayScene and encapsulate two class named Coin and Rock.\n\n\nKeep tuning with the next tutorial and happy coding!", 
            "title": "_Chapter7"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter7/en/index.html#explorer-with-tiledmap-and-display", 
            "text": "", 
            "title": "Explorer with TiledMap and Display"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter7/en/index.html#introduction", 
            "text": "In this tutorial, I will show you how to add TiledMap to the parkour game as the new background.  We will also learn how to make the background to scroll infinitely and the player to run infinitely.  The magic behind these is all about moving the cocos2d layer.", 
            "title": "Introduction"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter7/en/index.html#do-some-preparation-stuff", 
            "text": "Before we get our hands dirty, let's add the resource files and the corresponding names to our game.", 
            "title": "Do Some Preparation Stuff"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter7/en/index.html#setup-resource-and-globals", 
            "text": "Since we will need to refer to other layers within each layers. So the best way to retrieve the layer is via  tag .  Add the following code into  globals.js :  if(typeof TagOfLayer ==  undefined ) {\n    var TagOfLayer = {};\n    TagOfLayer.background = 0;\n    TagOfLayer.Animation = 1;\n    TagOfLayer.Status = 2;\n};  Here we give background layer, animation layer and status layer a tag name, thus we can retrieve other layer by tag.  We also need add the resource variables in  resource.js :  //Our two tiled map are named s_map00 and s_map01.\nvar res = {\n    helloBG_png :  res/helloBG.png ,\n    start_n_png :  res/start_n.png ,\n    start_s_png :  res/start_s.png ,\n    PlayBG_png  :  res/PlayBG.png ,\n    runner_png  :  res/running.png ,\n    runner_plist :  res/running.plist ,\n    map_png:  res/map.png ,\n    map00_tmx:  res/map00.tmx ,\n    map01_tmx:  res/map01.tmx \n};\n\nvar g_resources = [\n    //image\n    res.helloBG_png,\n    res.start_n_png,\n    res.start_s_png,\n    res.PlayBG_png,\n    res.runner_png,\n    res.runner_plist,\n    res.map_png,\n    res.map00_tmx,\n    res.map01_tmx\n];  The above code is self-explanation so let's go to the next section.", 
            "title": "Setup Resource and Globals"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter7/en/index.html#enable-chipmunk-debug-drawing", 
            "text": "If we are doing Chipmunk physics, you'd better to enable debug drawing. So the debug process will be more handy.  Add the following code into  AnimationLayer.js  's ctor function:  this._debugNode = new cc.PhysicsDebugNode(this.space);\n// Parallax ratio and offset\nthis.addChild(this._debugNode, 10);  When you run the game again, you will see a red box above the running player:", 
            "title": "Enable Chipmunk Debug Drawing"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter7/en/index.html#introduction-to-tiledmap", 
            "text": "TiledMap is a very common used concepts in 2d games. It is useful for building large level map and some parallax scrolling background.  TiledMap consumes less memory than normal PNG file. If you want to build some huge level map, it is definitely your right choice.  Without further ado, let's dive into the TiledMap.", 
            "title": "Introduction to TiledMap"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter7/en/index.html#design-and-make-the-tiledmap-background", 
            "text": "At first, you should download TiledMap. You can download it from  here . TiledMap is a cross platform software and there are many different kinds of version available. You can choose a version according to your operating system. After downloading the Tiled editor, you should be\nfamiliar with it's usage. You may want to take a look at it's  documentation .  When you feel comfortable with Tiled, you can design your tiled map with the tilesets we provided.  The detail process of making the two tiled map is out of scope of this tutorial.  ( Note: If you can't make the tiled map by yourself, you can safely skip the process and use the tiled map provided by us. )", 
            "title": "Design and Make the TiledMap Background"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter7/en/index.html#replace-previous-background-with-tiledmap", 
            "text": "Now, it's time to replace the old static background image with our new awesome tiled map.  We will do this in  BackgroundLayer.js . At first, we should add four member variables in BackgroundLayer class:  map00:null,\nmap01:null,\nmapWidth:0,\nmapIndex:0,  The we should delete the old code we needed to create the static background.  ( Note : Here I uncomment the code snippets, you can safely delete all of them.)  //        var winSize = cc.Director.getInstance().getWinSize();\n//\n//        var centerPos = cc.p(winSize.width / 2, winSize.height / 2);\n//        var spriteBG = new cc.Sprite(s_PlayBG);\n//        spriteBG.setPosition(centerPos);\n//        this.addChild(spriteBG);  At last, we will add the new code snippets to create the tiled map background.  this.map00 = new cc.TMXTiledMap(res.map00_tmx);\nthis.addChild(this.map00);\nthis.mapWidth = this.map00.getContentSize().width;\nthis.map01 = new cc.TMXTiledMap(res.map01_tmx);\nthis.map01.setPosition(cc.p(this.mapWidth, 0));\nthis.addChild(this.map01);  Save all the changes and run it:   Here, we add two maps. The  map01  is right beside the  map00  background. In the later section, We will explain why we should add two maps.", 
            "title": "Replace Previous Background with TiledMap"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter7/en/index.html#introduction-to-scene-display", 
            "text": "Since the physic body will move right infinitely and the sprite will synchronize it's position with the physic body.  A few seconds later, the player will go outside of the screen, just as it is in the last tutorial.  So we need to move the game layer's x position each frame to make it in a visible range. Here is the code snippets of AnimationLayer.js:  getEyeX:function () {\n    return this.sprite.getPositionX() - g_runnerStartX;\n},  Here the  getEyeX  function computes the  delta  movement of animation layer.   We should move the same  delta  movement of  this.gameLayer  which contains background layer and animation layer in opposite direction, so we could call the  update  method each frame by adding the following code at the end of  update  method in PlayScene.js:       update:function (dt) {\n        // chipmunk step\n        this.space.step(dt);\n\n        var animationLayer = this.gameLayer.getChildByTag(TagOfLayer.Animation);\n        var eyeX = animationLayer.getEyeX();\n\n        this.gameLayer.setPosition(cc.p(-eyeX,0));\n    }", 
            "title": "Introduction to Scene Display"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter7/en/index.html#move-the-background-layer", 
            "text": "The process to setup the movement of background layer is almost the same as we do in the last section. But we need to do some calculations of the two tiled map.  So let's do it. Add a new member function  checkAndReload  to BackgroundLayer:      checkAndReload:function (eyeX) {\n        var newMapIndex = parseInt(eyeX / this.mapWidth);\n        if (this.mapIndex == newMapIndex) {\n            return false;\n        }\n        if (0 == newMapIndex % 2) {\n            // change mapSecond\n            this.map01.setPositionX(this.mapWidth * (newMapIndex + 1));\n        } else {\n            // change mapFirst\n            this.map00.setPositionX(this.mapWidth * (newMapIndex + 1));\n        }\n        this.mapIndex = newMapIndex;\n        return true;\n    },  When the eyeX has exceeded the width of the screen, the expression  parseInt(eyeX / this.mapWidth)  will get a value greater than 0.  We will use the  newMapIndex  to decide which map need to move and how many pixels need to move.  Then we should call this function in each frame.      update:function (dt) {\n        var animationLayer = this.getParent().getChildByTag(TagOfLayer.Animation);\n        var eyeX = animationLayer.getEyeX();\n        this.checkAndReload(eyeX);\n    }  At last, we should call  scheduleUpdate  at the end of background layer's init method:   this.scheduleUpdate();", 
            "title": "Move the Background Layer"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter7/en/index.html#wrap-it-up", 
            "text": "Ok. We should do some last ending work.  Modify the  onEnter  method of PlayScene to add  tag  of layers, and add background layer and animation layer to game layer:      onEnter:function () {\n        this._super();\n        this.initPhysics();\n        this.gameLayer = new cc.Layer();\n\n        //add Background layer and Animation layer to gameLayer\n        this.gameLayer.addChild(new BackgroundLayer(), 0, TagOfLayer.background);\n        this.gameLayer.addChild(new AnimationLayer(this.space), 0, TagOfLayer.Animation);\n        this.addChild(this.gameLayer);\n        this.addChild(new StatusLayer(), 0, TagOfLayer.Status);\n\n        this.scheduleUpdate();\n    },  Cheers! You have successfully finish this tutorial. Run and take a look at it.  Note : If you don't want to display the debug drawing information of a chipmunk rigid body. You can safely add the following code right after the creation\nof the PhysicsDebugNode:  this._debugNode.setVisible(false);", 
            "title": "Wrap it up"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter7/en/index.html#summary", 
            "text": "In this tutorial, we have met TiledMap and display. These two concepts are very important ones when you development a physic endless running game.  You can download the entire project from  here .", 
            "title": "Summary"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter7/en/index.html#where-to-go-from-here", 
            "text": "In the next tutorial, we will add coins and obstacles into our game. At that tutorial, we will also learn how to refactor our game code and make it more extensible.  We will also do some cleanup work in PlayScene and encapsulate two class named Coin and Rock.  Keep tuning with the next tutorial and happy coding!", 
            "title": "Where to go from here?"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter8/en/index.html", 
            "text": "Add Coin and Obstacles Into Our Game\n\n\nIntroduction\n\n\nIn this tutorial, we will try to add Coin and Obstacles into our parkour game.\n\n\nAfter this tutorial, our player should be able to collect the coin when he is running and he will die when he collides with the obstacle.\n\n\nWe will also cover how to design a game level with tiled map editor. Since the game logic is a little bit complex than before,\nso we will refactor the code before we adding new game components.\n\n\nPreparation\n\n\nBefore we start, let's finish the preparation stuff.\n\n\nSetup Resource and Globals\n\n\nSince we will add two more game elements into our parkour game. So we need add some more global integer tags to identify each game items.\n\n\nLet's add the following code snippets at the end of \nglobals.js\n:\n\n\n// collision type for chipmunk\nif(typeof SpriteTag == \nundefined\n) {\n    var SpriteTag = {};\n    SpriteTag.runner = 0;\n    SpriteTag.coin = 1;\n    SpriteTag.rock = 2;\n};\n\n\n\n\nHere we use 0,1,2 to represent runner,coin and rock.\n\n\nWe also introduce another spritesheet named \nbackground.png\n and \nbackground.plist\n. We have packed the coins and rocks sprites into the spritesheet named background.png.\n\n\nThe details of how to pack these sprites are leave out for the next subsection.\n\n\nNext, let's copy the resource files into our \nres\n directory and add two more variables for further referring.\n\n\nvar res = {\n    helloBG_png : \nres/helloBG.png\n,\n    start_n_png : \nres/start_n.png\n,\n    start_s_png : \nres/start_s.png\n,\n    PlayBG_png  : \nres/PlayBG.png\n,\n    runner_png  : \nres/running.png\n,\n    runner_plist : \nres/running.plist\n,\n    map_png : \nres/map.png\n,\n    map00_tmx : \nres/map00.tmx\n,\n    map01_tmx : \nres/map01.tmx\n,\n    background_png :\nres/background.png\n,\n    background_plist : \nres/background.plist\n\n};\n\nvar g_resources = [\n    //image\n    res.helloBG_png,\n    res.start_n_png,\n    res.start_s_png,\n    res.PlayBG_png,\n    res.runner_png,\n    res.runner_plist,\n    res.map_png,\n    res.map00_tmx,\n    res.map01_tmx,\n    res.background_png,\n    res.background_plist\n];\n\n\n\n\nPack Coins and Rocks into Spritesheet with TexturePacker\n\n\nIn the previous chapter, we have learned how to pack a bunch of small sprites into a big large compact spritesheet. Let's pack another spritesheet.\n\n\nAt first, you should launch TexturePacker and drag all the assets under \nres/TexturePacker/coins and rocks\n director.(Note: You can get the whole game resource from the download as before.)\n\n\nAfter dragging the resource, you should specify the \nData file\n and \nTexture format\n with some path like \nxxx/chapter8/res/background.png\n or \nxxx/chapter8/res/background.plist\n.\n\n\nIf you don't want to any optimization of the spritesheet, just leave them out and press \nPublish\n to generate the final spritesheet.\n\n\n\n\nIntroduction to TiledMap Object Layer\n\n\nWe have used TiledMap for our level map, but it lacks game items. So in this section, we will cover how to design level items with TiledMap object layer.\n\n\nAdd Coin Object Layer\n\n\nAt first, we'll add Coin object layer.\n\n\n\n\n\n\nLaunch Tiled and open \nmap00.tmx\n and \nmap01.tmx\n.\n\n\n\n\n\n\nCreate an Object layer named \ncoin\n in map00.tmx and map01.tmx.\n\n\n\n\n\n\n\nDesign object layer by dragging and dropping rectangle object into the map.\nYou can change the rectangle size and it's position. You can also duplicate or delete the objects.\n\n\n\n\n\n\n\n\n\n\nSome tips on designing object layer:\nYou can change opacity of the layers in the tiled map so that you can easily place the object.\n\n\n\n\nAdd Rock Object Layer\n\n\nThe process to create the Rock object layer is more or less the same as creating coin object layer.\n\n\nSo we will leave it out for your own implementation.\n\n\nRefactor BackgroundLayer Class and Add Some Helper Method\n\n\nSometimes, when you are coding, you may find that it is extremely hard to add new functionality into the existing structure.\n\n\nIt is a bad code smell and we should stop and do refactor work right now.\n\n\nRefactor BackgroundLayer Class\n\n\nSince we will add Chipmunk physic body into our background, so we need a method to obtain the \nspace\n object created in \nPlayScene\n.\n\n\nLet's change the name of \nctor\n function in Background Layer and pass a parameter named \nspace\n into it. We should also add a new member variable into the\nBackgroundLayer class. Here is the code snippets:\n\n\n    ctor:function (space) {\n        this._super();\n\n        // clean old array here\n        this.objects = [];\n        this.space = space;\n\n        this.init();\n    },\n\n\n\n\nHere we have added additional init code. We added a array named \nobjects\n and initialize it to an empty array.\n\n\n(\nNote: You should call this.init() method right after the assignment of this.space = space. Because we will create physic objects in the init method\n)\n\n\nAdd Helper Method\n\n\n\n\nAdd more member variables into BackgroundLayer class:\n\n\n\n\n    space:null,\n    spriteSheet:null,\n    objects:[],\n\n\n\n\n\n\nInitialize spritesheet in the \ninit\n method:\n\n\n\n\n    // create sprite sheet\n        cc.spriteFrameCache.addSpriteFrames(res.background_plist);\n        this.spriteSheet = new cc.SpriteBatchNode(res.background_png);\n        this.addChild(this.spriteSheet);\n\n\n\n\n\n\nAdd a method named \nloadObject\n to initialize rock and coins.\n\n\n\n\n loadObjects:function (map, mapIndex) {\n        // add coins\n        var coinGroup = map.getObjectGroup(\ncoin\n);\n        var coinArray = coinGroup.getObjects();\n        for (var i = 0; i \n coinArray.length; i++) {\n            var coin = new Coin(this.spriteSheet,\n                this.space,\n                cc.p(coinArray[i][\nx\n] + this.mapWidth * mapIndex,coinArray[i][\ny\n]));\n            coin.mapIndex = mapIndex;\n            this.objects.push(coin);\n        }\n\n        // add rock\n        var rockGroup = map.getObjectGroup(\nrock\n);\n        var rockArray = rockGroup.getObjects();\n        for (var i = 0; i \n rockArray.length; i++) {\n            var rock = new Rock(this.spriteSheet,\n                this.space,\n                rockArray[i][\nx\n] + this.mapWidth * mapIndex);\n            rock.mapIndex = mapIndex;\n            this.objects.push(rock);\n        }\n    },\n\n\n\n\nHere we iterate all the objects info in the tiled map and create responding Chipmunk rigid bodies. Finally we store these object into the \nobjects\n array.\n\n\nAll these code are self-explanation. You should only pay attention to the \nmapIndex\n parameter. We use the parameter to calculate where we should place the rigid body.\n\n\nWe need call \nloadObject\n method at the end of \ninit\n method to create the  physic objects in the first two screen maps.\n\n\nthis.loadObjects(this.map00, 0);\nthis.loadObjects(this.map01, 1);\n\n\n\n\n\n\nAdd another two helper methods for removing unused chipmunk rigid bodies.\n\n\n\n\nThe first method is called \nremoveObjects\n. It removes a object by \nmapIndex\n. Here is the implementation:\n\n\nremoveObjects:function (mapIndex) {\n        while((function (obj, index) {\n            for (var i = 0; i \n obj.length; i++) {\n                if (obj[i].mapIndex == index) {\n                    obj[i].removeFromParent();\n                    obj.splice(i, 1);\n                    return true;\n                }\n            }\n            return false;\n        })(this.objects, mapIndex));\n    },\n\n\n\n\nThe other method is called \nremoveObjectByShape\n:\n\n\n   removeObjectByShape:function (shape) {\n        for (var i = 0; i \n this.objects.length; i++) {\n            if (this.objects[i].getShape() == shape) {\n                this.objects[i].removeFromParent();\n                this.objects.splice(i, 1);\n                break;\n            }\n        }\n    },\n\n\n\n\nThis method will remove a chipmunk object by its shape.\n\n\nWrap it up: Add Creation and Disposable Logic in checkAndReload Method\n\n\nWhen the map is moved, we should also call \nloadObject\n method to recreate the \"Coins \n Rocks\".\n\n\nAnd also we sould remove all unused objects by calling \nremoveObjects\n method.\n\n\nHere is the code snippets:\n\n\n  checkAndReload:function (eyeX) {\n        var newMapIndex = parseInt(eyeX / this.mapWidth);\n        if (this.mapIndex == newMapIndex) {\n            return false;\n        }\n\n        if (0 == newMapIndex % 2) {\n            // change mapSecond\n            this.map01.setPositionX(this.mapWidth * (newMapIndex + 1));\n            this.loadObjects(this.map01, newMapIndex + 1);\n        } else {\n            // change mapFirst\n            this.map00.setPositionX(this.mapWidth * (newMapIndex + 1));\n            this.loadObjects(this.map00, newMapIndex + 1);\n        }\n        this.removeObjects(newMapIndex - 1);\n        this.mapIndex = newMapIndex;\n\n        return true;\n    },\n\n\n\n\nAdd Coin and Rock\n\n\nNow it's time to add the coin and rock implementation. Despite the implementation details, you should also pay attention to the design idea behind these two\nclasses. Here we prefer to inherit from cc.Class instead of cc.Sprite. We let each object to own a instance of cc.Sprite.\n\n\nDesign and Implement Coin Class\n\n\n\n\n\n\nCreate a new file named \ncoin.js\n. We will define our Coin class in this file. Make sure you have this filed located in your \nsrc\n directory.\n\n\n\n\n\n\nDerived a class named \nCoin\n from cc.Class, let's take a look at the whole implementation:\n\n\n\n\n\n\nvar Coin = cc.Class.extend({\n    space:null,\n    sprite:null,\n    shape:null,\n    _mapIndex:0,// which map belongs to\n    get mapIndex() {\n        return this._mapIndex;\n    },\n    set mapIndex(index) {\n        this._mapIndex = index;\n    },\n\n    /** Constructor\n     * @param {cc.SpriteBatchNode *}\n     * @param {cp.Space *}\n     * @param {cc.p}\n     */\n    ctor:function (spriteSheet, space, pos) {\n        this.space = space;\n\n        // init coin animation\n        var animFrames = [];\n        for (var i = 0; i \n 8; i++) {\n            var str = \ncoin\n + i + \n.png\n;\n            var frame = cc.spriteFrameCache.getSpriteFrame(str);\n            animFrames.push(frame);\n        }\n\n        var animation = new cc.Animation(animFrames, 0.2);\n        var action = new cc.RepeatForever(new cc.Animate(animation));\n\n        this.sprite = new cc.PhysicsSprite(\n#coin0.png\n);\n\n        // init physics\n        var radius = 0.95 * this.sprite.getContentSize().width / 2;\n        var body = new cp.StaticBody();\n        body.setPos(pos);\n        this.sprite.setBody(body);\n\n        this.shape = new cp.CircleShape(body, radius, cp.vzero);\n        this.shape.setCollisionType(SpriteTag.coin);\n        //Sensors only call collision callbacks, and never generate real collisions\n        this.shape.setSensor(true);\n\n        this.space.addStaticShape(this.shape);\n\n        // add sprite to sprite sheet\n        this.sprite.runAction(action);\n        spriteSheet.addChild(this.sprite, 1);\n    },\n\n    removeFromParent:function () {\n        this.space.removeStaticShape(this.shape);\n        this.shape = null;\n        this.sprite.removeFromParent();\n        this.sprite = null;\n    },\n\n    getShape:function () {\n        return this.shape;\n    }\n});\n\n\n\n\nLet's explain the code piece by piece.\n\n\nAt first, we add three member variables named: \nspace\n, \nsprite\n and \nshape\n. We will use these variables to create the coin object's physic body\nand its display attribution.\n\n\nThen, we added another member variable \n_mapIndex\n.  We used the \nget/set\n syntax sugar to define accessor of the variable.\n\n\nThe \nctor\n method is the constructor of Coin class. We will create a Coin class with a spritesheet, a space and a position object later.\n\n\nSince the coins are circular shape, so we have created CircleShape attached to the rigid body. The remaining part of the ctor function is self-explanation.\n\n\nAt last, we need to define a method to do the cleanup work. It's the \nremoveFromParent\n method. It firstly remove the rigid body from the space and then remove the sprite\nfrom its parent. The \ngetShape\n method is just a getter method used for accessing the shape object stored in the coin object.\n\n\nDesign and Implement Rock Class\n\n\nThe principle of designing the Rock class is more or less as the Coin class except for the rigid shape type part.\n\n\nBecause our Rock class is a rectangle box. So we use cp.BoxShape to replace the cc.CircleShape in Coin class.\n\n\nHere is the full source code of rock.js:\n\n\nvar Rock = cc.Class.extend({\n    space:null,\n    sprite:null,\n    shape:null,\n    _map:0,// which map belong to\n    get map() {\n        return this._map;\n    },\n    set map(newMap) {\n        this._map = newMap;\n    },\n\n    /** Constructor\n     * @param {cc.SpriteBatchNode *}\n     * @param {cp.Space *}\n     * @param {cc.p}\n     */\n    ctor:function (spriteSheet, space, posX) {\n        this.space = space;\n\n        this.sprite = new cc.PhysicsSprite(\n#rock.png\n);\n        var body = new cp.StaticBody();\n        body.setPos(cc.p(posX, this.sprite.getContentSize().height / 2 + g_groundHeight));\n        this.sprite.setBody(body);\n\n        this.shape = new cp.BoxShape(body,\n            this.sprite.getContentSize().width,\n            this.sprite.getContentSize().height);\n        this.shape.setCollisionType(SpriteTag.rock);\n\n        this.space.addStaticShape(this.shape);\n        spriteSheet.addChild(this.sprite);\n    },\n\n    removeFromParent:function () {\n        this.space.removeStaticShape(this.shape);\n        this.shape = null;\n        this.sprite.removeFromParent();\n        this.sprite = null;\n    },\n\n    getShape:function () {\n        return this.shape;\n    }\n});\n\n\n\n\nImprove the PlayScene\n\n\nRefactor onEnter function of PlayScene\n\n\n\n\nAt first, let's add a extra array named \nshapesToRemove\n and initialize it at the beginning of \nonEnter\n function in PlayScene.js.\n\n\n\n\n//the following line goes in init member variable define area\nshapesToRemove :[],\n\n//the following line goes at the beginning of the *onEnter* function.\nthis.shapesToRemove = [];\n\n\n\n\n\n\nSecondly, modify the creation of BackgroundLayer. Here we simply pass the space object into BackgroundLayer's constructor.\n\n\n\n\n    this.gameLayer.addChild(new BackgroundLayer(this.space), 0, TagOfLayer.background);\n\n\n\n\nAdd Collision Detection Callbacks\n\n\n\n\nAt first, we should call these two functions at the end of \ninitPhyiscs\n method:\n\n\n\n\n // setup chipmunk CollisionHandler\n        this.space.addCollisionHandler(SpriteTag.runner, SpriteTag.coin,\n            this.collisionCoinBegin.bind(this), null, null, null);\n        this.space.addCollisionHandler(SpriteTag.runner, SpriteTag.rock,\n            this.collisionRockBegin.bind(this), null, null, null);\n\n\n\n\nThe \naddCollisionHandler\n method needs a callback when collision occurs.\n\n\n\n\nThen, let's define these two callbacks to handle player collide with coins and rocks.\n\n\n\n\n collisionCoinBegin:function (arbiter, space) {\n        var shapes = arbiter.getShapes();\n        // shapes[0] is runner\n        this.shapesToRemove.push(shapes[1]);\n    },\n\n    collisionRockBegin:function (arbiter, space) {\n        cc.log(\n==game over\n);\n    },\n\n\n\n\n\n\nDelete unused rigid bodies in background layer. You should add the following code at the end of \nupdate\n method:\n\n\n\n\n        // Simulation cpSpaceAddPostStepCallback\n        for(var i = 0; i \n this.shapesToRemove.length; i++) {\n            var shape = this.shapesToRemove[i];\n            this.gameLayer.getChildByTag(TagOfLayer.background).removeObjectByShape(shape);\n        }\n        this.shapesToRemove = [];\n\n\n\n\nWe can't delete physic bodies during the physic simulation process. so we use an extra array named \nshapesToRemove\n to hold the temporal data needed to be deleted.\n\n\nWrap all these things up\n\n\nCongratulations! You almost reach the end. Before we hit the \ndebug\n button to see the results. Let's add some extra glue code to connect everything together.\n\n\nOpen \nproject.json\n and append two more array items at the end of \njsList\n array.\n\n\n    \njsList\n : [\n        \nsrc/resource.js\n,\n        \nsrc/app.js\n,\n        \nsrc/AnimationLayer.js\n,\n        \nsrc/BackgroundLayer.js\n,\n        \nsrc/PlayScene.js\n,\n        \nsrc/StatusLayer.js\n,\n        \nsrc/globals.js\n,\n        \nsrc/coin.js\n,\n        \nsrc/rock.js\n\n    ]\n\n\n\n\nBuild and run! Cheers, we did it!:)\n\n\nLet's see our final fruits:\n\n\n\n\nSummary\n\n\nIn this tutorial, we have enjoyed a very long journey. But worth it, isn't it?\n\n\nWe have learned how to use TiledMap's object layer to design complex game levels and how to customize your own class to extend your code structure.\n\n\nYou can download the full source code from \nhere\n.\n\n\nWhere to go from here?\n\n\nIn the next tutorial, we'll cover how to update game HUD constantly and we'll also add game over logic and simple gesture recognizer into our game to make the\nplayer to jump over the obstacles. Keep tuning!", 
            "title": "_Chapter8"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter8/en/index.html#add-coin-and-obstacles-into-our-game", 
            "text": "", 
            "title": "Add Coin and Obstacles Into Our Game"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter8/en/index.html#introduction", 
            "text": "In this tutorial, we will try to add Coin and Obstacles into our parkour game.  After this tutorial, our player should be able to collect the coin when he is running and he will die when he collides with the obstacle.  We will also cover how to design a game level with tiled map editor. Since the game logic is a little bit complex than before,\nso we will refactor the code before we adding new game components.", 
            "title": "Introduction"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter8/en/index.html#preparation", 
            "text": "Before we start, let's finish the preparation stuff.", 
            "title": "Preparation"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter8/en/index.html#setup-resource-and-globals", 
            "text": "Since we will add two more game elements into our parkour game. So we need add some more global integer tags to identify each game items.  Let's add the following code snippets at the end of  globals.js :  // collision type for chipmunk\nif(typeof SpriteTag ==  undefined ) {\n    var SpriteTag = {};\n    SpriteTag.runner = 0;\n    SpriteTag.coin = 1;\n    SpriteTag.rock = 2;\n};  Here we use 0,1,2 to represent runner,coin and rock.  We also introduce another spritesheet named  background.png  and  background.plist . We have packed the coins and rocks sprites into the spritesheet named background.png.  The details of how to pack these sprites are leave out for the next subsection.  Next, let's copy the resource files into our  res  directory and add two more variables for further referring.  var res = {\n    helloBG_png :  res/helloBG.png ,\n    start_n_png :  res/start_n.png ,\n    start_s_png :  res/start_s.png ,\n    PlayBG_png  :  res/PlayBG.png ,\n    runner_png  :  res/running.png ,\n    runner_plist :  res/running.plist ,\n    map_png :  res/map.png ,\n    map00_tmx :  res/map00.tmx ,\n    map01_tmx :  res/map01.tmx ,\n    background_png : res/background.png ,\n    background_plist :  res/background.plist \n};\n\nvar g_resources = [\n    //image\n    res.helloBG_png,\n    res.start_n_png,\n    res.start_s_png,\n    res.PlayBG_png,\n    res.runner_png,\n    res.runner_plist,\n    res.map_png,\n    res.map00_tmx,\n    res.map01_tmx,\n    res.background_png,\n    res.background_plist\n];", 
            "title": "Setup Resource and Globals"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter8/en/index.html#pack-coins-and-rocks-into-spritesheet-with-texturepacker", 
            "text": "In the previous chapter, we have learned how to pack a bunch of small sprites into a big large compact spritesheet. Let's pack another spritesheet.  At first, you should launch TexturePacker and drag all the assets under  res/TexturePacker/coins and rocks  director.(Note: You can get the whole game resource from the download as before.)  After dragging the resource, you should specify the  Data file  and  Texture format  with some path like  xxx/chapter8/res/background.png  or  xxx/chapter8/res/background.plist .  If you don't want to any optimization of the spritesheet, just leave them out and press  Publish  to generate the final spritesheet.", 
            "title": "Pack Coins and Rocks into Spritesheet with TexturePacker"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter8/en/index.html#introduction-to-tiledmap-object-layer", 
            "text": "We have used TiledMap for our level map, but it lacks game items. So in this section, we will cover how to design level items with TiledMap object layer.", 
            "title": "Introduction to TiledMap Object Layer"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter8/en/index.html#add-coin-object-layer", 
            "text": "At first, we'll add Coin object layer.    Launch Tiled and open  map00.tmx  and  map01.tmx .    Create an Object layer named  coin  in map00.tmx and map01.tmx.    Design object layer by dragging and dropping rectangle object into the map.\nYou can change the rectangle size and it's position. You can also duplicate or delete the objects.      Some tips on designing object layer:\nYou can change opacity of the layers in the tiled map so that you can easily place the object.", 
            "title": "Add Coin Object Layer"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter8/en/index.html#add-rock-object-layer", 
            "text": "The process to create the Rock object layer is more or less the same as creating coin object layer.  So we will leave it out for your own implementation.", 
            "title": "Add Rock Object Layer"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter8/en/index.html#refactor-backgroundlayer-class-and-add-some-helper-method", 
            "text": "Sometimes, when you are coding, you may find that it is extremely hard to add new functionality into the existing structure.  It is a bad code smell and we should stop and do refactor work right now.", 
            "title": "Refactor BackgroundLayer Class and Add Some Helper Method"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter8/en/index.html#refactor-backgroundlayer-class", 
            "text": "Since we will add Chipmunk physic body into our background, so we need a method to obtain the  space  object created in  PlayScene .  Let's change the name of  ctor  function in Background Layer and pass a parameter named  space  into it. We should also add a new member variable into the\nBackgroundLayer class. Here is the code snippets:      ctor:function (space) {\n        this._super();\n\n        // clean old array here\n        this.objects = [];\n        this.space = space;\n\n        this.init();\n    },  Here we have added additional init code. We added a array named  objects  and initialize it to an empty array.  ( Note: You should call this.init() method right after the assignment of this.space = space. Because we will create physic objects in the init method )", 
            "title": "Refactor BackgroundLayer Class"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter8/en/index.html#add-helper-method", 
            "text": "Add more member variables into BackgroundLayer class:       space:null,\n    spriteSheet:null,\n    objects:[],   Initialize spritesheet in the  init  method:       // create sprite sheet\n        cc.spriteFrameCache.addSpriteFrames(res.background_plist);\n        this.spriteSheet = new cc.SpriteBatchNode(res.background_png);\n        this.addChild(this.spriteSheet);   Add a method named  loadObject  to initialize rock and coins.    loadObjects:function (map, mapIndex) {\n        // add coins\n        var coinGroup = map.getObjectGroup( coin );\n        var coinArray = coinGroup.getObjects();\n        for (var i = 0; i   coinArray.length; i++) {\n            var coin = new Coin(this.spriteSheet,\n                this.space,\n                cc.p(coinArray[i][ x ] + this.mapWidth * mapIndex,coinArray[i][ y ]));\n            coin.mapIndex = mapIndex;\n            this.objects.push(coin);\n        }\n\n        // add rock\n        var rockGroup = map.getObjectGroup( rock );\n        var rockArray = rockGroup.getObjects();\n        for (var i = 0; i   rockArray.length; i++) {\n            var rock = new Rock(this.spriteSheet,\n                this.space,\n                rockArray[i][ x ] + this.mapWidth * mapIndex);\n            rock.mapIndex = mapIndex;\n            this.objects.push(rock);\n        }\n    },  Here we iterate all the objects info in the tiled map and create responding Chipmunk rigid bodies. Finally we store these object into the  objects  array.  All these code are self-explanation. You should only pay attention to the  mapIndex  parameter. We use the parameter to calculate where we should place the rigid body.  We need call  loadObject  method at the end of  init  method to create the  physic objects in the first two screen maps.  this.loadObjects(this.map00, 0);\nthis.loadObjects(this.map01, 1);   Add another two helper methods for removing unused chipmunk rigid bodies.   The first method is called  removeObjects . It removes a object by  mapIndex . Here is the implementation:  removeObjects:function (mapIndex) {\n        while((function (obj, index) {\n            for (var i = 0; i   obj.length; i++) {\n                if (obj[i].mapIndex == index) {\n                    obj[i].removeFromParent();\n                    obj.splice(i, 1);\n                    return true;\n                }\n            }\n            return false;\n        })(this.objects, mapIndex));\n    },  The other method is called  removeObjectByShape :     removeObjectByShape:function (shape) {\n        for (var i = 0; i   this.objects.length; i++) {\n            if (this.objects[i].getShape() == shape) {\n                this.objects[i].removeFromParent();\n                this.objects.splice(i, 1);\n                break;\n            }\n        }\n    },  This method will remove a chipmunk object by its shape.", 
            "title": "Add Helper Method"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter8/en/index.html#wrap-it-up-add-creation-and-disposable-logic-in-checkandreload-method", 
            "text": "When the map is moved, we should also call  loadObject  method to recreate the \"Coins   Rocks\".  And also we sould remove all unused objects by calling  removeObjects  method.  Here is the code snippets:    checkAndReload:function (eyeX) {\n        var newMapIndex = parseInt(eyeX / this.mapWidth);\n        if (this.mapIndex == newMapIndex) {\n            return false;\n        }\n\n        if (0 == newMapIndex % 2) {\n            // change mapSecond\n            this.map01.setPositionX(this.mapWidth * (newMapIndex + 1));\n            this.loadObjects(this.map01, newMapIndex + 1);\n        } else {\n            // change mapFirst\n            this.map00.setPositionX(this.mapWidth * (newMapIndex + 1));\n            this.loadObjects(this.map00, newMapIndex + 1);\n        }\n        this.removeObjects(newMapIndex - 1);\n        this.mapIndex = newMapIndex;\n\n        return true;\n    },", 
            "title": "Wrap it up: Add Creation and Disposable Logic in checkAndReload Method"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter8/en/index.html#add-coin-and-rock", 
            "text": "Now it's time to add the coin and rock implementation. Despite the implementation details, you should also pay attention to the design idea behind these two\nclasses. Here we prefer to inherit from cc.Class instead of cc.Sprite. We let each object to own a instance of cc.Sprite.", 
            "title": "Add Coin and Rock"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter8/en/index.html#design-and-implement-coin-class", 
            "text": "Create a new file named  coin.js . We will define our Coin class in this file. Make sure you have this filed located in your  src  directory.    Derived a class named  Coin  from cc.Class, let's take a look at the whole implementation:    var Coin = cc.Class.extend({\n    space:null,\n    sprite:null,\n    shape:null,\n    _mapIndex:0,// which map belongs to\n    get mapIndex() {\n        return this._mapIndex;\n    },\n    set mapIndex(index) {\n        this._mapIndex = index;\n    },\n\n    /** Constructor\n     * @param {cc.SpriteBatchNode *}\n     * @param {cp.Space *}\n     * @param {cc.p}\n     */\n    ctor:function (spriteSheet, space, pos) {\n        this.space = space;\n\n        // init coin animation\n        var animFrames = [];\n        for (var i = 0; i   8; i++) {\n            var str =  coin  + i +  .png ;\n            var frame = cc.spriteFrameCache.getSpriteFrame(str);\n            animFrames.push(frame);\n        }\n\n        var animation = new cc.Animation(animFrames, 0.2);\n        var action = new cc.RepeatForever(new cc.Animate(animation));\n\n        this.sprite = new cc.PhysicsSprite( #coin0.png );\n\n        // init physics\n        var radius = 0.95 * this.sprite.getContentSize().width / 2;\n        var body = new cp.StaticBody();\n        body.setPos(pos);\n        this.sprite.setBody(body);\n\n        this.shape = new cp.CircleShape(body, radius, cp.vzero);\n        this.shape.setCollisionType(SpriteTag.coin);\n        //Sensors only call collision callbacks, and never generate real collisions\n        this.shape.setSensor(true);\n\n        this.space.addStaticShape(this.shape);\n\n        // add sprite to sprite sheet\n        this.sprite.runAction(action);\n        spriteSheet.addChild(this.sprite, 1);\n    },\n\n    removeFromParent:function () {\n        this.space.removeStaticShape(this.shape);\n        this.shape = null;\n        this.sprite.removeFromParent();\n        this.sprite = null;\n    },\n\n    getShape:function () {\n        return this.shape;\n    }\n});  Let's explain the code piece by piece.  At first, we add three member variables named:  space ,  sprite  and  shape . We will use these variables to create the coin object's physic body\nand its display attribution.  Then, we added another member variable  _mapIndex .  We used the  get/set  syntax sugar to define accessor of the variable.  The  ctor  method is the constructor of Coin class. We will create a Coin class with a spritesheet, a space and a position object later.  Since the coins are circular shape, so we have created CircleShape attached to the rigid body. The remaining part of the ctor function is self-explanation.  At last, we need to define a method to do the cleanup work. It's the  removeFromParent  method. It firstly remove the rigid body from the space and then remove the sprite\nfrom its parent. The  getShape  method is just a getter method used for accessing the shape object stored in the coin object.", 
            "title": "Design and Implement Coin Class"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter8/en/index.html#design-and-implement-rock-class", 
            "text": "The principle of designing the Rock class is more or less as the Coin class except for the rigid shape type part.  Because our Rock class is a rectangle box. So we use cp.BoxShape to replace the cc.CircleShape in Coin class.  Here is the full source code of rock.js:  var Rock = cc.Class.extend({\n    space:null,\n    sprite:null,\n    shape:null,\n    _map:0,// which map belong to\n    get map() {\n        return this._map;\n    },\n    set map(newMap) {\n        this._map = newMap;\n    },\n\n    /** Constructor\n     * @param {cc.SpriteBatchNode *}\n     * @param {cp.Space *}\n     * @param {cc.p}\n     */\n    ctor:function (spriteSheet, space, posX) {\n        this.space = space;\n\n        this.sprite = new cc.PhysicsSprite( #rock.png );\n        var body = new cp.StaticBody();\n        body.setPos(cc.p(posX, this.sprite.getContentSize().height / 2 + g_groundHeight));\n        this.sprite.setBody(body);\n\n        this.shape = new cp.BoxShape(body,\n            this.sprite.getContentSize().width,\n            this.sprite.getContentSize().height);\n        this.shape.setCollisionType(SpriteTag.rock);\n\n        this.space.addStaticShape(this.shape);\n        spriteSheet.addChild(this.sprite);\n    },\n\n    removeFromParent:function () {\n        this.space.removeStaticShape(this.shape);\n        this.shape = null;\n        this.sprite.removeFromParent();\n        this.sprite = null;\n    },\n\n    getShape:function () {\n        return this.shape;\n    }\n});", 
            "title": "Design and Implement Rock Class"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter8/en/index.html#improve-the-playscene", 
            "text": "", 
            "title": "Improve the PlayScene"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter8/en/index.html#refactor-onenter-function-of-playscene", 
            "text": "At first, let's add a extra array named  shapesToRemove  and initialize it at the beginning of  onEnter  function in PlayScene.js.   //the following line goes in init member variable define area\nshapesToRemove :[],\n\n//the following line goes at the beginning of the *onEnter* function.\nthis.shapesToRemove = [];   Secondly, modify the creation of BackgroundLayer. Here we simply pass the space object into BackgroundLayer's constructor.       this.gameLayer.addChild(new BackgroundLayer(this.space), 0, TagOfLayer.background);", 
            "title": "Refactor onEnter function of PlayScene"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter8/en/index.html#add-collision-detection-callbacks", 
            "text": "At first, we should call these two functions at the end of  initPhyiscs  method:    // setup chipmunk CollisionHandler\n        this.space.addCollisionHandler(SpriteTag.runner, SpriteTag.coin,\n            this.collisionCoinBegin.bind(this), null, null, null);\n        this.space.addCollisionHandler(SpriteTag.runner, SpriteTag.rock,\n            this.collisionRockBegin.bind(this), null, null, null);  The  addCollisionHandler  method needs a callback when collision occurs.   Then, let's define these two callbacks to handle player collide with coins and rocks.    collisionCoinBegin:function (arbiter, space) {\n        var shapes = arbiter.getShapes();\n        // shapes[0] is runner\n        this.shapesToRemove.push(shapes[1]);\n    },\n\n    collisionRockBegin:function (arbiter, space) {\n        cc.log( ==game over );\n    },   Delete unused rigid bodies in background layer. You should add the following code at the end of  update  method:           // Simulation cpSpaceAddPostStepCallback\n        for(var i = 0; i   this.shapesToRemove.length; i++) {\n            var shape = this.shapesToRemove[i];\n            this.gameLayer.getChildByTag(TagOfLayer.background).removeObjectByShape(shape);\n        }\n        this.shapesToRemove = [];  We can't delete physic bodies during the physic simulation process. so we use an extra array named  shapesToRemove  to hold the temporal data needed to be deleted.", 
            "title": "Add Collision Detection Callbacks"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter8/en/index.html#wrap-all-these-things-up", 
            "text": "Congratulations! You almost reach the end. Before we hit the  debug  button to see the results. Let's add some extra glue code to connect everything together.  Open  project.json  and append two more array items at the end of  jsList  array.       jsList  : [\n         src/resource.js ,\n         src/app.js ,\n         src/AnimationLayer.js ,\n         src/BackgroundLayer.js ,\n         src/PlayScene.js ,\n         src/StatusLayer.js ,\n         src/globals.js ,\n         src/coin.js ,\n         src/rock.js \n    ]  Build and run! Cheers, we did it!:)  Let's see our final fruits:", 
            "title": "Wrap all these things up"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter8/en/index.html#summary", 
            "text": "In this tutorial, we have enjoyed a very long journey. But worth it, isn't it?  We have learned how to use TiledMap's object layer to design complex game levels and how to customize your own class to extend your code structure.  You can download the full source code from  here .", 
            "title": "Summary"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter8/en/index.html#where-to-go-from-here", 
            "text": "In the next tutorial, we'll cover how to update game HUD constantly and we'll also add game over logic and simple gesture recognizer into our game to make the\nplayer to jump over the obstacles. Keep tuning!", 
            "title": "Where to go from here?"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter9/en/index.html", 
            "text": "Implement Game Over Logic and More\n\n\nIntroduction\n\n\nIn this tutorial, we'll implement out game over logic, updating HUD and a simple gesture recognizer.\nWith out any further ado, let's dive into the tutorial.\n\n\nUpdate Game HUD\n\n\nUpdate Player Running Meters\n\n\nAt first, let's add a \nupdateMeter\n method into the StatusLayer Class:\n\n\n    updateMeter:function (px) {\n        this.labelMeter.setString(parseInt(px / 10) + \nM\n);\n    }\n\n\n\n\nThis method constantly change the value of \nlabelMeter\n. Here we use \nparseInt\n function to convert the result into a integer value.\n\n\nThe argument \npx\n stands for pixel, so every 10 px is one meter.\n\n\nNow, we should call this method in each frame.\n\n\nOpen AnimationLayer.js and add the following code at the beginning of \nupdate\n function:\n\n\n        // update meter\n        var statusLayer = this.getParent().getParent().getChildByTag(TagOfLayer.Status);\n        statusLayer.updateMeter(this.sprite.getPositionX() - g_runnerStartX);\n\n\n\n\nUpdate Coin Count\n\n\nWhen the player collect a coin, we should update the coin indicator.\n\n\nAt first, let's add a \naddCoin\n method in StatusLayer:\n\n\n    addCoin:function (num) {\n        this.coins += num;\n        this.labelCoin.setString(\nCoins:\n + this.coins);\n    },\n\n\n\n\nWhen the player collide with the coin, we should call this method.\n\n\nNow it's time to implement it.\n\n\nOpen \nPlayScene.js\n and add the following code at the end of \ncolisionCoinBegin\n method:\n\n\n        var statusLayer = this.getChildByTag(TagOfLayer.Status);\n        statusLayer.addCoin(1);\n\n\n\n\nEvery time the player collides with the coin, the \ncolisionCoinBegin\n method will be called and our coin count will be increase by one.\n\n\nSave all files and git it a try:)\n\n\nHere is the screenshot:\n\n\n\n\nAdd Game Over Logic into the Game\n\n\nDesign and Implement the Game Over Layer\n\n\nIn order to keep things simple, we just add a menu item at the center of our game over layer.\n\n\nWhen you click the \nrestart\n menu, the game will restart again.\n\n\nSo the design is very trivial, let's implement it.\n\n\nHere is the whole implementation of \nGameOverLayer.js\n:\n\n\nvar GameOverLayer = cc.LayerColor.extend({\n    // constructor\n    ctor:function () {\n        this._super();\n        this.init();\n    },\n    init:function () {\n        this._super(cc.color(0, 0, 0, 180));\n        var winSize = cc.director.getWinSize();\n\n        var centerPos = cc.p(winSize.width / 2, winSize.height / 2);\n        cc.MenuItemFont.setFontSize(30);\n        var menuItemRestart = new cc.MenuItemSprite(\n            new cc.Sprite(res.restart_n_png),\n            new cc.Sprite(res.restart_s_png),\n            this.onRestart, this);\n        var menu = new cc.Menu(menuItemRestart);\n        menu.setPosition(centerPos);\n        this.addChild(menu);\n    },\n    onRestart:function (sender) {\n        cc.director.resume();\n        cc.director.runScene(new PlayScene());\n    }\n});\n\n\n\n\nHere we used two sprite named \ns_restart_n\n and \ns_restart_s\n to create our restart menu item.\n\n\nSo we should add the resource file into the \nres\n directory and define the resources path.\n\n\nOpen \nresource.js\n and add the following code lines:\n\n\n    restart_n_png : \nres/restart_n.png\n,\n    restart_s_png : \nres/restart_s.png\n\n\n//add the following two lines at the end of g_resources array.\n    res.restart_n_png,\n    res.restart_s_png\n\n\n\n\nThe code of \ninit\n method is self-explanation. But you should pay attention to the callback \nonRestart\n method.\n\n\nWe have called the \nresume\n function of cc.Director. Why should be do this? Because we call \npause\n method when the player die.\n\n\nGame Over When The Player Collide with a Rock\n\n\nNow, let's display the game over layer when the player collide with the rock.\n\n\nOpen \nPlayScene\n and add the following code lines at the end of \ncollisionRockBegin\n method:\n\n\n  collisionRockBegin:function (arbiter, space) {\n        cc.log(\n==game over\n);\n        cc.director.pause();\n        this.addChild(new GameOverLayer());\n    },\n\n\n\n\nYeah, it's done. Now run the game again.\n\n\nHere is the final screenshot:\n\n\n\n\nImplement Your Own Simple Gesture Recognizer\n\n\nAt this section, we will design a very simple gesture recognizer.\n\n\nWhen we swipe our finger on the screen from bottom to up, the recognizer will detect it.\n\n\nThe algorithm for detecting the swipe gesture is very straightforward. When the touch begin event is detected, we store the first\ntouch point in the array. When the touch moves event is detected, we append the touch point at the end of point array.\n\n\nWe can simply compare the difference of x axis or y axis of two adjacent point to determine the swipe direction.\n\n\nHere is the code snippets to do the magic:\n\n\nfunction Point(x, y)\n{\n    this.X = x;\n    this.Y = y;\n}\n\n// class define\nfunction SimpleRecognizer()\n{\n    this.points = [];\n    this.result = \n;\n}\n\n// be called in onTouchBegan\nSimpleRecognizer.prototype.beginPoint = function(x, y) {\n    this.points = [];\n    this.result = \n;\n    this.points.push(new Point(x, y));\n}\n\n// be called in onTouchMoved\nSimpleRecognizer.prototype.movePoint = function(x, y) {\n    this.points.push(new Point(x, y));\n\n    if (this.result == \nnot support\n) {\n        return;\n    }\n\n    var newRtn = \n;\n    var len = this.points.length;\n    var dx = this.points[len - 1].X - this.points[len - 2].X;\n    var dy = this.points[len - 1].Y - this.points[len - 2].Y;\n\n    if (Math.abs(dx) \n Math.abs(dy)) {\n        if (dx \n 0) {\n            newRtn = \nright\n;\n        } else {\n            newRtn = \nleft\n;\n        }\n    } else {\n        if (dy \n 0) {\n            newRtn = \nup\n;\n        } else {\n            newRtn = \ndown\n;\n        }\n    }\n\n    // first set result\n    if (this.result == \n) {\n        this.result = newRtn;\n        return;\n    }\n\n    // if diretcory change, not support Recongnizer\n    if (this.result != newRtn) {\n        this.result = \nnot support\n;\n    }\n}\n\n// be called in onTouchEnded\nSimpleRecognizer.prototype.endPoint = function() {\n    if (this.points.length \n 3) {\n        return \nerror\n;\n    }\n    return this.result;\n}\n\nSimpleRecognizer.prototype.getPoints = function() {\n    return this.points;\n}\n\n\n\n\nAfter the gesture is detected, we can call \nendPoint\n of the SimpleRecognizer to get the final result.\n\n\nCurrently it supports four simple types: up, down, left and right. You can extend your own more complex one.\n\n\nHandling Touch Event, Player Jumping Animation and Logic\n\n\nAdd Jumping Animation of the Player\n\n\nIn order to implement the jumping animation, we should prepare our game arts first. Here we have done it for you.\n\n\nYou can download the whole project from the \nSummary\n section and copy\npaste the running.plist and running.png file into the \nres\n directory.\n\n\nWhen the game starts, the player will be running infinite until him collide with the rock. We want to let the player jump by swiping upwards.\n\n\nThus we can play the game a little bit longer.\n\n\nWhen the player jumps up or jumps down, we need to play corresponding animations.\n\n\nSo at first, let's add two more animation action member variables into the AnimationLayer:\n\n\njumpUpAction:null,\njumpDownAction:null,\n\n\n\n\nAnd then let's add a new method named \ninitAction\n:\n\n\n  initAction:function () {\n        // init runningAction\n        var animFrames = [];\n        // num equal to spriteSheet\n        for (var i = 0; i \n 8; i++) {\n            var str = \nrunner\n + i + \n.png\n;\n            var frame = cc.spriteFrameCache.getSpriteFrame(str);\n            animFrames.push(frame);\n        }\n\n        var animation = new cc.Animation(animFrames, 0.1);\n        this.runningAction = new cc.RepeatForever(new cc.Animate(animation));\n        this.runningAction.retain();\n\n        // init jumpUpAction\n        animFrames = [];\n        for (var i = 0; i \n 4; i++) {\n            var str = \nrunnerJumpUp\n + i + \n.png\n;\n            var frame = cc.spriteFrameCache.getSpriteFrame(str);\n            animFrames.push(frame);\n        }\n\n        animation = new cc.Animation(animFrames, 0.2);\n        this.jumpUpAction = new cc.Animate(animation);\n        this.jumpUpAction.retain();\n\n        // init jumpDownAction\n        animFrames = [];\n        for (var i = 0; i \n 2; i++) {\n            var str = \nrunnerJumpDown\n + i + \n.png\n;\n            var frame = cc.spriteFrameCache.getSpriteFrame(str);\n            animFrames.push(frame);\n        }\n\n        animation = new cc.Animation(animFrames, 0.3);\n        this.jumpDownAction = new cc.Animate(animation);\n        this.jumpDownAction.retain();\n    },\n\n\n\n\nIn this function, we have initialized all the animations of the players.\n\n\nAt lasts, let's remove the initialize code of runningAction we did before in the \ninit\n function and call \ninitAction\n method instead.\n\n\n//init  actions\nthis.initAction();\n//        // init runningAction\n//        var animFrames = [];\n//        for (var i = 0; i \n 8; i++) {\n//            var str = \nrunner\n + i + \n.png\n;\n//            var frame = cc.spriteFrameCache.getSpriteFrame(str);\n//            animFrames.push(frame);\n//        }\n//        var animation = new cc.Animation(animFrames, 0.1);\n//        this.runningAction = new cc.RepeatForever(new cc.Animate(animation));\n\n\n\n\nHandling Touch Event\n\n\nNow it's time to handle touch event. At first, we should enable touch handling of the AnimationLayer.\n\n\nAdd the following code snippets at the end of \ninit\n method:\n\n\n cc.eventManager.addListener({\n            event: cc.EventListener.TOUCH_ONE_BY_ONE,\n            swallowTouches: true,\n            onTouchBegan: this.onTouchBegan,\n            onTouchMoved: this.onTouchMoved,\n            onTouchEnded: this.onTouchEnded\n        }, this)\n\n\n\n\nThese two code lines can activate the touch dispatching function.\n\n\nNow let's add three callbacks we needed to handle our touch event:\n\n\n onTouchBegan:function(touch, event) {\n        var pos = touch.getLocation();\n        event.getCurrentTarget().recognizer.beginPoint(pos.x, pos.y);\n        return true;\n    },\n\n    onTouchMoved:function(touch, event) {\n        var pos = touch.getLocation();\n        event.getCurrentTarget().recognizer.movePoint(pos.x, pos.y);\n    },\n\n    onTouchEnded:function(touch, event) {\n        var rtn = event.getCurrentTarget().recognizer.endPoint();\n        cc.log(\nrnt = \n + rtn);\n        switch (rtn) {\n            case \nup\n:\n                event.getCurrentTarget().jump();\n                break;\n            default:\n                break;\n        }\n    },\n\n\n\n\nWhen you touch the screen the \nonTouchBegan\n method will be called. When you hold your finger and move it around, the \nonTouchMoved\n method will\nbe called. When you release your finger, the \nonTouchEnded\n method will be called.\n\n\nHere we have used our simple gesture recognizer to detect the \"swipe out\" gesture.\n\n\nWrap them all\n\n\nNow it's time to wrap them all.\n\n\nAt first, add the following enumerations in the beginning of the AnimationLayer:\n\n\n// define enum for runner status\nif(typeof RunnerStat == \nundefined\n) {\n    var RunnerStat = {};\n    RunnerStat.running = 0;\n    RunnerStat.jumpUp = 1;\n    RunnerStat.jumpDown = 2;\n};\n\n\n\n\nWe use these enums to represent different state of the player.\n\n\nThen we should add another two member variables in the AnimationLayer:\n\n\n recognizer:null,\n stat:RunnerStat.running,// init with running status\n\n\n\n\nAnd init the recognizer at the end of \ninit\n method:\n\n\n this.recognizer = new SimpleRecognizer();\n\n\n\n\nAt last, we should implement our jump method:\n\n\n jump:function () {\n        cc.log(\njump\n);\n        if (this.stat == RunnerStat.running) {\n            this.body.applyImpulse(cp.v(0, 250), cp.v(0, 0));\n            this.stat = RunnerStat.jumpUp;\n            this.sprite.stopAllActions();\n            this.sprite.runAction(this.jumpUpAction);\n        }\n    },\n\n\n\n\nAnd also we should tie these things up int the \nupdate\n function:\n\n\n//in the update method of AnimationLayer\n    // check and update runner stat\n        var vel = this.body.getVel();\n        if (this.stat == RunnerStat.jumpUp) {\n            if (vel.y \n 0.1) {\n                this.stat = RunnerStat.jumpDown;\n                this.sprite.stopAllActions();\n                this.sprite.runAction(this.jumpDownAction);\n            }\n        } else if (this.stat == RunnerStat.jumpDown) {\n            if (vel.y == 0) {\n                this.stat = RunnerStat.running;\n                this.sprite.stopAllActions();\n                this.sprite.runAction(this.runningAction);\n            }\n        }\n\n\n\n\nOne more word, don't forget the cleanup stuff. We should release the created actions when the AnimationLayer exit.\n\n\n    onExit:function() {\n        this.runningAction.release();\n        this.jumpUpAction.release();\n        this.jumpDownAction.release();\n        this._super();\n    },\n\n\n\n\nYou may also want to check whether all the created js files are loaded in \ncocos2d.js\n file or not.\n\n\nSummary\n\n\nCongratulations! You have finished another epic tutorial again.\n\n\nLet's see what we have done in this tutorial.\n\n\nAt first, we have learned how to update our game hud elements.\n\n\nThen we added the game over logic.\n\n\nAt last, we have created a simple gesture recognizer to handle the controlling of our hero's jumping action.\n\n\nYou can download the final project from \nhere\n.\n\n\nWhere to go from here?\n\n\nIn the next tutorial, we will cover the final bolts and nuts of the parkour game. Keep tuning!", 
            "title": "_Chapter9"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter9/en/index.html#implement-game-over-logic-and-more", 
            "text": "", 
            "title": "Implement Game Over Logic and More"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter9/en/index.html#introduction", 
            "text": "In this tutorial, we'll implement out game over logic, updating HUD and a simple gesture recognizer.\nWith out any further ado, let's dive into the tutorial.", 
            "title": "Introduction"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter9/en/index.html#update-game-hud", 
            "text": "", 
            "title": "Update Game HUD"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter9/en/index.html#update-player-running-meters", 
            "text": "At first, let's add a  updateMeter  method into the StatusLayer Class:      updateMeter:function (px) {\n        this.labelMeter.setString(parseInt(px / 10) +  M );\n    }  This method constantly change the value of  labelMeter . Here we use  parseInt  function to convert the result into a integer value.  The argument  px  stands for pixel, so every 10 px is one meter.  Now, we should call this method in each frame.  Open AnimationLayer.js and add the following code at the beginning of  update  function:          // update meter\n        var statusLayer = this.getParent().getParent().getChildByTag(TagOfLayer.Status);\n        statusLayer.updateMeter(this.sprite.getPositionX() - g_runnerStartX);", 
            "title": "Update Player Running Meters"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter9/en/index.html#update-coin-count", 
            "text": "When the player collect a coin, we should update the coin indicator.  At first, let's add a  addCoin  method in StatusLayer:      addCoin:function (num) {\n        this.coins += num;\n        this.labelCoin.setString( Coins:  + this.coins);\n    },  When the player collide with the coin, we should call this method.  Now it's time to implement it.  Open  PlayScene.js  and add the following code at the end of  colisionCoinBegin  method:          var statusLayer = this.getChildByTag(TagOfLayer.Status);\n        statusLayer.addCoin(1);  Every time the player collides with the coin, the  colisionCoinBegin  method will be called and our coin count will be increase by one.  Save all files and git it a try:)  Here is the screenshot:", 
            "title": "Update Coin Count"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter9/en/index.html#add-game-over-logic-into-the-game", 
            "text": "", 
            "title": "Add Game Over Logic into the Game"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter9/en/index.html#design-and-implement-the-game-over-layer", 
            "text": "In order to keep things simple, we just add a menu item at the center of our game over layer.  When you click the  restart  menu, the game will restart again.  So the design is very trivial, let's implement it.  Here is the whole implementation of  GameOverLayer.js :  var GameOverLayer = cc.LayerColor.extend({\n    // constructor\n    ctor:function () {\n        this._super();\n        this.init();\n    },\n    init:function () {\n        this._super(cc.color(0, 0, 0, 180));\n        var winSize = cc.director.getWinSize();\n\n        var centerPos = cc.p(winSize.width / 2, winSize.height / 2);\n        cc.MenuItemFont.setFontSize(30);\n        var menuItemRestart = new cc.MenuItemSprite(\n            new cc.Sprite(res.restart_n_png),\n            new cc.Sprite(res.restart_s_png),\n            this.onRestart, this);\n        var menu = new cc.Menu(menuItemRestart);\n        menu.setPosition(centerPos);\n        this.addChild(menu);\n    },\n    onRestart:function (sender) {\n        cc.director.resume();\n        cc.director.runScene(new PlayScene());\n    }\n});  Here we used two sprite named  s_restart_n  and  s_restart_s  to create our restart menu item.  So we should add the resource file into the  res  directory and define the resources path.  Open  resource.js  and add the following code lines:      restart_n_png :  res/restart_n.png ,\n    restart_s_png :  res/restart_s.png \n\n//add the following two lines at the end of g_resources array.\n    res.restart_n_png,\n    res.restart_s_png  The code of  init  method is self-explanation. But you should pay attention to the callback  onRestart  method.  We have called the  resume  function of cc.Director. Why should be do this? Because we call  pause  method when the player die.", 
            "title": "Design and Implement the Game Over Layer"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter9/en/index.html#game-over-when-the-player-collide-with-a-rock", 
            "text": "Now, let's display the game over layer when the player collide with the rock.  Open  PlayScene  and add the following code lines at the end of  collisionRockBegin  method:    collisionRockBegin:function (arbiter, space) {\n        cc.log( ==game over );\n        cc.director.pause();\n        this.addChild(new GameOverLayer());\n    },  Yeah, it's done. Now run the game again.  Here is the final screenshot:", 
            "title": "Game Over When The Player Collide with a Rock"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter9/en/index.html#implement-your-own-simple-gesture-recognizer", 
            "text": "At this section, we will design a very simple gesture recognizer.  When we swipe our finger on the screen from bottom to up, the recognizer will detect it.  The algorithm for detecting the swipe gesture is very straightforward. When the touch begin event is detected, we store the first\ntouch point in the array. When the touch moves event is detected, we append the touch point at the end of point array.  We can simply compare the difference of x axis or y axis of two adjacent point to determine the swipe direction.  Here is the code snippets to do the magic:  function Point(x, y)\n{\n    this.X = x;\n    this.Y = y;\n}\n\n// class define\nfunction SimpleRecognizer()\n{\n    this.points = [];\n    this.result =  ;\n}\n\n// be called in onTouchBegan\nSimpleRecognizer.prototype.beginPoint = function(x, y) {\n    this.points = [];\n    this.result =  ;\n    this.points.push(new Point(x, y));\n}\n\n// be called in onTouchMoved\nSimpleRecognizer.prototype.movePoint = function(x, y) {\n    this.points.push(new Point(x, y));\n\n    if (this.result ==  not support ) {\n        return;\n    }\n\n    var newRtn =  ;\n    var len = this.points.length;\n    var dx = this.points[len - 1].X - this.points[len - 2].X;\n    var dy = this.points[len - 1].Y - this.points[len - 2].Y;\n\n    if (Math.abs(dx)   Math.abs(dy)) {\n        if (dx   0) {\n            newRtn =  right ;\n        } else {\n            newRtn =  left ;\n        }\n    } else {\n        if (dy   0) {\n            newRtn =  up ;\n        } else {\n            newRtn =  down ;\n        }\n    }\n\n    // first set result\n    if (this.result ==  ) {\n        this.result = newRtn;\n        return;\n    }\n\n    // if diretcory change, not support Recongnizer\n    if (this.result != newRtn) {\n        this.result =  not support ;\n    }\n}\n\n// be called in onTouchEnded\nSimpleRecognizer.prototype.endPoint = function() {\n    if (this.points.length   3) {\n        return  error ;\n    }\n    return this.result;\n}\n\nSimpleRecognizer.prototype.getPoints = function() {\n    return this.points;\n}  After the gesture is detected, we can call  endPoint  of the SimpleRecognizer to get the final result.  Currently it supports four simple types: up, down, left and right. You can extend your own more complex one.", 
            "title": "Implement Your Own Simple Gesture Recognizer"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter9/en/index.html#handling-touch-event-player-jumping-animation-and-logic", 
            "text": "", 
            "title": "Handling Touch Event, Player Jumping Animation and Logic"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter9/en/index.html#add-jumping-animation-of-the-player", 
            "text": "In order to implement the jumping animation, we should prepare our game arts first. Here we have done it for you.  You can download the whole project from the  Summary  section and copy paste the running.plist and running.png file into the  res  directory.  When the game starts, the player will be running infinite until him collide with the rock. We want to let the player jump by swiping upwards.  Thus we can play the game a little bit longer.  When the player jumps up or jumps down, we need to play corresponding animations.  So at first, let's add two more animation action member variables into the AnimationLayer:  jumpUpAction:null,\njumpDownAction:null,  And then let's add a new method named  initAction :    initAction:function () {\n        // init runningAction\n        var animFrames = [];\n        // num equal to spriteSheet\n        for (var i = 0; i   8; i++) {\n            var str =  runner  + i +  .png ;\n            var frame = cc.spriteFrameCache.getSpriteFrame(str);\n            animFrames.push(frame);\n        }\n\n        var animation = new cc.Animation(animFrames, 0.1);\n        this.runningAction = new cc.RepeatForever(new cc.Animate(animation));\n        this.runningAction.retain();\n\n        // init jumpUpAction\n        animFrames = [];\n        for (var i = 0; i   4; i++) {\n            var str =  runnerJumpUp  + i +  .png ;\n            var frame = cc.spriteFrameCache.getSpriteFrame(str);\n            animFrames.push(frame);\n        }\n\n        animation = new cc.Animation(animFrames, 0.2);\n        this.jumpUpAction = new cc.Animate(animation);\n        this.jumpUpAction.retain();\n\n        // init jumpDownAction\n        animFrames = [];\n        for (var i = 0; i   2; i++) {\n            var str =  runnerJumpDown  + i +  .png ;\n            var frame = cc.spriteFrameCache.getSpriteFrame(str);\n            animFrames.push(frame);\n        }\n\n        animation = new cc.Animation(animFrames, 0.3);\n        this.jumpDownAction = new cc.Animate(animation);\n        this.jumpDownAction.retain();\n    },  In this function, we have initialized all the animations of the players.  At lasts, let's remove the initialize code of runningAction we did before in the  init  function and call  initAction  method instead.  //init  actions\nthis.initAction();\n//        // init runningAction\n//        var animFrames = [];\n//        for (var i = 0; i   8; i++) {\n//            var str =  runner  + i +  .png ;\n//            var frame = cc.spriteFrameCache.getSpriteFrame(str);\n//            animFrames.push(frame);\n//        }\n//        var animation = new cc.Animation(animFrames, 0.1);\n//        this.runningAction = new cc.RepeatForever(new cc.Animate(animation));", 
            "title": "Add Jumping Animation of the Player"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter9/en/index.html#handling-touch-event", 
            "text": "Now it's time to handle touch event. At first, we should enable touch handling of the AnimationLayer.  Add the following code snippets at the end of  init  method:   cc.eventManager.addListener({\n            event: cc.EventListener.TOUCH_ONE_BY_ONE,\n            swallowTouches: true,\n            onTouchBegan: this.onTouchBegan,\n            onTouchMoved: this.onTouchMoved,\n            onTouchEnded: this.onTouchEnded\n        }, this)  These two code lines can activate the touch dispatching function.  Now let's add three callbacks we needed to handle our touch event:   onTouchBegan:function(touch, event) {\n        var pos = touch.getLocation();\n        event.getCurrentTarget().recognizer.beginPoint(pos.x, pos.y);\n        return true;\n    },\n\n    onTouchMoved:function(touch, event) {\n        var pos = touch.getLocation();\n        event.getCurrentTarget().recognizer.movePoint(pos.x, pos.y);\n    },\n\n    onTouchEnded:function(touch, event) {\n        var rtn = event.getCurrentTarget().recognizer.endPoint();\n        cc.log( rnt =   + rtn);\n        switch (rtn) {\n            case  up :\n                event.getCurrentTarget().jump();\n                break;\n            default:\n                break;\n        }\n    },  When you touch the screen the  onTouchBegan  method will be called. When you hold your finger and move it around, the  onTouchMoved  method will\nbe called. When you release your finger, the  onTouchEnded  method will be called.  Here we have used our simple gesture recognizer to detect the \"swipe out\" gesture.", 
            "title": "Handling Touch Event"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter9/en/index.html#wrap-them-all", 
            "text": "Now it's time to wrap them all.  At first, add the following enumerations in the beginning of the AnimationLayer:  // define enum for runner status\nif(typeof RunnerStat ==  undefined ) {\n    var RunnerStat = {};\n    RunnerStat.running = 0;\n    RunnerStat.jumpUp = 1;\n    RunnerStat.jumpDown = 2;\n};  We use these enums to represent different state of the player.  Then we should add another two member variables in the AnimationLayer:   recognizer:null,\n stat:RunnerStat.running,// init with running status  And init the recognizer at the end of  init  method:   this.recognizer = new SimpleRecognizer();  At last, we should implement our jump method:   jump:function () {\n        cc.log( jump );\n        if (this.stat == RunnerStat.running) {\n            this.body.applyImpulse(cp.v(0, 250), cp.v(0, 0));\n            this.stat = RunnerStat.jumpUp;\n            this.sprite.stopAllActions();\n            this.sprite.runAction(this.jumpUpAction);\n        }\n    },  And also we should tie these things up int the  update  function:  //in the update method of AnimationLayer\n    // check and update runner stat\n        var vel = this.body.getVel();\n        if (this.stat == RunnerStat.jumpUp) {\n            if (vel.y   0.1) {\n                this.stat = RunnerStat.jumpDown;\n                this.sprite.stopAllActions();\n                this.sprite.runAction(this.jumpDownAction);\n            }\n        } else if (this.stat == RunnerStat.jumpDown) {\n            if (vel.y == 0) {\n                this.stat = RunnerStat.running;\n                this.sprite.stopAllActions();\n                this.sprite.runAction(this.runningAction);\n            }\n        }  One more word, don't forget the cleanup stuff. We should release the created actions when the AnimationLayer exit.      onExit:function() {\n        this.runningAction.release();\n        this.jumpUpAction.release();\n        this.jumpDownAction.release();\n        this._super();\n    },  You may also want to check whether all the created js files are loaded in  cocos2d.js  file or not.", 
            "title": "Wrap them all"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter9/en/index.html#summary", 
            "text": "Congratulations! You have finished another epic tutorial again.  Let's see what we have done in this tutorial.  At first, we have learned how to update our game hud elements.  Then we added the game over logic.  At last, we have created a simple gesture recognizer to handle the controlling of our hero's jumping action.  You can download the final project from  here .", 
            "title": "Summary"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter9/en/index.html#where-to-go-from-here", 
            "text": "In the next tutorial, we will cover the final bolts and nuts of the parkour game. Keep tuning!", 
            "title": "Where to go from here?"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter10/en/index.html", 
            "text": "Add Audio Effect into Parkour Game\n\n\nIntroduction\n\n\nIn this tutorial, I want to show you how to add audio support into our Parkour game.\n\n\nTime in Action\n\n\nAudio Formats Supported by HTML5\n\n\nAt first, let's see which formats are supported by HTML5:\n\n\n\nHere we use \nogg\n format. Because it is well supported by Android and Chrome.\n\n\nAdd Audio Support into Our Game\n\n\nCopy Audio Resources\n\n\nAt first, let's copy required audio files into our \nres\n directory. Audio files can be found in the sample project which can be downloaded from the \nSummary\n section.\n\n\nWe use \nbackground.ogg\n for background music, \njump.ogg\n and \npickup_coin.ogg\n for jumping and collecting the coins.\n\n\nSecondly, let's define some global variables in the \nresource.js\n file:\n\n\nvar res = {\n    // Append to the list\n    background_mp3 : \nres/background.mp3\n,\n    jump_mp3 : \nres/jump.mp3\n,\n    pickup_coin_mp3 : \nres/pickup_coin.mp3\n\n};\n\nvar g_resources = [\n    // Append to the list\n    res.background_mp3,\n    res.jump_mp3,\n    res.pickup_coin_mp3\n];\n\n\n\n\nNote:\n It is recommended to have the same audio file in both \n\"mp3\"\n and \n\"ogg\"\n format at the same time to ensure compatibility across all browsers. And you don't need to list both in resource.js, please just list \n\"mp3\"\n format which has better compatibility with iOS and Mac when you run your game on devices.\n\n\nAdd Audio Handling Code into The Game\n\n\nAt first, add the background music when entering the PlayScene:\n\n\nNote:\n Add the following code at the end of \nonEnter\n function in PlayScene.js.\n\n\n//add background music\ncc.audioEngine.playMusic(res.background_mp3, true);\n\nthis.scheduleUpdate();\n\n\n\n\nThen, when the game is over, we should stop the background music. So add the following code snippets in \ncollosionRockBegin\n method:\n\n\n //stop bg music\ncc.audioEngine.stopMusic();\n\n\n\n\nAt last, let's add jumping audio effect and collecting coin audio effect.\n\n\n//add the jumping audio effect in *jump* method of AnimationLayer\n//Jump music\ncc.audioEngine.playEffect(res.jump_mp3);\n\n\n\n\n//add the collect coin audio effect in *collisionCoinBegin* method of PlayScene\ncc.audioEngine.playEffect(res.pickup_coin_mp3);\n\n\n\n\nSave all the changes and run the game. Now your game rock with a world full of audios.\n\n\nSummary\n\n\nIn the tutorial, we have seen that how easy it is to add audio support into an existing game. You can download the whole project from \nhere\n.\n\n\nWhere to go from here?\n\n\nNow the journey of Parkour game has reached a milestone. In the following tutorials, we will add cross-platform support and do some encryption to our js files.\n\n\nKeep tuning!", 
            "title": "_Chapter10"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter10/en/index.html#add-audio-effect-into-parkour-game", 
            "text": "", 
            "title": "Add Audio Effect into Parkour Game"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter10/en/index.html#introduction", 
            "text": "In this tutorial, I want to show you how to add audio support into our Parkour game.", 
            "title": "Introduction"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter10/en/index.html#time-in-action", 
            "text": "", 
            "title": "Time in Action"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter10/en/index.html#audio-formats-supported-by-html5", 
            "text": "At first, let's see which formats are supported by HTML5:  Here we use  ogg  format. Because it is well supported by Android and Chrome.", 
            "title": "Audio Formats Supported by HTML5"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter10/en/index.html#add-audio-support-into-our-game", 
            "text": "", 
            "title": "Add Audio Support into Our Game"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter10/en/index.html#copy-audio-resources", 
            "text": "At first, let's copy required audio files into our  res  directory. Audio files can be found in the sample project which can be downloaded from the  Summary  section.  We use  background.ogg  for background music,  jump.ogg  and  pickup_coin.ogg  for jumping and collecting the coins.  Secondly, let's define some global variables in the  resource.js  file:  var res = {\n    // Append to the list\n    background_mp3 :  res/background.mp3 ,\n    jump_mp3 :  res/jump.mp3 ,\n    pickup_coin_mp3 :  res/pickup_coin.mp3 \n};\n\nvar g_resources = [\n    // Append to the list\n    res.background_mp3,\n    res.jump_mp3,\n    res.pickup_coin_mp3\n];  Note:  It is recommended to have the same audio file in both  \"mp3\"  and  \"ogg\"  format at the same time to ensure compatibility across all browsers. And you don't need to list both in resource.js, please just list  \"mp3\"  format which has better compatibility with iOS and Mac when you run your game on devices.", 
            "title": "Copy Audio Resources"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter10/en/index.html#add-audio-handling-code-into-the-game", 
            "text": "At first, add the background music when entering the PlayScene:  Note:  Add the following code at the end of  onEnter  function in PlayScene.js.  //add background music\ncc.audioEngine.playMusic(res.background_mp3, true);\n\nthis.scheduleUpdate();  Then, when the game is over, we should stop the background music. So add the following code snippets in  collosionRockBegin  method:   //stop bg music\ncc.audioEngine.stopMusic();  At last, let's add jumping audio effect and collecting coin audio effect.  //add the jumping audio effect in *jump* method of AnimationLayer\n//Jump music\ncc.audioEngine.playEffect(res.jump_mp3);  //add the collect coin audio effect in *collisionCoinBegin* method of PlayScene\ncc.audioEngine.playEffect(res.pickup_coin_mp3);  Save all the changes and run the game. Now your game rock with a world full of audios.", 
            "title": "Add Audio Handling Code into The Game"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter10/en/index.html#summary", 
            "text": "In the tutorial, we have seen that how easy it is to add audio support into an existing game. You can download the whole project from  here .", 
            "title": "Summary"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript-v3.0/chapter10/en/index.html#where-to-go-from-here", 
            "text": "Now the journey of Parkour game has reached a milestone. In the following tutorials, we will add cross-platform support and do some encryption to our js files.  Keep tuning!", 
            "title": "Where to go from here?"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter1/en/index.html", 
            "text": "Setting up Cocos2d-HTML5 Development Environment\n\n\nIn this documentation, I will show you how to setup a cocos2d-html5 development environment on MacOS 10.9 -- Yeah! The Maverics.\n\n\nPrerequisites\n\n\nTo follow this tutorials, you should be familiar with the software package  installation process of MacOS.\n\n\nDon't worry, the process is deadly simple.\n\n\nMost of the time, the process is something like this:\n\n\n\n\n\n\nDownload the DMG.\n\n\n\n\n\n\nDouble click to open it.\n\n\n\n\n\n\nDrag and drop the xxx.app to your /Application directory.\n\n\n\n\n\n\nIn this documentation, I will omit the every details of each software package's installation process.\n\n\nDownload the required software packages\n\n\n\n\n\n\nDownload and install WebStorm 7. The current stable release of \nWebStorm 7\n is 7.02.  Why do we choose WebStorm? Because it provides many feature like JavaScript code syntax completion, debugging, syntax highlighting, version system integrated etc. You can go to WebStorm's official website for more information.\n\n\n\n\n\n\nDownload Cocos2d-html5 v2.2 from the official website of Cocos2d-x. Here is the \nLink\n .After you downloaded the Cocos2d-html v2.2. You should unzip it to a proper location. In our case, I unzip it at ~/workspace/Cocos2d-html5.The ~ symbol represents your home directory path, which in our case is /Users/guanghui. \n\n\n\n\n\n\nNote:\n \n\n\nYou can also get the cutting edge version of Cocos2d-html5 through github. Here is the \ncocos2d-html5 github repository\n .The active development work are done in \ndevelop\n branch.\n\n\n\n\nDownload and install Chrome 30 and the \nJetBrains-IDE-support \n  extension.\n\n\n\n\nNote\n\n\n\n\n\n\nDon't try to get the latest beta version of Chrome. Some WebGL APIs has changed and you will suffer the API change problems.\n\n\n\n\n\n\nSince the current stable release of Chrome is 31.0.1650.57. But it doesn't work well with Cocos2d-html5-v2.2. If you do want to use this version due to some mandatory reasons, you should refer to \nthis post \n for more information.In the near future, the Cocos2d-html5 team will release a new version and at that time you don't need to hack the source code any more to work with Chrome 31.\n\n\n\n\n\n\nAll right, let's see how to configure WebStorm 7.1 to develop and debug our Cocos2d-html5 applications.\n\n\nConfigure WebStorm to work with Cocos2d-html5\n\n\nAt first, you should launch WebStorm 7. If it is your first time to launch WebStorm, it will ask you to choose your personal preference like choosing key mappings. \n\n\nHere is my screenshot of launching WebStorm:\n\n\nFigure 1\n\n\n\n\nNote:\n \n   The section Recent Project should be empty if it is your first time to run WebStorm.\n\n\nNow, Let's try Cocos2d-html5 within WebStorm.\n\n\n\n\n\n\nCreate a project from Cocos2d-html5\n\n\nAs we can see from the above picture, you should choose \nCreate New Project from Existing Files\n \n\n\nThen it will prompt you with the following options:\n\n\nFigure 2\n\n\n\n\n\n\n\n\nChoose \nSource files are in a local directory, no Web server is yet configured\n and click \nNext\n to continue.\n\n\nFigure 3\n\n\n\n\n\n\n\n\nAt this step, you should expand the directory tree to specify where you put your Cocos2d-html5 source code. After you have specified the correct directory, note that the \nFinish\n button is still gray.\n\n\n\n\n\n\nNow we should set the directory as \nProject Root\n. Click the \nProject Root\n button and the \nFinish\n button will be activate.\n\n\nFigure 4\n\n\n\n\n\n\n\n\nCongratulations! You have successfully configured the Cocos2d-html5 project for WebStorm.\n\n\n\n\n\n\nPlay with Cocos2d-html5\n\n\nSince you have added the entire Cocos2d-html5 directory to WebStorm 7. WebStorm will parse all the Cocos2d-html5 source code. If you open \nHelloHTML5World/src/myApp.js\n, you can obtain the ability of accurate syntax completion.\n\n\nFigure 5\n\n\n\n\nIf you have a third party JavaScript library in your Cocos2d-html5 game apps, you can also add it to the WebStorm library for parsing and enable realtime syntax autocompletion.\n\n\nHere is the instructions:\n\n\n(Optional) Add a third party library for parsing\n\n\n\n\n\n\nClick \nSettings\n to launch your project settings dialog:\n\n\nFigure 6\n\n\n\n\n\n\n\n\nAfter clicking the \nSettings\n menu, it will popup the followings dialog:\n\n\nFigure 7\n\n\n\n\n\n\n\n\nNow you should click \nAdd...\n button and it will prompts you to specify the location of your JavaScript library. \n\n\nFigure 8\n\n\n\n\n\n\n\n\nDebug Cocos2d-html5 JavaScript code within WebStorm\n\n\nNow it's time for us to debugging Cocos2d-html5 code.\n\n\nConnect WebStorm to Chrome with JB chrome extensions\n\n\n\n\n\n\nRight click the \nindex.html\n under \n~/Github/Cocos2d-html5\n and choose \nDebug 'index.html'\n:\n\n\nFigure 9\n\n\n\n2. Now it will open your Chrome automatically. If you put your mouse above the JB plugin,\nit will show you that it has been connected with WebStrom 7.02:\n\n\nFigure 10\n\n\n\n\n\n\n\n\nNote:\n This is step is very straightforward, once you have installed the plugin--\"JetBrains IDE support\". When you click the debug menu in WebStorm, it will connect to chrome automatically. How convenience it is! You can also click the \nJB\n icon in the right side of Chrome's side bar and it will bring you to the WebStorm IDE immediately.\n\n\nDebug JavaScript code in WebStorm\n\n\nBack to WebStorm and double click \nHelloHTML5World/src/myApp.js\n to view the source code.\n\n\n\n\n\n\nSet the break point. Right click the left sidebar of myApp.js source code viewport.\n\n\nFigure 11\n\n\n\n\n\n\n\n\nStart debugging. Open your chrome browser and click \nHelloHTML5World\n link to open the sample project. Then back to your WebStorm by clicking JB icon. And the program will stop at the break point we have just set. And the editor will switch to Debug View:\n\n\nFigure 12\n\n\n\n\n\n\n\n\nNow you can do debugging things like step out, step into, step over, continue executing etc. \n\n\n\n\n\n\nSummary\n\n\nIn this tutorial, I have shown you the basic steps to configure Cocos2d-html5 to work with WebStorm 7, including configuring syntax aware auto complete and debugging. The process is quite simple and straightforward. If you have any questions or suggestion of this tutorials, please let us know. we will appreciate your contribution.\n\n\nWhere to go from here\n\n\nIn the next tutorial, I will show you how to setup a new Cocos2d-html5 project. And we will walk through the built-in tests and sample games of Cocos2d-html5.", 
            "title": "_Chapter1"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter1/en/index.html#setting-up-cocos2d-html5-development-environment", 
            "text": "In this documentation, I will show you how to setup a cocos2d-html5 development environment on MacOS 10.9 -- Yeah! The Maverics.", 
            "title": "Setting up Cocos2d-HTML5 Development Environment"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter1/en/index.html#prerequisites", 
            "text": "To follow this tutorials, you should be familiar with the software package  installation process of MacOS.  Don't worry, the process is deadly simple.  Most of the time, the process is something like this:    Download the DMG.    Double click to open it.    Drag and drop the xxx.app to your /Application directory.    In this documentation, I will omit the every details of each software package's installation process.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter1/en/index.html#download-the-required-software-packages", 
            "text": "Download and install WebStorm 7. The current stable release of  WebStorm 7  is 7.02.  Why do we choose WebStorm? Because it provides many feature like JavaScript code syntax completion, debugging, syntax highlighting, version system integrated etc. You can go to WebStorm's official website for more information.    Download Cocos2d-html5 v2.2 from the official website of Cocos2d-x. Here is the  Link  .After you downloaded the Cocos2d-html v2.2. You should unzip it to a proper location. In our case, I unzip it at ~/workspace/Cocos2d-html5.The ~ symbol represents your home directory path, which in our case is /Users/guanghui.     Note:    You can also get the cutting edge version of Cocos2d-html5 through github. Here is the  cocos2d-html5 github repository  .The active development work are done in  develop  branch.   Download and install Chrome 30 and the  JetBrains-IDE-support    extension.   Note    Don't try to get the latest beta version of Chrome. Some WebGL APIs has changed and you will suffer the API change problems.    Since the current stable release of Chrome is 31.0.1650.57. But it doesn't work well with Cocos2d-html5-v2.2. If you do want to use this version due to some mandatory reasons, you should refer to  this post   for more information.In the near future, the Cocos2d-html5 team will release a new version and at that time you don't need to hack the source code any more to work with Chrome 31.    All right, let's see how to configure WebStorm 7.1 to develop and debug our Cocos2d-html5 applications.", 
            "title": "Download the required software packages"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter1/en/index.html#configure-webstorm-to-work-with-cocos2d-html5", 
            "text": "At first, you should launch WebStorm 7. If it is your first time to launch WebStorm, it will ask you to choose your personal preference like choosing key mappings.   Here is my screenshot of launching WebStorm:  Figure 1   Note:  \n   The section Recent Project should be empty if it is your first time to run WebStorm.  Now, Let's try Cocos2d-html5 within WebStorm.    Create a project from Cocos2d-html5  As we can see from the above picture, you should choose  Create New Project from Existing Files    Then it will prompt you with the following options:  Figure 2     Choose  Source files are in a local directory, no Web server is yet configured  and click  Next  to continue.  Figure 3     At this step, you should expand the directory tree to specify where you put your Cocos2d-html5 source code. After you have specified the correct directory, note that the  Finish  button is still gray.    Now we should set the directory as  Project Root . Click the  Project Root  button and the  Finish  button will be activate.  Figure 4     Congratulations! You have successfully configured the Cocos2d-html5 project for WebStorm.", 
            "title": "Configure WebStorm to work with Cocos2d-html5"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter1/en/index.html#play-with-cocos2d-html5", 
            "text": "Since you have added the entire Cocos2d-html5 directory to WebStorm 7. WebStorm will parse all the Cocos2d-html5 source code. If you open  HelloHTML5World/src/myApp.js , you can obtain the ability of accurate syntax completion.  Figure 5   If you have a third party JavaScript library in your Cocos2d-html5 game apps, you can also add it to the WebStorm library for parsing and enable realtime syntax autocompletion.  Here is the instructions:", 
            "title": "Play with Cocos2d-html5"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter1/en/index.html#optional-add-a-third-party-library-for-parsing", 
            "text": "Click  Settings  to launch your project settings dialog:  Figure 6     After clicking the  Settings  menu, it will popup the followings dialog:  Figure 7     Now you should click  Add...  button and it will prompts you to specify the location of your JavaScript library.   Figure 8", 
            "title": "(Optional) Add a third party library for parsing"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter1/en/index.html#debug-cocos2d-html5-javascript-code-within-webstorm", 
            "text": "Now it's time for us to debugging Cocos2d-html5 code.", 
            "title": "Debug Cocos2d-html5 JavaScript code within WebStorm"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter1/en/index.html#connect-webstorm-to-chrome-with-jb-chrome-extensions", 
            "text": "Right click the  index.html  under  ~/Github/Cocos2d-html5  and choose  Debug 'index.html' :  Figure 9  \n2. Now it will open your Chrome automatically. If you put your mouse above the JB plugin,\nit will show you that it has been connected with WebStrom 7.02:  Figure 10     Note:  This is step is very straightforward, once you have installed the plugin--\"JetBrains IDE support\". When you click the debug menu in WebStorm, it will connect to chrome automatically. How convenience it is! You can also click the  JB  icon in the right side of Chrome's side bar and it will bring you to the WebStorm IDE immediately.", 
            "title": "Connect WebStorm to Chrome with JB chrome extensions"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter1/en/index.html#debug-javascript-code-in-webstorm", 
            "text": "Back to WebStorm and double click  HelloHTML5World/src/myApp.js  to view the source code.    Set the break point. Right click the left sidebar of myApp.js source code viewport.  Figure 11     Start debugging. Open your chrome browser and click  HelloHTML5World  link to open the sample project. Then back to your WebStorm by clicking JB icon. And the program will stop at the break point we have just set. And the editor will switch to Debug View:  Figure 12     Now you can do debugging things like step out, step into, step over, continue executing etc.", 
            "title": "Debug JavaScript code in WebStorm"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter1/en/index.html#summary", 
            "text": "In this tutorial, I have shown you the basic steps to configure Cocos2d-html5 to work with WebStorm 7, including configuring syntax aware auto complete and debugging. The process is quite simple and straightforward. If you have any questions or suggestion of this tutorials, please let us know. we will appreciate your contribution.", 
            "title": "Summary"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter1/en/index.html#where-to-go-from-here", 
            "text": "In the next tutorial, I will show you how to setup a new Cocos2d-html5 project. And we will walk through the built-in tests and sample games of Cocos2d-html5.", 
            "title": "Where to go from here"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter2/en/index.html", 
            "text": "Hello World Cocos2d-HTML5\n\n\nIn the tutorial, I will show you how to setup a new Cocos2d-html5 project from scratch. Before that, I want to\ngive you a brief description of Cocos2d-html5's directory structures.\n\n\nOverview of Cocos2d-html5 directory structures\n\n\nHere is the Cocos2d-html5 directory structure:\n\n\nFigure1\n\n\n\n\nUnderstanding the directory structures\n\n\nThe directory structures can be separated into four parts:\n\n\nPart1: engine related folders\n\n\n\n\n\n\nThe \nCocos2d\n directory holds all the core engine files. The main components of cocos2d-html5 are implemented in these js files.\n\n\n\n\n\n\nThe \nCocosDenshion\n directory holds all the audio engine related files.\n\n\n\n\n\n\nThe \nextension\n directory holds some useful extension modules, such as EditBox, CocosBuilder Reader and CocoStudio Reader, etc. \n\n\n\n\n\n\nThe folder \nbox2d\n and \nchipmunk\n are third party physics engine.\n\n\n\n\n\n\nPart2: tests,sample games and template\n\n\n\n\n\n\nThe folder \nHelloHTML5World\n contains a simple \nHello World\n sample. When you are new to Cocos2d-htlm5, you may want to give it a try. It is the minimax skeleton of a full Cocos2d-html5 app.\n\n\n\n\n\n\nThe \ntemplate\n is more or less the same as \nHelloHTML5World\n except for that \ntemplate\n is more clean. \nTemplate\n  folder is where you should start from. At the end of part of this tutorial, we will create a new project based on this folder.\n\n\n\n\n\n\nThe \nsamples\n directory, it contains all the \ntests\n of Cocos2d-html5. It also includes some playable sample games. All the tests and games can be run in iOS and android with JavaScript binding. \n\n\n\n\n\n\nPart3: miscellaneous\n\n\n\n\n\n\nThe \nlicense\n directory includes all the license files in this project, as we mentioned before, the license of Cocos2d-html5 is MIT,you can refer to the folder to get more details about the licenses of Cocos2d-html5.\n\n\n\n\n\n\nThe \ntools\n directory includes JS Doc tool and closure compiler. The \ntemplate\n folder contains a build.xml which is a config file for closure compiler, you can package your game into one single file via Ant. \n\n\n\n\n\n\nTaking a look at the built-in examples\n\n\nWhen you have downloaded and configured your Cocos2d-html5 development environment successfully. It is highly recommended  to take a look at the built-in examples. It covers over 90% features of Cocos2d-html5. And it is also the most valuable learning resource that you can get currently. \n\n\nWhen you debug the index.html file within WebStorm, it will open the index.html file in Chrome and you will get the following result:\n\n\nFigure 2\n\n\n\n\nAs we can see, there are many demos and sample games. If you are curious about what Cocos2d-html5 can do , prepare a coffee, sit down and take a look at the built-in sample games. \n\n\nTaking a Look at the Tests\n\n\nIn Figure 2, when you open the link named \u201cTest cases\u201d. It will show you the entire tests built-in with Cocos2d-html5. Here is the screenshot:\n\n\nFigure 3\n\n\n\n\nThe tests are the best learning resources for you. The tests show nearly every features of Cocos2d-html5. You can tweak these tests files and you will get feedback immediately after refresh browser. It is better to have a taste of Cocos2d-html5 this way than reading a huge documentation at the very beginning.\n\n\nTaking a Look at the Sample Games\n\n\nThere are 2 types of full game samples built-in with Cocos2d-html5. All of the source code are completely free and open to you. Here is a brief introduction about these sample games\n\n\nMoonWarrior\n\n\nThe first game I would like to show you is MoonWarrior. It is a vertical shooting game. In this game sample, many useful game techniques are applied, including tiled-map, animation, parallax background etc. Here is the screenshot, you can dive into the source code for more information:\n\n\nFigure 4\n\n\n\n\nFruit Attack\n\n\nThis is a matching game. You can swap the position of the nearby fruits, if there are three or more  fruits with same type in vertical direction or horizontal direction. You are getting a match. And the same fruits will be cleared.  Here is the screenshot:\n\n\nFigure 5\n\n\n\n\nThere are also other type games, you could try it by yourself.\n\n\nSetting up your first \"Hello World\" Project\n\n\nFinally, we are reaching the final important part of this tutorial. Here I wil not really create a \"Hello World\" project. I will take Parkour game as a example. In the future, all of these epic tutorials are about how to make a Parkour game with Cocos2d-html5.\n\n\nCan't help waiting? Let's do it right now!\n\n\nMaking Parkour project skeleton\n\n\nAs we talked before, there is a \ntemplate\n folder under Cocos2d-html5 root directory. Right click the \ntemplate\n folder and choose \nDuplicate\n to create a copy of it. Then modify the \nTemplate Copy\n folder to \nParkour\n.\n\n\nNow open your WebStorm and there will be a new directory in the previous Project Root. Now the project navigator looks like this:\n\n\nFigure 6\n\n\n\n\nRight click the \nindex.html\n in WebStorm and choose \nDebug 'index.html(1)'\n. It will open your Chrome automatically and you have successfully setted up a new project. Cheers! The browser address is \n\n\nhttp://localhost:63342/Cocos2d-html5/Parkour/index.html.\n\n\n\n\nNote:\n\n\nIf the \"Hello World\" png file is not properly displayed in your browser. You can open main.js under Parkour and modify the following code line:\n\n\n   cc.EGLView.getInstance().setDesignResolutionSize(designSize.width, designSize.height, cc.RESOLUTION_POLICY.NO_BORDER);\n\n\n\n\nto\n\n\n   cc.EGLView.getInstance().setDesignResolutionSize(designSize.width, designSize.height, cc.RESOLUTION_POLICY.SHOW_ALL);\n\n\n\n\nWhy should we do this little change? What's the magic? Haha, It is a very long story of Cocos2d-x's Multiple Resolution Adaption. If you want to know more about the mechanism of this topic, refer to \nthis link\n for more information. We will cover this topic in the future tutorials.\n\n\nAfter this modification, save and run, it gives us the classic \nHello World\n screenshot:\n\n\nFigure 7\n\n\n\n\nSample game template code analysis\n\n\nSince the \ntemplate\n brings us so many things, but we even don't know anything about it.\n\n\nSuch as what is the main entry of the template program. How are  these files organized? What does each file do in the sample program? In this section, I will give you some explanation of these questions.\n\n\nTaking a look at all the files of the project\n\n\nAt first, let take a look at all the files and the directory structure:\n\n\n Figure 8\n\n\n\n\nIn the Figure 8, we can see that:\n\n\n\n\n\n\nthe \nres\n directory. It contains all the resource filed needed by our project. Now it only contains some sample pictures. But if you want to add some meta files of your game or some awesome game music files. You should also put them under this folder. You should choose a proper name for each file. You may notice that there are two folders named \nHD\n and \nNormal\n which have the exactly same file name but with different resolutions. They are for \nMultiple resolutions adaption\n. You can just skip it now. In the Figure 7, there is a HelloWrold picture shown on your screen which is the HelloWorld.png. You can double click to view the actual image file in the disk.\n\n\n\n\n\n\nThe \nsrc\n folder. It contains all of your actual game logic code. If there are hundreds of JavaScript source files, you'd better organized them into small chunks using subfolders. Now our template has two JavaScript source files. The \nmyApp.js\n contains the first scene's code of our sample. The \nresource.js\n defines some global variables of the resource.\n\n\n\n\n\n\nThe \nbuild.xm\n file is used for package all of your game source code into one compact file. We have talked about it before.\n\n\n\n\n\n\nThe \nindex.html\n file is the entry point of a HTML5 based web application. It is a HTML5 compatible format. It defines some meta data like setting viewpoint and fullscreen parameters.\n\n\n\n\n\n\nThe \nccos2d-jsb.js\n file is a bridge file between Cocos2d-html5 and Cocos2d-x JavaScript bindings. You can safety leave it out currently.\n\n\n\n\n\n\nThe \ncocos2d.js\n file is the main entry point of our js engine. It uses a auto execution anonymous function to start our game engine.\n\n\n\n\n\n\nThe \nmain.js\n is called by Cocos2d-html5 framework after the cocos2d.js is loaded. It is \nwhere the main function like c/c++ language lies in. The \napplicationDidFinishLanching\n function will define the screen orientation, color format and resource load strategy. It is also the place to create your first game scene and show it on the browser.\n\n\n\n\n\n\nOk, you have known what these files and folder are for. Now it's time to understand the source code and the execution path.\n\n\nAnalysis of the project's execution path\n\n\nIt is very important to know a program's execution path. Here is a picture shows every Cocos2d-html5 project's execution path:\n\n\nFigure 9\n\n\n\n\nFrom Figure 9, we can see that our program is loaded into browser from index.html. Then it moves to Cocos2d.js. In this file, the code logic diverse due to the following config:\n\n\n var c = {\n        COCOS2D_DEBUG:2, \n        box2d:false,\n        chipmunk:false,\n        showFPS:true,\n        loadExtension:false,\n        frameRate:60,\n        renderMode:0,       \n        tag:'gameCanvas',\n        engineDir:'../cocos2d/',\n        //SingleEngineFile:'',\n        appFiles:[\n            'src/resource.js',\n            'src/myApp.js'\n        ]\n    };\n\n\n\n\nLoot at the code piece, there is a object property named \nengineDir\n and a commented object property named \nSingleEngineFile\n which are the key point to decide the execution path of the following program. In the default case, we have specify the engineDir and the execution path will go to \nN\n direction in Figure 9. Thus the main.js will be loaded right after the engine files and before the files specified by \nappFiles\n. It is more clear to read the source code than reading my plain text. But the flow chart will do some favor for you to understand the process better.\n\n\nMaking Some little tweaks of the project\n\n\nAs we known from the previous section, before we actually do some sort of real coding stuff. Let's make some small tweaks to get our hands dirty at first.\n\n\nHiding the FPS in the left corner of your game screen\n\n\nThe section may be a little bit trivial. We can easily achieve this by modifying \nshowFPS\n property to \nfalse\n in cocos2d.js. \n\n\nHere is the code:\n\n\nvar c = {\n        COCOS2D_DEBUG:2,\n        box2d:false,\n        chipmunk:false,\n        showFPS:true,\n        loadExtension:false,\n        frameRate:60,\n        renderMode:0,       \n        tag:'gameCanvas', \n        engineDir:'../cocos2d/',\n        //SingleEngineFile:'',\n        appFiles:[\n            'src/resource.js',\n            'src/myApp.js'\n        ]\n    };\n\n\n\n\nThere are many thing we can tweak by modifying this object's property. I will give your a table of each property's intention.\n\n\n\n\n\n\n\n\nproperty name\n\n\noptions\n\n\nexplanation\n\n\n\n\n\n\n\n\n\n\nCOCOS2D_DEBUG\n\n\n0,1,2\n\n\n0 to turn debug off, 1 for basic debug, and 2 for full debug\n\n\n\n\n\n\nbox2d\n\n\ntrue or false\n\n\nwhether to load box2d physic engine or not in your project\n\n\n\n\n\n\nchipmunk\n\n\ntrue or false\n\n\nwhether to load chipmunk physic engine or not in your project\n\n\n\n\n\n\nshowFPS\n\n\ntrue or false\n\n\ntoggle FPS visibility\n\n\n\n\n\n\nloadExtension\n\n\ntrue or false\n\n\nwhether to load cocos2d extension library or not in your project\n\n\n\n\n\n\nframeRate\n\n\na positive number above 24, usually 60-30\n\n\nadjust the frame rate of your game\n\n\n\n\n\n\nrenderMode\n\n\n0,1,2\n\n\nChoose of RenderMode: 0(default), 1(Canvas only), 2(WebGL only)\n\n\n\n\n\n\ntag\n\n\n\"gameCanvas\"\n\n\nthe dom element to run cocos2d on\n\n\n\n\n\n\nengineDir\n\n\nthe engine directory related to your project\n\n\nspecify the directory the engine code\n\n\n\n\n\n\nSingleEngineFile\n\n\na single game js file\n\n\nthis file can be generated by Google closure compiler\n\n\n\n\n\n\nappFiles\n\n\na list of your game source code\n\n\nadd your own file lists after myApp.js\n\n\n\n\n\n\n\n\nThe rest of cocos2d.js  are some boilerplate code like obtaining DOM element by tag and setting up the game running environment. If you are curious about it, go ahead and dive into the source code.\n\n\nModify the design resolution size\n\n\nNow Cocos2d-html5 take web browser as a full screen game canvas. We don't need to manually adjust the canvas size any more. We just need to care about the design resolution size. In order to let our game to run seamlessly on iOS and Android with JavaScript binding technics. We should change the design resolution size to 480*320. Open you main.js and in function \napplicationDidFinishLaunching\n change \ndesignSize\n to cc.Size(480,320).\n\n\nvar designSize = cc.size(480, 320);\n\n\n\n\nAnd you also should make resolution policy to \nSHOW_ALL\n:\n\n\n        cc.EGLView.getInstance().setDesignResolutionSize(designSize.width, designSize.height, cc.RESOLUTION_POLICY.SHOW_ALL);\n\n\n\n\nIf you are curious about why  we should do this, please refer to \nthis post\n for more information.\n\n\nSummary\n\n\nIn this tutorial, we have talked about the directory structures and the built-in tests and sample games of cocos2d-html5. We also created our first project based on the template provided by Cocos2d-html5. In the last part, we took effort to analysis the files and the code structures of the template.\n\n\nWhere to go from here?\n\n\nIn the next tutorial, I will show you how to set up your first game main menu scene. We will do more coding with Cocos2d-html5.", 
            "title": "_Chapter2"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter2/en/index.html#hello-world-cocos2d-html5", 
            "text": "In the tutorial, I will show you how to setup a new Cocos2d-html5 project from scratch. Before that, I want to\ngive you a brief description of Cocos2d-html5's directory structures.", 
            "title": "Hello World Cocos2d-HTML5"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter2/en/index.html#overview-of-cocos2d-html5-directory-structures", 
            "text": "Here is the Cocos2d-html5 directory structure:  Figure1", 
            "title": "Overview of Cocos2d-html5 directory structures"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter2/en/index.html#understanding-the-directory-structures", 
            "text": "The directory structures can be separated into four parts:", 
            "title": "Understanding the directory structures"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter2/en/index.html#part1-engine-related-folders", 
            "text": "The  Cocos2d  directory holds all the core engine files. The main components of cocos2d-html5 are implemented in these js files.    The  CocosDenshion  directory holds all the audio engine related files.    The  extension  directory holds some useful extension modules, such as EditBox, CocosBuilder Reader and CocoStudio Reader, etc.     The folder  box2d  and  chipmunk  are third party physics engine.", 
            "title": "Part1: engine related folders"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter2/en/index.html#part2-testssample-games-and-template", 
            "text": "The folder  HelloHTML5World  contains a simple  Hello World  sample. When you are new to Cocos2d-htlm5, you may want to give it a try. It is the minimax skeleton of a full Cocos2d-html5 app.    The  template  is more or less the same as  HelloHTML5World  except for that  template  is more clean.  Template   folder is where you should start from. At the end of part of this tutorial, we will create a new project based on this folder.    The  samples  directory, it contains all the  tests  of Cocos2d-html5. It also includes some playable sample games. All the tests and games can be run in iOS and android with JavaScript binding.", 
            "title": "Part2: tests,sample games and template"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter2/en/index.html#part3-miscellaneous", 
            "text": "The  license  directory includes all the license files in this project, as we mentioned before, the license of Cocos2d-html5 is MIT,you can refer to the folder to get more details about the licenses of Cocos2d-html5.    The  tools  directory includes JS Doc tool and closure compiler. The  template  folder contains a build.xml which is a config file for closure compiler, you can package your game into one single file via Ant.", 
            "title": "Part3: miscellaneous"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter2/en/index.html#taking-a-look-at-the-built-in-examples", 
            "text": "When you have downloaded and configured your Cocos2d-html5 development environment successfully. It is highly recommended  to take a look at the built-in examples. It covers over 90% features of Cocos2d-html5. And it is also the most valuable learning resource that you can get currently.   When you debug the index.html file within WebStorm, it will open the index.html file in Chrome and you will get the following result:  Figure 2   As we can see, there are many demos and sample games. If you are curious about what Cocos2d-html5 can do , prepare a coffee, sit down and take a look at the built-in sample games.", 
            "title": "Taking a look at the built-in examples"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter2/en/index.html#taking-a-look-at-the-tests", 
            "text": "In Figure 2, when you open the link named \u201cTest cases\u201d. It will show you the entire tests built-in with Cocos2d-html5. Here is the screenshot:  Figure 3   The tests are the best learning resources for you. The tests show nearly every features of Cocos2d-html5. You can tweak these tests files and you will get feedback immediately after refresh browser. It is better to have a taste of Cocos2d-html5 this way than reading a huge documentation at the very beginning.", 
            "title": "Taking a Look at the Tests"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter2/en/index.html#taking-a-look-at-the-sample-games", 
            "text": "There are 2 types of full game samples built-in with Cocos2d-html5. All of the source code are completely free and open to you. Here is a brief introduction about these sample games", 
            "title": "Taking a Look at the Sample Games"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter2/en/index.html#moonwarrior", 
            "text": "The first game I would like to show you is MoonWarrior. It is a vertical shooting game. In this game sample, many useful game techniques are applied, including tiled-map, animation, parallax background etc. Here is the screenshot, you can dive into the source code for more information:  Figure 4", 
            "title": "MoonWarrior"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter2/en/index.html#fruit-attack", 
            "text": "This is a matching game. You can swap the position of the nearby fruits, if there are three or more  fruits with same type in vertical direction or horizontal direction. You are getting a match. And the same fruits will be cleared.  Here is the screenshot:  Figure 5   There are also other type games, you could try it by yourself.", 
            "title": "Fruit Attack"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter2/en/index.html#setting-up-your-first-hello-world-project", 
            "text": "Finally, we are reaching the final important part of this tutorial. Here I wil not really create a \"Hello World\" project. I will take Parkour game as a example. In the future, all of these epic tutorials are about how to make a Parkour game with Cocos2d-html5.  Can't help waiting? Let's do it right now!", 
            "title": "Setting up your first \"Hello World\" Project"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter2/en/index.html#making-parkour-project-skeleton", 
            "text": "As we talked before, there is a  template  folder under Cocos2d-html5 root directory. Right click the  template  folder and choose  Duplicate  to create a copy of it. Then modify the  Template Copy  folder to  Parkour .  Now open your WebStorm and there will be a new directory in the previous Project Root. Now the project navigator looks like this:  Figure 6   Right click the  index.html  in WebStorm and choose  Debug 'index.html(1)' . It will open your Chrome automatically and you have successfully setted up a new project. Cheers! The browser address is   http://localhost:63342/Cocos2d-html5/Parkour/index.html.  Note:  If the \"Hello World\" png file is not properly displayed in your browser. You can open main.js under Parkour and modify the following code line:     cc.EGLView.getInstance().setDesignResolutionSize(designSize.width, designSize.height, cc.RESOLUTION_POLICY.NO_BORDER);  to     cc.EGLView.getInstance().setDesignResolutionSize(designSize.width, designSize.height, cc.RESOLUTION_POLICY.SHOW_ALL);  Why should we do this little change? What's the magic? Haha, It is a very long story of Cocos2d-x's Multiple Resolution Adaption. If you want to know more about the mechanism of this topic, refer to  this link  for more information. We will cover this topic in the future tutorials.  After this modification, save and run, it gives us the classic  Hello World  screenshot:  Figure 7", 
            "title": "Making Parkour project skeleton"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter2/en/index.html#sample-game-template-code-analysis", 
            "text": "Since the  template  brings us so many things, but we even don't know anything about it.  Such as what is the main entry of the template program. How are  these files organized? What does each file do in the sample program? In this section, I will give you some explanation of these questions.", 
            "title": "Sample game template code analysis"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter2/en/index.html#taking-a-look-at-all-the-files-of-the-project", 
            "text": "At first, let take a look at all the files and the directory structure:   Figure 8   In the Figure 8, we can see that:    the  res  directory. It contains all the resource filed needed by our project. Now it only contains some sample pictures. But if you want to add some meta files of your game or some awesome game music files. You should also put them under this folder. You should choose a proper name for each file. You may notice that there are two folders named  HD  and  Normal  which have the exactly same file name but with different resolutions. They are for  Multiple resolutions adaption . You can just skip it now. In the Figure 7, there is a HelloWrold picture shown on your screen which is the HelloWorld.png. You can double click to view the actual image file in the disk.    The  src  folder. It contains all of your actual game logic code. If there are hundreds of JavaScript source files, you'd better organized them into small chunks using subfolders. Now our template has two JavaScript source files. The  myApp.js  contains the first scene's code of our sample. The  resource.js  defines some global variables of the resource.    The  build.xm  file is used for package all of your game source code into one compact file. We have talked about it before.    The  index.html  file is the entry point of a HTML5 based web application. It is a HTML5 compatible format. It defines some meta data like setting viewpoint and fullscreen parameters.    The  ccos2d-jsb.js  file is a bridge file between Cocos2d-html5 and Cocos2d-x JavaScript bindings. You can safety leave it out currently.    The  cocos2d.js  file is the main entry point of our js engine. It uses a auto execution anonymous function to start our game engine.    The  main.js  is called by Cocos2d-html5 framework after the cocos2d.js is loaded. It is \nwhere the main function like c/c++ language lies in. The  applicationDidFinishLanching  function will define the screen orientation, color format and resource load strategy. It is also the place to create your first game scene and show it on the browser.    Ok, you have known what these files and folder are for. Now it's time to understand the source code and the execution path.", 
            "title": "Taking a look at all the files of the project"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter2/en/index.html#analysis-of-the-projects-execution-path", 
            "text": "It is very important to know a program's execution path. Here is a picture shows every Cocos2d-html5 project's execution path:  Figure 9   From Figure 9, we can see that our program is loaded into browser from index.html. Then it moves to Cocos2d.js. In this file, the code logic diverse due to the following config:   var c = {\n        COCOS2D_DEBUG:2, \n        box2d:false,\n        chipmunk:false,\n        showFPS:true,\n        loadExtension:false,\n        frameRate:60,\n        renderMode:0,       \n        tag:'gameCanvas',\n        engineDir:'../cocos2d/',\n        //SingleEngineFile:'',\n        appFiles:[\n            'src/resource.js',\n            'src/myApp.js'\n        ]\n    };  Loot at the code piece, there is a object property named  engineDir  and a commented object property named  SingleEngineFile  which are the key point to decide the execution path of the following program. In the default case, we have specify the engineDir and the execution path will go to  N  direction in Figure 9. Thus the main.js will be loaded right after the engine files and before the files specified by  appFiles . It is more clear to read the source code than reading my plain text. But the flow chart will do some favor for you to understand the process better.", 
            "title": "Analysis of the project's execution path"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter2/en/index.html#making-some-little-tweaks-of-the-project", 
            "text": "As we known from the previous section, before we actually do some sort of real coding stuff. Let's make some small tweaks to get our hands dirty at first.", 
            "title": "Making Some little tweaks of the project"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter2/en/index.html#hiding-the-fps-in-the-left-corner-of-your-game-screen", 
            "text": "The section may be a little bit trivial. We can easily achieve this by modifying  showFPS  property to  false  in cocos2d.js.   Here is the code:  var c = {\n        COCOS2D_DEBUG:2,\n        box2d:false,\n        chipmunk:false,\n        showFPS:true,\n        loadExtension:false,\n        frameRate:60,\n        renderMode:0,       \n        tag:'gameCanvas', \n        engineDir:'../cocos2d/',\n        //SingleEngineFile:'',\n        appFiles:[\n            'src/resource.js',\n            'src/myApp.js'\n        ]\n    };  There are many thing we can tweak by modifying this object's property. I will give your a table of each property's intention.     property name  options  explanation      COCOS2D_DEBUG  0,1,2  0 to turn debug off, 1 for basic debug, and 2 for full debug    box2d  true or false  whether to load box2d physic engine or not in your project    chipmunk  true or false  whether to load chipmunk physic engine or not in your project    showFPS  true or false  toggle FPS visibility    loadExtension  true or false  whether to load cocos2d extension library or not in your project    frameRate  a positive number above 24, usually 60-30  adjust the frame rate of your game    renderMode  0,1,2  Choose of RenderMode: 0(default), 1(Canvas only), 2(WebGL only)    tag  \"gameCanvas\"  the dom element to run cocos2d on    engineDir  the engine directory related to your project  specify the directory the engine code    SingleEngineFile  a single game js file  this file can be generated by Google closure compiler    appFiles  a list of your game source code  add your own file lists after myApp.js     The rest of cocos2d.js  are some boilerplate code like obtaining DOM element by tag and setting up the game running environment. If you are curious about it, go ahead and dive into the source code.", 
            "title": "Hiding the FPS in the left corner of your game screen"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter2/en/index.html#modify-the-design-resolution-size", 
            "text": "Now Cocos2d-html5 take web browser as a full screen game canvas. We don't need to manually adjust the canvas size any more. We just need to care about the design resolution size. In order to let our game to run seamlessly on iOS and Android with JavaScript binding technics. We should change the design resolution size to 480*320. Open you main.js and in function  applicationDidFinishLaunching  change  designSize  to cc.Size(480,320).  var designSize = cc.size(480, 320);  And you also should make resolution policy to  SHOW_ALL :          cc.EGLView.getInstance().setDesignResolutionSize(designSize.width, designSize.height, cc.RESOLUTION_POLICY.SHOW_ALL);  If you are curious about why  we should do this, please refer to  this post  for more information.", 
            "title": "Modify the design resolution size"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter2/en/index.html#summary", 
            "text": "In this tutorial, we have talked about the directory structures and the built-in tests and sample games of cocos2d-html5. We also created our first project based on the template provided by Cocos2d-html5. In the last part, we took effort to analysis the files and the code structures of the template.", 
            "title": "Summary"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter2/en/index.html#where-to-go-from-here", 
            "text": "In the next tutorial, I will show you how to set up your first game main menu scene. We will do more coding with Cocos2d-html5.", 
            "title": "Where to go from here?"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter3/en/index.html", 
            "text": "Make Your First Game Scene\n\n\nBefore creating the first scene for your game, you should be familiar with some basic concepts of Cocos2d-x. If you are already familiar with these concepts, you can skip to the next section.\n\n\nBasic Concepts\n\n\nIn a Cocos2d game, every element is a node. The game is constructed mostly by three kinds of node:\n\n\n\n\n\n\nScene\n\n\n\n\n\n\nLayer \n\n\n\n\n\n\nSprite \n\n\n\n\n\n\nNow we focus on the Layers in this game, and you can find more details about Scene and Sprite at \nhere\n\n\nLayer\n\n\nA cc.Layer is a cc.Node, which  knows how to handle touch events. Layers know how to draw themselves and may be semi-transparent, making players can see other layers behind them. cc.Layer are very useful in defining your game's appearance and behaviour, so it will take a lot of time to deal with cc.Layer subclasses to reach your expectation.\n\n\n\n\nThe cc.Layer is where you can define touch event handlers. By implementing a method to handle one of touch events (ccTouchBegan, ccTouchMoved, ccTouchEnded, or ccTouchCancelled), a cc.Layer can interact with the player. These touch events are transmitted to all the layers within a scene, from front to back, until some layer catch the event and accept it.\n\n\nWhile complex applications will require you to define custom cc.Layer subclasses, Cocos2d provides several predefined layers. Some examples include cc.Menu (a simple menu layer), cc.ColorLayer (a layer that draws a solid color), and cc.LayerMultiplex (a layer that lets you multiplex its children, activating one at a time while disabling the others).\n\n\nLayers may contain any cc.Node as a child, including cc.Sprite, cc.Label, and even other cc.Layer objects. Because layers are a subclass of cc.Node, they can be transformed manually or by using cc.Action.\n\n\nCoordination system\n\n\nCocos2d-html5 uses the same coordinate system as OpenGL, which is so call \u201cRight-handed Cartesian Coordinate System\u201d. It is popular in game industry, however, it is  different from traditional top left coordinate system which used in web-page design. \n\n\nMore details about coordinate system you can find at \nhere\n\n\nAnchor Point\n\n\nThe anchor point is used for both positioning and rotation of an object. The anchor point coordinate is relative coordinate, for example, the anchor point in position (0, 0) which we always define in short in Cocos2d-x as cc.p(0 , 0) corresponds to the most bottom-left of that object, while cc.p(0.5, 0.5) corresponds to the center of the object. When setting the position of an object, the object is positioned such that the anchor point will be at the coordinates specified with the setPosition() call. Similarly, when rotating the object, it is rotated around the anchor point.\n\n\nFor example, this sprite has an anchorPoint of cc.p(0, 0) and a position of cc.p(0,0).\n\n\n // create sprite \n    var sprite = cc. Sprite.create ( \nbottomleft.png\n ) ; \n    sprite. setAnchorPoint ( cc.p ( 0 , 0 ) ) ; // Anchor Point \n    sprite. setPosition ( cc.p ( 0 , 0 ) ) ; \n    this.addChild ( sprite ) ;\n\n\n\n\nAction\n\n\nMore details about Action are in \nhere\n\n\nExample of running the cc.MoveBy action:\n\n\n// Move a sprite 50 pixels to the right, and 10 pixels to the top over 2 seconds.\nsprite.runAction(cc.MoveBy.create(2, cc.p(50, 10)));\n\n\n\n\nAnimation\n\n\nMore details about Animation are in \nhere\n\n\nExample of playing animation:\n\n\n var animation = cc.Animation.create ( ) ; \n        for ( var i = 1 ; i \n 15 ; i ++ ) {         \n        var frameName = \nres/Images/grossini_dance_\n + ( ( i \n 10 ) ? ( \n0\n + i ) : i ) + \n.png\n ; \n           animation. addSpriteFrameWithFile ( frameName ) ; \n        } \n        animation. setDelayPerUnit ( 2.8 / 14 ) ; \n        animation. setRestoreOriginalFrame ( true ) ; \n        var action = cc. Animate . create ( animation ) ; \n        sprite. runAction ( cc. Sequence . create ( action , action. reverse ( ) ) ) ;\n\n\n\n\nScheduler and Timer Callback\n\n\nMore details about Scheduler and Timer Callback are in \nhere\n\n\nTouchEvent\n\n\nCocos2d-html5 has two different ways to handle touch events. They are defined by two different types of delegates-TargetedTouchDelegate and StandardTouchDelegate(both of them defined in CCTouchDelegateProtocol.js).\n\n\nUsing TargetedTouchDelegate has two benefits:\n\n\n\n\n\n\nYou don't have to deal with cc.Sets, the dispatcher will done the job. So you can get the right type of cc.Touch per time.\n\n\n\n\n\n\nYou can claim a cc.Touch, which is returning true in onTouchBegan. Updates of the claimed\n    touch is sent only to the delegate(s) that claimed them. So if you get a moved,\n     ended or cancelled update you can sure that's your touch. This save you from doing a\n   lot of checks when handling multi-touch.\n\n\n\n\n\n\nUsing StandardTouchDelegate has two benefits:\n\n\n\n\n\n\nYou can deal with cc.Sets manually and you can do the job of splitting\n   touch events. Thus it is very convenient to handle multiple touch.\n\n\n\n\n\n\nYou don\u2019t need to claim true or false in ccTouchesBegan. And all of your touch callbacks will be called when you touch the screen.\n\n\n\n\n\n\nMake your first Game scene\n\n\nIn last tutorial, we have analysed the execution path of a Cocos2d-html5 game. We know that in main.js, we load our first game scene in \napplicationDidFinishLaunching\n, here is the code snippet which does the real trick:\n\n\n //load resources\n        cc.LoaderScene.preload(g_resources, function () {\n            director.replaceScene(new this.startScene());\n        }, this);\n\n\n\n\nHere, we use cc.LoaderScene to preload the resources of our game and after loading all resources, the director will run our first scene. You should pay attention to the argument of \nreplaceScene\n. We call new operator on \nthis.startScene\n. It is a member of the class \ncocos2dApp\n. \n\n\nNote:\n\n\nThe \ncocos2dApp\n is actually a function which mimic the behaviour of class in an object-oriented language.\n\n\nvar cocos2dApp = cc.Application.extend({\n    config:document['ccConfig'],\n    ctor:function (scene) {\n        this._super();\n        this.startScene = scene;\n        cc.COCOS2D_DEBUG = this.config['COCOS2D_DEBUG'];\n        cc.initDebugSetting();\n        cc.setup(this.config['tag']);\n        cc.AppController.shareAppController().didFinishLaunchingWithOptions();\n    },\n\n\n\n\nHere the \nctor\n function is mimic a constructor in other languages such as c++, java or c#. \n\n\nHere are two paragraphs in \nhere\n. I'm highly recommend you to read the full article.\n\n\nThe first one:\n\n\n\n\nWe are creating a new object by extending cc.Application. If you are familiar with C++, Java or C# you may have a little confused when you seeing this code. Because they have something in common and some differences in the meantime. Here is the reason, JavaScript isn\u2019t really \u201cobject oriented\u201d in\nthe way you are familiar with, it is \nprototype based\n. I can not explain all the details here, but basically there are no classes. Instead there are \u201cprototypes\u201d that you can clone and extend. So essentially you defined something once, which will be used as a prototype for creating \u201cobjects\u201d in the future. \n\n\n\n\nThe second one:\n\n\n\n\nEssentially what we are doing here is defining our \ncocos2dApp\n object to extend the cc.Application prototype. This is a pretty common behavior when working with Cocos2d-x, so hopefully you can wrap your head around it. Then we implement the ctor(constructor) and applicationDidFinishingLaunching. Again, if you are used to C++ like languages, you can think of cocos2dApp as being derived from cc.Application, then overriding the default constructor and a virtual method.  If you aren\u2019t a C++/C# or Java programmer, forget everything I just said. \n\n\n\n\nCleanup Work\n\n\nOk, I think the background information is enough. Let's do some cleanup stuff.\n\n\nDelete the multiple resolution stuff\n\n\n\n\n\n\nDelete \nHD\n and \nNormal\n folder under \nres\n directory. Leave your res directory looks like this(the resource files can be found from our sample project)\n\n\n\n\n\n\n\n\nDelete the following code pieces in main.js:\n\n\n\n\n\n\n        var platform = cc.Application.getInstance().getTargetPlatform();\n        if (platform == cc.TARGET_PLATFORM.MOBILE_BROWSER) {\n            resDirOrders.push(\nHD\n);\n        }\n        else if (platform == cc.TARGET_PLATFORM.PC_BROWSER) {\n            if (screenSize.height \n= 800) {\n                resDirOrders.push(\nHD\n);\n            }\n            else {\n                resourceSize = cc.size(320, 480);\n                designSize = cc.size(320, 480);\n                resDirOrders.push(\nNormal\n);\n            }\n        }\n       cc.FileUtils.getInstance().setSearchResolutionsOrder(resDirOrders);\n       director.setContentScaleFactor(resourceSize.width / designSize.width);\n\n\n\n\nand delete the following code:\n\n\n   var screenSize = cc.EGLView.getInstance().getFrameSize();\n   var resourceSize = cc.size(480, 800);\n   var resDirOrders = [];\n\n\n\n\nCleanup the myApp.js\n\n\nThis process is very simple. At first, we should delete all the contents of myApp.js. Because we will rewrite them from scratch.\n\n\nSecondly, we should change this line in main.js:\n\n\nvar myApp = new cocos2dApp(MyScene);\n\n\n\n\nto \n\n\nvar myApp = new cocos2dApp(MenuScene);\n\n\n\n\nYeah, I guess you have got the point. We will define our first class which name is MenuScene.\n\n\nAt last, we should define some resource variables for easy access.\n\n\nOpen resource.js and change its content to this:\n\n\n  var s_HelloBG = \nhelloBG.png\n;\n  var s_start_n = \nstart_n.png\n;\n  var s_start_s = \nstart_s.png\n;\n\n  var g_resources = [\n    //image\n    {src:s_HelloBG},\n    {src:s_start_n},\n    {src:s_start_s}\n  ];\n\n\n\n\nDefine your first scene - MenuScene\n\n\nOpen myApp.js and start to define the MenuLayer:\n\n\nvar MenuLayer = cc.Layer.extend({\n    ctor : function(){\n        //1. call super class's ctor function\n        this._super();\n    },\n    init:function(){\n        //call super class's super function\n        this._super();\n\n        //2. get the singleton director\n        var director = cc.Director.getInstance();\n\n        //3. get the screen size of your game canvas\n        var winsize = director.getWinSize();\n        //4. calculate the center point\n        var centerpos = cc.p(winsize.width / 2, winsize.height / 2);\n\n        //5. create a background image and set it's position at the center of the screen\n        var spritebg = cc.Sprite.create(s_HelloBG);\n        spritebg.setPosition(centerpos);\n        this.addChild(spritebg);\n\n        //6.\n        cc.MenuItemFont.setFontSize(60);\n\n        //7.create a menu and assign onPlay event callback to it\n        var menuItemPlay= cc.MenuItemSprite.create(\n            cc.Sprite.create(s_start_n), // normal state image\n            cc.Sprite.create(s_start_s), //select state image\n            this.onPlay, this);\n        var menu = cc.Menu.create(menuItemPlay);  //7. create the menu\n        menu.setPosition(centerpos);\n        this.addChild(menu);\n    },\n\n    onPlay : function(){\n        cc.log(\n==onplay clicked\n);\n    }\n});\n\n\n\n\nLet's go through all the details from 1-7:\n\n\n\n\nIt calls the init function of its super class.\n\n\nSince Director is designed as a singleton class, so we can use getInstance() to get the instance.\n\n\nGet the screen size of you game.\n\n\nCalculate the center point of your screen which will be used to center background images.\n\n\nCreate a background image with filename and set its position to the center of the screen. At last, add the sprite to MenuLayer as a child.\n\n\nCall MenuItemFont's setFontSize function to adjust the font size. It is not used in this example. But if you want to use MenuItemFont to create some menu items, it will affect the menu item label size.\n\n\nCreate a menu with two images, one for normal state and another for selected state. Then we set the menu's position to the center of the screen. At last, adding it to the current layer.\n\n\n\n\nNote:\n\n\n\n\nDon't try to copy these code or remember all of these things. Because Cocos2d-html5 is under active development. The API will be minor changed due to some reasons. So try to understand it.\n\n\n\n\nAnd also we should define a Menu scene:\n\n\nvar MenuScene = cc.Scene.extend({\n    onEnter:function () {\n        this._super();\n        var layer = new MenuLayer();\n        layer.init();\n        this.addChild(layer);\n    }\n});\n\n\n\n\nThe process of creating a MenuScene is very straightforward. You defined a variable which derived from cc.Scene. You should remember the sign \nextend\n, which is used for extenal classes.\n\n\nOnce the scene is created, a \nonEnter\n function should be defined. It defined the MenuLayer as it's child. We can also define a \nctor\n function instead of the onEnter function. The onEnter function is called after ctor function.\n\n\nSummary\n\n\nIn this tutorial, I have shown you the basic concepts you need to know when you first start programming Cocos2d-html5 games. And also giving you a detailed explanation of how to set up your first game scene. Hope you enjoy it and happy coding! The related sample project can be downloaded at \nhere\n.\n\n\nWhere to go from here\n\n\nIn the next chapter, I will show you how to define your game scene and along with the various game layers. How to design these layers and what's the responsibility of these layers.", 
            "title": "_Chapter3"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter3/en/index.html#make-your-first-game-scene", 
            "text": "Before creating the first scene for your game, you should be familiar with some basic concepts of Cocos2d-x. If you are already familiar with these concepts, you can skip to the next section.", 
            "title": "Make Your First Game Scene"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter3/en/index.html#basic-concepts", 
            "text": "In a Cocos2d game, every element is a node. The game is constructed mostly by three kinds of node:    Scene    Layer     Sprite     Now we focus on the Layers in this game, and you can find more details about Scene and Sprite at  here", 
            "title": "Basic Concepts"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter3/en/index.html#layer", 
            "text": "A cc.Layer is a cc.Node, which  knows how to handle touch events. Layers know how to draw themselves and may be semi-transparent, making players can see other layers behind them. cc.Layer are very useful in defining your game's appearance and behaviour, so it will take a lot of time to deal with cc.Layer subclasses to reach your expectation.   The cc.Layer is where you can define touch event handlers. By implementing a method to handle one of touch events (ccTouchBegan, ccTouchMoved, ccTouchEnded, or ccTouchCancelled), a cc.Layer can interact with the player. These touch events are transmitted to all the layers within a scene, from front to back, until some layer catch the event and accept it.  While complex applications will require you to define custom cc.Layer subclasses, Cocos2d provides several predefined layers. Some examples include cc.Menu (a simple menu layer), cc.ColorLayer (a layer that draws a solid color), and cc.LayerMultiplex (a layer that lets you multiplex its children, activating one at a time while disabling the others).  Layers may contain any cc.Node as a child, including cc.Sprite, cc.Label, and even other cc.Layer objects. Because layers are a subclass of cc.Node, they can be transformed manually or by using cc.Action.", 
            "title": "Layer"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter3/en/index.html#coordination-system", 
            "text": "Cocos2d-html5 uses the same coordinate system as OpenGL, which is so call \u201cRight-handed Cartesian Coordinate System\u201d. It is popular in game industry, however, it is  different from traditional top left coordinate system which used in web-page design.   More details about coordinate system you can find at  here", 
            "title": "Coordination system"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter3/en/index.html#anchor-point", 
            "text": "The anchor point is used for both positioning and rotation of an object. The anchor point coordinate is relative coordinate, for example, the anchor point in position (0, 0) which we always define in short in Cocos2d-x as cc.p(0 , 0) corresponds to the most bottom-left of that object, while cc.p(0.5, 0.5) corresponds to the center of the object. When setting the position of an object, the object is positioned such that the anchor point will be at the coordinates specified with the setPosition() call. Similarly, when rotating the object, it is rotated around the anchor point.  For example, this sprite has an anchorPoint of cc.p(0, 0) and a position of cc.p(0,0).   // create sprite \n    var sprite = cc. Sprite.create (  bottomleft.png  ) ; \n    sprite. setAnchorPoint ( cc.p ( 0 , 0 ) ) ; // Anchor Point \n    sprite. setPosition ( cc.p ( 0 , 0 ) ) ; \n    this.addChild ( sprite ) ;", 
            "title": "Anchor Point"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter3/en/index.html#action", 
            "text": "More details about Action are in  here  Example of running the cc.MoveBy action:  // Move a sprite 50 pixels to the right, and 10 pixels to the top over 2 seconds.\nsprite.runAction(cc.MoveBy.create(2, cc.p(50, 10)));", 
            "title": "Action"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter3/en/index.html#animation", 
            "text": "More details about Animation are in  here  Example of playing animation:   var animation = cc.Animation.create ( ) ; \n        for ( var i = 1 ; i   15 ; i ++ ) {         \n        var frameName =  res/Images/grossini_dance_  + ( ( i   10 ) ? (  0  + i ) : i ) +  .png  ; \n           animation. addSpriteFrameWithFile ( frameName ) ; \n        } \n        animation. setDelayPerUnit ( 2.8 / 14 ) ; \n        animation. setRestoreOriginalFrame ( true ) ; \n        var action = cc. Animate . create ( animation ) ; \n        sprite. runAction ( cc. Sequence . create ( action , action. reverse ( ) ) ) ;", 
            "title": "Animation"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter3/en/index.html#scheduler-and-timer-callback", 
            "text": "More details about Scheduler and Timer Callback are in  here", 
            "title": "Scheduler and Timer Callback"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter3/en/index.html#touchevent", 
            "text": "Cocos2d-html5 has two different ways to handle touch events. They are defined by two different types of delegates-TargetedTouchDelegate and StandardTouchDelegate(both of them defined in CCTouchDelegateProtocol.js).  Using TargetedTouchDelegate has two benefits:    You don't have to deal with cc.Sets, the dispatcher will done the job. So you can get the right type of cc.Touch per time.    You can claim a cc.Touch, which is returning true in onTouchBegan. Updates of the claimed\n    touch is sent only to the delegate(s) that claimed them. So if you get a moved,\n     ended or cancelled update you can sure that's your touch. This save you from doing a\n   lot of checks when handling multi-touch.    Using StandardTouchDelegate has two benefits:    You can deal with cc.Sets manually and you can do the job of splitting\n   touch events. Thus it is very convenient to handle multiple touch.    You don\u2019t need to claim true or false in ccTouchesBegan. And all of your touch callbacks will be called when you touch the screen.", 
            "title": "TouchEvent"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter3/en/index.html#make-your-first-game-scene_1", 
            "text": "In last tutorial, we have analysed the execution path of a Cocos2d-html5 game. We know that in main.js, we load our first game scene in  applicationDidFinishLaunching , here is the code snippet which does the real trick:   //load resources\n        cc.LoaderScene.preload(g_resources, function () {\n            director.replaceScene(new this.startScene());\n        }, this);  Here, we use cc.LoaderScene to preload the resources of our game and after loading all resources, the director will run our first scene. You should pay attention to the argument of  replaceScene . We call new operator on  this.startScene . It is a member of the class  cocos2dApp .   Note:  The  cocos2dApp  is actually a function which mimic the behaviour of class in an object-oriented language.  var cocos2dApp = cc.Application.extend({\n    config:document['ccConfig'],\n    ctor:function (scene) {\n        this._super();\n        this.startScene = scene;\n        cc.COCOS2D_DEBUG = this.config['COCOS2D_DEBUG'];\n        cc.initDebugSetting();\n        cc.setup(this.config['tag']);\n        cc.AppController.shareAppController().didFinishLaunchingWithOptions();\n    },  Here the  ctor  function is mimic a constructor in other languages such as c++, java or c#.   Here are two paragraphs in  here . I'm highly recommend you to read the full article.  The first one:   We are creating a new object by extending cc.Application. If you are familiar with C++, Java or C# you may have a little confused when you seeing this code. Because they have something in common and some differences in the meantime. Here is the reason, JavaScript isn\u2019t really \u201cobject oriented\u201d in\nthe way you are familiar with, it is  prototype based . I can not explain all the details here, but basically there are no classes. Instead there are \u201cprototypes\u201d that you can clone and extend. So essentially you defined something once, which will be used as a prototype for creating \u201cobjects\u201d in the future.    The second one:   Essentially what we are doing here is defining our  cocos2dApp  object to extend the cc.Application prototype. This is a pretty common behavior when working with Cocos2d-x, so hopefully you can wrap your head around it. Then we implement the ctor(constructor) and applicationDidFinishingLaunching. Again, if you are used to C++ like languages, you can think of cocos2dApp as being derived from cc.Application, then overriding the default constructor and a virtual method.  If you aren\u2019t a C++/C# or Java programmer, forget everything I just said.", 
            "title": "Make your first Game scene"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter3/en/index.html#cleanup-work", 
            "text": "Ok, I think the background information is enough. Let's do some cleanup stuff.", 
            "title": "Cleanup Work"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter3/en/index.html#delete-the-multiple-resolution-stuff", 
            "text": "Delete  HD  and  Normal  folder under  res  directory. Leave your res directory looks like this(the resource files can be found from our sample project)     Delete the following code pieces in main.js:            var platform = cc.Application.getInstance().getTargetPlatform();\n        if (platform == cc.TARGET_PLATFORM.MOBILE_BROWSER) {\n            resDirOrders.push( HD );\n        }\n        else if (platform == cc.TARGET_PLATFORM.PC_BROWSER) {\n            if (screenSize.height  = 800) {\n                resDirOrders.push( HD );\n            }\n            else {\n                resourceSize = cc.size(320, 480);\n                designSize = cc.size(320, 480);\n                resDirOrders.push( Normal );\n            }\n        }\n       cc.FileUtils.getInstance().setSearchResolutionsOrder(resDirOrders);\n       director.setContentScaleFactor(resourceSize.width / designSize.width);  and delete the following code:     var screenSize = cc.EGLView.getInstance().getFrameSize();\n   var resourceSize = cc.size(480, 800);\n   var resDirOrders = [];", 
            "title": "Delete the multiple resolution stuff"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter3/en/index.html#cleanup-the-myappjs", 
            "text": "This process is very simple. At first, we should delete all the contents of myApp.js. Because we will rewrite them from scratch.  Secondly, we should change this line in main.js:  var myApp = new cocos2dApp(MyScene);  to   var myApp = new cocos2dApp(MenuScene);  Yeah, I guess you have got the point. We will define our first class which name is MenuScene.  At last, we should define some resource variables for easy access.  Open resource.js and change its content to this:    var s_HelloBG =  helloBG.png ;\n  var s_start_n =  start_n.png ;\n  var s_start_s =  start_s.png ;\n\n  var g_resources = [\n    //image\n    {src:s_HelloBG},\n    {src:s_start_n},\n    {src:s_start_s}\n  ];", 
            "title": "Cleanup the myApp.js"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter3/en/index.html#define-your-first-scene-menuscene", 
            "text": "Open myApp.js and start to define the MenuLayer:  var MenuLayer = cc.Layer.extend({\n    ctor : function(){\n        //1. call super class's ctor function\n        this._super();\n    },\n    init:function(){\n        //call super class's super function\n        this._super();\n\n        //2. get the singleton director\n        var director = cc.Director.getInstance();\n\n        //3. get the screen size of your game canvas\n        var winsize = director.getWinSize();\n        //4. calculate the center point\n        var centerpos = cc.p(winsize.width / 2, winsize.height / 2);\n\n        //5. create a background image and set it's position at the center of the screen\n        var spritebg = cc.Sprite.create(s_HelloBG);\n        spritebg.setPosition(centerpos);\n        this.addChild(spritebg);\n\n        //6.\n        cc.MenuItemFont.setFontSize(60);\n\n        //7.create a menu and assign onPlay event callback to it\n        var menuItemPlay= cc.MenuItemSprite.create(\n            cc.Sprite.create(s_start_n), // normal state image\n            cc.Sprite.create(s_start_s), //select state image\n            this.onPlay, this);\n        var menu = cc.Menu.create(menuItemPlay);  //7. create the menu\n        menu.setPosition(centerpos);\n        this.addChild(menu);\n    },\n\n    onPlay : function(){\n        cc.log( ==onplay clicked );\n    }\n});  Let's go through all the details from 1-7:   It calls the init function of its super class.  Since Director is designed as a singleton class, so we can use getInstance() to get the instance.  Get the screen size of you game.  Calculate the center point of your screen which will be used to center background images.  Create a background image with filename and set its position to the center of the screen. At last, add the sprite to MenuLayer as a child.  Call MenuItemFont's setFontSize function to adjust the font size. It is not used in this example. But if you want to use MenuItemFont to create some menu items, it will affect the menu item label size.  Create a menu with two images, one for normal state and another for selected state. Then we set the menu's position to the center of the screen. At last, adding it to the current layer.   Note:   Don't try to copy these code or remember all of these things. Because Cocos2d-html5 is under active development. The API will be minor changed due to some reasons. So try to understand it.   And also we should define a Menu scene:  var MenuScene = cc.Scene.extend({\n    onEnter:function () {\n        this._super();\n        var layer = new MenuLayer();\n        layer.init();\n        this.addChild(layer);\n    }\n});  The process of creating a MenuScene is very straightforward. You defined a variable which derived from cc.Scene. You should remember the sign  extend , which is used for extenal classes.  Once the scene is created, a  onEnter  function should be defined. It defined the MenuLayer as it's child. We can also define a  ctor  function instead of the onEnter function. The onEnter function is called after ctor function.", 
            "title": "Define your first scene - MenuScene"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter3/en/index.html#summary", 
            "text": "In this tutorial, I have shown you the basic concepts you need to know when you first start programming Cocos2d-html5 games. And also giving you a detailed explanation of how to set up your first game scene. Hope you enjoy it and happy coding! The related sample project can be downloaded at  here .", 
            "title": "Summary"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter3/en/index.html#where-to-go-from-here", 
            "text": "In the next chapter, I will show you how to define your game scene and along with the various game layers. How to design these layers and what's the responsibility of these layers.", 
            "title": "Where to go from here"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter4/en/index.html", 
            "text": "Design and Make Your Gameplay Scene\n\n\nIntroduction\n\n\nIn this tutorial, I will show you how to design and construct the gameplay scene. Every game needs some kind of gameplay scene. So this tutorial try to normalize the general scenario. \n\n\nFrom the previous tutorial, we know that we can use different layers to separate the logic of a specified scene.\n\n\nHere is the final result of our gameplay scene:\n\n\n\n\nThere are background buildings, a hero and some HUD elements to show us the status of the current game progress. We can easily divide the gameplay scene into three parts:background layer, animation layer and status layer.\n\n\nBackground Layer\n\n\nBasically, every game need background. Sometimes the background is just a static image which  occupies the entire screen size of your game. Sometimes the background layers can move at a constant or various speed. Sometimes the background images even show us parallax effects--different layers move at various speed, the nearest layer moves faster and the farthest layer move slower. \n\n\nIn later tutorials, we will introduce tiled map which are very useful to construct parallax background. In this tutorial, in order to keep things simple, we just use a simple static image to represent the game background.\n\n\nNote\n:\nWe can move the background to mimic a effect of infinite running of our game hero. The hero is always at the center of the game screen. There are many such tricks we can see during game development process.\n\n\nAnimation Layer(Gameplay Layer)\n\n\nThe animation layer contains all game elements' animations, collide detections and other game logics. Maybe \nGamePlayLayer\n is a more proper name. You can choose what you want. In this layer, we organize the key part of our game play. In general, we will design game objects, level spawner(which are also called level managers), collide detection between different game objects and the condition of win and lose. All of the dirty things are goes here.\n\n\nIn theory, we don't need to separate this layer into smaller layers. We can use composition and delegation to handle things properly. \n\n\nStatus Layer(HUD Layer)\n\n\nIn video gaming, the HUD (head-up display) is the method by which information is visually relayed to the player as part of a game's user interface. It takes its name from the head-up displays used in modern aircraft.\n\n\nThe HUD is frequently used to simultaneously display several pieces of information including the main character's health, items, and an indication of game progression (such as score or level). You can refer \nthis link\n for more information of HUD.\n\n\nTo make things simpler, we put these information into a separate layer called StatusLayer. Because these items are always displayed on top of other game elements. By using a separate layer will make our life easier without caring about the zOrder display issues.\n\n\nCoding in Action\n\n\nPreparation\n\n\nAt first, we should add two images(\nPlayBG.png\n and \nrunner.png\n) to the \nres\n directory.\n\n\nIn the previous tutorial, we have added all resources variables in \nresource.js\n. Since we have added another two images, so the \nresource.js\n should also be changed like this:\n\n\nvar s_HelloBG = \nhelloBG.png\n;\nvar s_start_n = \nstart_n.png\n;\nvar s_start_s = \nstart_s.png\n;\nvar s_PlayBG = \nPlayBG.png\n;\nvar s_runner = \nrunner.png\n;\n\nvar g_resources = [\n    //image\n    {src:s_HelloBG},\n    {src:s_start_n},\n    {src:s_start_s},\n    {src:s_PlayBG},\n    {src:s_runner}\n];\n\n\n\n\nHere we have added two global variables named \ns_PlayBG\n and \ns_runner\n. Now when we want to create a sprite in another js files, we can easily access these variables.\n\n\nSince we will add four JavaScript files: PlayScene.js, AnimationLayer.js, BackgroundLayer.js and StatusLayer.js.  We need to tell Cocos2d-x engine to load these files when game startup. So we should change \ncocos2d.js\n to add more source files:\n\n\n appFiles:[\n            'src/resource.js',\n            'src/myApp.js',\n            'src/AnimationLayer.js',\n            'src/BackgroundLayer.js',\n            'src/PlayScene.js',\n            'src/StatusLayer.js'\n        ]\n\n\n\n\nIn the future, each time when you add a new JavaScript file into your game, you should change the attribute \nappFiles\n and add more source code file path to the end of the array.\n\n\nAt last, we should display PlayScene when we click the button in the first MenuScene. Here is the code snippet:\n\n\n   //this is the callback when the menu is clicked\n    onPlay : function(){\n        cc.log(\n==onplay clicked\n);\n        var director = cc.Director.getInstance();\n        director.replaceScene(new PlayScene());\n    }\n\n\n\n\nCoding PlayScene(PlayScene.js)\n\n\nSince background layer, animation layer and status layer should be displayed in different order. We can specify the order explicit when call \naddChild\n method or we can add them as PlayScene's children in the right order. In this tutorial, we take the later option.\n\n\nHere is the code snippet of PlayScene:\n\n\nvar PlayScene = cc.Scene.extend({\n    onEnter:function () {\n        this._super();\n        //add three layer in the right order\n        this.addChild(new BackgroundLayer());\n        this.addChild(new AnimationLayer());\n        this.addChild(new StatusLayer());\n    }\n});\n\n\n\n\nCoding BackgroundLayer(BackgroundLayer.js)\n\n\nHere is our background image:\n\n\n\nHere is the code snippet:\n\n\nvar BackgroundLayer = cc.Layer.extend({\n    ctor:function () {\n        this._super();\n        this.init();\n    },\n\n    init:function () {\n        this._super();\n\n        //create the background image and position it at the center of screen\n    var winSize = cc.Director.getInstance().getWinSize();\n        var centerPos = cc.p(winSize.width / 2, winSize.height / 2);\n        var spriteBG = cc.Sprite.create(s_PlayBG);\n        spriteBG.setPosition(centerPos);\n        this.addChild(spriteBG);\n    }\n});\n\n\n\n\n\nCoding AnimationLayer(AnimationLayer.js)\n\n\nHere is our main character:\n\n\n\nIn this section, I will show you how to run actions on the hero. We will run \nMoveTo\n action on the sprite to move the sprite from (80,85) to (300,85) in two seconds.\n\n\nHere is the code snippet of AnimationLayer:\n\n\nvar AnimationLayer = cc.Layer.extend({\n    ctor:function () {\n        this._super();\n        this.init();\n    },\n    init:function () {\n        this._super();\n\n        var centerPos = cc.p(80, 85);\n        //cerate the hero sprite\n        var spriteRunner = cc.Sprite.create(s_runner);\n        spriteRunner.setPosition(centerPos);\n\n        //create the move action\n        var actionTo = cc.MoveTo.create(2, cc.p(300, 85));\n        spriteRunner.runAction(cc.Sequence.create(actionTo));\n        this.addChild(spriteRunner);\n    }\n});\n\n\n\n\nCoding StatusLayer(StatusLayer.js)\n\n\nIn this section, we will add two indicators: the coin quantity indicator and the distance indicator. Both indicator are labels in Cocos2d-html5. Labels are very useful to display HUD information to players. And the code to create and use labels are very easy. Thanks to cocos2d framework.\n\n\nHere is the code snippet we need to setup the layer:\n\n\nvar StatusLayer = cc.Layer.extend({\n    labelCoin:null,\n    labelMeter:null,\n    coins:0,\n\n    ctor:function () {\n        this._super();\n        this.init();\n    },\n\n    init:function () {\n        this._super();\n\n    var winSize = cc.Director.getInstance().getWinSize();\n        this.labelCoin = cc.LabelTTF.create(\nCoins:0\n, \nHelvetica\n, 20);\n        this.labelCoin.setColor(cc.c3(0,0,0));//black color\n        this.labelCoin.setPosition(cc.p(70, winSize.height - 20));\n        this.addChild(this.labelCoin);\n\n        this.labelMeter = cc.LabelTTF.create(\n0M\n, \nHelvetica\n, 20);\n        this.labelMeter.setPosition(cc.p(winSize.width - 70, winSize.height - 20));\n        this.addChild(this.labelMeter);\n    }\n});\n\n\n\n\n\nWe can use \ncc.LabelTTF.create\n for creating a text label. The first param is the displayed texts, the second param is the Font Family and the third param is the Font size. We can also use \nsetColor\n member function of LabelTTF to set the color of labels. The \ncc.c3(0,0,0)\n represent black color.\n\n\nSummary\n\n\nIn this tutorial, we have learned how to divide a game scene into different layers. Each layer has it's own logic and responsibility. You can download the entire project from \nhere\n.\n\n\nSince the code and logic are very simple, so we don't cover them all in details. If you have any question or suggestions, let us know and we will do our best to support you.\n\n\nWhere to Go From Here\n\n\nIn the next tutorial, I will show you how to run animations on the runner and how to pack small images into sprite sheet. I will also introduce a awesome tools named \nTexturePakcer\n to you guys.", 
            "title": "_Chapter4"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter4/en/index.html#design-and-make-your-gameplay-scene", 
            "text": "", 
            "title": "Design and Make Your Gameplay Scene"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter4/en/index.html#introduction", 
            "text": "In this tutorial, I will show you how to design and construct the gameplay scene. Every game needs some kind of gameplay scene. So this tutorial try to normalize the general scenario.   From the previous tutorial, we know that we can use different layers to separate the logic of a specified scene.  Here is the final result of our gameplay scene:   There are background buildings, a hero and some HUD elements to show us the status of the current game progress. We can easily divide the gameplay scene into three parts:background layer, animation layer and status layer.", 
            "title": "Introduction"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter4/en/index.html#background-layer", 
            "text": "Basically, every game need background. Sometimes the background is just a static image which  occupies the entire screen size of your game. Sometimes the background layers can move at a constant or various speed. Sometimes the background images even show us parallax effects--different layers move at various speed, the nearest layer moves faster and the farthest layer move slower.   In later tutorials, we will introduce tiled map which are very useful to construct parallax background. In this tutorial, in order to keep things simple, we just use a simple static image to represent the game background.  Note :\nWe can move the background to mimic a effect of infinite running of our game hero. The hero is always at the center of the game screen. There are many such tricks we can see during game development process.", 
            "title": "Background Layer"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter4/en/index.html#animation-layergameplay-layer", 
            "text": "The animation layer contains all game elements' animations, collide detections and other game logics. Maybe  GamePlayLayer  is a more proper name. You can choose what you want. In this layer, we organize the key part of our game play. In general, we will design game objects, level spawner(which are also called level managers), collide detection between different game objects and the condition of win and lose. All of the dirty things are goes here.  In theory, we don't need to separate this layer into smaller layers. We can use composition and delegation to handle things properly.", 
            "title": "Animation Layer(Gameplay Layer)"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter4/en/index.html#status-layerhud-layer", 
            "text": "In video gaming, the HUD (head-up display) is the method by which information is visually relayed to the player as part of a game's user interface. It takes its name from the head-up displays used in modern aircraft.  The HUD is frequently used to simultaneously display several pieces of information including the main character's health, items, and an indication of game progression (such as score or level). You can refer  this link  for more information of HUD.  To make things simpler, we put these information into a separate layer called StatusLayer. Because these items are always displayed on top of other game elements. By using a separate layer will make our life easier without caring about the zOrder display issues.", 
            "title": "Status Layer(HUD Layer)"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter4/en/index.html#coding-in-action", 
            "text": "", 
            "title": "Coding in Action"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter4/en/index.html#preparation", 
            "text": "At first, we should add two images( PlayBG.png  and  runner.png ) to the  res  directory.  In the previous tutorial, we have added all resources variables in  resource.js . Since we have added another two images, so the  resource.js  should also be changed like this:  var s_HelloBG =  helloBG.png ;\nvar s_start_n =  start_n.png ;\nvar s_start_s =  start_s.png ;\nvar s_PlayBG =  PlayBG.png ;\nvar s_runner =  runner.png ;\n\nvar g_resources = [\n    //image\n    {src:s_HelloBG},\n    {src:s_start_n},\n    {src:s_start_s},\n    {src:s_PlayBG},\n    {src:s_runner}\n];  Here we have added two global variables named  s_PlayBG  and  s_runner . Now when we want to create a sprite in another js files, we can easily access these variables.  Since we will add four JavaScript files: PlayScene.js, AnimationLayer.js, BackgroundLayer.js and StatusLayer.js.  We need to tell Cocos2d-x engine to load these files when game startup. So we should change  cocos2d.js  to add more source files:   appFiles:[\n            'src/resource.js',\n            'src/myApp.js',\n            'src/AnimationLayer.js',\n            'src/BackgroundLayer.js',\n            'src/PlayScene.js',\n            'src/StatusLayer.js'\n        ]  In the future, each time when you add a new JavaScript file into your game, you should change the attribute  appFiles  and add more source code file path to the end of the array.  At last, we should display PlayScene when we click the button in the first MenuScene. Here is the code snippet:     //this is the callback when the menu is clicked\n    onPlay : function(){\n        cc.log( ==onplay clicked );\n        var director = cc.Director.getInstance();\n        director.replaceScene(new PlayScene());\n    }", 
            "title": "Preparation"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter4/en/index.html#coding-playsceneplayscenejs", 
            "text": "Since background layer, animation layer and status layer should be displayed in different order. We can specify the order explicit when call  addChild  method or we can add them as PlayScene's children in the right order. In this tutorial, we take the later option.  Here is the code snippet of PlayScene:  var PlayScene = cc.Scene.extend({\n    onEnter:function () {\n        this._super();\n        //add three layer in the right order\n        this.addChild(new BackgroundLayer());\n        this.addChild(new AnimationLayer());\n        this.addChild(new StatusLayer());\n    }\n});", 
            "title": "Coding PlayScene(PlayScene.js)"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter4/en/index.html#coding-backgroundlayerbackgroundlayerjs", 
            "text": "Here is our background image:  Here is the code snippet:  var BackgroundLayer = cc.Layer.extend({\n    ctor:function () {\n        this._super();\n        this.init();\n    },\n\n    init:function () {\n        this._super();\n\n        //create the background image and position it at the center of screen\n    var winSize = cc.Director.getInstance().getWinSize();\n        var centerPos = cc.p(winSize.width / 2, winSize.height / 2);\n        var spriteBG = cc.Sprite.create(s_PlayBG);\n        spriteBG.setPosition(centerPos);\n        this.addChild(spriteBG);\n    }\n});", 
            "title": "Coding BackgroundLayer(BackgroundLayer.js)"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter4/en/index.html#coding-animationlayeranimationlayerjs", 
            "text": "Here is our main character:  In this section, I will show you how to run actions on the hero. We will run  MoveTo  action on the sprite to move the sprite from (80,85) to (300,85) in two seconds.  Here is the code snippet of AnimationLayer:  var AnimationLayer = cc.Layer.extend({\n    ctor:function () {\n        this._super();\n        this.init();\n    },\n    init:function () {\n        this._super();\n\n        var centerPos = cc.p(80, 85);\n        //cerate the hero sprite\n        var spriteRunner = cc.Sprite.create(s_runner);\n        spriteRunner.setPosition(centerPos);\n\n        //create the move action\n        var actionTo = cc.MoveTo.create(2, cc.p(300, 85));\n        spriteRunner.runAction(cc.Sequence.create(actionTo));\n        this.addChild(spriteRunner);\n    }\n});", 
            "title": "Coding AnimationLayer(AnimationLayer.js)"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter4/en/index.html#coding-statuslayerstatuslayerjs", 
            "text": "In this section, we will add two indicators: the coin quantity indicator and the distance indicator. Both indicator are labels in Cocos2d-html5. Labels are very useful to display HUD information to players. And the code to create and use labels are very easy. Thanks to cocos2d framework.  Here is the code snippet we need to setup the layer:  var StatusLayer = cc.Layer.extend({\n    labelCoin:null,\n    labelMeter:null,\n    coins:0,\n\n    ctor:function () {\n        this._super();\n        this.init();\n    },\n\n    init:function () {\n        this._super();\n\n    var winSize = cc.Director.getInstance().getWinSize();\n        this.labelCoin = cc.LabelTTF.create( Coins:0 ,  Helvetica , 20);\n        this.labelCoin.setColor(cc.c3(0,0,0));//black color\n        this.labelCoin.setPosition(cc.p(70, winSize.height - 20));\n        this.addChild(this.labelCoin);\n\n        this.labelMeter = cc.LabelTTF.create( 0M ,  Helvetica , 20);\n        this.labelMeter.setPosition(cc.p(winSize.width - 70, winSize.height - 20));\n        this.addChild(this.labelMeter);\n    }\n});  We can use  cc.LabelTTF.create  for creating a text label. The first param is the displayed texts, the second param is the Font Family and the third param is the Font size. We can also use  setColor  member function of LabelTTF to set the color of labels. The  cc.c3(0,0,0)  represent black color.", 
            "title": "Coding StatusLayer(StatusLayer.js)"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter4/en/index.html#summary", 
            "text": "In this tutorial, we have learned how to divide a game scene into different layers. Each layer has it's own logic and responsibility. You can download the entire project from  here .  Since the code and logic are very simple, so we don't cover them all in details. If you have any question or suggestions, let us know and we will do our best to support you.", 
            "title": "Summary"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter4/en/index.html#where-to-go-from-here", 
            "text": "In the next tutorial, I will show you how to run animations on the runner and how to pack small images into sprite sheet. I will also introduce a awesome tools named  TexturePakcer  to you guys.", 
            "title": "Where to Go From Here"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter5/en/index.html", 
            "text": "Let the Player Run Animations\n\n\nIntroduction\n\n\nIn the last tutorial, we have moved the player from one point to another. But the movement is a little wired. In this tutorial, I will show you\nhow to run animations on the player. Thus the player's movement will be more realistic.\n\n\nBefore that, I want to show you an awesome tool named \nTexturePacker\n. \n\n\nIntroduction to TexturePacker\n\n\nTexturePacker is a cross-platform GUI and command line tool to create sprite sheets!\nIf you want to learn more about TexturePacker, go to \nthis website\n for more information.\n\n\nHere I will give you a brief introduction for using TexturePacker to generate the animation files we need in our game.\n\n\nBuild Your Own Animations with TexturePacker\n\n\nHere is the building process:\n\n\n\n\nOpen TexturePacker and drag the folder \nTexturePacker\n under \nres/TexturePacker\n  in to TexturePacker's sprite area.\n\n\n\n\n\n\nWhen you add new images into the \nTexturePacker\n folder, TexturePacker will automatically detect the changes and load the images.\n\n\n\n\n\n\nChoose \"data format\" to \"cocos2d\" and \"data format\" to \"png\" from the TextureSettings panel(which is the default settings).\n\n\n\n\n\n\nSpecify the \nData file\n and \nTexture file\n path. Here we set the path at \nres\n directory and we set the data file name to \"running.plist\" and the texture file to \"running.png\".\n\n\n\n\n\n\n\n\n\n\nClick \npublish\n. Now a dialog will appear, if there are no errors, then it will  generate \"running.png\" and \"running.plist\" in the right place.\n\n\n\n\n\n\nOk, we have successfully generate the running animation files. Next let's play with the generated animation files.\n\n\nLoad Animations Files in Cocos2d-HTML5\n\n\nPreparation\n\n\nAt first, we should add the running.plist and running.png  to \nresource.js\n file.\n\n\nvar s_HelloBG = \nhelloBG.png\n;\nvar s_start_n = \nstart_n.png\n;\nvar s_start_s = \nstart_s.png\n;\nvar s_PlayBG = \nPlayBG.png\n;\nvar s_runner = \nrunning.png\n;\nvar s_runnerplist = \nrunning.plist\n;\n\n\nvar g_resources = [\n    //image\n    {src:s_HelloBG},\n    {src:s_start_n},\n    {src:s_start_s},\n    {src:s_PlayBG},\n    {src:s_runner},\n    {src:s_runnerplist}\n];\n\n\n\n\nHere, we have changed the variable \ns_runner\n's value to \"running.png\" which is a spritesheet. We will create our player sprite from the \nrunning.png\n\nin the future.\n\n\nCreate Player Animation\n\n\nAt first, we should add the following member variables in \nAnimationLayer.js\n:\n\n\nspriteSheet:null,\nrunningAction:null,\nsprite:null,\n\n\n\n\nThen we should replace the player creation method to:\n\n\nthis.sprite = cc.Sprite.createWithSpriteFrameName(\nrunner0.png\n);\n\n\n\n\nWe can easily create a animation with the following code:\n\n\n//1.load spritesheet \n cc.SpriteFrameCache.getInstance().addSpriteFrames(s_runnerplist);\n\n//2.create spriteframe array\nvar animFrames = [];\nfor (var i = 0; i \n 8; i++) {\n    var str = \nrunner\n + i + \n.png\n;\n    var frame = cc.SpriteFrameCache.getInstance().getSpriteFrame(str);\n    animFrames.push(frame);\n}\n//3.create a animation with the spriteframe array along with a period time\nvar animation = cc.Animation.create(animFrames, 0.1);\n\n//4.wrap the animate action with a repeat forever action\nthis.runningAction = cc.RepeatForever.create(cc.Animate.create(animation));\n\n\n\n\nThe animation is constructed from a series of small images(from runner0.png to runner7.png) in the spritesheet.\n\n\nHere is the completely process to create a animation in Cocos2d-html5:\n\n\n\n\nLoad spritesheet plist file into SpriteFrameCache class.\n\n\nAdd animation frames to the array \nanimFrames\n\n\nCreate a cc.Animation object from the animation frame array along with a delay time between each sprite frame.\n\n\nCreate the final cc.Animate object and wrap it when a RepeatForever action. Thus the animation will run infinite.\n\n\n\n\nGenerally, if we use animations in Cocos2d-html5, we always use \nSpriteBatchNode\n to boost game performance.\n\n\nThe final code of the \nAnimationLayer.js\n is:\n\n\nvar AnimationLayer = cc.Layer.extend({\n    spriteSheet:null,\n    runningAction:null,\n    sprite:null,\n    ctor:function () {\n        this._super();\n        this.init();\n    },\n\n    init:function () {\n        this._super();\n\n        // create sprite sheet\n        cc.SpriteFrameCache.getInstance().addSpriteFrames(s_runnerplist);\n        this.spriteSheet = cc.SpriteBatchNode.create(s_runner);\n        this.addChild(this.spriteSheet);\n\n\n        // init runningAction\n        var animFrames = [];\n        for (var i = 0; i \n 8; i++) {\n            var str = \nrunner\n + i + \n.png\n;\n            var frame = cc.SpriteFrameCache.getInstance().getSpriteFrame(str);\n            animFrames.push(frame);\n        }\n\n        var animation = cc.Animation.create(animFrames, 0.1);\n        this.runningAction = cc.RepeatForever.create(cc.Animate.create(animation));\n        this.sprite = cc.Sprite.createWithSpriteFrameName(\nrunner0.png\n);\n        this.sprite.setPosition(cc.p(80, 85));\n        this.sprite.runAction(this.runningAction);\n        this.spriteSheet.addChild(this.sprite);\n    }\n});\n\n\n\n\nNow, you can run the project and you will get a infinite running player in your game screen.\n\n\n\n\nSummary\n\n\nIn this tutorial, we have learned how to use TexturePacker to generate animation and how to run animation on a sprite within Cocos2d-html5.\n\n\nYou can download the entire project from \nhere\n.\n\n\nWhere to Go from Here?\n\n\nIn the next tutorial, we will add chipmunk physics into our game world. Thus our game will look more realistic.", 
            "title": "_Chapter5"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter5/en/index.html#let-the-player-run-animations", 
            "text": "", 
            "title": "Let the Player Run Animations"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter5/en/index.html#introduction", 
            "text": "In the last tutorial, we have moved the player from one point to another. But the movement is a little wired. In this tutorial, I will show you\nhow to run animations on the player. Thus the player's movement will be more realistic.  Before that, I want to show you an awesome tool named  TexturePacker .", 
            "title": "Introduction"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter5/en/index.html#introduction-to-texturepacker", 
            "text": "TexturePacker is a cross-platform GUI and command line tool to create sprite sheets!\nIf you want to learn more about TexturePacker, go to  this website  for more information.  Here I will give you a brief introduction for using TexturePacker to generate the animation files we need in our game.", 
            "title": "Introduction to TexturePacker"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter5/en/index.html#build-your-own-animations-with-texturepacker", 
            "text": "Here is the building process:   Open TexturePacker and drag the folder  TexturePacker  under  res/TexturePacker   in to TexturePacker's sprite area.    When you add new images into the  TexturePacker  folder, TexturePacker will automatically detect the changes and load the images.    Choose \"data format\" to \"cocos2d\" and \"data format\" to \"png\" from the TextureSettings panel(which is the default settings).    Specify the  Data file  and  Texture file  path. Here we set the path at  res  directory and we set the data file name to \"running.plist\" and the texture file to \"running.png\".      Click  publish . Now a dialog will appear, if there are no errors, then it will  generate \"running.png\" and \"running.plist\" in the right place.    Ok, we have successfully generate the running animation files. Next let's play with the generated animation files.", 
            "title": "Build Your Own Animations with TexturePacker"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter5/en/index.html#load-animations-files-in-cocos2d-html5", 
            "text": "", 
            "title": "Load Animations Files in Cocos2d-HTML5"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter5/en/index.html#preparation", 
            "text": "At first, we should add the running.plist and running.png  to  resource.js  file.  var s_HelloBG =  helloBG.png ;\nvar s_start_n =  start_n.png ;\nvar s_start_s =  start_s.png ;\nvar s_PlayBG =  PlayBG.png ;\nvar s_runner =  running.png ;\nvar s_runnerplist =  running.plist ;\n\n\nvar g_resources = [\n    //image\n    {src:s_HelloBG},\n    {src:s_start_n},\n    {src:s_start_s},\n    {src:s_PlayBG},\n    {src:s_runner},\n    {src:s_runnerplist}\n];  Here, we have changed the variable  s_runner 's value to \"running.png\" which is a spritesheet. We will create our player sprite from the  running.png \nin the future.", 
            "title": "Preparation"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter5/en/index.html#create-player-animation", 
            "text": "At first, we should add the following member variables in  AnimationLayer.js :  spriteSheet:null,\nrunningAction:null,\nsprite:null,  Then we should replace the player creation method to:  this.sprite = cc.Sprite.createWithSpriteFrameName( runner0.png );  We can easily create a animation with the following code:  //1.load spritesheet \n cc.SpriteFrameCache.getInstance().addSpriteFrames(s_runnerplist);\n\n//2.create spriteframe array\nvar animFrames = [];\nfor (var i = 0; i   8; i++) {\n    var str =  runner  + i +  .png ;\n    var frame = cc.SpriteFrameCache.getInstance().getSpriteFrame(str);\n    animFrames.push(frame);\n}\n//3.create a animation with the spriteframe array along with a period time\nvar animation = cc.Animation.create(animFrames, 0.1);\n\n//4.wrap the animate action with a repeat forever action\nthis.runningAction = cc.RepeatForever.create(cc.Animate.create(animation));  The animation is constructed from a series of small images(from runner0.png to runner7.png) in the spritesheet.  Here is the completely process to create a animation in Cocos2d-html5:   Load spritesheet plist file into SpriteFrameCache class.  Add animation frames to the array  animFrames  Create a cc.Animation object from the animation frame array along with a delay time between each sprite frame.  Create the final cc.Animate object and wrap it when a RepeatForever action. Thus the animation will run infinite.   Generally, if we use animations in Cocos2d-html5, we always use  SpriteBatchNode  to boost game performance.  The final code of the  AnimationLayer.js  is:  var AnimationLayer = cc.Layer.extend({\n    spriteSheet:null,\n    runningAction:null,\n    sprite:null,\n    ctor:function () {\n        this._super();\n        this.init();\n    },\n\n    init:function () {\n        this._super();\n\n        // create sprite sheet\n        cc.SpriteFrameCache.getInstance().addSpriteFrames(s_runnerplist);\n        this.spriteSheet = cc.SpriteBatchNode.create(s_runner);\n        this.addChild(this.spriteSheet);\n\n\n        // init runningAction\n        var animFrames = [];\n        for (var i = 0; i   8; i++) {\n            var str =  runner  + i +  .png ;\n            var frame = cc.SpriteFrameCache.getInstance().getSpriteFrame(str);\n            animFrames.push(frame);\n        }\n\n        var animation = cc.Animation.create(animFrames, 0.1);\n        this.runningAction = cc.RepeatForever.create(cc.Animate.create(animation));\n        this.sprite = cc.Sprite.createWithSpriteFrameName( runner0.png );\n        this.sprite.setPosition(cc.p(80, 85));\n        this.sprite.runAction(this.runningAction);\n        this.spriteSheet.addChild(this.sprite);\n    }\n});  Now, you can run the project and you will get a infinite running player in your game screen.", 
            "title": "Create Player Animation"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter5/en/index.html#summary", 
            "text": "In this tutorial, we have learned how to use TexturePacker to generate animation and how to run animation on a sprite within Cocos2d-html5.  You can download the entire project from  here .", 
            "title": "Summary"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter5/en/index.html#where-to-go-from-here", 
            "text": "In the next tutorial, we will add chipmunk physics into our game world. Thus our game will look more realistic.", 
            "title": "Where to Go from Here?"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter6/en/index.html", 
            "text": "Add Chipmunk Physic Engine to Our Game\n\n\nIntroduction\n\n\nCocos2d-html5 can give us the power to create impressive game world. But it lacks some sort of realistic.\nThough we can do complex compute to make the game world more realistic, but there is an another option\nwhich can ease our life. The answer is \nphysic engine\n.\n\n\nPhysic engine provides gravity, collide detection and physic simulation which can make our game world looks more realistic.\n\n\nIn this tutorial, we will introduce Chipmunk physics engine into our parkour game.\n\n\nWhy Chipmunk Physics?\n\n\nWhy should we choose Chipmunk physic engine? Because it is give us much more power than any other 2D physics engine.\n\n\nDespite Chipmunk physic engine, there is another option - Box2D.\n\n\nBox2D is a nice 2D physic engine and it has been existed for a very long time. Many 2d games have been using Box2D for their game physics.\n\n\nBut Chipmunk has it's own advantages. You can go to Chipmunk's \nwebsite\n for more information.\n\n\nEnable Chipmunk Physic in Cocos2d-html5\n\n\nPreparation\n\n\nAt first, let's enable Chipmunk in Cocos2d-html5.\n\n\nOpen \ncocos2d.js\n file, and modify:\n\n\nchipmunk:false,\n\n\n\n\nto:\n\n\nchipmunk:true,\n\n\n\n\nThus, when Cocos2d-html5 finish launching, it will load Chipmunk library automatically.\n\n\nNext, let's create a new file named \nglobals.js\n and add two global variables into it.\n\n\nvar g_groundHight = 57;\nvar g_runnerStartX = 80;\n\n\n\n\nAt last, we should tell the framework to load \nglobals.js\n file when engine launches.\nAppend \nglobals.js\n path to the end of \nappFiles\n array:\n\n\n  appFiles:[\n            'src/resource.js',\n            'src/myApp.js',\n            'src/AnimationLayer.js',\n            'src/BackgroundLayer.js',\n            'src/PlayScene.js',\n            'src/StatusLayer.js',\n            'src/globals.js'\n        ]\n\n\n\n\nNote:\n Whenever you add a new file in Cocos2d-html5, you should remember to add it to the \nappFiles\n array.\n\n\nInitialize Chipmunk physic world\n\n\nIn Chipmunk, there is a \nspace\n object to represent the physic world.\n\n\nAt first, let's add a new member variable named \nspace\n  in \nPlayScene.js\n file:\n\n\nspace:null,\n\n\n\n\nIn general, one game just needs a \nspace\n object. The space object can be shared by different layers.\nWe usually put the \nspace initialize code\n in PlayScene.\n\n\nHere is the code to setup the physic world:\n\n\n    // init space of chipmunk\n    initPhysics:function() {\n        //1. new space object \n        this.space = new cp.Space();\n        //2. setup the  Gravity\n        this.space.gravity = cp.v(0, -350);\n\n        // 3. set up Walls\n        var wallBottom = new cp.SegmentShape(this.space.staticBody,\n            cp.v(0, g_groundHight),// start point\n            cp.v(4294967295, g_groundHight),// MAX INT:4294967295\n            0);// thickness of wall\n        this.space.addStaticShape(wallBottom);\n    },\n\n\n\n\nThe above code is self-explanatory so we can safely leave it out. If you want to know the details of these API, you should\nrefer to Chipmunk's official documentation for more information.\n\n\nNext, let's define our game's main loop:\n\n\n    update:function (dt) {\n        // chipmunk step\n        this.space.step(dt);\n    }\n\n\n\n\nIn the \nupdate\n function, we tell Chipmunk start to simulate physics.\n\n\nBefore we go any further, let's add a minor change to \nAnimationLayer\n. Since we will create physic actor in AnimationLayer, so\nwe should modify the constructor of AnimationLayer to pass the \nspace\n object in.\n\n\nctor:function (space) {\n        this._super();\n        this.space = space;\n        this.init();\n    },\n\n\n\n\nOf course, we should define a weak ref member variable in AnimationLayer and initialize it to \nnull\n.\n\n\nThus our preparation work has been done. let's wrap the end and call these method in \nonEnter\n function:\n\n\n    onEnter:function () {\n        this._super();\n        this.initPhysics();\n\n        this.addChild(new BackgroundLayer());\n        this.addChild(new AnimationLayer(this.space));\n        this.addChild(new StatusLayer());\n\n        this.scheduleUpdate();\n    },\n\n\n\n\nAdd Physics Component to the Runner Sprite\n\n\nIn the last tutorial, we create the runner by using spritsheet. In this section, we will rewrite the runner by using \nPhysicsSprite\n.\n\n\nThe PhysicsSprite is a reusable component which can combine the physic body with a cocos2d sprite.\n\n\nHere is the code to create the runner with PhysicsSprite:\n\n\n        //1. create PhysicsSprite with a sprite frame name\n        this.sprite = cc.PhysicsSprite.createWithSpriteFrameName(\nrunner0.png\n);\n        var contentSize = this.sprite.getContentSize();\n        // 2. init the runner physic body\n        this.body = new cp.Body(1, cp.momentForBox(1, contentSize.width, contentSize.height));\n        //3. set the position of the runner\n        this.body.p = cc.p(g_runnerStartX, g_groundHight + contentSize.height / 2);\n        //4. apply impulse to the body\n        this.body.applyImpulse(cp.v(150, 0), cp.v(0, 0));//run speed\n        //5. add the created body to space\n        this.space.addBody(this.body);\n        //6. create the shape for the body\n        this.shape = new cp.BoxShape(this.body, contentSize.width - 14, contentSize.height);\n        //7. add shape to space\n        this.space.addShape(this.shape);\n        //8. set body to the physic sprite\n        this.sprite.setBody(this.body);\n\n\n\n\nThe code and comment are self-explanatory. Add these code in \nAnimationLayer\n's \ninit\n method.\n\n\nDebug and Test\n\n\nCongratulations. You have done all the bolts and nuts. You can just press the \ndebug\n button within \nWebstorm\n.\n\n\n\n\nNow you can see the runner run pass through the screen.\n\n\nSummary\n\n\nIn this tutorial, we have show you how to setup Chipmunk physic world, how to setup the physic world boundary, how to create a rigid body and the associated\nshape. we also add physics to sprite to make it act more realistic. You can grab the entire source code from \nhere\n.\n\n\nWhere to go from here\n\n\nIn the next tutorial, we will introduce the camera movement into the game. And we will also replace the background image with tiledMap.\nMore importantly we will make the background infinite loop displayed in the game. Keep tuning with the next tutorial.", 
            "title": "_Chapter6"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter6/en/index.html#add-chipmunk-physic-engine-to-our-game", 
            "text": "", 
            "title": "Add Chipmunk Physic Engine to Our Game"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter6/en/index.html#introduction", 
            "text": "Cocos2d-html5 can give us the power to create impressive game world. But it lacks some sort of realistic.\nThough we can do complex compute to make the game world more realistic, but there is an another option\nwhich can ease our life. The answer is  physic engine .  Physic engine provides gravity, collide detection and physic simulation which can make our game world looks more realistic.  In this tutorial, we will introduce Chipmunk physics engine into our parkour game.", 
            "title": "Introduction"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter6/en/index.html#why-chipmunk-physics", 
            "text": "Why should we choose Chipmunk physic engine? Because it is give us much more power than any other 2D physics engine.  Despite Chipmunk physic engine, there is another option - Box2D.  Box2D is a nice 2D physic engine and it has been existed for a very long time. Many 2d games have been using Box2D for their game physics.  But Chipmunk has it's own advantages. You can go to Chipmunk's  website  for more information.", 
            "title": "Why Chipmunk Physics?"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter6/en/index.html#enable-chipmunk-physic-in-cocos2d-html5", 
            "text": "", 
            "title": "Enable Chipmunk Physic in Cocos2d-html5"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter6/en/index.html#preparation", 
            "text": "At first, let's enable Chipmunk in Cocos2d-html5.  Open  cocos2d.js  file, and modify:  chipmunk:false,  to:  chipmunk:true,  Thus, when Cocos2d-html5 finish launching, it will load Chipmunk library automatically.  Next, let's create a new file named  globals.js  and add two global variables into it.  var g_groundHight = 57;\nvar g_runnerStartX = 80;  At last, we should tell the framework to load  globals.js  file when engine launches.\nAppend  globals.js  path to the end of  appFiles  array:    appFiles:[\n            'src/resource.js',\n            'src/myApp.js',\n            'src/AnimationLayer.js',\n            'src/BackgroundLayer.js',\n            'src/PlayScene.js',\n            'src/StatusLayer.js',\n            'src/globals.js'\n        ]  Note:  Whenever you add a new file in Cocos2d-html5, you should remember to add it to the  appFiles  array.", 
            "title": "Preparation"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter6/en/index.html#initialize-chipmunk-physic-world", 
            "text": "In Chipmunk, there is a  space  object to represent the physic world.  At first, let's add a new member variable named  space   in  PlayScene.js  file:  space:null,  In general, one game just needs a  space  object. The space object can be shared by different layers.\nWe usually put the  space initialize code  in PlayScene.  Here is the code to setup the physic world:      // init space of chipmunk\n    initPhysics:function() {\n        //1. new space object \n        this.space = new cp.Space();\n        //2. setup the  Gravity\n        this.space.gravity = cp.v(0, -350);\n\n        // 3. set up Walls\n        var wallBottom = new cp.SegmentShape(this.space.staticBody,\n            cp.v(0, g_groundHight),// start point\n            cp.v(4294967295, g_groundHight),// MAX INT:4294967295\n            0);// thickness of wall\n        this.space.addStaticShape(wallBottom);\n    },  The above code is self-explanatory so we can safely leave it out. If you want to know the details of these API, you should\nrefer to Chipmunk's official documentation for more information.  Next, let's define our game's main loop:      update:function (dt) {\n        // chipmunk step\n        this.space.step(dt);\n    }  In the  update  function, we tell Chipmunk start to simulate physics.  Before we go any further, let's add a minor change to  AnimationLayer . Since we will create physic actor in AnimationLayer, so\nwe should modify the constructor of AnimationLayer to pass the  space  object in.  ctor:function (space) {\n        this._super();\n        this.space = space;\n        this.init();\n    },  Of course, we should define a weak ref member variable in AnimationLayer and initialize it to  null .  Thus our preparation work has been done. let's wrap the end and call these method in  onEnter  function:      onEnter:function () {\n        this._super();\n        this.initPhysics();\n\n        this.addChild(new BackgroundLayer());\n        this.addChild(new AnimationLayer(this.space));\n        this.addChild(new StatusLayer());\n\n        this.scheduleUpdate();\n    },", 
            "title": "Initialize Chipmunk physic world"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter6/en/index.html#add-physics-component-to-the-runner-sprite", 
            "text": "In the last tutorial, we create the runner by using spritsheet. In this section, we will rewrite the runner by using  PhysicsSprite .  The PhysicsSprite is a reusable component which can combine the physic body with a cocos2d sprite.  Here is the code to create the runner with PhysicsSprite:          //1. create PhysicsSprite with a sprite frame name\n        this.sprite = cc.PhysicsSprite.createWithSpriteFrameName( runner0.png );\n        var contentSize = this.sprite.getContentSize();\n        // 2. init the runner physic body\n        this.body = new cp.Body(1, cp.momentForBox(1, contentSize.width, contentSize.height));\n        //3. set the position of the runner\n        this.body.p = cc.p(g_runnerStartX, g_groundHight + contentSize.height / 2);\n        //4. apply impulse to the body\n        this.body.applyImpulse(cp.v(150, 0), cp.v(0, 0));//run speed\n        //5. add the created body to space\n        this.space.addBody(this.body);\n        //6. create the shape for the body\n        this.shape = new cp.BoxShape(this.body, contentSize.width - 14, contentSize.height);\n        //7. add shape to space\n        this.space.addShape(this.shape);\n        //8. set body to the physic sprite\n        this.sprite.setBody(this.body);  The code and comment are self-explanatory. Add these code in  AnimationLayer 's  init  method.", 
            "title": "Add Physics Component to the Runner Sprite"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter6/en/index.html#debug-and-test", 
            "text": "Congratulations. You have done all the bolts and nuts. You can just press the  debug  button within  Webstorm .   Now you can see the runner run pass through the screen.", 
            "title": "Debug and Test"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter6/en/index.html#summary", 
            "text": "In this tutorial, we have show you how to setup Chipmunk physic world, how to setup the physic world boundary, how to create a rigid body and the associated\nshape. we also add physics to sprite to make it act more realistic. You can grab the entire source code from  here .", 
            "title": "Summary"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter6/en/index.html#where-to-go-from-here", 
            "text": "In the next tutorial, we will introduce the camera movement into the game. And we will also replace the background image with tiledMap.\nMore importantly we will make the background infinite loop displayed in the game. Keep tuning with the next tutorial.", 
            "title": "Where to go from here"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter7/en/index.html", 
            "text": "Explorer with TiledMap and Camera\n\n\nIntroduction\n\n\nIn this tutorial, I will show you how to add TiledMap to the parkour game as the new background.\n\n\nWe will also learn how to make the background to scroll infinitely and the player to run infinitely.\n\n\nThe magic behind these is all about moving the cocos2d camera.\n\n\nDo Some Preparation Stuff\n\n\nBefore we get our hands dirty, let's add the resource files and the corresponding names to our game.\n\n\nSetup Resource and Globals\n\n\nSince we will need to refer to other layers within each layers. So the best way to retrieve the layer is via \ntag\n.\n\n\nAdd the following code into \nglobals.js\n:\n\n\nif(typeof TagOfLayer == \nundefined\n) {\n    var TagOfLayer = {};\n    TagOfLayer.background = 0;\n    TagOfLayer.Animation = 1;\n    TagOfLayer.Status = 2;\n};\n\n\n\n\nHere we give background layer, animation layer and status layer a tag name, thus we can retrieve other layer by tag.\n\n\nWe also need add the resource variables in \nresource.js\n:\n\n\n//Our two tiled map are named s_map00 and s_map01.\nvar s_map = \nmap.png\n;\nvar s_map00 = \nmap00.tmx\n;\nvar s_map01 = \nmap01.tmx\n;\nvar g_resources = [\n    //image\n    //There are a lot of image defined here, we just omit it for clarifying.\n    {src:s_map},\n    {src:s_map00},\n    {src:s_map01}\n];\n\n\n\n\nThe above code is self-explanation so let's go to the next section.\n\n\nEnable Chipmunk Debug Drawing\n\n\nIf we are doing Chipmunk physics, you'd better to enable debug drawing. So the debug process will be more handy.\n\n\nAdd the following code into \nAnimationLayer.js\n 's ctor function:\n\n\nthis._debugNode = cc.PhysicsDebugNode.create(this.space);\n// Parallax ratio and offset\nthis.addChild(this._debugNode, 10);\n\n\n\n\nWhen you run the game again, you will see a red box above the running player:\n\n\n\n\nIntroduction to TiledMap\n\n\nTiledMap is a very common used concepts in 2d games. It is useful for building large level map and some parallax scrolling background.\n\n\nTiledMap consumes less memory than normal PNG file. If you want to build some huge level map, it is definitely your right choice.\n\n\nWithout further ado, let's dive into the TiledMap.\n\n\nDesign and Make the TiledMap Background\n\n\nAt first, you should download TiledMap. You can download it from \nhere\n. Since TiledMap is a cross platform software.\n\n\nThere are many different kinds of version available. You can choose a version according to your operating system. After downloading the Tiled editor, you should be\nfamiliar with it's usage. You may want to take a look at it's \ndocumentation\n.\n\n\nWhen you feel comfortable with Tiled, you can design your tiled map with the tilesets we provided.\n\n\nThe detail process of making the two tiled map is out of scope of this tutorial.\n\n\n(\nNote: If you can't make the tiled map by yourself, you can safely skip the process and use the tiled map provided by us.\n)\n\n\n\n\nReplace Previous Background with TiledMap\n\n\nNow, it's time to replace the old static background image with our new awesome tiled map.\n\n\nWe will do this in \nBackgroundLayer.js\n. At first, we should add four member variables in BackgroundLayer class:\n\n\nmap00:null,\nmap01:null,\nmapWidth:0,\nmapIndex:0,\n\n\n\n\nThe we should delete the old code we needed to create the static background.\n\n\n(\nNote\n: Here I uncomment the code snippets, you can safely delete all of them.)\n\n\n//        var winSize = cc.Director.getInstance().getWinSize();\n//\n//        var centerPos = cc.p(winSize.width / 2, winSize.height / 2);\n//        var spriteBG = cc.Sprite.create(s_PlayBG);\n//        spriteBG.setPosition(centerPos);\n//        this.addChild(spriteBG);\n\n\n\n\nAt last, we will add the new code snippets to create the tiled map background.\n\n\nthis.map00 = cc.TMXTiledMap.create(s_map00);\nthis.addChild(this.map00);\nthis.mapWidth = this.map00.getContentSize().width;\nthis.map01 = cc.TMXTiledMap.create(s_map01);\nthis.map01.setPosition(cc.p(this.mapWidth, 0));\nthis.addChild(this.map01);\n\n\n\n\nSave all the changes and run it:\n\n\n\n\nHere, we add two maps. The \nmap01\n is right beside the \nmap00\n background. In the later section, We will explain why we should add two maps.\n\n\nIntroduction to Camera\n\n\nCamera seems a little bit complex in 3D graphic programming. But it is very trivial in 2D game. In this section, we won't cover the theory of camera.\n\n\nNor do we go deep into the implementation details of moving a node's camera.\n\n\nWe will just show you how to implement the logic of moving a node's camera.\n\n\nMove the Animation Layer Camera\n\n\nAt first, we need to move the animation layer's camera. So that player and chipmunk rigid body will go with the same speed.\n\n\nSince the physic body will move right infinitely and the sprite will synchronize it's position with the physic body.\n\n\nA few seconds later, the player will go outside of the screen, just as it is in the last tutorial.\n\n\nSo we need to move the camera's x position each frame. Here is the code snippets:\n\n\ngetEyeX:function () {\n    return this.sprite.getPositionX() - g_runnerStartX;\n},\nupdate:function (dt) {\n    var eyeX = this.sprite.getPositionX() - g_runnerStartX;\n    var camera = this.getCamera();\n    var eyeZ = cc.Camera.getZEye();\n    camera.setEye(eyeX, 0, eyeZ);\n    camera.setCenter(eyeX, 0, 0);\n}\n\n\n\n\nHere the \ngetEyeX\n function computes the \ndelta\n movement of animation layer's camera. And in \nupdate\n function, in each frame we will modify the node's camera.\n\n\nYou will notice that we have stored the \neyeZ\n variable before we call camera's \nsetEye\n and \nsetCenter\n function. One more tips: You should always keep the first argument of\n\nsetEye\n and \nsetCenter\n the same value. Otherwise you will suffer some wired display problems.\n\n\nIn the end, we should call the \nupdate\n method each frame by adding the following code at the end of \ninit\n method in AnimationLayer.js:\n\n\nthis.scheduleUpdate();\n\n\n\n\nMove the Background Layer Camera\n\n\nThe process to setup the movement of background layer is almost the same as we do in the last section. But we need to do some calculations of the two tiled map.\n\n\nSo let's do it. Add a new member function \ncheckAndReload\n to BackgroundLayer:\n\n\n    checkAndReload:function (eyeX) {\n        var newMapIndex = parseInt(eyeX / this.mapWidth);\n        if (this.mapIndex == newMapIndex) {\n            return false;\n        }\n        if (0 == newMapIndex % 2) {\n            // change mapSecond\n            this.map01.setPositionX(this.mapWidth * (newMapIndex + 1));\n        } else {\n            // change mapFirst\n            this.map00.setPositionX(this.mapWidth * (newMapIndex + 1));\n        }\n        this.mapIndex = newMapIndex;\n        return true;\n    },\n\n\n\n\nWhen the camera eyeX has exceeded the width of the screen, the expression \nparseInt(eyeX / this.mapWidth)\n will get a value greater than 0.\n\n\nWe will use the \nnewMapIndex\n to decide which map need to move and how many pixels need to move.\n\n\nThen we should call this function in each frame.\n\n\n    update:function (dt) {\n        var animationLayer = this.getParent().getChildByTag(TagOfLayer.Animation);\n        var eyeX = animationLayer.getEyeX();\n        this.checkAndReload(eyeX);\n        var camera = this.getCamera();\n        var eyeZ = cc.Camera.getZEye();\n        camera.setEye(eyeX, 0, eyeZ);\n        camera.setCenter(eyeX, 0, 0);\n    }\n\n\n\n\nAt last, we should call \nscheduleUpdate\n at the end of background layer's init method:\n\n\n this.scheduleUpdate();\n\n\n\n\nWrap it up\n\n\nOk. We should do some last ending work.\n\n\nModify the \nonEnter\n method of PlayScene:\n\n\n    onEnter:function () {\n        this._super();\n        this.initPhysics();\n        this.addChild(new BackgroundLayer(), 0, TagOfLayer.background);\n        this.addChild(new AnimationLayer(this.space),0, TagOfLayer.Animation );\n        this.addChild(new StatusLayer(),0, TagOfLayer.Status);\n        this.scheduleUpdate();\n    },\n\n\n\n\nCheers! You have successfully finish this tutorial. Run and take a look at it.\n\n\nNote\n: If you don't want to display the debug drawing information of a chipmunk rigid body. You can safely add the following code right after the creation\nof the PhysicsDebugNode:\n\n\nthis._debugNode.setVisible(false);\n\n\n\n\nSummary\n\n\nIn this tutorial, we have met TiledMap and Cocos2d camera. These two concepts are very important ones when you development a physic endless running game.\n\n\nYou can download the entire project from \nhere\n.\n\n\nWhere to go from here?\n\n\nIn the next tutorial, we will add coins and obstacles into our game. At that tutorial, we will also learn how to refactor our game code and make it more extensible.\n\n\nWe will also do some cleanup work in PlayScene and encapsulate two class named Coin and Rock.\n\n\nKeep tuning with the next tutorial and happy coding!", 
            "title": "_Chapter7"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter7/en/index.html#explorer-with-tiledmap-and-camera", 
            "text": "", 
            "title": "Explorer with TiledMap and Camera"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter7/en/index.html#introduction", 
            "text": "In this tutorial, I will show you how to add TiledMap to the parkour game as the new background.  We will also learn how to make the background to scroll infinitely and the player to run infinitely.  The magic behind these is all about moving the cocos2d camera.", 
            "title": "Introduction"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter7/en/index.html#do-some-preparation-stuff", 
            "text": "Before we get our hands dirty, let's add the resource files and the corresponding names to our game.", 
            "title": "Do Some Preparation Stuff"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter7/en/index.html#setup-resource-and-globals", 
            "text": "Since we will need to refer to other layers within each layers. So the best way to retrieve the layer is via  tag .  Add the following code into  globals.js :  if(typeof TagOfLayer ==  undefined ) {\n    var TagOfLayer = {};\n    TagOfLayer.background = 0;\n    TagOfLayer.Animation = 1;\n    TagOfLayer.Status = 2;\n};  Here we give background layer, animation layer and status layer a tag name, thus we can retrieve other layer by tag.  We also need add the resource variables in  resource.js :  //Our two tiled map are named s_map00 and s_map01.\nvar s_map =  map.png ;\nvar s_map00 =  map00.tmx ;\nvar s_map01 =  map01.tmx ;\nvar g_resources = [\n    //image\n    //There are a lot of image defined here, we just omit it for clarifying.\n    {src:s_map},\n    {src:s_map00},\n    {src:s_map01}\n];  The above code is self-explanation so let's go to the next section.", 
            "title": "Setup Resource and Globals"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter7/en/index.html#enable-chipmunk-debug-drawing", 
            "text": "If we are doing Chipmunk physics, you'd better to enable debug drawing. So the debug process will be more handy.  Add the following code into  AnimationLayer.js  's ctor function:  this._debugNode = cc.PhysicsDebugNode.create(this.space);\n// Parallax ratio and offset\nthis.addChild(this._debugNode, 10);  When you run the game again, you will see a red box above the running player:", 
            "title": "Enable Chipmunk Debug Drawing"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter7/en/index.html#introduction-to-tiledmap", 
            "text": "TiledMap is a very common used concepts in 2d games. It is useful for building large level map and some parallax scrolling background.  TiledMap consumes less memory than normal PNG file. If you want to build some huge level map, it is definitely your right choice.  Without further ado, let's dive into the TiledMap.", 
            "title": "Introduction to TiledMap"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter7/en/index.html#design-and-make-the-tiledmap-background", 
            "text": "At first, you should download TiledMap. You can download it from  here . Since TiledMap is a cross platform software.  There are many different kinds of version available. You can choose a version according to your operating system. After downloading the Tiled editor, you should be\nfamiliar with it's usage. You may want to take a look at it's  documentation .  When you feel comfortable with Tiled, you can design your tiled map with the tilesets we provided.  The detail process of making the two tiled map is out of scope of this tutorial.  ( Note: If you can't make the tiled map by yourself, you can safely skip the process and use the tiled map provided by us. )", 
            "title": "Design and Make the TiledMap Background"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter7/en/index.html#replace-previous-background-with-tiledmap", 
            "text": "Now, it's time to replace the old static background image with our new awesome tiled map.  We will do this in  BackgroundLayer.js . At first, we should add four member variables in BackgroundLayer class:  map00:null,\nmap01:null,\nmapWidth:0,\nmapIndex:0,  The we should delete the old code we needed to create the static background.  ( Note : Here I uncomment the code snippets, you can safely delete all of them.)  //        var winSize = cc.Director.getInstance().getWinSize();\n//\n//        var centerPos = cc.p(winSize.width / 2, winSize.height / 2);\n//        var spriteBG = cc.Sprite.create(s_PlayBG);\n//        spriteBG.setPosition(centerPos);\n//        this.addChild(spriteBG);  At last, we will add the new code snippets to create the tiled map background.  this.map00 = cc.TMXTiledMap.create(s_map00);\nthis.addChild(this.map00);\nthis.mapWidth = this.map00.getContentSize().width;\nthis.map01 = cc.TMXTiledMap.create(s_map01);\nthis.map01.setPosition(cc.p(this.mapWidth, 0));\nthis.addChild(this.map01);  Save all the changes and run it:   Here, we add two maps. The  map01  is right beside the  map00  background. In the later section, We will explain why we should add two maps.", 
            "title": "Replace Previous Background with TiledMap"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter7/en/index.html#introduction-to-camera", 
            "text": "Camera seems a little bit complex in 3D graphic programming. But it is very trivial in 2D game. In this section, we won't cover the theory of camera.  Nor do we go deep into the implementation details of moving a node's camera.  We will just show you how to implement the logic of moving a node's camera.", 
            "title": "Introduction to Camera"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter7/en/index.html#move-the-animation-layer-camera", 
            "text": "At first, we need to move the animation layer's camera. So that player and chipmunk rigid body will go with the same speed.  Since the physic body will move right infinitely and the sprite will synchronize it's position with the physic body.  A few seconds later, the player will go outside of the screen, just as it is in the last tutorial.  So we need to move the camera's x position each frame. Here is the code snippets:  getEyeX:function () {\n    return this.sprite.getPositionX() - g_runnerStartX;\n},\nupdate:function (dt) {\n    var eyeX = this.sprite.getPositionX() - g_runnerStartX;\n    var camera = this.getCamera();\n    var eyeZ = cc.Camera.getZEye();\n    camera.setEye(eyeX, 0, eyeZ);\n    camera.setCenter(eyeX, 0, 0);\n}  Here the  getEyeX  function computes the  delta  movement of animation layer's camera. And in  update  function, in each frame we will modify the node's camera.  You will notice that we have stored the  eyeZ  variable before we call camera's  setEye  and  setCenter  function. One more tips: You should always keep the first argument of setEye  and  setCenter  the same value. Otherwise you will suffer some wired display problems.  In the end, we should call the  update  method each frame by adding the following code at the end of  init  method in AnimationLayer.js:  this.scheduleUpdate();", 
            "title": "Move the Animation Layer Camera"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter7/en/index.html#move-the-background-layer-camera", 
            "text": "The process to setup the movement of background layer is almost the same as we do in the last section. But we need to do some calculations of the two tiled map.  So let's do it. Add a new member function  checkAndReload  to BackgroundLayer:      checkAndReload:function (eyeX) {\n        var newMapIndex = parseInt(eyeX / this.mapWidth);\n        if (this.mapIndex == newMapIndex) {\n            return false;\n        }\n        if (0 == newMapIndex % 2) {\n            // change mapSecond\n            this.map01.setPositionX(this.mapWidth * (newMapIndex + 1));\n        } else {\n            // change mapFirst\n            this.map00.setPositionX(this.mapWidth * (newMapIndex + 1));\n        }\n        this.mapIndex = newMapIndex;\n        return true;\n    },  When the camera eyeX has exceeded the width of the screen, the expression  parseInt(eyeX / this.mapWidth)  will get a value greater than 0.  We will use the  newMapIndex  to decide which map need to move and how many pixels need to move.  Then we should call this function in each frame.      update:function (dt) {\n        var animationLayer = this.getParent().getChildByTag(TagOfLayer.Animation);\n        var eyeX = animationLayer.getEyeX();\n        this.checkAndReload(eyeX);\n        var camera = this.getCamera();\n        var eyeZ = cc.Camera.getZEye();\n        camera.setEye(eyeX, 0, eyeZ);\n        camera.setCenter(eyeX, 0, 0);\n    }  At last, we should call  scheduleUpdate  at the end of background layer's init method:   this.scheduleUpdate();", 
            "title": "Move the Background Layer Camera"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter7/en/index.html#wrap-it-up", 
            "text": "Ok. We should do some last ending work.  Modify the  onEnter  method of PlayScene:      onEnter:function () {\n        this._super();\n        this.initPhysics();\n        this.addChild(new BackgroundLayer(), 0, TagOfLayer.background);\n        this.addChild(new AnimationLayer(this.space),0, TagOfLayer.Animation );\n        this.addChild(new StatusLayer(),0, TagOfLayer.Status);\n        this.scheduleUpdate();\n    },  Cheers! You have successfully finish this tutorial. Run and take a look at it.  Note : If you don't want to display the debug drawing information of a chipmunk rigid body. You can safely add the following code right after the creation\nof the PhysicsDebugNode:  this._debugNode.setVisible(false);", 
            "title": "Wrap it up"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter7/en/index.html#summary", 
            "text": "In this tutorial, we have met TiledMap and Cocos2d camera. These two concepts are very important ones when you development a physic endless running game.  You can download the entire project from  here .", 
            "title": "Summary"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter7/en/index.html#where-to-go-from-here", 
            "text": "In the next tutorial, we will add coins and obstacles into our game. At that tutorial, we will also learn how to refactor our game code and make it more extensible.  We will also do some cleanup work in PlayScene and encapsulate two class named Coin and Rock.  Keep tuning with the next tutorial and happy coding!", 
            "title": "Where to go from here?"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter8/en/index.html", 
            "text": "Add Coin and Obstacles Into Our Game\n\n\nIntroduction\n\n\nIn this tutorial, we will try to add Coin and Obstacles into our parkour game.\n\n\nAfter this tutorial, our player should be able to collect the coin when he is running and he will die when he collides with the obstacle.\n\n\nWe will also cover how to design a game level with tiled map editor. Since the game logic is a little bit complex than before,\nso we will refactor the code before we adding new game components.\n\n\nPreparation\n\n\nBefore we start, let's finish the preparation stuff.\n\n\nSetup Resource and Globals\n\n\nSince we will add two more game elements into our parkour game. So we need add some more global integer tags to identify each game items.\n\n\nLet's add the following code snippets at the end of \nglobals.js\n:\n\n\n// collision type for chipmunk\nif(typeof SpriteTag == \nundefined\n) {\n    var SpriteTag = {};\n    SpriteTag.runner = 0;\n    SpriteTag.coin = 1;\n    SpriteTag.rock = 2;\n};\n\n\n\n\nHere we use 0,1,2 to represent runner,coin and rock.\n\n\nWe also introduce another spritesheet named \nbackground.png\n and \nbackground.plist\n. We have packed the coins and rocks sprites into the spritesheet named background.png.\n\n\nThe details of how to pack these sprites are leave out for the next subsection.\n\n\nNext, let's copy the resource files into our \nres\n directory and add two more variables for further referring.\n\n\nvar s_background = \nbackground.png\n;\nvar s_background_plist = \nbackground.plist\n;\n\n\nvar g_resources = [\n    //image\n    {src:s_HelloBG},\n    {src:s_start_n},\n    {src:s_start_s},\n    {src:s_runner},\n    {src:s_runnerplist},\n    {src:s_background},\n    {src:s_background_plist},\n    {src:s_map},\n    {src:s_map00},\n    {src:s_map01}\n];\n\n\n\n\nPack Coins and Rocks into Spritesheet with TexturePacker\n\n\nIn the previous chapter, we have learned how to pack a bunch of small sprites into a big large compact spritesheet. Let's pack another spritesheet.\n\n\nAt first, you should launch TexturePacker and drag all the assets under \nres/TexturePacker/coins and rocks\n director.(Note: You can get the whole game resource from the download as before.)\n\n\nAfter dragging the resource, you should specify the \nData file\n and \nTexture format\n with some path like \nxxx/chapter8/res/background.png\n or \nxxx/chapter8/res/background.plist\n.\n\n\nIf you don't want to any optimization of the spritesheet, just leave them out and press \nPublish\n to generate the final spritesheet.\n\n\n\n\nIntroduction to TiledMap Object Layer\n\n\nWe have used TiledMap for our level map, but it lacks game items. So in this section, we will cover how to design level items with TiledMap object layer.\n\n\nAdd Coin Object Layer\n\n\nAt first, we'll add Coin object layer.\n\n\n\n\n\n\nLaunch Tiled and open \nmap00.tmx\n and \nmap01.tmx\n.\n\n\n\n\n\n\nCreate an Object layer named \ncoin\n in map00.tmx and map01.tmx.\n\n\n\n\n\n\n\nDesign object layer by dragging and dropping rectangle object into the map.\nYou can change the rectangle size and it's position. You can also duplicate or delete the objects.\n\n\n\n\n\n\n\n\n\n\nSome tips on designing object layer:\nYou can change opacity of the layers in the tiled map so that you can easily place the object.\n\n\n\n\nAdd Rock Object Layer\n\n\nThe process to create the Rock object layer is more or less the same as creating coin object layer.\n\n\nSo we will leave it out for your own implementation.\n\n\nRefactor BackgroundLayer Class and Add Some Helper Method\n\n\nSometimes, when you are coding, you may find that it is extremely hard to add new functionality into the existing structure.\n\n\nIt is a bad code smell and we should stop and do refactor work right now.\n\n\nRefactor BackgroundLayer Class\n\n\nSince we will add Chipmunk physic body into our background, so we need a method to obtain the \nspace\n object created in \nPlayScene\n.\n\n\nLet's change the name of \nctor\n function in Background Layer and pass a parameter named \nspace\n into it. We should also add a new member variable into the\nBackgroundLayer class. Here is the code snippets:\n\n\n    ctor:function (space) {\n        this._super();\n\n        // clean old array here\n        this.objects = [];\n        this.space = space;\n\n        this.init();\n    },\n\n\n\n\nHere we have added additional init code. We added a array named \nobjects\n and initialize it to an empty array.\n\n\n(\nNote: You should call this.init() method right after the assignment of this.space = space. Because we will create physic objects in the init method\n)\n\n\nAdd Helper Method\n\n\n\n\nAdd more member variables into BackgroundLayer class:\n\n\n\n\n    space:null,\n    spriteSheet:null,\n    objects:[],\n\n\n\n\n\n\nInitialize spritesheet in the \ninit\n method:\n\n\n\n\n    // create sprite sheet\n        cc.SpriteFrameCache.getInstance().addSpriteFrames(s_background_plist);\n        this.spriteSheet = cc.SpriteBatchNode.create(s_background);\n        this.addChild(this.spriteSheet);\n\n\n\n\n\n\nAdd a method named \nloadObject\n to initialize rock and coins.\n\n\n\n\n loadObjects:function (map, mapIndex) {\n        // add coins\n        var coinGroup = map.getObjectGroup(\ncoin\n);\n        var coinArray = coinGroup.getObjects();\n        for (var i = 0; i \n coinArray.length; i++) {\n            var coin = new Coin(this.spriteSheet,\n                this.space,\n                cc.p(coinArray[i][\nx\n] + this.mapWidth * mapIndex,coinArray[i][\ny\n]));\n            coin.mapIndex = mapIndex;\n            this.objects.push(coin);\n        }\n\n        // add rock\n        var rockGroup = map.getObjectGroup(\nrock\n);\n        var rockArray = rockGroup.getObjects();\n        for (var i = 0; i \n rockArray.length; i++) {\n            var rock = new Rock(this.spriteSheet,\n                this.space,\n                rockArray[i][\nx\n] + this.mapWidth * mapIndex);\n            rock.mapIndex = mapIndex;\n            this.objects.push(rock);\n        }\n    },\n\n\n\n\nHere we iterate all the objects info in the tiled map and create responding Chipmunk rigid bodies. Finally we store these object into the \nobjects\n array.\n\n\nAll these code are self-explanation. You should only pay attention to the \nmapIndex\n parameter. We use the parameter to calculate where we should place the rigid body.\n\n\nWe need call \nloadObject\n method at the end of \ninit\n method to create the  physic objects in the first two screen maps.\n\n\nthis.loadObjects(this.map00, 0);\nthis.loadObjects(this.map01, 1);\n\n\n\n\n\n\nAdd another two helper methods for removing unused chipmunk rigid bodies.\n\n\n\n\nThe first method is called \nremoveObjects\n. It removes a object by \nmapIndex\n. Here is the implementation:\n\n\nremoveObjects:function (mapIndex) {\n        while((function (obj, index) {\n            for (var i = 0; i \n obj.length; i++) {\n                if (obj[i].mapIndex == index) {\n                    obj[i].removeFromParent();\n                    obj.splice(i, 1);\n                    return true;\n                }\n            }\n            return false;\n        })(this.objects, mapIndex));\n    },\n\n\n\n\nThe other method is called \nremoveObjectByShape\n:\n\n\n   removeObjectByShape:function (shape) {\n        for (var i = 0; i \n this.objects.length; i++) {\n            if (this.objects[i].getShape() == shape) {\n                this.objects[i].removeFromParent();\n                this.objects.splice(i, 1);\n                break;\n            }\n        }\n    },\n\n\n\n\nThis method will remove a chipmunk object by its shape.\n\n\nWrap it up: Add Creation and Disposable Logic in checkAndReload Method\n\n\nWhen the map is moved, we should also call \nloadObject\n method to recreate the \"Coins \n Rocks\".\n\n\nAnd also we should remove all unused objects by calling \nremoveObjects\n method.\n\n\nHere is the code snippets:\n\n\n  checkAndReload:function (eyeX) {\n        var newMapIndex = parseInt(eyeX / this.mapWidth);\n        if (this.mapIndex == newMapIndex) {\n            return false;\n        }\n\n        if (0 == newMapIndex % 2) {\n            // change mapSecond\n            this.map01.setPositionX(this.mapWidth * (newMapIndex + 1));\n            this.loadObjects(this.map01, newMapIndex + 1);\n        } else {\n            // change mapFirst\n            this.map00.setPositionX(this.mapWidth * (newMapIndex + 1));\n            this.loadObjects(this.map00, newMapIndex + 1);\n        }\n        this.removeObjects(newMapIndex - 1);\n        this.mapIndex = newMapIndex;\n\n        return true;\n    },\n\n\n\n\nAdd Coin and Rock\n\n\nNow it's time to add the coin and rock implementation. Despite the implementation details, you should also pay attention to the design idea behind these two\nclasses. Here we prefer to inherit from cc.Class instead of cc.Sprite. We let each object to own a instance of cc.Sprite.\n\n\nDesign and Implement Coin Class\n\n\n\n\n\n\nCreate a new file named \nCoin.js\n. We will define our Coin class in this file. Make sure you have this filed located in your \nsrc\n directory.\n\n\n\n\n\n\nDerived a class named \nCoin\n from cc.Class, let's take a look at the whole implementation:\n\n\n\n\n\n\nvar Coin = cc.Class.extend({\n    space:null,\n    sprite:null,\n    shape:null,\n    _mapIndex:0,// which map belongs to\n    get mapIndex() {\n        return this._mapIndex;\n    },\n    set mapIndex(index) {\n        this._mapIndex = index;\n    },\n\n    /** Constructor\n     * @param {cc.SpriteBatchNode *}\n     * @param {cp.Space *}\n     * @param {cc.p}\n     */\n    ctor:function (spriteSheet, space, pos) {\n        this.space = space;\n\n        // init coin animation\n        var animFrames = [];\n        for (var i = 0; i \n 8; i++) {\n            var str = \ncoin\n + i + \n.png\n;\n            var frame = cc.SpriteFrameCache.getInstance().getSpriteFrame(str);\n            animFrames.push(frame);\n        }\n\n        var animation = cc.Animation.create(animFrames, 0.2);\n        var action = cc.RepeatForever.create(cc.Animate.create(animation));\n\n        this.sprite = cc.PhysicsSprite.createWithSpriteFrameName(\ncoin0.png\n);\n\n        // init physics\n        var radius = 0.95 * this.sprite.getContentSize().width / 2;\n        var body = new cp.StaticBody();\n        body.setPos(pos);\n        this.sprite.setBody(body);\n\n        this.shape = new cp.CircleShape(body, radius, cp.vzero);\n        this.shape.setCollisionType(SpriteTag.coin);\n        //Sensors only call collision callbacks, and never generate real collisions\n        this.shape.setSensor(true);\n\n        this.space.addStaticShape(this.shape);\n\n        // add sprite to sprite sheet\n        this.sprite.runAction(action);\n        spriteSheet.addChild(this.sprite, 1);\n    },\n\n    removeFromParent:function () {\n        this.space.removeStaticShape(this.shape);\n        this.shape = null;\n        this.sprite.removeFromParent();\n        this.sprite = null;\n    },\n\n    getShape:function () {\n        return this.shape;\n    }\n});\n\n\n\n\nLet's explain the code piece by piece.\n\n\nAt first, we add three member variables named: \nspace\n, \nsprite\n and \nshape\n. We will use these variables to create the coin object's physic body\nand its display attribution.\n\n\nThen, we added another member variable \n_mapIndex\n.  We used the \nget/set\n syntax sugar to define accessor of the variable.\n\n\nThe \nctor\n method is the constructor of Coin class. We will create a Coin class with a spritesheet, a space and a position object later.\n\n\nSince the coins are circular shape, so we have created CircleShape attached to the rigid body. The remaining part of the ctor function is self-explanation.\n\n\nAt last, we need to define a method to do the cleanup work. It's the \nremoveFromParent\n method. It firstly remove the rigid body from the space and then remove the sprite\nfrom its parent. The \ngetShape\n method is just a getter method used for accessing the shape object stored in the coin object.\n\n\nDesign and Implement Rock Class\n\n\nThe principle of designing the Rock class is more or less as the Coin class except for the rigid shape type part.\n\n\nBecause our Rock class is a rectangle box. So we use cp.BoxShape to replace the cc.CircleShape in Coin class.\n\n\nHere is the full source code of Rock.js:\n\n\nvar Rock = cc.Class.extend({\n    space:null,\n    sprite:null,\n    shape:null,\n    _map:0,// which map belong to\n    get map() {\n        return this._map;\n    },\n    set map(newMap) {\n        this._map = newMap;\n    },\n\n    /** Constructor\n     * @param {cc.SpriteBatchNode *}\n     * @param {cp.Space *}\n     * @param {cc.p}\n     */\n    ctor:function (spriteSheet, space, posX) {\n        this.space = space;\n\n        this.sprite = cc.PhysicsSprite.createWithSpriteFrameName(\nrock.png\n);\n        var body = new cp.StaticBody();\n        body.setPos(cc.p(posX, this.sprite.getContentSize().height / 2 + g_groundHight));\n        this.sprite.setBody(body);\n\n        this.shape = new cp.BoxShape(body,\n            this.sprite.getContentSize().width,\n            this.sprite.getContentSize().height);\n        this.shape.setCollisionType(SpriteTag.rock);\n\n        this.space.addStaticShape(this.shape);\n        spriteSheet.addChild(this.sprite);\n    },\n\n    removeFromParent:function () {\n        this.space.removeStaticShape(this.shape);\n        this.shape = null;\n        this.sprite.removeFromParent();\n        this.sprite = null;\n    },\n\n    getShape:function () {\n        return this.shape;\n    }\n});\n\n\n\n\nImprove the PlayScene\n\n\nRefactor onEnter function of PlayScene\n\n\n\n\nAt first, let's add a extra array named \nshapesToRemove\n and initialize it at the beginning of \nonEnter\n function.\n\n\n\n\n//the following line goes in init member variable define area\nshapesToRemove :[],\n\n//the following line goes at the beginning of the *onEnter* function.\nthis.shapesToRemove = [];\n\n\n\n\n\n\nSecondly, modify the creation of BackgroundLayer. Here we simply pass the space object into BackgroundLayer's constructor.\n\n\n\n\n    this.addChild(new BackgroundLayer(this.space), 0, TagOfLayer.background);\n\n\n\n\nAdd Collision Detection Callbacks\n\n\n\n\nAt first, we should call these two functions at the end of \ninitPhyiscs\n method:\n\n\n\n\n // setup chipmunk CollisionHandler\n        this.space.addCollisionHandler(SpriteTag.runner, SpriteTag.coin,\n            this.collisionCoinBegin.bind(this), null, null, null);\n        this.space.addCollisionHandler(SpriteTag.runner, SpriteTag.rock,\n            this.collisionRockBegin.bind(this), null, null, null);\n\n\n\n\nThe \naddCollisionHandler\n method needs a callback when collision occurs.\n\n\n\n\nThen, let's define these two callbacks to handle player collide with coins and rocks.\n\n\n\n\n collisionCoinBegin:function (arbiter, space) {\n        var shapes = arbiter.getShapes();\n        // shapes[0] is runner\n        this.shapesToRemove.push(shapes[1]);\n    },\n\n    collisionRockBegin:function (arbiter, space) {\n        cc.log(\n==game over\n);\n    },\n\n\n\n\n\n\nDelete unused rigid bodies in background layer. You should add the following code at the end of \nupdate\n method:\n\n\n\n\n        // Simulation cpSpaceAddPostStepCallback\n        for(var i = 0; i \n this.shapesToRemove.length; i++) {\n            var shape = this.shapesToRemove[i];\n            this.getChildByTag(TagOfLayer.background).removeObjectByShape(shape);\n        }\n        this.shapesToRemove = [];\n\n\n\n\nWe can't delete physic bodies during the physic simulation process. so we use an extra array named \nshapesToRemove\n to hold the temporal data needed to be deleted.\n\n\nWrap all these things up\n\n\nCongratulations! You almost reach the end. Before we hit the \ndebug\n button to see the results. Let's add some extra glue code to connect everything together.\n\n\nOpen \ncocos2d.js\n and append two more array items at the end of \nappFiles\n array.\n\n\n    appFiles:[\n            'src/resource.js',\n            'src/myApp.js',\n            'src/AnimationLayer.js',\n            'src/BackgroundLayer.js',\n            'src/PlayScene.js',\n            'src/StatusLayer.js',\n            'src/globals.js',\n            'src/Coin.js',\n            'src/Rock.js'\n        ]\n\n\n\n\nBuild and run! Cheers, we did it!:)\n\n\nLet's see our final fruits:\n\n\n\n\nSummary\n\n\nIn this tutorial, we have enjoyed a very long journey. But worth it, isn't it?\n\n\nWe have learned how to use TiledMap's object layer to design complex game levels and how to customize your own class to extend your code structure.\n\n\nYou can download the full source code from \nhere\n.\n\n\nWhere to go from here?\n\n\nIn the next tutorial, we'll cover how to update game HUD constantly and we'll also add game over logic and simple gesture recognizer into our game to make the\nplayer to jump over the obstacles. Keep tuning!", 
            "title": "_Chapter8"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter8/en/index.html#add-coin-and-obstacles-into-our-game", 
            "text": "", 
            "title": "Add Coin and Obstacles Into Our Game"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter8/en/index.html#introduction", 
            "text": "In this tutorial, we will try to add Coin and Obstacles into our parkour game.  After this tutorial, our player should be able to collect the coin when he is running and he will die when he collides with the obstacle.  We will also cover how to design a game level with tiled map editor. Since the game logic is a little bit complex than before,\nso we will refactor the code before we adding new game components.", 
            "title": "Introduction"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter8/en/index.html#preparation", 
            "text": "Before we start, let's finish the preparation stuff.", 
            "title": "Preparation"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter8/en/index.html#setup-resource-and-globals", 
            "text": "Since we will add two more game elements into our parkour game. So we need add some more global integer tags to identify each game items.  Let's add the following code snippets at the end of  globals.js :  // collision type for chipmunk\nif(typeof SpriteTag ==  undefined ) {\n    var SpriteTag = {};\n    SpriteTag.runner = 0;\n    SpriteTag.coin = 1;\n    SpriteTag.rock = 2;\n};  Here we use 0,1,2 to represent runner,coin and rock.  We also introduce another spritesheet named  background.png  and  background.plist . We have packed the coins and rocks sprites into the spritesheet named background.png.  The details of how to pack these sprites are leave out for the next subsection.  Next, let's copy the resource files into our  res  directory and add two more variables for further referring.  var s_background =  background.png ;\nvar s_background_plist =  background.plist ;\n\n\nvar g_resources = [\n    //image\n    {src:s_HelloBG},\n    {src:s_start_n},\n    {src:s_start_s},\n    {src:s_runner},\n    {src:s_runnerplist},\n    {src:s_background},\n    {src:s_background_plist},\n    {src:s_map},\n    {src:s_map00},\n    {src:s_map01}\n];", 
            "title": "Setup Resource and Globals"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter8/en/index.html#pack-coins-and-rocks-into-spritesheet-with-texturepacker", 
            "text": "In the previous chapter, we have learned how to pack a bunch of small sprites into a big large compact spritesheet. Let's pack another spritesheet.  At first, you should launch TexturePacker and drag all the assets under  res/TexturePacker/coins and rocks  director.(Note: You can get the whole game resource from the download as before.)  After dragging the resource, you should specify the  Data file  and  Texture format  with some path like  xxx/chapter8/res/background.png  or  xxx/chapter8/res/background.plist .  If you don't want to any optimization of the spritesheet, just leave them out and press  Publish  to generate the final spritesheet.", 
            "title": "Pack Coins and Rocks into Spritesheet with TexturePacker"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter8/en/index.html#introduction-to-tiledmap-object-layer", 
            "text": "We have used TiledMap for our level map, but it lacks game items. So in this section, we will cover how to design level items with TiledMap object layer.", 
            "title": "Introduction to TiledMap Object Layer"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter8/en/index.html#add-coin-object-layer", 
            "text": "At first, we'll add Coin object layer.    Launch Tiled and open  map00.tmx  and  map01.tmx .    Create an Object layer named  coin  in map00.tmx and map01.tmx.    Design object layer by dragging and dropping rectangle object into the map.\nYou can change the rectangle size and it's position. You can also duplicate or delete the objects.      Some tips on designing object layer:\nYou can change opacity of the layers in the tiled map so that you can easily place the object.", 
            "title": "Add Coin Object Layer"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter8/en/index.html#add-rock-object-layer", 
            "text": "The process to create the Rock object layer is more or less the same as creating coin object layer.  So we will leave it out for your own implementation.", 
            "title": "Add Rock Object Layer"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter8/en/index.html#refactor-backgroundlayer-class-and-add-some-helper-method", 
            "text": "Sometimes, when you are coding, you may find that it is extremely hard to add new functionality into the existing structure.  It is a bad code smell and we should stop and do refactor work right now.", 
            "title": "Refactor BackgroundLayer Class and Add Some Helper Method"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter8/en/index.html#refactor-backgroundlayer-class", 
            "text": "Since we will add Chipmunk physic body into our background, so we need a method to obtain the  space  object created in  PlayScene .  Let's change the name of  ctor  function in Background Layer and pass a parameter named  space  into it. We should also add a new member variable into the\nBackgroundLayer class. Here is the code snippets:      ctor:function (space) {\n        this._super();\n\n        // clean old array here\n        this.objects = [];\n        this.space = space;\n\n        this.init();\n    },  Here we have added additional init code. We added a array named  objects  and initialize it to an empty array.  ( Note: You should call this.init() method right after the assignment of this.space = space. Because we will create physic objects in the init method )", 
            "title": "Refactor BackgroundLayer Class"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter8/en/index.html#add-helper-method", 
            "text": "Add more member variables into BackgroundLayer class:       space:null,\n    spriteSheet:null,\n    objects:[],   Initialize spritesheet in the  init  method:       // create sprite sheet\n        cc.SpriteFrameCache.getInstance().addSpriteFrames(s_background_plist);\n        this.spriteSheet = cc.SpriteBatchNode.create(s_background);\n        this.addChild(this.spriteSheet);   Add a method named  loadObject  to initialize rock and coins.    loadObjects:function (map, mapIndex) {\n        // add coins\n        var coinGroup = map.getObjectGroup( coin );\n        var coinArray = coinGroup.getObjects();\n        for (var i = 0; i   coinArray.length; i++) {\n            var coin = new Coin(this.spriteSheet,\n                this.space,\n                cc.p(coinArray[i][ x ] + this.mapWidth * mapIndex,coinArray[i][ y ]));\n            coin.mapIndex = mapIndex;\n            this.objects.push(coin);\n        }\n\n        // add rock\n        var rockGroup = map.getObjectGroup( rock );\n        var rockArray = rockGroup.getObjects();\n        for (var i = 0; i   rockArray.length; i++) {\n            var rock = new Rock(this.spriteSheet,\n                this.space,\n                rockArray[i][ x ] + this.mapWidth * mapIndex);\n            rock.mapIndex = mapIndex;\n            this.objects.push(rock);\n        }\n    },  Here we iterate all the objects info in the tiled map and create responding Chipmunk rigid bodies. Finally we store these object into the  objects  array.  All these code are self-explanation. You should only pay attention to the  mapIndex  parameter. We use the parameter to calculate where we should place the rigid body.  We need call  loadObject  method at the end of  init  method to create the  physic objects in the first two screen maps.  this.loadObjects(this.map00, 0);\nthis.loadObjects(this.map01, 1);   Add another two helper methods for removing unused chipmunk rigid bodies.   The first method is called  removeObjects . It removes a object by  mapIndex . Here is the implementation:  removeObjects:function (mapIndex) {\n        while((function (obj, index) {\n            for (var i = 0; i   obj.length; i++) {\n                if (obj[i].mapIndex == index) {\n                    obj[i].removeFromParent();\n                    obj.splice(i, 1);\n                    return true;\n                }\n            }\n            return false;\n        })(this.objects, mapIndex));\n    },  The other method is called  removeObjectByShape :     removeObjectByShape:function (shape) {\n        for (var i = 0; i   this.objects.length; i++) {\n            if (this.objects[i].getShape() == shape) {\n                this.objects[i].removeFromParent();\n                this.objects.splice(i, 1);\n                break;\n            }\n        }\n    },  This method will remove a chipmunk object by its shape.", 
            "title": "Add Helper Method"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter8/en/index.html#wrap-it-up-add-creation-and-disposable-logic-in-checkandreload-method", 
            "text": "When the map is moved, we should also call  loadObject  method to recreate the \"Coins   Rocks\".  And also we should remove all unused objects by calling  removeObjects  method.  Here is the code snippets:    checkAndReload:function (eyeX) {\n        var newMapIndex = parseInt(eyeX / this.mapWidth);\n        if (this.mapIndex == newMapIndex) {\n            return false;\n        }\n\n        if (0 == newMapIndex % 2) {\n            // change mapSecond\n            this.map01.setPositionX(this.mapWidth * (newMapIndex + 1));\n            this.loadObjects(this.map01, newMapIndex + 1);\n        } else {\n            // change mapFirst\n            this.map00.setPositionX(this.mapWidth * (newMapIndex + 1));\n            this.loadObjects(this.map00, newMapIndex + 1);\n        }\n        this.removeObjects(newMapIndex - 1);\n        this.mapIndex = newMapIndex;\n\n        return true;\n    },", 
            "title": "Wrap it up: Add Creation and Disposable Logic in checkAndReload Method"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter8/en/index.html#add-coin-and-rock", 
            "text": "Now it's time to add the coin and rock implementation. Despite the implementation details, you should also pay attention to the design idea behind these two\nclasses. Here we prefer to inherit from cc.Class instead of cc.Sprite. We let each object to own a instance of cc.Sprite.", 
            "title": "Add Coin and Rock"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter8/en/index.html#design-and-implement-coin-class", 
            "text": "Create a new file named  Coin.js . We will define our Coin class in this file. Make sure you have this filed located in your  src  directory.    Derived a class named  Coin  from cc.Class, let's take a look at the whole implementation:    var Coin = cc.Class.extend({\n    space:null,\n    sprite:null,\n    shape:null,\n    _mapIndex:0,// which map belongs to\n    get mapIndex() {\n        return this._mapIndex;\n    },\n    set mapIndex(index) {\n        this._mapIndex = index;\n    },\n\n    /** Constructor\n     * @param {cc.SpriteBatchNode *}\n     * @param {cp.Space *}\n     * @param {cc.p}\n     */\n    ctor:function (spriteSheet, space, pos) {\n        this.space = space;\n\n        // init coin animation\n        var animFrames = [];\n        for (var i = 0; i   8; i++) {\n            var str =  coin  + i +  .png ;\n            var frame = cc.SpriteFrameCache.getInstance().getSpriteFrame(str);\n            animFrames.push(frame);\n        }\n\n        var animation = cc.Animation.create(animFrames, 0.2);\n        var action = cc.RepeatForever.create(cc.Animate.create(animation));\n\n        this.sprite = cc.PhysicsSprite.createWithSpriteFrameName( coin0.png );\n\n        // init physics\n        var radius = 0.95 * this.sprite.getContentSize().width / 2;\n        var body = new cp.StaticBody();\n        body.setPos(pos);\n        this.sprite.setBody(body);\n\n        this.shape = new cp.CircleShape(body, radius, cp.vzero);\n        this.shape.setCollisionType(SpriteTag.coin);\n        //Sensors only call collision callbacks, and never generate real collisions\n        this.shape.setSensor(true);\n\n        this.space.addStaticShape(this.shape);\n\n        // add sprite to sprite sheet\n        this.sprite.runAction(action);\n        spriteSheet.addChild(this.sprite, 1);\n    },\n\n    removeFromParent:function () {\n        this.space.removeStaticShape(this.shape);\n        this.shape = null;\n        this.sprite.removeFromParent();\n        this.sprite = null;\n    },\n\n    getShape:function () {\n        return this.shape;\n    }\n});  Let's explain the code piece by piece.  At first, we add three member variables named:  space ,  sprite  and  shape . We will use these variables to create the coin object's physic body\nand its display attribution.  Then, we added another member variable  _mapIndex .  We used the  get/set  syntax sugar to define accessor of the variable.  The  ctor  method is the constructor of Coin class. We will create a Coin class with a spritesheet, a space and a position object later.  Since the coins are circular shape, so we have created CircleShape attached to the rigid body. The remaining part of the ctor function is self-explanation.  At last, we need to define a method to do the cleanup work. It's the  removeFromParent  method. It firstly remove the rigid body from the space and then remove the sprite\nfrom its parent. The  getShape  method is just a getter method used for accessing the shape object stored in the coin object.", 
            "title": "Design and Implement Coin Class"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter8/en/index.html#design-and-implement-rock-class", 
            "text": "The principle of designing the Rock class is more or less as the Coin class except for the rigid shape type part.  Because our Rock class is a rectangle box. So we use cp.BoxShape to replace the cc.CircleShape in Coin class.  Here is the full source code of Rock.js:  var Rock = cc.Class.extend({\n    space:null,\n    sprite:null,\n    shape:null,\n    _map:0,// which map belong to\n    get map() {\n        return this._map;\n    },\n    set map(newMap) {\n        this._map = newMap;\n    },\n\n    /** Constructor\n     * @param {cc.SpriteBatchNode *}\n     * @param {cp.Space *}\n     * @param {cc.p}\n     */\n    ctor:function (spriteSheet, space, posX) {\n        this.space = space;\n\n        this.sprite = cc.PhysicsSprite.createWithSpriteFrameName( rock.png );\n        var body = new cp.StaticBody();\n        body.setPos(cc.p(posX, this.sprite.getContentSize().height / 2 + g_groundHight));\n        this.sprite.setBody(body);\n\n        this.shape = new cp.BoxShape(body,\n            this.sprite.getContentSize().width,\n            this.sprite.getContentSize().height);\n        this.shape.setCollisionType(SpriteTag.rock);\n\n        this.space.addStaticShape(this.shape);\n        spriteSheet.addChild(this.sprite);\n    },\n\n    removeFromParent:function () {\n        this.space.removeStaticShape(this.shape);\n        this.shape = null;\n        this.sprite.removeFromParent();\n        this.sprite = null;\n    },\n\n    getShape:function () {\n        return this.shape;\n    }\n});", 
            "title": "Design and Implement Rock Class"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter8/en/index.html#improve-the-playscene", 
            "text": "", 
            "title": "Improve the PlayScene"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter8/en/index.html#refactor-onenter-function-of-playscene", 
            "text": "At first, let's add a extra array named  shapesToRemove  and initialize it at the beginning of  onEnter  function.   //the following line goes in init member variable define area\nshapesToRemove :[],\n\n//the following line goes at the beginning of the *onEnter* function.\nthis.shapesToRemove = [];   Secondly, modify the creation of BackgroundLayer. Here we simply pass the space object into BackgroundLayer's constructor.       this.addChild(new BackgroundLayer(this.space), 0, TagOfLayer.background);", 
            "title": "Refactor onEnter function of PlayScene"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter8/en/index.html#add-collision-detection-callbacks", 
            "text": "At first, we should call these two functions at the end of  initPhyiscs  method:    // setup chipmunk CollisionHandler\n        this.space.addCollisionHandler(SpriteTag.runner, SpriteTag.coin,\n            this.collisionCoinBegin.bind(this), null, null, null);\n        this.space.addCollisionHandler(SpriteTag.runner, SpriteTag.rock,\n            this.collisionRockBegin.bind(this), null, null, null);  The  addCollisionHandler  method needs a callback when collision occurs.   Then, let's define these two callbacks to handle player collide with coins and rocks.    collisionCoinBegin:function (arbiter, space) {\n        var shapes = arbiter.getShapes();\n        // shapes[0] is runner\n        this.shapesToRemove.push(shapes[1]);\n    },\n\n    collisionRockBegin:function (arbiter, space) {\n        cc.log( ==game over );\n    },   Delete unused rigid bodies in background layer. You should add the following code at the end of  update  method:           // Simulation cpSpaceAddPostStepCallback\n        for(var i = 0; i   this.shapesToRemove.length; i++) {\n            var shape = this.shapesToRemove[i];\n            this.getChildByTag(TagOfLayer.background).removeObjectByShape(shape);\n        }\n        this.shapesToRemove = [];  We can't delete physic bodies during the physic simulation process. so we use an extra array named  shapesToRemove  to hold the temporal data needed to be deleted.", 
            "title": "Add Collision Detection Callbacks"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter8/en/index.html#wrap-all-these-things-up", 
            "text": "Congratulations! You almost reach the end. Before we hit the  debug  button to see the results. Let's add some extra glue code to connect everything together.  Open  cocos2d.js  and append two more array items at the end of  appFiles  array.      appFiles:[\n            'src/resource.js',\n            'src/myApp.js',\n            'src/AnimationLayer.js',\n            'src/BackgroundLayer.js',\n            'src/PlayScene.js',\n            'src/StatusLayer.js',\n            'src/globals.js',\n            'src/Coin.js',\n            'src/Rock.js'\n        ]  Build and run! Cheers, we did it!:)  Let's see our final fruits:", 
            "title": "Wrap all these things up"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter8/en/index.html#summary", 
            "text": "In this tutorial, we have enjoyed a very long journey. But worth it, isn't it?  We have learned how to use TiledMap's object layer to design complex game levels and how to customize your own class to extend your code structure.  You can download the full source code from  here .", 
            "title": "Summary"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter8/en/index.html#where-to-go-from-here", 
            "text": "In the next tutorial, we'll cover how to update game HUD constantly and we'll also add game over logic and simple gesture recognizer into our game to make the\nplayer to jump over the obstacles. Keep tuning!", 
            "title": "Where to go from here?"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter9/en/index.html", 
            "text": "Implement Game Over Logic and More\n\n\nIntroduction\n\n\nIn this tutorial, we'll implement out game over logic, updating HUD and a simple gesture recognizer.\nWith out any further ado, let's dive into the tutorial.\n\n\nUpdate Game HUD\n\n\nUpdate Player Running Meters\n\n\nAt first, let's add a \nupdateMeter\n method into the StatusLayer Class:\n\n\n    updateMeter:function (px) {\n        this.labelMeter.setString(parseInt(px / 10) + \nM\n);\n    }\n\n\n\n\nThis method constantly change the value of \nlabelMeter\n. Here we use \nparseInt\n function to convert the result into a integer value.\n\n\nThe argument \npx\n stands for pixel, so every 10 px is one meter.\n\n\nNow, we should call this method in each frame.\n\n\nOpen AnimationLayer.js and add the following code at the beginning of \nupdate\n function:\n\n\n        // update meter\n        var statusLayer = this.getParent().getChildByTag(TagOfLayer.Status);\n        statusLayer.updateMeter(this.sprite.getPositionX() - g_runnerStartX);\n\n\n\n\nUpdate Coin Count\n\n\nWhen the player collect a coin, we should update the coin indicator.\n\n\nAt first, let's add a \naddCoin\n method in StatusLayer:\n\n\n    addCoin:function (num) {\n        this.coins += num;\n        this.labelCoin.setString(\nCoins:\n + this.coins);\n    },\n\n\n\n\nWhen the player collide with the coin, we should call this method.\n\n\nNow it's time to implement it.\n\n\nOpen \nPlayScene.js\n and add the following code at the end of \ncolisionCoinBegin\n method:\n\n\n        var statusLayer = this.getChildByTag(TagOfLayer.Status);\n        statusLayer.addCoin(1);\n\n\n\n\nEvery time the player collides with the coin, the \ncolisionCoinBegin\n method will be called and our coin count will be increase by one.\n\n\nSave all files and git it a try:)\n\n\nHere is the screenshot:\n\n\n\n\nAdd Game Over Logic into the Game\n\n\nDesign and Implement the Game Over Layer\n\n\nIn order to keep things simple, we just add a menu item at the center of our game over layer.\n\n\nWhen you click the \nrestart\n menu, the game will restart again.\n\n\nSo the design is very trivial, let's implement it.\n\n\nHere is the whole implementation of \nGameOverLayer.js\n:\n\n\nvar GameOverLayer = cc.LayerColor.extend({\n    // constructor\n    ctor:function () {\n        this._super();\n        this.init();\n    },\n    init:function () {\n        this._super(cc.c4b(0, 0, 0, 180));\n        var winSize = cc.Director.getInstance().getWinSize();\n\n        var centerPos = cc.p(winSize.width / 2, winSize.height / 2);\n        cc.MenuItemFont.setFontSize(30);\n        var menuItemRestart = cc.MenuItemSprite.create(\n            cc.Sprite.create(s_restart_n),\n            cc.Sprite.create(s_restart_s),\n            this.onRestart, this);\n        var menu = cc.Menu.create(menuItemRestart);\n        menu.setPosition(centerPos);\n        this.addChild(menu);\n    },\n    onRestart:function (sender) {\n        cc.Director.getInstance().resume();\n        cc.Director.getInstance().replaceScene(new PlayScene());\n    }\n});\n\n\n\n\nHere we used two sprite named \ns_restart_n\n and \ns_restart_s\n to create our restart menu item.\n\n\nSo we should add the resource file into the \nres\n directory and define the resources path.\n\n\nOpen \nresource.js\n and add the following code lines:\n\n\nvar s_restart_n = \nrestart_n.png\n;\nvar s_restart_s = \nrestart_s.png\n;\n\n//add the following two lines at the end of g_resources array.\n{src:s_restart_n},\n{src:s_restart_s},\n\n\n\n\nThe code of \ninit\n method is self-explanation. But you should pay attention to the callback \nonRestart\n method.\n\n\nWe have called the \nresume\n function of cc.Director. Why should be do this? Because we call \npause\n method when the player die.\n\n\nGame Over When The Player Collide with a Rock\n\n\nNow, let's display the game over layer when the player collide with the rock.\n\n\nOpen \nPlayScene\n and add the following code lines at the end of \ncollisionRockBegin\n method:\n\n\n  collisionRockBegin:function (arbiter, space) {\n        cc.log(\n==game over\n);\n        cc.Director.getInstance().pause();\n        this.addChild(new GameOverLayer());\n    },\n\n\n\n\nYeah, it's done. Now run the game again.\n\n\nHere is the final screenshot:\n\n\n\n\nImplement Your Own Simple Gesture Recognizer\n\n\nAt this section, we will design a very simple gesture recognizer.\n\n\nWhen we swipe our finger on the screen from bottom to up, the recognizer will detect it.\n\n\nThe algorithm for detecting the swipe gesture is very straightforward. When the touch begin event is detected, we store the first\ntouch point in the array. When the touch moves event is detected, we append the touch point at the end of point array.\n\n\nWe can simply compare the difference of x axis or y axis of two adjacent point to determine the swipe direction.\n\n\nHere is the code snippets to do the magic:\n\n\nfunction Point(x, y)\n{\n    this.X = x;\n    this.Y = y;\n}\n\n// class define\nfunction SimpleRecognizer()\n{\n    this.points = [];\n    this.result = \n;\n}\n\n// be called in onTouchBegan\nSimpleRecognizer.prototype.beginPoint = function(x, y) {\n    this.points = [];\n    this.result = \n;\n    this.points.push(new Point(x, y));\n}\n\n// be called in onTouchMoved\nSimpleRecognizer.prototype.movePoint = function(x, y) {\n    this.points.push(new Point(x, y));\n\n    if (this.result == \nnot support\n) {\n        return;\n    }\n\n    var newRtn = \n;\n    var len = this.points.length;\n    var dx = this.points[len - 1].X - this.points[len - 2].X;\n    var dy = this.points[len - 1].Y - this.points[len - 2].Y;\n\n    if (Math.abs(dx) \n Math.abs(dy)) {\n        if (dx \n 0) {\n            newRtn = \nright\n;\n        } else {\n            newRtn = \nleft\n;\n        }\n    } else {\n        if (dy \n 0) {\n            newRtn = \nup\n;\n        } else {\n            newRtn = \ndown\n;\n        }\n    }\n\n    // first set result\n    if (this.result == \n) {\n        this.result = newRtn;\n        return;\n    }\n\n    // if directory change, not support Recognizer\n    if (this.result != newRtn) {\n        this.result = \nnot support\n;\n    }\n}\n\n// be called in onTouchEnded\nSimpleRecognizer.prototype.endPoint = function() {\n    if (this.points.length \n 3) {\n        return \nerror\n;\n    }\n    return this.result;\n}\n\nSimpleRecognizer.prototype.getPoints = function() {\n    return this.points;\n}\n\n\n\n\nAfter the gesture is detected, we can call \nendPoint\n of the SimpleRecognizer to get the final result.\n\n\nCurrently it supports four simple types: up, down, left and right. You can extend your own more complex one.\n\n\nHandling Touch Event, Player Jumping Animation and Logic\n\n\nAdd Jumping Animation of the Player\n\n\nIn order to implement the jumping animation, we should prepare our game arts first. Here we have done it for you.\n\n\nYou can download the whole project from the \nSummary\n section and copy\npaste the running.plist and running.png file into the \nres\n directory.\n\n\nWhen the game starts, the player will be running infinite until him collide with the rock. We want to let the player jump by swiping upwards.\n\n\nThus we can play the game a little bit longer.\n\n\nWhen the player jumps up or jumps up, we need to play corresponding animations.\n\n\nSo at first, let's add two more animation action member variables into the AnimationLayer:\n\n\njumpUpAction:null,\njumpDownAction:null,\n\n\n\n\nAnd then let's add a new method named \ninitAction\n:\n\n\n  initAction:function () {\n        // init runningAction\n        var animFrames = [];\n        // num equal to spriteSheet\n        for (var i = 0; i \n 8; i++) {\n            var str = \nrunner\n + i + \n.png\n;\n            var frame = cc.SpriteFrameCache.getInstance().getSpriteFrame(str);\n            animFrames.push(frame);\n        }\n        var animation = cc.Animation.create(animFrames, 0.1);\n        this.runningAction = cc.RepeatForever.create(cc.Animate.create(animation));\n        this.runningAction.retain();\n        // init jumpUpAction\n        animFrames = [];\n        for (var i = 0; i \n 4; i++) {\n            var str = \nrunnerJumpUp\n + i + \n.png\n;\n            var frame = cc.SpriteFrameCache.getInstance().getSpriteFrame(str);\n            animFrames.push(frame);\n        }\n        animation = cc.Animation.create(animFrames, 0.2);\n        this.jumpUpAction = cc.Animate.create(animation);\n        this.jumpUpAction.retain();\n        // init jumpDownAction\n        animFrames = [];\n        for (var i = 0; i \n 2; i++) {\n            var str = \nrunnerJumpDown\n + i + \n.png\n;\n            var frame = cc.SpriteFrameCache.getInstance().getSpriteFrame(str);\n            animFrames.push(frame);\n        }\n        animation = cc.Animation.create(animFrames, 0.3);\n        this.jumpDownAction = cc.Animate.create(animation);\n        this.jumpDownAction.retain();\n    },\n\n\n\n\nIn this function, we have initialized all the animations of the players.\n\n\nAt lasts, let's remove the initialize code of runningAction we did before in the \ninit\n function and call \ninitAction\n method instead.\n\n\n//init  actions\nthis.initAction();\n//        // init runningAction\n//        var animFrames = [];\n//        for (var i = 0; i \n 8; i++) {\n//            var str = \nrunner\n + i + \n.png\n;\n//            var frame = cc.SpriteFrameCache.getInstance().getSpriteFrame(str);\n//            animFrames.push(frame);\n//        }\n//        var animation = cc.Animation.create(animFrames, 0.1);\n//        this.runningAction = cc.RepeatForever.create(cc.Animate.create(animation));\n\n\n\n\nHandling Touch Event\n\n\nNow it's time to handle touch event. At first, we should enable touch handling of the AnimationLayer.\n\n\nAdd the following code snippets at the end of \ninit\n method:\n\n\n// enable touch\nthis.setTouchEnabled(true);\n// set touch mode to kCCTouchesOneByOne\nthis.setTouchMode(1);\n\n\n\n\nThese two code lines can activate the touch dispatching function.\n\n\nNow let's add three callbacks we needed to handle our touch event:\n\n\n onTouchBegan:function(touch, event) {\n        var pos = touch.getLocation();\n        this.recognizer.beginPoint(pos.x, pos.y);\n        return true;\n    },\n    onTouchMoved:function(touch, event) {\n        var pos = touch.getLocation();\n        this.recognizer.movePoint(pos.x, pos.y);\n    },\n    onTouchEnded:function(touch, event) {\n        var rtn = this.recognizer.endPoint();\n        cc.log(\nrnt = \n + rtn);\n        switch (rtn) {\n            case \nup\n:\n                this.jump();\n                break;\n            default:\n                break;\n        }\n    },\n\n\n\n\nWhen you touch the screen the \nonTouchBegan\n method will be called. When you hold your finger and move it around, the \nonTouchMoved\n method will\nbe called. When you release your finger, the \nonTouchEnded\n method will be called.\n\n\nHere we have used our simple gesture recognizer to detect the \"swipe out\" gesture.\n\n\nWrap them all\n\n\nNow it's time to wrap them all.\n\n\nAt first, add the following enumerations in the beginning of the AnimationLayer:\n\n\n// define enum for runner status\nif(typeof RunnerStat == \nundefined\n) {\n    var RunnerStat = {};\n    RunnerStat.running = 0;\n    RunnerStat.jumpUp = 1;\n    RunnerStat.jumpDown = 2;\n};\n\n\n\n\nWe use these enums to represent different state of the player.\n\n\nThen we should add another two member variables in the AnimationLayer:\n\n\n recognizer:null,\n stat:RunnerStat.running,// init with running status\n\n\n\n\nAnd init the recognizer at the end of \ninit\n method:\n\n\n this.recognizer = new SimpleRecognizer();\n\n\n\n\nAt last, we should implement our jump method:\n\n\n jump:function () {\n        cc.log(\njump\n);\n        if (this.stat == RunnerStat.running) {\n            this.body.applyImpulse(cp.v(0, 250), cp.v(0, 0));\n            this.stat = RunnerStat.jumpUp;\n            this.sprite.stopAllActions();\n            this.sprite.runAction(this.jumpUpAction);\n        }\n    },\n\n\n\n\nAnd also we should tie these things up int the \nupdate\n function:\n\n\n//in the update method of AnimationLayer\n    // check and update runner stat\n        var vel = this.body.getVel();\n        if (this.stat == RunnerStat.jumpUp) {\n            if (vel.y \n 0.1) {\n                this.stat = RunnerStat.jumpDown;\n                this.sprite.stopAllActions();\n                this.sprite.runAction(this.jumpDownAction);\n            }\n        } else if (this.stat == RunnerStat.jumpDown) {\n            if (vel.y == 0) {\n                this.stat = RunnerStat.running;\n                this.sprite.stopAllActions();\n                this.sprite.runAction(this.runningAction);\n            }\n        }\n\n\n\n\nOne more word, don't forget the cleanup stuff. We should release the created actions when the AnimationLayer exit.\n\n\n    onExit:function() {\n        this.runningAction.release();\n        this.jumpUpAction.release();\n        this.jumpDownAction.release();\n        this._super();\n    },\n\n\n\n\nYou may also want to check whether all the created js files are loaded in \ncocos2d.js\n file or not.\n\n\nSummary\n\n\nCongratulations! You have finished another epic tutorial again.\n\n\nLet's see what we have done in this tutorial.\n\n\nAt first, we have learned how to update our game hud elements.\n\n\nThen we added the game over logic.\n\n\nAt last, we have created a simple gesture recognizer to handle the controlling of our hero's jumping action.\n\n\nYou can download the final project from \nhere\n.\n\n\nWhere to go from here?\n\n\nIn the next tutorial, we will cover the final bolts and nuts of the parkour game. Keep tuning!", 
            "title": "_Chapter9"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter9/en/index.html#implement-game-over-logic-and-more", 
            "text": "", 
            "title": "Implement Game Over Logic and More"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter9/en/index.html#introduction", 
            "text": "In this tutorial, we'll implement out game over logic, updating HUD and a simple gesture recognizer.\nWith out any further ado, let's dive into the tutorial.", 
            "title": "Introduction"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter9/en/index.html#update-game-hud", 
            "text": "", 
            "title": "Update Game HUD"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter9/en/index.html#update-player-running-meters", 
            "text": "At first, let's add a  updateMeter  method into the StatusLayer Class:      updateMeter:function (px) {\n        this.labelMeter.setString(parseInt(px / 10) +  M );\n    }  This method constantly change the value of  labelMeter . Here we use  parseInt  function to convert the result into a integer value.  The argument  px  stands for pixel, so every 10 px is one meter.  Now, we should call this method in each frame.  Open AnimationLayer.js and add the following code at the beginning of  update  function:          // update meter\n        var statusLayer = this.getParent().getChildByTag(TagOfLayer.Status);\n        statusLayer.updateMeter(this.sprite.getPositionX() - g_runnerStartX);", 
            "title": "Update Player Running Meters"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter9/en/index.html#update-coin-count", 
            "text": "When the player collect a coin, we should update the coin indicator.  At first, let's add a  addCoin  method in StatusLayer:      addCoin:function (num) {\n        this.coins += num;\n        this.labelCoin.setString( Coins:  + this.coins);\n    },  When the player collide with the coin, we should call this method.  Now it's time to implement it.  Open  PlayScene.js  and add the following code at the end of  colisionCoinBegin  method:          var statusLayer = this.getChildByTag(TagOfLayer.Status);\n        statusLayer.addCoin(1);  Every time the player collides with the coin, the  colisionCoinBegin  method will be called and our coin count will be increase by one.  Save all files and git it a try:)  Here is the screenshot:", 
            "title": "Update Coin Count"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter9/en/index.html#add-game-over-logic-into-the-game", 
            "text": "", 
            "title": "Add Game Over Logic into the Game"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter9/en/index.html#design-and-implement-the-game-over-layer", 
            "text": "In order to keep things simple, we just add a menu item at the center of our game over layer.  When you click the  restart  menu, the game will restart again.  So the design is very trivial, let's implement it.  Here is the whole implementation of  GameOverLayer.js :  var GameOverLayer = cc.LayerColor.extend({\n    // constructor\n    ctor:function () {\n        this._super();\n        this.init();\n    },\n    init:function () {\n        this._super(cc.c4b(0, 0, 0, 180));\n        var winSize = cc.Director.getInstance().getWinSize();\n\n        var centerPos = cc.p(winSize.width / 2, winSize.height / 2);\n        cc.MenuItemFont.setFontSize(30);\n        var menuItemRestart = cc.MenuItemSprite.create(\n            cc.Sprite.create(s_restart_n),\n            cc.Sprite.create(s_restart_s),\n            this.onRestart, this);\n        var menu = cc.Menu.create(menuItemRestart);\n        menu.setPosition(centerPos);\n        this.addChild(menu);\n    },\n    onRestart:function (sender) {\n        cc.Director.getInstance().resume();\n        cc.Director.getInstance().replaceScene(new PlayScene());\n    }\n});  Here we used two sprite named  s_restart_n  and  s_restart_s  to create our restart menu item.  So we should add the resource file into the  res  directory and define the resources path.  Open  resource.js  and add the following code lines:  var s_restart_n =  restart_n.png ;\nvar s_restart_s =  restart_s.png ;\n\n//add the following two lines at the end of g_resources array.\n{src:s_restart_n},\n{src:s_restart_s},  The code of  init  method is self-explanation. But you should pay attention to the callback  onRestart  method.  We have called the  resume  function of cc.Director. Why should be do this? Because we call  pause  method when the player die.", 
            "title": "Design and Implement the Game Over Layer"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter9/en/index.html#game-over-when-the-player-collide-with-a-rock", 
            "text": "Now, let's display the game over layer when the player collide with the rock.  Open  PlayScene  and add the following code lines at the end of  collisionRockBegin  method:    collisionRockBegin:function (arbiter, space) {\n        cc.log( ==game over );\n        cc.Director.getInstance().pause();\n        this.addChild(new GameOverLayer());\n    },  Yeah, it's done. Now run the game again.  Here is the final screenshot:", 
            "title": "Game Over When The Player Collide with a Rock"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter9/en/index.html#implement-your-own-simple-gesture-recognizer", 
            "text": "At this section, we will design a very simple gesture recognizer.  When we swipe our finger on the screen from bottom to up, the recognizer will detect it.  The algorithm for detecting the swipe gesture is very straightforward. When the touch begin event is detected, we store the first\ntouch point in the array. When the touch moves event is detected, we append the touch point at the end of point array.  We can simply compare the difference of x axis or y axis of two adjacent point to determine the swipe direction.  Here is the code snippets to do the magic:  function Point(x, y)\n{\n    this.X = x;\n    this.Y = y;\n}\n\n// class define\nfunction SimpleRecognizer()\n{\n    this.points = [];\n    this.result =  ;\n}\n\n// be called in onTouchBegan\nSimpleRecognizer.prototype.beginPoint = function(x, y) {\n    this.points = [];\n    this.result =  ;\n    this.points.push(new Point(x, y));\n}\n\n// be called in onTouchMoved\nSimpleRecognizer.prototype.movePoint = function(x, y) {\n    this.points.push(new Point(x, y));\n\n    if (this.result ==  not support ) {\n        return;\n    }\n\n    var newRtn =  ;\n    var len = this.points.length;\n    var dx = this.points[len - 1].X - this.points[len - 2].X;\n    var dy = this.points[len - 1].Y - this.points[len - 2].Y;\n\n    if (Math.abs(dx)   Math.abs(dy)) {\n        if (dx   0) {\n            newRtn =  right ;\n        } else {\n            newRtn =  left ;\n        }\n    } else {\n        if (dy   0) {\n            newRtn =  up ;\n        } else {\n            newRtn =  down ;\n        }\n    }\n\n    // first set result\n    if (this.result ==  ) {\n        this.result = newRtn;\n        return;\n    }\n\n    // if directory change, not support Recognizer\n    if (this.result != newRtn) {\n        this.result =  not support ;\n    }\n}\n\n// be called in onTouchEnded\nSimpleRecognizer.prototype.endPoint = function() {\n    if (this.points.length   3) {\n        return  error ;\n    }\n    return this.result;\n}\n\nSimpleRecognizer.prototype.getPoints = function() {\n    return this.points;\n}  After the gesture is detected, we can call  endPoint  of the SimpleRecognizer to get the final result.  Currently it supports four simple types: up, down, left and right. You can extend your own more complex one.", 
            "title": "Implement Your Own Simple Gesture Recognizer"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter9/en/index.html#handling-touch-event-player-jumping-animation-and-logic", 
            "text": "", 
            "title": "Handling Touch Event, Player Jumping Animation and Logic"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter9/en/index.html#add-jumping-animation-of-the-player", 
            "text": "In order to implement the jumping animation, we should prepare our game arts first. Here we have done it for you.  You can download the whole project from the  Summary  section and copy paste the running.plist and running.png file into the  res  directory.  When the game starts, the player will be running infinite until him collide with the rock. We want to let the player jump by swiping upwards.  Thus we can play the game a little bit longer.  When the player jumps up or jumps up, we need to play corresponding animations.  So at first, let's add two more animation action member variables into the AnimationLayer:  jumpUpAction:null,\njumpDownAction:null,  And then let's add a new method named  initAction :    initAction:function () {\n        // init runningAction\n        var animFrames = [];\n        // num equal to spriteSheet\n        for (var i = 0; i   8; i++) {\n            var str =  runner  + i +  .png ;\n            var frame = cc.SpriteFrameCache.getInstance().getSpriteFrame(str);\n            animFrames.push(frame);\n        }\n        var animation = cc.Animation.create(animFrames, 0.1);\n        this.runningAction = cc.RepeatForever.create(cc.Animate.create(animation));\n        this.runningAction.retain();\n        // init jumpUpAction\n        animFrames = [];\n        for (var i = 0; i   4; i++) {\n            var str =  runnerJumpUp  + i +  .png ;\n            var frame = cc.SpriteFrameCache.getInstance().getSpriteFrame(str);\n            animFrames.push(frame);\n        }\n        animation = cc.Animation.create(animFrames, 0.2);\n        this.jumpUpAction = cc.Animate.create(animation);\n        this.jumpUpAction.retain();\n        // init jumpDownAction\n        animFrames = [];\n        for (var i = 0; i   2; i++) {\n            var str =  runnerJumpDown  + i +  .png ;\n            var frame = cc.SpriteFrameCache.getInstance().getSpriteFrame(str);\n            animFrames.push(frame);\n        }\n        animation = cc.Animation.create(animFrames, 0.3);\n        this.jumpDownAction = cc.Animate.create(animation);\n        this.jumpDownAction.retain();\n    },  In this function, we have initialized all the animations of the players.  At lasts, let's remove the initialize code of runningAction we did before in the  init  function and call  initAction  method instead.  //init  actions\nthis.initAction();\n//        // init runningAction\n//        var animFrames = [];\n//        for (var i = 0; i   8; i++) {\n//            var str =  runner  + i +  .png ;\n//            var frame = cc.SpriteFrameCache.getInstance().getSpriteFrame(str);\n//            animFrames.push(frame);\n//        }\n//        var animation = cc.Animation.create(animFrames, 0.1);\n//        this.runningAction = cc.RepeatForever.create(cc.Animate.create(animation));", 
            "title": "Add Jumping Animation of the Player"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter9/en/index.html#handling-touch-event", 
            "text": "Now it's time to handle touch event. At first, we should enable touch handling of the AnimationLayer.  Add the following code snippets at the end of  init  method:  // enable touch\nthis.setTouchEnabled(true);\n// set touch mode to kCCTouchesOneByOne\nthis.setTouchMode(1);  These two code lines can activate the touch dispatching function.  Now let's add three callbacks we needed to handle our touch event:   onTouchBegan:function(touch, event) {\n        var pos = touch.getLocation();\n        this.recognizer.beginPoint(pos.x, pos.y);\n        return true;\n    },\n    onTouchMoved:function(touch, event) {\n        var pos = touch.getLocation();\n        this.recognizer.movePoint(pos.x, pos.y);\n    },\n    onTouchEnded:function(touch, event) {\n        var rtn = this.recognizer.endPoint();\n        cc.log( rnt =   + rtn);\n        switch (rtn) {\n            case  up :\n                this.jump();\n                break;\n            default:\n                break;\n        }\n    },  When you touch the screen the  onTouchBegan  method will be called. When you hold your finger and move it around, the  onTouchMoved  method will\nbe called. When you release your finger, the  onTouchEnded  method will be called.  Here we have used our simple gesture recognizer to detect the \"swipe out\" gesture.", 
            "title": "Handling Touch Event"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter9/en/index.html#wrap-them-all", 
            "text": "Now it's time to wrap them all.  At first, add the following enumerations in the beginning of the AnimationLayer:  // define enum for runner status\nif(typeof RunnerStat ==  undefined ) {\n    var RunnerStat = {};\n    RunnerStat.running = 0;\n    RunnerStat.jumpUp = 1;\n    RunnerStat.jumpDown = 2;\n};  We use these enums to represent different state of the player.  Then we should add another two member variables in the AnimationLayer:   recognizer:null,\n stat:RunnerStat.running,// init with running status  And init the recognizer at the end of  init  method:   this.recognizer = new SimpleRecognizer();  At last, we should implement our jump method:   jump:function () {\n        cc.log( jump );\n        if (this.stat == RunnerStat.running) {\n            this.body.applyImpulse(cp.v(0, 250), cp.v(0, 0));\n            this.stat = RunnerStat.jumpUp;\n            this.sprite.stopAllActions();\n            this.sprite.runAction(this.jumpUpAction);\n        }\n    },  And also we should tie these things up int the  update  function:  //in the update method of AnimationLayer\n    // check and update runner stat\n        var vel = this.body.getVel();\n        if (this.stat == RunnerStat.jumpUp) {\n            if (vel.y   0.1) {\n                this.stat = RunnerStat.jumpDown;\n                this.sprite.stopAllActions();\n                this.sprite.runAction(this.jumpDownAction);\n            }\n        } else if (this.stat == RunnerStat.jumpDown) {\n            if (vel.y == 0) {\n                this.stat = RunnerStat.running;\n                this.sprite.stopAllActions();\n                this.sprite.runAction(this.runningAction);\n            }\n        }  One more word, don't forget the cleanup stuff. We should release the created actions when the AnimationLayer exit.      onExit:function() {\n        this.runningAction.release();\n        this.jumpUpAction.release();\n        this.jumpDownAction.release();\n        this._super();\n    },  You may also want to check whether all the created js files are loaded in  cocos2d.js  file or not.", 
            "title": "Wrap them all"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter9/en/index.html#summary", 
            "text": "Congratulations! You have finished another epic tutorial again.  Let's see what we have done in this tutorial.  At first, we have learned how to update our game hud elements.  Then we added the game over logic.  At last, we have created a simple gesture recognizer to handle the controlling of our hero's jumping action.  You can download the final project from  here .", 
            "title": "Summary"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter9/en/index.html#where-to-go-from-here", 
            "text": "In the next tutorial, we will cover the final bolts and nuts of the parkour game. Keep tuning!", 
            "title": "Where to go from here?"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter10/en/index.html", 
            "text": "Add Audio Effect into Parkour Game\n\n\nIntroduction\n\n\nIn this tutorial, I want to show you how to add audio support into our Parkour game.\n\n\nTime in Action\n\n\nAudio Formats Supported by HTML5\n\n\nAt first, let's see which formats are supported by HTML5:\n\n\n\nHere we use \nogg\n format. Because it is well supported by Android and Chrome.\n\n\nAdd Audio Support into Our Game\n\n\nCopy Audio Resources\n\n\nAt first, let's copy required audio files into our \nres\n directory. Audio files can be found in the sample project which can be downloaded from the \nSummary\n section.\n\n\nWe use \nbackground.ogg\n for background music, \njump.ogg\n and \npickup_coin.ogg\n for jumping and collecting the coins.\n\n\nSecondly, let's define some global variables in the \nresource.js\n file:\n\n\nvar s_music_background = \nres/background.ogg\n;\nvar s_music_jump = \nres/jump.ogg\n;\nvar s_music_pickup_coin = \nres/pickup_coin.ogg\n;\n//add the following code line at the end of g_resource array\n{src:s_music_background},\n{src:s_music_jump},\n{src:s_music_pickup_coin}\n\n\n\n\nAdd Audio Handling Code into The Game\n\n\nAt first, preload the audio files into our game. Add the following code snippets at the end of \ninit\n function of \nmyApp.js\n file:\n\n\n//preload audio resources\nvar audioEngine = cc.AudioEngine.getInstance();\naudioEngine.preloadMusic(s_music_background);\naudioEngine.preloadEffect(s_music_jump);\naudioEngine.preloadEffect(s_music_pickup_coin);\n\n\n\n\nSecondly, add the background music when entering the PlayScene:\n\n\nNote:\n Add the following code at the end of \nonEnter\n function in PlayScene.js.\n\n\n//add background music\nvar audioEngine = cc.AudioEngine.getInstance();\naudioEngine.playMusic(s_music_background, true);\n\nthis.scheduleUpdate();\n\n\n\n\nWhen the game is over, we should stop the background music. So add the following code snippets in \ncollosionRockBegin\n method:\n\n\n //stop bg music\nvar audioEngine = cc.AudioEngine.getInstance();\naudioEngine.stopMusic();\n\n\n\n\nAt last, let's add jumping audio effect and collecting coin audio effect.\n\n\n//add the jumping audio effect in *jump* method of AnimationLayer\n//stop bg music\nvar audioEngine = cc.AudioEngine.getInstance();\naudioEngine.playEffect(s_music_jump);\n\n\n\n\n//add the collect coin audio effect in *collisionCoinBegin* method of PlayScene\n var audioEngine = cc.AudioEngine.getInstance();\naudioEngine.playEffect(s_music_pickup_coin);\n\n\n\n\nSave all the changes and run the game. Now your game rock with a world full of audio.\n\n\nSummary\n\n\nIn the tutorial, we have seen that how easy it is to add audio support into an existing game. You can download the whole project from \nhere\n.\n\n\nWhere to go from here?\n\n\nNow the journey of Parkour game has reached a milestone. In the following tutorials, we will add cross-platform support and do some encryption to our js files.\n\n\nKeep tuning!", 
            "title": "_Chapter10"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter10/en/index.html#add-audio-effect-into-parkour-game", 
            "text": "", 
            "title": "Add Audio Effect into Parkour Game"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter10/en/index.html#introduction", 
            "text": "In this tutorial, I want to show you how to add audio support into our Parkour game.", 
            "title": "Introduction"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter10/en/index.html#time-in-action", 
            "text": "", 
            "title": "Time in Action"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter10/en/index.html#audio-formats-supported-by-html5", 
            "text": "At first, let's see which formats are supported by HTML5:  Here we use  ogg  format. Because it is well supported by Android and Chrome.", 
            "title": "Audio Formats Supported by HTML5"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter10/en/index.html#add-audio-support-into-our-game", 
            "text": "", 
            "title": "Add Audio Support into Our Game"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter10/en/index.html#copy-audio-resources", 
            "text": "At first, let's copy required audio files into our  res  directory. Audio files can be found in the sample project which can be downloaded from the  Summary  section.  We use  background.ogg  for background music,  jump.ogg  and  pickup_coin.ogg  for jumping and collecting the coins.  Secondly, let's define some global variables in the  resource.js  file:  var s_music_background =  res/background.ogg ;\nvar s_music_jump =  res/jump.ogg ;\nvar s_music_pickup_coin =  res/pickup_coin.ogg ;\n//add the following code line at the end of g_resource array\n{src:s_music_background},\n{src:s_music_jump},\n{src:s_music_pickup_coin}", 
            "title": "Copy Audio Resources"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter10/en/index.html#add-audio-handling-code-into-the-game", 
            "text": "At first, preload the audio files into our game. Add the following code snippets at the end of  init  function of  myApp.js  file:  //preload audio resources\nvar audioEngine = cc.AudioEngine.getInstance();\naudioEngine.preloadMusic(s_music_background);\naudioEngine.preloadEffect(s_music_jump);\naudioEngine.preloadEffect(s_music_pickup_coin);  Secondly, add the background music when entering the PlayScene:  Note:  Add the following code at the end of  onEnter  function in PlayScene.js.  //add background music\nvar audioEngine = cc.AudioEngine.getInstance();\naudioEngine.playMusic(s_music_background, true);\n\nthis.scheduleUpdate();  When the game is over, we should stop the background music. So add the following code snippets in  collosionRockBegin  method:   //stop bg music\nvar audioEngine = cc.AudioEngine.getInstance();\naudioEngine.stopMusic();  At last, let's add jumping audio effect and collecting coin audio effect.  //add the jumping audio effect in *jump* method of AnimationLayer\n//stop bg music\nvar audioEngine = cc.AudioEngine.getInstance();\naudioEngine.playEffect(s_music_jump);  //add the collect coin audio effect in *collisionCoinBegin* method of PlayScene\n var audioEngine = cc.AudioEngine.getInstance();\naudioEngine.playEffect(s_music_pickup_coin);  Save all the changes and run the game. Now your game rock with a world full of audio.", 
            "title": "Add Audio Handling Code into The Game"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter10/en/index.html#summary", 
            "text": "In the tutorial, we have seen that how easy it is to add audio support into an existing game. You can download the whole project from  here .", 
            "title": "Summary"
        }, 
        {
            "location": "/tutorials/javascript/parkour-game-with-javascript/chapter10/en/index.html#where-to-go-from-here", 
            "text": "Now the journey of Parkour game has reached a milestone. In the following tutorials, we will add cross-platform support and do some encryption to our js files.  Keep tuning!", 
            "title": "Where to go from here?"
        }, 
        {
            "location": "/api-ref/index.html", 
            "text": "h3 {\n      text-align: center;\n  }\n\n  img {\n    display: block;\n    margin-left: auto;\n    margin-right: auto;\n  }\n\n  p {\n    text-align:left;\n  }\n\n  .clearfix {overflow: auto;}\n\n\n\n\n\nAPI Reference", 
            "title": "API Reference"
        }, 
        {
            "location": "/api-ref/index.html#api-reference", 
            "text": "", 
            "title": "API Reference"
        }, 
        {
            "location": "/deprecated/studio/index.html", 
            "text": "Cocos Studio is EOL'd\n\n\nCocos Studio has been EOL'd as of \nApril 2016\n.  There will be no more releases of Cocos Studio.\n\n\nThe last version of Cocos Studio is v3.10 and can be downloaded for \nMac\n and \nWindows\n.\nThis version of Cocos Studio requires version \nv3.10\n of Cocos2d-x.\nThis version of Cocos Studio works best in Windows 7 and OS X 10.10.\n\n\nIf you update Cocos2d-x to a version greater than v3.10, you may experience compatibility issues.\nIf you run Cocos Studio on Windows 10 or OS X 10.11, you may experience compatibility issues.\n\n\n----------------------------------------------------\n\n\nStudio\n\n\nCocos Studio, a free cross-platform game development editor supporting Cocos2d-x,\nhelps developers build 2D and 3D game scenes, edit game UI and other game resources\nquickly and efficiency. Supporting TexturePacker, Particle Designer, Tiled Map Editor,\n3ds Max and other excellent 3rd party resources, Cocos Studio meets every game\nstudios' needs. Utilizing the included templates, it is easy to get started with\nCocos Studio.\n\n\nOverview\n\n\nWorkspace Overview\n\n\nGeneral Project Workflow\n\n\nScenes and UI\n\n\nSpriteSheet\n\n\nPublish\n\n\nCoding and Debugging\n\n\nPackage and Runtime Environment Settings\n\n\nEditor/UI\n\n\nBasic Objects\n\n\nWidgets\n\n\nContainers\n\n\nArmature\n\n\nUI Layout and Multi-resolution Support\n\n\n9-Slice\n\n\nRulers and Guides\n\n\nAnimation\n\n\nCreate 2D SpriteSheet Animation\n\n\nKey Frames\n\n\nCreate a Frame Event\n\n\nCreate a Skeletal Animation\n\n\nEdit Skeletal Animation\n\n\nHow to: Create a Skeletal Animation with cocos\n\n\nUse Skeletal Animation\n\n\n3D\n\n\nCreate 3D Scenes\n\n\n3D Model Overview\n\n\n3D Particles Overview\n\n\nCamera\n\n\n3D Keyboard Shortcuts\n\n\n3D Node Overview\n\n\nSkyBox\n\n\nLight\n\n\nCustom Widgets\n\n\nWidgets Extension\n\n\nProperties Extension\n\n\nCustomizing Exported Data Formats\n\n\nSamples\n\n\nEdit Cocos Games with IDE\n\n\nCallback Feature\n\n\nCreate Custom Data\n\n\nLoad Exported Data\n\n\nCustomize Cocos Framework \n Simulator\n\n\nStudio FAQ\n\n\n1 No Android Devices Found\n\n\n2 How to: Debug Browser Preview\n\n\n3 How to: Use CCLog to Debug project based on precompiled library\n\n\n4 How to: Use FBX File\n\n\n5 How to: Load SpriteSheet Correctly\n\n\n6 How to: Preload Resources\n\n\n7 How to: Automatically Wrap Text and Adjust Height of Text\n\n\n8 Two Automatic Recursive Function on UIHelper\n\n\n9 Issues about Upgrading or Downgrading Framework\n\n\n10 How to: Load Data Exported from cocos\n\n\n11 How to: Import Project from v1.6\n\n\n12 Customize Framework(v3.7)\n\n\n13 Customize Framework(v3.8~3.9)\n\n\n14 Customize precompiled library(v3.10)\n\n\n15 How to: Fix Packaging and Running Issues\n\n\n16 How to: Simplify Widgets Initial Resources\n\n\n17 How to: Run Previous Versions of Addins in cocos\n\n\n18 How to: Fix cocos Run Error?", 
            "title": "Cocos Studio"
        }, 
        {
            "location": "/deprecated/studio/index.html#cocos-studio-is-eold", 
            "text": "Cocos Studio has been EOL'd as of  April 2016 .  There will be no more releases of Cocos Studio.  The last version of Cocos Studio is v3.10 and can be downloaded for  Mac  and  Windows .\nThis version of Cocos Studio requires version  v3.10  of Cocos2d-x.\nThis version of Cocos Studio works best in Windows 7 and OS X 10.10.  If you update Cocos2d-x to a version greater than v3.10, you may experience compatibility issues.\nIf you run Cocos Studio on Windows 10 or OS X 10.11, you may experience compatibility issues.", 
            "title": "Cocos Studio is EOL'd"
        }, 
        {
            "location": "/deprecated/studio/index.html#-", 
            "text": "", 
            "title": "----------------------------------------------------"
        }, 
        {
            "location": "/deprecated/studio/index.html#studio", 
            "text": "Cocos Studio, a free cross-platform game development editor supporting Cocos2d-x,\nhelps developers build 2D and 3D game scenes, edit game UI and other game resources\nquickly and efficiency. Supporting TexturePacker, Particle Designer, Tiled Map Editor,\n3ds Max and other excellent 3rd party resources, Cocos Studio meets every game\nstudios' needs. Utilizing the included templates, it is easy to get started with\nCocos Studio.", 
            "title": "Studio"
        }, 
        {
            "location": "/deprecated/studio/index.html#overview", 
            "text": "", 
            "title": "Overview"
        }, 
        {
            "location": "/deprecated/studio/index.html#workspace-overview", 
            "text": "", 
            "title": "&emsp;&emsp;Workspace Overview"
        }, 
        {
            "location": "/deprecated/studio/index.html#general-project-workflow", 
            "text": "", 
            "title": "General Project Workflow"
        }, 
        {
            "location": "/deprecated/studio/index.html#scenes-and-ui", 
            "text": "", 
            "title": "&emsp;&emsp;Scenes and UI"
        }, 
        {
            "location": "/deprecated/studio/index.html#spritesheet", 
            "text": "", 
            "title": "&emsp;&emsp;SpriteSheet"
        }, 
        {
            "location": "/deprecated/studio/index.html#publish", 
            "text": "", 
            "title": "&emsp;&emsp;Publish"
        }, 
        {
            "location": "/deprecated/studio/index.html#coding-and-debugging", 
            "text": "", 
            "title": "&emsp;&emsp;Coding and Debugging"
        }, 
        {
            "location": "/deprecated/studio/index.html#package-and-runtime-environment-settings", 
            "text": "", 
            "title": "&emsp;&emsp;Package and Runtime Environment Settings"
        }, 
        {
            "location": "/deprecated/studio/index.html#editorui", 
            "text": "", 
            "title": "Editor/UI"
        }, 
        {
            "location": "/deprecated/studio/index.html#basic-objects", 
            "text": "", 
            "title": "&emsp;&emsp;Basic Objects"
        }, 
        {
            "location": "/deprecated/studio/index.html#widgets", 
            "text": "", 
            "title": "&emsp;&emsp;Widgets"
        }, 
        {
            "location": "/deprecated/studio/index.html#containers", 
            "text": "", 
            "title": "&emsp;&emsp;Containers"
        }, 
        {
            "location": "/deprecated/studio/index.html#armature", 
            "text": "", 
            "title": "&emsp;&emsp;Armature"
        }, 
        {
            "location": "/deprecated/studio/index.html#ui-layout-and-multi-resolution-support", 
            "text": "", 
            "title": "&emsp;&emsp;UI Layout and Multi-resolution Support"
        }, 
        {
            "location": "/deprecated/studio/index.html#9-slice", 
            "text": "", 
            "title": "&emsp;&emsp;9-Slice"
        }, 
        {
            "location": "/deprecated/studio/index.html#rulers-and-guides", 
            "text": "", 
            "title": "&emsp;&emsp;Rulers and Guides"
        }, 
        {
            "location": "/deprecated/studio/index.html#animation", 
            "text": "", 
            "title": "Animation"
        }, 
        {
            "location": "/deprecated/studio/index.html#create-2d-spritesheet-animation", 
            "text": "", 
            "title": "&emsp;&emsp;Create 2D SpriteSheet Animation"
        }, 
        {
            "location": "/deprecated/studio/index.html#key-frames", 
            "text": "", 
            "title": "&emsp;&emsp;Key Frames"
        }, 
        {
            "location": "/deprecated/studio/index.html#create-a-frame-event", 
            "text": "", 
            "title": "&emsp;&emsp;Create a Frame Event"
        }, 
        {
            "location": "/deprecated/studio/index.html#create-a-skeletal-animation", 
            "text": "", 
            "title": "&emsp;&emsp;Create a Skeletal Animation"
        }, 
        {
            "location": "/deprecated/studio/index.html#edit-skeletal-animation", 
            "text": "", 
            "title": "&emsp;&emsp;Edit Skeletal Animation"
        }, 
        {
            "location": "/deprecated/studio/index.html#how-to-create-a-skeletal-animation-with-cocos", 
            "text": "", 
            "title": "&emsp;&emsp;How to: Create a Skeletal Animation with cocos"
        }, 
        {
            "location": "/deprecated/studio/index.html#use-skeletal-animation", 
            "text": "", 
            "title": "&emsp;&emsp;Use Skeletal Animation"
        }, 
        {
            "location": "/deprecated/studio/index.html#3d", 
            "text": "", 
            "title": "3D"
        }, 
        {
            "location": "/deprecated/studio/index.html#create-3d-scenes", 
            "text": "", 
            "title": "&emsp;&emsp;Create 3D Scenes"
        }, 
        {
            "location": "/deprecated/studio/index.html#3d-model-overview", 
            "text": "", 
            "title": "&emsp;&emsp;3D Model Overview"
        }, 
        {
            "location": "/deprecated/studio/index.html#3d-particles-overview", 
            "text": "", 
            "title": "&emsp;&emsp;3D Particles Overview"
        }, 
        {
            "location": "/deprecated/studio/index.html#camera", 
            "text": "", 
            "title": "&emsp;&emsp;Camera"
        }, 
        {
            "location": "/deprecated/studio/index.html#3d-keyboard-shortcuts", 
            "text": "", 
            "title": "&emsp;&emsp;3D Keyboard Shortcuts"
        }, 
        {
            "location": "/deprecated/studio/index.html#3d-node-overview", 
            "text": "", 
            "title": "&emsp;&emsp;3D Node Overview"
        }, 
        {
            "location": "/deprecated/studio/index.html#skybox", 
            "text": "", 
            "title": "&emsp;&emsp;SkyBox"
        }, 
        {
            "location": "/deprecated/studio/index.html#light", 
            "text": "", 
            "title": "&emsp;&emsp;Light"
        }, 
        {
            "location": "/deprecated/studio/index.html#custom-widgets", 
            "text": "", 
            "title": "Custom Widgets"
        }, 
        {
            "location": "/deprecated/studio/index.html#widgets-extension", 
            "text": "", 
            "title": "&emsp;&emsp;Widgets Extension"
        }, 
        {
            "location": "/deprecated/studio/index.html#properties-extension", 
            "text": "", 
            "title": "&emsp;&emsp;Properties Extension"
        }, 
        {
            "location": "/deprecated/studio/index.html#customizing-exported-data-formats", 
            "text": "", 
            "title": "&emsp;&emsp;Customizing Exported Data Formats"
        }, 
        {
            "location": "/deprecated/studio/index.html#samples", 
            "text": "", 
            "title": "&emsp;&emsp;Samples"
        }, 
        {
            "location": "/deprecated/studio/index.html#edit-cocos-games-with-ide", 
            "text": "", 
            "title": "Edit Cocos Games with IDE"
        }, 
        {
            "location": "/deprecated/studio/index.html#callback-feature", 
            "text": "", 
            "title": "&emsp;&emsp;Callback Feature"
        }, 
        {
            "location": "/deprecated/studio/index.html#create-custom-data", 
            "text": "", 
            "title": "&emsp;&emsp;Create Custom Data"
        }, 
        {
            "location": "/deprecated/studio/index.html#load-exported-data", 
            "text": "", 
            "title": "&emsp;&emsp;Load Exported Data"
        }, 
        {
            "location": "/deprecated/studio/index.html#customize-cocos-framework-simulator", 
            "text": "", 
            "title": "&emsp;&emsp;Customize Cocos Framework &amp; Simulator"
        }, 
        {
            "location": "/deprecated/studio/index.html#studio-faq", 
            "text": "", 
            "title": "Studio FAQ"
        }, 
        {
            "location": "/deprecated/studio/index.html#1-no-android-devices-found", 
            "text": "", 
            "title": "&emsp;&emsp;1 No Android Devices Found"
        }, 
        {
            "location": "/deprecated/studio/index.html#2-how-to-debug-browser-preview", 
            "text": "", 
            "title": "&emsp;&emsp;2 How to: Debug Browser Preview"
        }, 
        {
            "location": "/deprecated/studio/index.html#3-how-to-use-cclog-to-debug-project-based-on-precompiled-library", 
            "text": "", 
            "title": "&emsp;&emsp;3 How to: Use CCLog to Debug project based on precompiled library"
        }, 
        {
            "location": "/deprecated/studio/index.html#4-how-to-use-fbx-file", 
            "text": "", 
            "title": "&emsp;&emsp;4 How to: Use FBX File"
        }, 
        {
            "location": "/deprecated/studio/index.html#5-how-to-load-spritesheet-correctly", 
            "text": "", 
            "title": "&emsp;&emsp;5 How to: Load SpriteSheet Correctly"
        }, 
        {
            "location": "/deprecated/studio/index.html#6-how-to-preload-resources", 
            "text": "", 
            "title": "&emsp;&emsp;6 How to: Preload Resources"
        }, 
        {
            "location": "/deprecated/studio/index.html#7-how-to-automatically-wrap-text-and-adjust-height-of-text", 
            "text": "", 
            "title": "&emsp;&emsp;7 How to: Automatically Wrap Text and Adjust Height of Text"
        }, 
        {
            "location": "/deprecated/studio/index.html#8-two-automatic-recursive-function-on-uihelper", 
            "text": "", 
            "title": "&emsp;&emsp;8 Two Automatic Recursive Function on UIHelper"
        }, 
        {
            "location": "/deprecated/studio/index.html#9-issues-about-upgrading-or-downgrading-framework", 
            "text": "", 
            "title": "&emsp;&emsp;9 Issues about Upgrading or Downgrading Framework"
        }, 
        {
            "location": "/deprecated/studio/index.html#10-how-to-load-data-exported-from-cocos", 
            "text": "", 
            "title": "&emsp;&emsp;10 How to: Load Data Exported from cocos"
        }, 
        {
            "location": "/deprecated/studio/index.html#11-how-to-import-project-from-v16", 
            "text": "", 
            "title": "&emsp;&emsp;11 How to: Import Project from v1.6"
        }, 
        {
            "location": "/deprecated/studio/index.html#12-customize-frameworkv37", 
            "text": "", 
            "title": "&emsp;&emsp;12 Customize Framework(v3.7)"
        }, 
        {
            "location": "/deprecated/studio/index.html#13-customize-frameworkv3839", 
            "text": "", 
            "title": "&emsp;&emsp;13 Customize Framework(v3.8~3.9)"
        }, 
        {
            "location": "/deprecated/studio/index.html#14-customize-precompiled-libraryv310", 
            "text": "", 
            "title": "&emsp;&emsp;14 Customize precompiled library(v3.10)"
        }, 
        {
            "location": "/deprecated/studio/index.html#15-how-to-fix-packaging-and-running-issues", 
            "text": "", 
            "title": "&emsp;&emsp;15 How to: Fix Packaging and Running Issues"
        }, 
        {
            "location": "/deprecated/studio/index.html#16-how-to-simplify-widgets-initial-resources", 
            "text": "", 
            "title": "&emsp;&emsp;16 How to: Simplify Widgets Initial Resources"
        }, 
        {
            "location": "/deprecated/studio/index.html#17-how-to-run-previous-versions-of-addins-in-cocos", 
            "text": "", 
            "title": "&emsp;&emsp;17 How to: Run Previous Versions of Addins in cocos"
        }, 
        {
            "location": "/deprecated/studio/index.html#18-how-to-fix-cocos-run-error", 
            "text": "", 
            "title": "&emsp;&emsp;18 How to: Fix cocos Run Error?"
        }, 
        {
            "location": "/deprecated/studio-chapters/Workspace_Overview/en/index.html", 
            "text": "Workspace Overview\n\n\nThe workspace of Cocos Studio is composed of \nMenu\n, \nToolbar\n, \nObjects panels\n,\n\nResources panels\n, \nCanvas\n, \nProperties panels\n, \nAnimation panels\n,\n\nOutput panels\n and \nStatus bars\n.\n\n\n\n\nMenu\n\n\nThe Studio menu bar is composed of seven menus, File, Edit, View, Project, Languages\nand Help. The menu on Mac is same with that on Windows, but items are displayed\nin different order. Let's take brief introduction to the items from each drop-down\nmenu. Example:\n\n\n\n\n1 File\n\n\n\n\nNew Project\n: to create a cocos project. Keyboard shortcut is Ctrl+Shift+N (Win)/ Command+Shift+N (Mac).\n\n\nNew File\n: to create a file. The existing file types include Scene, Layer, Node, SpriteSheet and 3D Scene. Keyboard shortcut is Ctrl+N (Win)/ Command+N (Mac).\n\n\nOpen Project\n: to open cocos projects. Keyboard shortcut is Ctrl+O (Win)/ Command+O (Mac).\n\n\nRecent Projects\n: to provide a quick access to recently opened projects, the maximum number of which is ten. The last-opened project is at the top.\n\n\nClose XXXX.csd/csi\n: to close current project XXXX.csd/csi.\n\n\nClose Project\n: to close current cocos project.\n\n\nSave XXXX.csd/csi\n: to save current project XXXX.csd/csi. Keyboard shortcut is Ctrl+S (Win)/ Command+S (Mac).\n\n\nSave All\n: to save all files in a project. Keyboard shortcut is Ctrl+Shift+S (Win)/ Command+Shift+S (Mac).\n\n\nSave As\n: to save a cocos project to a new location or with a new name.\n\n\nImport -\n Import Resources\n: to import resources from disk to Resources panel.\n\n\nImport -\n Import Project from v1.6\n: to transfer v1.6 projects to currently supported project files.\n\n\nQuit\n: to quit Cocos Studio. Keyboard shortcut is Alt+ F4 (Win)/ Command+Q (Mac).\n\n\n2 Edit\n\n\n\n\nUndo\n: to  undo the last action. Keyboard shortcut is Ctrl+Z (Win)/ Command+Z (Mac).\n\n\nRedo\n: to redo an action that you undid. Keyboard shortcut is Ctrl+Y (Win)/ Command+Y (Mac).\n\n\nPreferences\n: keyboard shortcut is Ctrl+, (Win)/ Command+, (Mac).\n\n\n\n\n\n\n\n\nGeneral\n:\n\n\n1 Widgets\uff1awhether simplify widgets initial resources or not.\n\n\n2 Mouse\uff1ato enable/disable zooming with mouse wheel.\n\n\n\n\n\n\nPlatform\n:\n\n\nAndroid Path: Set path of SDK, NDK, ANT and JDK. For more information, please see \nPackage and Runtime Environment Settings\n.\n\n\n\n\n\n\n\n\n\n\n\n\nResolution\n:\n\n\nModify resolution drop-down list: Add, Edit, Up, Down, Remove and Reset. Click OK for any changes to take effect. The list will update in \"Screen Resolution \n Orientation\".\n\n\n\n\n\n\n\n\n3 Project\n\n\n\n\nRun Project\n\n\n\n\n\n\nWindows Version: to run project on Windows, run on Android device, or run on browsers (JS projects).\n\n\n\n\n\n\nMac Version: to run project on iOS, run on Mac, run on Android, or run on browsers (JS projects).\n\n\nFor more information, please see \nPackage and Runtime Environment Settings\n.\n\n\n\n\n\n\nPublish and Package\n:\n\n\n\n\n\n\nPublish Resource: publish resources, then open project with Cocos 2d-x. The published resources have a small file size and load quickly.\n\n\n\n\n\n\nPublish to Visual Studio: first publish resources, and then open project with Visual Studio.\n\n\n\n\n\n\nAndroid package (.apk): package current project to \n.apk\n file. Support Windows and Mac versions of cocos. Support C++, JavaScript, Lua.\n\n\n\n\n\n\niOS package (.ipa): package current project to \n.ipa\n file. Support Mac version. Support C++, JavaScript, Lua.\n\n\n\n\n\n\nHTML5: package current project to HTML5. Support Windows and Mac versions. Support JavaScript.\n\n\n\n\n\n\nPublish and Package (using the previous settings)\n: to publish or package projects with previous settings.\n\n\nProject Setting\n\n\n\n\nPublish\n\n\n\n\n\n\nResource and Project File: copy resources to publish directory; publish csd and csi for Cocos 2d-x.\n\n\nNote\n The transfer speed will be lower if you publish a number of resources. It is recommended to select \"Project File Only\".\n\n\n\n\n\n\nProject File Only: only publish \ncsd\n and \ncsi\n for Cocos 2d-x.\n\n\n\n\n\n\nPublish Directory: users can customize publish directory. Cocos Studio supports absolute and relative path.\n\n\n\n\n\n\ncsb File: FlatBuffers is employed to read binary files, feature in high efficiency, small size, significant security. Support Cocos2d-x C++ and Lua Binding.\n\n\n\n\n\n\nJSON File: Lightweight data transfer format, good readability, and native support for JavaScript.\n\n\n\n\n\n\nCustom: extended data format. For more information, please see \nCustomizing Exported Data Formats\n.\n\n\n\n\n\n\nPackage\n\n\nFor more information about Package, please see \nPackage and Runtime Environment Settings\n.\n\n\n4 View\n\n\nAnchor Point\n: to show or hide the anchor point in rendering section. Keyboard shortcut is Ctrl+Shift+A (Win)/ Command+Shift+A (Mac).\n\n\nRuler\n: to show or hide ruler. Keyboard shortcut is Ctrl+Shift+R (Win)/ Command+Shift+R (Mac).\n\n\nGuides\n: to show or hide guides. Keyboard shortcut is Ctrl+\uff1b(Win)/ Command+; (Mac).\n\n\nLock Guides\n: when checked, guides cannot be selected or moved. Keyboard shortcut is Ctrl+Shift+; (Win)/ Command+Alt+; (Mac).\n\n\nClear Guides\n: to delete all the guides in the rendering section.\n\n\nNew Guides\n: to add guides to rendering section.\n\n\n5 Window\n\n\n\n\nObjects, Resources, Animation, Output, Properties\n: check/ uncheck to open/ close these panels.\n\n\nStart Launcher\n: to start Launcher in Cocos Studio.\n\n\nReset Window Layout\n: to reset the window layout to default settings.\n\n\n6 Language\n\n\n\n\nCocos Studio support English, Simplified Chinese and Traditional Chinese. You need to restart Cocos Studio for your new language setting to take effect.\n\n\n7 Help\n\n\n\n\nView Help\n: official tutorials.\n\n\nCheck for Updates\n: to check if the latest version is installed on your computer.\n\n\nAbout Cocos Studio\n: version and copyright information; links to official website, Weibo and forum.\n\n\nToolbar\n\n\n\n\nThe toolbar contains eight basic components: New File, Resolution, Preview, Publish and Package, Platform Switch, Alignment, Move Canvas and Enable left-click.\n\n\n\n\n \nNew File\n: to create a Scene, Layer, Node, SpriteSheet or 3D Scene.\n\n\n \nScreen Resolution \n Orientation\n: to set the screen resolution and to switch the display between landscape and portrait.\n\n\n \nPreview\n: to preview a project in simulator. Currently you can preview 2D/ 3D Scene and Animation projects.\n\n\n \nPublish and Package\n: to publish resources or projects for iOS (.ipa), Android (.apk) and HTML games.\n\n\n \nPlatform Switch\n: to run projects on Windows or Android.\n\n\n \nAlignment\n: to align selected widgets on canvas with popular alignment formatting. They are Center, Left-align, Vertical center, Right-align, Vertical Justify, Horizontal Center, Vertical Bottom, Horizontal alignment and Vertical alignment.\n\n\n \nMove Canvas\n: to move Canvas in the rendering section. You can access the tool by clicking the hand shape icon, or using keyboard shortcut Q.\n\n\n \nEnable left\n: click currently only supports four file types, which are Scene, Layer, Node and SpriteSheet files. You can access the tool by clicking the icon, or using keyboard shortcut W.\n\n\n Next we will introduce tools currently only available in 3D Scene.\n\n\n Default state is \"Move\". Clicking X-axis, Y-axis or Z-axis to decide that along which axis the object moves.\n\n\n Click this button to change the mouse settings to \u201cRotate\". Clicking X-axis, Y-axis or Z-axis to decide that along which axis the object rotates.\n\n\n Click this button to change the mouse settings to \"Scale\". Clicking X-axis, Y-axis or Z-axis to decide that along which axis the object scales.\n\n\nObjects Panel\n\n\n\n\nObjects panel is divided into four sections by default, which are Basic Objects, Widgets, Containers and Custom Widgets. To create a widget, just select a widget, and then drag and drop it from Widgets panel to Canvas.\n\n\n\n\n\n\nIn addition, click Edit on the Menu -\n Preferences -\n General -\n select \"Show deprecated widgets\" -\n click \"OK\". The widget \"AtlasLabel\" will show.\n\n\n\n\n\n\n3D widgets will be displayed when editing 3D scenes, for example, 3D Camera, Model, 3D particles, etc.\n\n\n\n\n\n\nIn both 2D \n 3D projects, when you hover the mouse over a widget, an information bubble \u201ci\u201d will appear at top right corner. Clicking that icon you can see descriptive texts of each widget and an Internet link for more information.\n\n\n\n\nResources Panel\n\n\nResources panel displays all files related to a game project. Importing resources, creating projects, renaming files, deleting files, etc. can be done here.\n\n\n\n\nCocos Studio allows you to import an existing resource to Resource panel, you can also drag resources from Resource panel to other panels such as canvas in order to set properties.\n\n\nNote\n File structure in the Resource panel is the same as that on the disk. When a file is deleted from the local file system, the linked widget will display its name in red indicating unavailable. As shown in the following figure outlined in red.\n\n\n\n\nThe general workflow to build games with cocos is as follows:\n\n\nAdd resources to the Resources panel -\n create widgets by dragging and dropping them from Objects panel to Canvas -\n specify properties of widgets -\n edit Scene or Animation.\n\n\nCanvas\n\n\nNote\n Canvas will automatically adjust itself to the contents on it.\n\n\n1 When editing Scene or Layer, Canvas is displayed as shown below:\n\n\n\n\nCanvas is the most commonly used panel in Cocos Studio. You can visually adjust the position, rotation, scaling, and anchor point of a widget in Canvas. You can also select one or multiple widgets in Canvas, and edit the widget properties using either right-click menu or Property panel.\n\n\nPress the spacebar, and you can move the Canvas by dragging the mouse. You can also move the Canvas by pressing the scroll wheel on your mouse.\n\n\n\n\nThe area with black background represents the screen resolution you set.\n\n\n2 When editing Nodes, Canvas is displayed as shown below:\n\n\n\n\n3 When editing SpriteSheet, Canvas is displayed as shown below:\n\n\n\n\n4 When editing 3D Scene, Canvas is displayed as shown below:\n\n\n\n\nAnimation panel\n\n\nAnimation panel is divided into six sections: Scene Graph, Timeline, Easing Interface, Playback Control, Editing Tools and Animation list.\n\n\n\n\nTimeline\n\n\n\n\nIn the timeline, you can insert frames and an animation curve will be created automatically between frames.\n\n\nEasing Interface\n\n\n\n\nEasing refers to acceleration or deceleration of frames. When this function is applied, animations will look more lifelike.\n\n\nPlayback Control\n\n\n\n\nAnimation playback control is to manipulate frames in the timeline.\n\n\n \n: Move to the first frame.\n\n\n  \n: Move to previous frame.\n\n\n \n: Play the animation.\n\n\n  \n: Move to next frame.\n\n\n  \n: Move to the last frame.\n\n\n \n: Loop the animation or not.\n\n\n \n: Playback speed of the animation.\n\n\nEditing Tools\n\n\n\n\nAnimation editing tools provide most of the common functionality.\n\n\n Add Frame: Clicking on this icon will add a keyframe at a specific position on the timeline.\n\n\n AutoRecord Frame: What you do after clicking the icon will be recorded in the current frame, become the key frame.  By modifying the widget properties of different frames, you can create rich and colorful animation effects. You can check the modified properties by clicking \n.\n\n\n Animation ghosting, also known as onion skin, is a viewing mode that displays a series of snapshots of frames ahead of and behind the current frame.\n\n\n\n\n Animations can be created, deleted and renamed from within the Animation List.\n\n\n  Add Animation: Create an animation by setting the Start and End frames.\n\n\n\n\nAnimation Name: animation0, from frame 0 to frame 16.\n\n\nScene Graph\n\n\n\n\nThe Scene Graph displays a list of currently used widgets, such as buttons, maps, sound, and particle, etc. They are mapped one-to-one with the concrete widgets within Canvas. To add a widget, you can directly drag it from Objects panel to the Scene Graph (also display in the canvas), which provides a way to visually adjust the structure of the widgets. Within the Scene Graph, you can add, delete, adjust the widget\u2019s render order, and adjust parent-child hierarchies of the widgets.\n\n\nClick \n button to expand animation properties associated with some widget. For example,\n\n\n\n\nThe above picture means that \nPanel_InfoBox_3\n only influence three properties: Skew, Scale and Position.\n\n\n\uff1ato hide a widget in the canvas by selecting this check box.\n\n\n\uff1ato lock a widget to prevent it being edited.\n\n\nNote\n You can use the scene graph to hide a widget in the canvas, or lock a widget to prevent it being edited. The operation in the Scene Graph panel, locking or hiding, only affect the display on Canvas, the effect will not be output to a game project, if you need the effect to appear in the game, please modify the properties in property panel.\n\n\nThe parent-child hierarchies: Cocos Studio uses the concept of parent-child hierarchies, so that any object can become a child of another object, to establish the relationship move the object onto its parent object, will move with the parent.\n\n\nProperties panel\n\n\nIn the Properties panel, you can make modifications of any widgets' properties.\n\n\n\n\nIn Properties panel, there are title section and several tabs, including Position and Size, General properties, 9-Slice, Feature and Advanced properties.\n\n\nTitle section\n: shows the type of the currently selected widget. You can find a widget in the game by searching its name or tag.\n\n\n\n\nPosition and Size\n\n\nThis section includes some settings about anchor point, position and size. Adaptive layout feature is newly added, for more information, please see \nUI Layout and Multi-resolution Support\n.\n\n\n\n\nGeneral Properties\n\n\nGeneral properties contain basic properties of a widget, such as Visible, Scale, Rotation, Skew, etc. General properties are the same for most widgets, but there are also exceptions for some widgets, please refer to \"Online Help\".\n\n\n\n\nAdvanced properties\n include control layout, sub control layout and frame events. When select one or multiple widgets in Canvas, you can adjust the corresponding attributes in the Properties panel.\n\n\n\n\n9-Slice\n\n\nAdvanced Properties\n\n\n\n\n\n\nCreate a Frame Event\n\n\n\n\n\n\nCallback Feature\n\n\n\n\n\n\nCreate Custom Data", 
            "title": "_Workspace_Overview"
        }, 
        {
            "location": "/deprecated/studio-chapters/Workspace_Overview/en/index.html#workspace-overview", 
            "text": "The workspace of Cocos Studio is composed of  Menu ,  Toolbar ,  Objects panels , Resources panels ,  Canvas ,  Properties panels ,  Animation panels , Output panels  and  Status bars .", 
            "title": "Workspace Overview"
        }, 
        {
            "location": "/deprecated/studio-chapters/Workspace_Overview/en/index.html#menu", 
            "text": "The Studio menu bar is composed of seven menus, File, Edit, View, Project, Languages\nand Help. The menu on Mac is same with that on Windows, but items are displayed\nin different order. Let's take brief introduction to the items from each drop-down\nmenu. Example:", 
            "title": "Menu"
        }, 
        {
            "location": "/deprecated/studio-chapters/Workspace_Overview/en/index.html#1-file", 
            "text": "New Project : to create a cocos project. Keyboard shortcut is Ctrl+Shift+N (Win)/ Command+Shift+N (Mac).  New File : to create a file. The existing file types include Scene, Layer, Node, SpriteSheet and 3D Scene. Keyboard shortcut is Ctrl+N (Win)/ Command+N (Mac).  Open Project : to open cocos projects. Keyboard shortcut is Ctrl+O (Win)/ Command+O (Mac).  Recent Projects : to provide a quick access to recently opened projects, the maximum number of which is ten. The last-opened project is at the top.  Close XXXX.csd/csi : to close current project XXXX.csd/csi.  Close Project : to close current cocos project.  Save XXXX.csd/csi : to save current project XXXX.csd/csi. Keyboard shortcut is Ctrl+S (Win)/ Command+S (Mac).  Save All : to save all files in a project. Keyboard shortcut is Ctrl+Shift+S (Win)/ Command+Shift+S (Mac).  Save As : to save a cocos project to a new location or with a new name.  Import -  Import Resources : to import resources from disk to Resources panel.  Import -  Import Project from v1.6 : to transfer v1.6 projects to currently supported project files.  Quit : to quit Cocos Studio. Keyboard shortcut is Alt+ F4 (Win)/ Command+Q (Mac).", 
            "title": "1 File"
        }, 
        {
            "location": "/deprecated/studio-chapters/Workspace_Overview/en/index.html#2-edit", 
            "text": "Undo : to  undo the last action. Keyboard shortcut is Ctrl+Z (Win)/ Command+Z (Mac).  Redo : to redo an action that you undid. Keyboard shortcut is Ctrl+Y (Win)/ Command+Y (Mac).  Preferences : keyboard shortcut is Ctrl+, (Win)/ Command+, (Mac).     General :  1 Widgets\uff1awhether simplify widgets initial resources or not.  2 Mouse\uff1ato enable/disable zooming with mouse wheel.    Platform :  Android Path: Set path of SDK, NDK, ANT and JDK. For more information, please see  Package and Runtime Environment Settings .       Resolution :  Modify resolution drop-down list: Add, Edit, Up, Down, Remove and Reset. Click OK for any changes to take effect. The list will update in \"Screen Resolution   Orientation\".", 
            "title": "2 Edit"
        }, 
        {
            "location": "/deprecated/studio-chapters/Workspace_Overview/en/index.html#3-project", 
            "text": "Run Project    Windows Version: to run project on Windows, run on Android device, or run on browsers (JS projects).    Mac Version: to run project on iOS, run on Mac, run on Android, or run on browsers (JS projects).  For more information, please see  Package and Runtime Environment Settings .    Publish and Package :    Publish Resource: publish resources, then open project with Cocos 2d-x. The published resources have a small file size and load quickly.    Publish to Visual Studio: first publish resources, and then open project with Visual Studio.    Android package (.apk): package current project to  .apk  file. Support Windows and Mac versions of cocos. Support C++, JavaScript, Lua.    iOS package (.ipa): package current project to  .ipa  file. Support Mac version. Support C++, JavaScript, Lua.    HTML5: package current project to HTML5. Support Windows and Mac versions. Support JavaScript.    Publish and Package (using the previous settings) : to publish or package projects with previous settings.  Project Setting   Publish    Resource and Project File: copy resources to publish directory; publish csd and csi for Cocos 2d-x.  Note  The transfer speed will be lower if you publish a number of resources. It is recommended to select \"Project File Only\".    Project File Only: only publish  csd  and  csi  for Cocos 2d-x.    Publish Directory: users can customize publish directory. Cocos Studio supports absolute and relative path.    csb File: FlatBuffers is employed to read binary files, feature in high efficiency, small size, significant security. Support Cocos2d-x C++ and Lua Binding.    JSON File: Lightweight data transfer format, good readability, and native support for JavaScript.    Custom: extended data format. For more information, please see  Customizing Exported Data Formats .    Package  For more information about Package, please see  Package and Runtime Environment Settings .", 
            "title": "3 Project"
        }, 
        {
            "location": "/deprecated/studio-chapters/Workspace_Overview/en/index.html#4-view", 
            "text": "Anchor Point : to show or hide the anchor point in rendering section. Keyboard shortcut is Ctrl+Shift+A (Win)/ Command+Shift+A (Mac).  Ruler : to show or hide ruler. Keyboard shortcut is Ctrl+Shift+R (Win)/ Command+Shift+R (Mac).  Guides : to show or hide guides. Keyboard shortcut is Ctrl+\uff1b(Win)/ Command+; (Mac).  Lock Guides : when checked, guides cannot be selected or moved. Keyboard shortcut is Ctrl+Shift+; (Win)/ Command+Alt+; (Mac).  Clear Guides : to delete all the guides in the rendering section.  New Guides : to add guides to rendering section.", 
            "title": "4 View"
        }, 
        {
            "location": "/deprecated/studio-chapters/Workspace_Overview/en/index.html#5-window", 
            "text": "Objects, Resources, Animation, Output, Properties : check/ uncheck to open/ close these panels.  Start Launcher : to start Launcher in Cocos Studio.  Reset Window Layout : to reset the window layout to default settings.", 
            "title": "5 Window"
        }, 
        {
            "location": "/deprecated/studio-chapters/Workspace_Overview/en/index.html#6-language", 
            "text": "Cocos Studio support English, Simplified Chinese and Traditional Chinese. You need to restart Cocos Studio for your new language setting to take effect.", 
            "title": "6 Language"
        }, 
        {
            "location": "/deprecated/studio-chapters/Workspace_Overview/en/index.html#7-help", 
            "text": "View Help : official tutorials.  Check for Updates : to check if the latest version is installed on your computer.  About Cocos Studio : version and copyright information; links to official website, Weibo and forum.", 
            "title": "7 Help"
        }, 
        {
            "location": "/deprecated/studio-chapters/Workspace_Overview/en/index.html#toolbar", 
            "text": "The toolbar contains eight basic components: New File, Resolution, Preview, Publish and Package, Platform Switch, Alignment, Move Canvas and Enable left-click.     New File : to create a Scene, Layer, Node, SpriteSheet or 3D Scene.    Screen Resolution   Orientation : to set the screen resolution and to switch the display between landscape and portrait.    Preview : to preview a project in simulator. Currently you can preview 2D/ 3D Scene and Animation projects.    Publish and Package : to publish resources or projects for iOS (.ipa), Android (.apk) and HTML games.    Platform Switch : to run projects on Windows or Android.    Alignment : to align selected widgets on canvas with popular alignment formatting. They are Center, Left-align, Vertical center, Right-align, Vertical Justify, Horizontal Center, Vertical Bottom, Horizontal alignment and Vertical alignment.    Move Canvas : to move Canvas in the rendering section. You can access the tool by clicking the hand shape icon, or using keyboard shortcut Q.    Enable left : click currently only supports four file types, which are Scene, Layer, Node and SpriteSheet files. You can access the tool by clicking the icon, or using keyboard shortcut W.   Next we will introduce tools currently only available in 3D Scene.   Default state is \"Move\". Clicking X-axis, Y-axis or Z-axis to decide that along which axis the object moves.   Click this button to change the mouse settings to \u201cRotate\". Clicking X-axis, Y-axis or Z-axis to decide that along which axis the object rotates.   Click this button to change the mouse settings to \"Scale\". Clicking X-axis, Y-axis or Z-axis to decide that along which axis the object scales.", 
            "title": "Toolbar"
        }, 
        {
            "location": "/deprecated/studio-chapters/Workspace_Overview/en/index.html#objects-panel", 
            "text": "Objects panel is divided into four sections by default, which are Basic Objects, Widgets, Containers and Custom Widgets. To create a widget, just select a widget, and then drag and drop it from Widgets panel to Canvas.    In addition, click Edit on the Menu -  Preferences -  General -  select \"Show deprecated widgets\" -  click \"OK\". The widget \"AtlasLabel\" will show.    3D widgets will be displayed when editing 3D scenes, for example, 3D Camera, Model, 3D particles, etc.    In both 2D   3D projects, when you hover the mouse over a widget, an information bubble \u201ci\u201d will appear at top right corner. Clicking that icon you can see descriptive texts of each widget and an Internet link for more information.", 
            "title": "Objects Panel"
        }, 
        {
            "location": "/deprecated/studio-chapters/Workspace_Overview/en/index.html#resources-panel", 
            "text": "Resources panel displays all files related to a game project. Importing resources, creating projects, renaming files, deleting files, etc. can be done here.   Cocos Studio allows you to import an existing resource to Resource panel, you can also drag resources from Resource panel to other panels such as canvas in order to set properties.  Note  File structure in the Resource panel is the same as that on the disk. When a file is deleted from the local file system, the linked widget will display its name in red indicating unavailable. As shown in the following figure outlined in red.   The general workflow to build games with cocos is as follows:  Add resources to the Resources panel -  create widgets by dragging and dropping them from Objects panel to Canvas -  specify properties of widgets -  edit Scene or Animation.", 
            "title": "Resources Panel"
        }, 
        {
            "location": "/deprecated/studio-chapters/Workspace_Overview/en/index.html#canvas", 
            "text": "Note  Canvas will automatically adjust itself to the contents on it.  1 When editing Scene or Layer, Canvas is displayed as shown below:   Canvas is the most commonly used panel in Cocos Studio. You can visually adjust the position, rotation, scaling, and anchor point of a widget in Canvas. You can also select one or multiple widgets in Canvas, and edit the widget properties using either right-click menu or Property panel.  Press the spacebar, and you can move the Canvas by dragging the mouse. You can also move the Canvas by pressing the scroll wheel on your mouse.   The area with black background represents the screen resolution you set.  2 When editing Nodes, Canvas is displayed as shown below:   3 When editing SpriteSheet, Canvas is displayed as shown below:   4 When editing 3D Scene, Canvas is displayed as shown below:", 
            "title": "Canvas"
        }, 
        {
            "location": "/deprecated/studio-chapters/Workspace_Overview/en/index.html#animation-panel", 
            "text": "Animation panel is divided into six sections: Scene Graph, Timeline, Easing Interface, Playback Control, Editing Tools and Animation list.", 
            "title": "Animation panel"
        }, 
        {
            "location": "/deprecated/studio-chapters/Workspace_Overview/en/index.html#timeline", 
            "text": "In the timeline, you can insert frames and an animation curve will be created automatically between frames.", 
            "title": "Timeline"
        }, 
        {
            "location": "/deprecated/studio-chapters/Workspace_Overview/en/index.html#easing-interface", 
            "text": "Easing refers to acceleration or deceleration of frames. When this function is applied, animations will look more lifelike.", 
            "title": "Easing Interface"
        }, 
        {
            "location": "/deprecated/studio-chapters/Workspace_Overview/en/index.html#playback-control", 
            "text": "Animation playback control is to manipulate frames in the timeline.    : Move to the first frame.     : Move to previous frame.    : Play the animation.     : Move to next frame.     : Move to the last frame.    : Loop the animation or not.    : Playback speed of the animation.", 
            "title": "Playback Control"
        }, 
        {
            "location": "/deprecated/studio-chapters/Workspace_Overview/en/index.html#editing-tools", 
            "text": "Animation editing tools provide most of the common functionality.   Add Frame: Clicking on this icon will add a keyframe at a specific position on the timeline.   AutoRecord Frame: What you do after clicking the icon will be recorded in the current frame, become the key frame.  By modifying the widget properties of different frames, you can create rich and colorful animation effects. You can check the modified properties by clicking  .   Animation ghosting, also known as onion skin, is a viewing mode that displays a series of snapshots of frames ahead of and behind the current frame.    Animations can be created, deleted and renamed from within the Animation List.    Add Animation: Create an animation by setting the Start and End frames.   Animation Name: animation0, from frame 0 to frame 16.", 
            "title": "Editing Tools"
        }, 
        {
            "location": "/deprecated/studio-chapters/Workspace_Overview/en/index.html#scene-graph", 
            "text": "The Scene Graph displays a list of currently used widgets, such as buttons, maps, sound, and particle, etc. They are mapped one-to-one with the concrete widgets within Canvas. To add a widget, you can directly drag it from Objects panel to the Scene Graph (also display in the canvas), which provides a way to visually adjust the structure of the widgets. Within the Scene Graph, you can add, delete, adjust the widget\u2019s render order, and adjust parent-child hierarchies of the widgets.  Click   button to expand animation properties associated with some widget. For example,   The above picture means that  Panel_InfoBox_3  only influence three properties: Skew, Scale and Position.  \uff1ato hide a widget in the canvas by selecting this check box.  \uff1ato lock a widget to prevent it being edited.  Note  You can use the scene graph to hide a widget in the canvas, or lock a widget to prevent it being edited. The operation in the Scene Graph panel, locking or hiding, only affect the display on Canvas, the effect will not be output to a game project, if you need the effect to appear in the game, please modify the properties in property panel.  The parent-child hierarchies: Cocos Studio uses the concept of parent-child hierarchies, so that any object can become a child of another object, to establish the relationship move the object onto its parent object, will move with the parent.", 
            "title": "Scene Graph"
        }, 
        {
            "location": "/deprecated/studio-chapters/Workspace_Overview/en/index.html#properties-panel", 
            "text": "In the Properties panel, you can make modifications of any widgets' properties.   In Properties panel, there are title section and several tabs, including Position and Size, General properties, 9-Slice, Feature and Advanced properties.  Title section : shows the type of the currently selected widget. You can find a widget in the game by searching its name or tag.   Position and Size  This section includes some settings about anchor point, position and size. Adaptive layout feature is newly added, for more information, please see  UI Layout and Multi-resolution Support .   General Properties  General properties contain basic properties of a widget, such as Visible, Scale, Rotation, Skew, etc. General properties are the same for most widgets, but there are also exceptions for some widgets, please refer to \"Online Help\".   Advanced properties  include control layout, sub control layout and frame events. When select one or multiple widgets in Canvas, you can adjust the corresponding attributes in the Properties panel.   9-Slice  Advanced Properties    Create a Frame Event    Callback Feature    Create Custom Data", 
            "title": "Properties panel"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter2/CodeAndDebug/en/index.html", 
            "text": "Coding and Debugging\n\n\nCoding\n\n\nCocos Studio supports publishing and loading project files in \nVisual Studio\n and \nXcode\n. Do the following,\n\n\nSelect \nProject\n -\n \nPublish and Package\n, as following picture shows,", 
            "title": "_CodeAndDebug"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter2/CodeAndDebug/en/index.html#coding-and-debugging", 
            "text": "", 
            "title": "Coding and Debugging"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter2/CodeAndDebug/en/index.html#coding", 
            "text": "Cocos Studio supports publishing and loading project files in  Visual Studio  and  Xcode . Do the following,  Select  Project  -   Publish and Package , as following picture shows,", 
            "title": "Coding"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter2/PackageAndRun/en/index.html", 
            "text": "Package and Runtime Environment Settings\n\n\nTo activate the package function in Cocos Studio, you need to do the following,\n\n\n\n\n\n\nEnvironment Settings (Win/Mac)\n\n\n\n\n\n\nPublish and Package Settings\n\n\n\n\n\n\nEnvironment and package settings\n\n\nWindows\n\n\nNote\n You need to set installation paths for JDK/ NDK/ SDK/ Framework and set environment variables in Windows properly. Any mistake will lead to a failure.\n\n\n1 JDK\n\n\n\n\n\n\nDownload and install it in a directory supporting English language. Installation in a directory supporting non-English languages may cause errors when packaging.\n\n\n\n\n\n\nIn Java directory there will be two folders with the name starting with jdk and jre respectively. Add bin directory of the two folders to Environment Variable.\n\n\n\n\n\n\nAdd new variable name as JAVA_HOME, and variable value as folder path where JDK is installed.\n\n\n\n\n\n\n\n\n\n\nSet variable Path, and append the location of the bin folder where the JRE is installed. You need to use a semicolon in English half-angle state, and then add the location of bin. For example, C:\\Program Files\\Java\\jre1.8.0_45\\bin.\n\n\n\n\n\n\n2 NDK\n\n\n\n\nDownload and install it in a directory supporting English language. Installation in a directory supporting non-English languages may cause errors when packaging. Following is a screenshot of the installation directory:\n\n\n\n\n\n\n\n\nSet variable Path, and append the location of android-ndk-r10d, build and platform after Path value (use a semicolon in English half-angle state to separate them). For example, \n;D:\\Studiowork\\sdk\\android-ndk-r10d\\build\\tools;D:\\Studiowork\\sdk\\android-ndk-r10d;D:\\Studiowork\\sdk\\android-ndk-r10d\\platforms\n.\n\n\n\n\n3 SDK\n\n\n\n\n\n\nDownload and install it in a directory supporting English language. Installation in a directory supporting non-English languages may cause errors when packaging.\n\n\n\n\n\n\nSet variable Path, and append the location of platforms, platform-tools and tools after Path value (use a semicolon in English half-angle state to separate them). For example, \n;D:\\Studiowork\\sdk\\sdk\\platforms;D:\\Studiowork\\sdk\\sdk\\platform-tools;D:\\Studiowork\\sdk\\sdk\\tools\n\n\n\n\n\n\n4 Framework\n\n\n\n\nDownload and install it in a directory supporting English language. Installation in a directory supporting non-English languages may cause errors when packaging.\n\n\n\n\n5 Package Settings\n\n\nCreate a cocos project, and at the same time select a Framework version. Click Edit at the Toolbar -\n Preferences -\n Platform.\n\n\nNote\n Please make sure the following directory must be correct, otherwise there will be errors during the process of packaging.\n\n\n\n\n\n\nSDK path: set folders for SDK (include folders of platforms, platform-tools and tools).\n\n\n\n\n\n\nNDK path: set folders for NDK (include folders of build and platform).\n\n\n\n\n\n\nANT path: folders for bin of ANT under Framework directory. If multiple versions of Framework have been installed, please choose the bin folder of the Framework which is used for packaging.\n\n\n\n\n\n\nJDK path: bin folder of JDK.\n\n\n\n\n\n\n\n\n6 Check\n\n\nClick Project at the toolbar -\n Publish and Package. When finish packaging, click Output panel at the bottom of Cocos Studio. The message \"project packaged\" will appear at the Output panel, which indicates the environment variables are set right. Otherwise, you need to  check the settings and try again.\n\n\n\n\n7 Possible errors and analysis\n\n\n\n\n\n\nThe installed tool is outdated.\n\n\nSolution: uninstall tools that cause problems -\n remove the leftover files -\n remove its path from system path variable -\n download the tool -\n  follow the setting tutorials and try again.\n\n\n\n\n\n\nNon-English languages exist in the installation directory.\n\n\nSolution: see previous solution.\n\n\n\n\n\n\nEnvironment variables errors.\n\n\nSolution: check carefully if all the variables are set correctly, if set different path for one tool; if multiple paths of variables are not separated by a semicolon in English half-angle state. (You need to check the  variables one by one.)\n\n\n\n\n\n\nAnt path is set incorrectly.\n\n\nSolution: check if multiple versions of Framework are installed; if the ant path is same with Framework version for packaging.\n\n\n\n\n\n\nMac\n\n\nInstallation of various tools on Mac is relatively simple, users do not need to modify environment variables.\n\n\n\n\n\n\nFor Android device, install JDK, SDK and NDK.\n\n\n\n\n\n\niOS package settings\n\n\n\n\n\n\nNote\n Apple developer certificate (\n .p12) and identities (\n .cer) are necessary.\n\n\n1\n\n\n\n\nSet preferences for Apple developer certificate, double click *.p12, you can see the page as the following picture shows.\n\n\n\n\n\n\n\n\nEnter password, and then click \"OK\". Now you can see the following page.\n\n\n\n\n\n\n\n\nDrag and drop *.cer here.\n\n\n\n\n2\n\n\n\n\n\n\nVerify that the identities are valid.\n\n\n\n\n\n\nRun this command: security find-identity -v -p codesigning. The identities are valid if you can see the information as the following picture shows.\n\n\n\n\n\n\n\n\nPackage\n\n\nAfter configuring the environment, you need to specify Package and Publish settings.\n\n\nWindows\n\n\n1  C++ package\n\n\nIf you need to publish a C++ project to csb format, and then package it to an APK file. Do the following:\n\n\n\n\nGo to the publish settings for C++ projects.\n\n\n\n\n\n\n\n\n\n\nPublish and package.\n\n\n\n\n\n\n\n\nApk package is located in\uff1a\n\n\n\n\nIt is a relative path in project directory.\n\n\n2 The package process of Lua and JavaScript projects is similar to that of C++ projects.\n\n\nMac\n\n\nAndroid Package: same as on Windows.\n\n\niOS Package, do the following:\n\n\n\n\n\n\nCreate a cocos project (select an Engine version).\n\n\n\n\n\n\nImport project resources.\n\n\n\n\n\n\nPublish the project to Xcode, and modify the name and identities.\n\n\n\n\n\n\nClick the project on the left column, then select General. Use the name of *\n.p12\n as Bundle Identifier's value. In this tutorial, we use \"Com.cocosstudio.demo.inhouse\" as the file name.\n\n\n\n\n\n\nClick \u201cBuild Settings\u201d-\nCode Signing-\nCode Signing Identity\uff0cselect password.\n\n\n\u201cBuild Settings\u201d-\nCode Signing-\nProvisioning Profile\uff0cselect \"cocosstudioDemoInhouse\".\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPackage in Cocos Studio. Toolbar -\n Project -\n Package Project, select iOS or Android.\n\n\n\n\n\n\nInstall the project on mobile devices to check effects.\n\n\n\n\n\n\nRun Project\n\n\nRun project settings are similar to package settings. \"Run\" function supports pushing and previewing projects directly when an Android device is connected to PC or Mac.", 
            "title": "_PackageAndRun"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter2/PackageAndRun/en/index.html#package-and-runtime-environment-settings", 
            "text": "To activate the package function in Cocos Studio, you need to do the following,    Environment Settings (Win/Mac)    Publish and Package Settings", 
            "title": "Package and Runtime Environment Settings"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter2/PackageAndRun/en/index.html#environment-and-package-settings", 
            "text": "", 
            "title": "Environment and package settings"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter2/PackageAndRun/en/index.html#windows", 
            "text": "Note  You need to set installation paths for JDK/ NDK/ SDK/ Framework and set environment variables in Windows properly. Any mistake will lead to a failure.  1 JDK    Download and install it in a directory supporting English language. Installation in a directory supporting non-English languages may cause errors when packaging.    In Java directory there will be two folders with the name starting with jdk and jre respectively. Add bin directory of the two folders to Environment Variable.    Add new variable name as JAVA_HOME, and variable value as folder path where JDK is installed.      Set variable Path, and append the location of the bin folder where the JRE is installed. You need to use a semicolon in English half-angle state, and then add the location of bin. For example, C:\\Program Files\\Java\\jre1.8.0_45\\bin.    2 NDK   Download and install it in a directory supporting English language. Installation in a directory supporting non-English languages may cause errors when packaging. Following is a screenshot of the installation directory:     Set variable Path, and append the location of android-ndk-r10d, build and platform after Path value (use a semicolon in English half-angle state to separate them). For example,  ;D:\\Studiowork\\sdk\\android-ndk-r10d\\build\\tools;D:\\Studiowork\\sdk\\android-ndk-r10d;D:\\Studiowork\\sdk\\android-ndk-r10d\\platforms .   3 SDK    Download and install it in a directory supporting English language. Installation in a directory supporting non-English languages may cause errors when packaging.    Set variable Path, and append the location of platforms, platform-tools and tools after Path value (use a semicolon in English half-angle state to separate them). For example,  ;D:\\Studiowork\\sdk\\sdk\\platforms;D:\\Studiowork\\sdk\\sdk\\platform-tools;D:\\Studiowork\\sdk\\sdk\\tools    4 Framework   Download and install it in a directory supporting English language. Installation in a directory supporting non-English languages may cause errors when packaging.   5 Package Settings  Create a cocos project, and at the same time select a Framework version. Click Edit at the Toolbar -  Preferences -  Platform.  Note  Please make sure the following directory must be correct, otherwise there will be errors during the process of packaging.    SDK path: set folders for SDK (include folders of platforms, platform-tools and tools).    NDK path: set folders for NDK (include folders of build and platform).    ANT path: folders for bin of ANT under Framework directory. If multiple versions of Framework have been installed, please choose the bin folder of the Framework which is used for packaging.    JDK path: bin folder of JDK.     6 Check  Click Project at the toolbar -  Publish and Package. When finish packaging, click Output panel at the bottom of Cocos Studio. The message \"project packaged\" will appear at the Output panel, which indicates the environment variables are set right. Otherwise, you need to  check the settings and try again.   7 Possible errors and analysis    The installed tool is outdated.  Solution: uninstall tools that cause problems -  remove the leftover files -  remove its path from system path variable -  download the tool -   follow the setting tutorials and try again.    Non-English languages exist in the installation directory.  Solution: see previous solution.    Environment variables errors.  Solution: check carefully if all the variables are set correctly, if set different path for one tool; if multiple paths of variables are not separated by a semicolon in English half-angle state. (You need to check the  variables one by one.)    Ant path is set incorrectly.  Solution: check if multiple versions of Framework are installed; if the ant path is same with Framework version for packaging.", 
            "title": "Windows"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter2/PackageAndRun/en/index.html#mac", 
            "text": "Installation of various tools on Mac is relatively simple, users do not need to modify environment variables.    For Android device, install JDK, SDK and NDK.    iOS package settings    Note  Apple developer certificate (  .p12) and identities (  .cer) are necessary.  1   Set preferences for Apple developer certificate, double click *.p12, you can see the page as the following picture shows.     Enter password, and then click \"OK\". Now you can see the following page.     Drag and drop *.cer here.   2    Verify that the identities are valid.    Run this command: security find-identity -v -p codesigning. The identities are valid if you can see the information as the following picture shows.", 
            "title": "Mac"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter2/PackageAndRun/en/index.html#package", 
            "text": "After configuring the environment, you need to specify Package and Publish settings.  Windows  1  C++ package  If you need to publish a C++ project to csb format, and then package it to an APK file. Do the following:   Go to the publish settings for C++ projects.      Publish and package.     Apk package is located in\uff1a   It is a relative path in project directory.  2 The package process of Lua and JavaScript projects is similar to that of C++ projects.  Mac  Android Package: same as on Windows.  iOS Package, do the following:    Create a cocos project (select an Engine version).    Import project resources.    Publish the project to Xcode, and modify the name and identities.    Click the project on the left column, then select General. Use the name of * .p12  as Bundle Identifier's value. In this tutorial, we use \"Com.cocosstudio.demo.inhouse\" as the file name.    Click \u201cBuild Settings\u201d- Code Signing- Code Signing Identity\uff0cselect password.  \u201cBuild Settings\u201d- Code Signing- Provisioning Profile\uff0cselect \"cocosstudioDemoInhouse\".          Package in Cocos Studio. Toolbar -  Project -  Package Project, select iOS or Android.    Install the project on mobile devices to check effects.", 
            "title": "Package"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter2/PackageAndRun/en/index.html#run-project", 
            "text": "Run project settings are similar to package settings. \"Run\" function supports pushing and previewing projects directly when an Android device is connected to PC or Mac.", 
            "title": "Run Project"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter2/Publish/en/index.html", 
            "text": "Publish\n\n\nAfter editing resources in Cocos Studio, you need to publish them if you want to use them in Cocos 2d-x. In Cocos Studio, project files are stored in \n.xml\n format. After publishing, some unnecessary data will be removed from the project file and at the same time\n.xml\n file is transferred into FlatBuffers and JSON, which are faster and memory efficient. \n\n\nTo publish resources, do the following:\n\n\n1 Open HelloCcocos, click the publish button  \n, and the resources are published.\n\n\n2 Click \nPublish and Package\n, a dialog box will pop up.\n\n\n\n\n\n\n3 Publish resources\n\n\n\n\n\n\nPublish to Visual Studio Project: only for Windows, first publish resources, then open project with Visual Studio.\n\n\n\n\n\n\nPublish to Xcode Project: only for Mac, first publish resources, and then open project with Xcode.\n\n\n\n\n\n\n4 Select a Publish Type, and then click \nSetting\n, you can see the following window for project settings.\n\n\n\n\n\n\n5 Publish\n\n\n\n\n\n\nResource and Project File: copy resources to publish directory; publish \ncsd\n and \ncsi\n for Cocos 2d-x.\n\n\nNote\n The transfer speed is low when publishing a number of resources. It is recommended to select \"Project File Only\".\n\n\n\n\n\n\nProject File Only: only publish csd and csi for Cocos 2d-x.\n\n\n\n\n\n\nPublish Directory: users can customize publish directory. Cocos Studio supports absolute and relative path.\n\n\n\n\n\n\nData Format\n\n\n\n\n\n\ncsb\n File: FlatBuffers is employed to read binary files, featuring in high efficiency, small size and significant security. Support Cocos2d-x C++ and Lua Binding.\n\n\n\n\n\n\nJSON File: Lightweight data transfer format, good readability, native support for JavaScript. Support Cocos2d-JS.\n\n\n\n\n\n\nLua File\uff1aGood readability\uff0csupport Lua Binding\u3002\n\n\n\n\n\n\nCustom export: Click \nCustomizing Exported Data Formats\n for more information.", 
            "title": "_Publish"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter2/Publish/en/index.html#publish", 
            "text": "After editing resources in Cocos Studio, you need to publish them if you want to use them in Cocos 2d-x. In Cocos Studio, project files are stored in  .xml  format. After publishing, some unnecessary data will be removed from the project file and at the same time .xml  file is transferred into FlatBuffers and JSON, which are faster and memory efficient.   To publish resources, do the following:  1 Open HelloCcocos, click the publish button   , and the resources are published.  2 Click  Publish and Package , a dialog box will pop up.    3 Publish resources    Publish to Visual Studio Project: only for Windows, first publish resources, then open project with Visual Studio.    Publish to Xcode Project: only for Mac, first publish resources, and then open project with Xcode.    4 Select a Publish Type, and then click  Setting , you can see the following window for project settings.    5 Publish    Resource and Project File: copy resources to publish directory; publish  csd  and  csi  for Cocos 2d-x.  Note  The transfer speed is low when publishing a number of resources. It is recommended to select \"Project File Only\".    Project File Only: only publish csd and csi for Cocos 2d-x.    Publish Directory: users can customize publish directory. Cocos Studio supports absolute and relative path.    Data Format    csb  File: FlatBuffers is employed to read binary files, featuring in high efficiency, small size and significant security. Support Cocos2d-x C++ and Lua Binding.    JSON File: Lightweight data transfer format, good readability, native support for JavaScript. Support Cocos2d-JS.    Lua File\uff1aGood readability\uff0csupport Lua Binding\u3002    Custom export: Click  Customizing Exported Data Formats  for more information.", 
            "title": "Publish"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter2/SceneAndLayer/en/index.html", 
            "text": "Scenes and UI\n\n\nCreate a Scene\n\n\n1 Create a project and name it \nHelloCocos\n. Do the following:\n\n\n\n\n\n\nSelect \nFile\n -\n \nNew Project\n -\n \nCocos Project\n, and click \nNext\n.\n\n\n\n\n\n\nName the project HelloCocos, and click \nFinish\n.\n\n\n\n\n\n\n2 Create a scene and name it \nScene1\n. Do the following:\n\n\n\n\nClick \nNew File\n button -\n select \nScene\n -\n  name the  file \nScene1\n -\n click \nNew\n.\n\n\n\n\n\n\n\n\n3 Right click on \nResources\n panel, select \nImport Resources\n, and then select files to import.\n\n\n\n\n4 Import two resource folders: Common and LevelSelection.\n\n\n\n\n5 Click \nVertical Screen\n \n to modify the screen resolution from the default setting 960 * 640* to 640 * 960.\n\n\n\n\n6 Drag and drop a Sprite from \nBasic Objects\n to \nCanvas\n; drag and drop LS10.png from \nResources\n panel to \nImage Resource\n and modify its position as tile (640 * 960).\n\n\n\n\n\n\nIn Cocos Studio, the procedures of creating Scenes, UI and animations are similar.\n\n\nCreate a Layer\n\n\n1 Click \nNew File\n button and select \nLayer\n. Name it \"Layer\" and click \nNew\n.\n\n\n\n\n2 Drag and drop a Button to Canvas and specify its properties. Put it at center bottom of Canvas.\n\n\n\n\n3 Add \"Layer.csd\" to \"Scene1.csd\". Do the following:\n\n\n\n\n\n\nDouble click \"Scene1.csd\" in Resources panel to open it.\n\n\n\n\n\n\nDrag and drop \"Layer.csd\" to the rendering section (The layer can be accessed from the Resources section).\n\n\n\n\n\n\n\n\n4 Click \"Preview\" button  \n at the top of the workspace to check the visual effects of the layer.", 
            "title": "_SceneAndLayer"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter2/SceneAndLayer/en/index.html#scenes-and-ui", 
            "text": "", 
            "title": "Scenes and UI"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter2/SceneAndLayer/en/index.html#create-a-scene", 
            "text": "1 Create a project and name it  HelloCocos . Do the following:    Select  File  -   New Project  -   Cocos Project , and click  Next .    Name the project HelloCocos, and click  Finish .    2 Create a scene and name it  Scene1 . Do the following:   Click  New File  button -  select  Scene  -   name the  file  Scene1  -  click  New .     3 Right click on  Resources  panel, select  Import Resources , and then select files to import.   4 Import two resource folders: Common and LevelSelection.   5 Click  Vertical Screen    to modify the screen resolution from the default setting 960 * 640* to 640 * 960.   6 Drag and drop a Sprite from  Basic Objects  to  Canvas ; drag and drop LS10.png from  Resources  panel to  Image Resource  and modify its position as tile (640 * 960).    In Cocos Studio, the procedures of creating Scenes, UI and animations are similar.", 
            "title": "Create a Scene"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter2/SceneAndLayer/en/index.html#create-a-layer", 
            "text": "1 Click  New File  button and select  Layer . Name it \"Layer\" and click  New .   2 Drag and drop a Button to Canvas and specify its properties. Put it at center bottom of Canvas.   3 Add \"Layer.csd\" to \"Scene1.csd\". Do the following:    Double click \"Scene1.csd\" in Resources panel to open it.    Drag and drop \"Layer.csd\" to the rendering section (The layer can be accessed from the Resources section).     4 Click \"Preview\" button    at the top of the workspace to check the visual effects of the layer.", 
            "title": "Create a Layer"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter2/SpriteSheet/en/index.html", 
            "text": "SpriteSheet\n\n\nCreate a SpriteSheet\n\n\nTo create a SpriteSheet, do the following,\n\n\n1 On the toolbar, click \nNew File\n button.\n\n\n\n\n2 Select \nSpriteSheet\n on the pop up window,   and then click \nNew\n.\n\n\n\n\n3 Select an image from project manager, drag it to the canvas. Currently Cocos Studio only supports \n.png\n and \n.jpg\n file types.\n\n\n\n\nSpecify SpriteSheet Properties\n\n\n\n\nSize\n: The size of the current SpriteSheet. Size property  varies with other properties.\n\n\nAllow Any Size\n: If checked, this option will ignore the power of 2 size limit, SpriteSheet can be any image size.\n\n\nAllow Clipping\n: When checked, the editor will automatically trim SpriteSheet to ensure its size minimized.\n\n\nMaximum size\n: The maximum size that cocos will allow for SpriteSheet. If the file size exceeds the limit, the sections that exceed will be excluded from the SpriteSheet.\n\n\nType\n: File type of SpriteSheet, supporting \n.png\n and \n.jpg\n format images.\n\n\nSpacing\n: The gap between resources. Spacing can prevent resources from overlapping.\n\n\nAllow Rotation\n: When checked,  resources will automatically rotate to the best angle  for a SpriteSheet.\n\n\nExport SpriteSheet\n:  Export \n.plist\n and \n.png\n files for SpriteSheets.", 
            "title": "_SpriteSheet"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter2/SpriteSheet/en/index.html#spritesheet", 
            "text": "", 
            "title": "SpriteSheet"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter2/SpriteSheet/en/index.html#create-a-spritesheet", 
            "text": "To create a SpriteSheet, do the following,  1 On the toolbar, click  New File  button.   2 Select  SpriteSheet  on the pop up window,   and then click  New .   3 Select an image from project manager, drag it to the canvas. Currently Cocos Studio only supports  .png  and  .jpg  file types.", 
            "title": "Create a SpriteSheet"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter2/SpriteSheet/en/index.html#specify-spritesheet-properties", 
            "text": "Size : The size of the current SpriteSheet. Size property  varies with other properties.  Allow Any Size : If checked, this option will ignore the power of 2 size limit, SpriteSheet can be any image size.  Allow Clipping : When checked, the editor will automatically trim SpriteSheet to ensure its size minimized.  Maximum size : The maximum size that cocos will allow for SpriteSheet. If the file size exceeds the limit, the sections that exceed will be excluded from the SpriteSheet.  Type : File type of SpriteSheet, supporting  .png  and  .jpg  format images.  Spacing : The gap between resources. Spacing can prevent resources from overlapping.  Allow Rotation : When checked,  resources will automatically rotate to the best angle  for a SpriteSheet.  Export SpriteSheet :  Export  .plist  and  .png  files for SpriteSheets.", 
            "title": "Specify SpriteSheet Properties"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/UI/BasicObjects/en/index.html", 
            "text": "Basic Objects\n\n\n1 Map\n\n\n\n\nMap widget supports importing TMX format files exported from Tiled. Maps and topographic maps are widely used in games, in order to make a smooth switch the game screen players often use maps that bigger than the screen.\n\n\nIf we use image, it will be a big hit to performance. Map is a good solution to this problem: the use of tile map. A large background image is represented by several small image, each corresponding to a small picture, namely tiles, mosaic tiles put these together, they form a complete map. When a number of different terrain for scene change, just load the tiles, greatly enhance efficiency.\n\n\nIn the official example, there are battle scenes. We use Map as a background to save resources and enhance efficiency.\n\n\n\n\nScenario: Import and use the map file\n\n\nTo import a specific effect of map control file (TMX files), do one of the following:\n\n\n\n\n\n\nDrag a TMX file from the resource panel to Map, and then release the mouse;\n\n\n\n\n\n\nIn the Properties panel \nFeature\n, click \nImport Map File\n, select the file to import;\n\n\n\n\n\n\nRight-click the Map on Canvas, select \nSet Map File\n.  select the file to import.\n\n\n\n\n\n\n2 Particle\n\n\n\n\nParticles are widgets with random effects. They are used to achieve a particular phenomenon: such as explosions, fireworks, water and other effects. For games, artists create cool particle effects to make the scene richer.\n\n\nParticle widget supports importing \nplist\n format files exported from Particle Designer.\n\n\nIn order to have a nice effect, the game will use a lot of particle effects. In an official example, particle effects are used to highlight gold and diamonds.\n\n\n\n\nScenario: Import and use particle\n\n\nTo import a specific effect of particle files (plist file), do the following:\n\n\n\n\n\n\nDrag the file from the Resources panel to particle properties;\n\n\n\n\n\n\nIn the Properties panel \nFeature\n, click \nImport particles file\n, select the file to import;\n\n\n\n\n\n\nSelect the right choice particle controls on the canvas \nSetting particle File\n and select the file to import.\n\n\n\n\n\n\n3 Audio\n\n\n\n\nAudio is a widget for music and sound effects, which is very important for user experience of games. Audio widget supports mp3, wav audio file formats.\n\n\nIn the official example of a victory scene, we apply Audio for victory sound effects.\n\n\n\n\nScenario 1: Import File\n\n\nTo import a specific effect of a sound file (mp3 / wav file), do the following:\n\n\n\n\n\n\nDrag the file from the Resources panel to voice control, release the mouse that implementation file import;\n\n\n\n\n\n\nIn the Properties panel \nFeature\n, click \nImport sound files\n, select the file to import;\n\n\n\n\n\n\nSelect the right choice particle controls on the canvas \nSetting sound file\n and select the file to import.\n\n\n\n\n\n\nScenario 2: Make sound loop\n\n\n This icon means that the sound file will loop.\n\n\n This icon means the sound file play once.\n\n\n4 Node\n\n\n\n\nNode is the basic element of the scene graph, during game production, often need to create parent node to group other widgets. Node has three main features: the object can contain other nodes; You can set up a scheduled callback; can perform action.\n\n\nIn both 2D and 3D examples, we use many Nodes to manage the linkage effect between multiple widgets.\n\n\n5 Sprite\n\n\n\n\nTo add a Sprite, you need to import pictures resources. Compared with Image widgets , the Sprite has the following features:\n\n\n\n\n\n\nSprite does not have 9-slice's properties, but it has higher performance. It is often used to load images in games.\n\n\n\n\n\n\nSprites are used to create spritesheet animation in Cocos Studio.\n\n\n\n\n\n\nSprite is used very frequently. Can you point out which are made with sprite in the following example?\n\n\n\n\nAfter you get the official examples, open the file to see how we use Sprite in \nDifficultSelect.csd\n. It will be helpful for your games.\n\n\nScenario 1: When to use the sprite widget?\n\n\nIn the above picture, all window borders are created with Sprite. We choose Sprite for two reasons:\n\n\n\n\n\n\nReduce game resources.\n\n\n\n\n\n\nReuse resources. Border stitching on the map, we only use the following resources.\n\n\n\n\n\n\n\n\nAfter adding a sprite to the canvas, select the sprite, and the property panel will show the current resource thumbnail. You can modify the resources by double-clicking a thumbnail picture, or drag pictures onto this property. You can also replace image resources through the properties panel or right-click menu.", 
            "title": "_Basic Objects"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/UI/BasicObjects/en/index.html#basic-objects", 
            "text": "", 
            "title": "Basic Objects"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/UI/BasicObjects/en/index.html#1-map", 
            "text": "Map widget supports importing TMX format files exported from Tiled. Maps and topographic maps are widely used in games, in order to make a smooth switch the game screen players often use maps that bigger than the screen.  If we use image, it will be a big hit to performance. Map is a good solution to this problem: the use of tile map. A large background image is represented by several small image, each corresponding to a small picture, namely tiles, mosaic tiles put these together, they form a complete map. When a number of different terrain for scene change, just load the tiles, greatly enhance efficiency.  In the official example, there are battle scenes. We use Map as a background to save resources and enhance efficiency.   Scenario: Import and use the map file  To import a specific effect of map control file (TMX files), do one of the following:    Drag a TMX file from the resource panel to Map, and then release the mouse;    In the Properties panel  Feature , click  Import Map File , select the file to import;    Right-click the Map on Canvas, select  Set Map File .  select the file to import.", 
            "title": "1 Map"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/UI/BasicObjects/en/index.html#2-particle", 
            "text": "Particles are widgets with random effects. They are used to achieve a particular phenomenon: such as explosions, fireworks, water and other effects. For games, artists create cool particle effects to make the scene richer.  Particle widget supports importing  plist  format files exported from Particle Designer.  In order to have a nice effect, the game will use a lot of particle effects. In an official example, particle effects are used to highlight gold and diamonds.   Scenario: Import and use particle  To import a specific effect of particle files (plist file), do the following:    Drag the file from the Resources panel to particle properties;    In the Properties panel  Feature , click  Import particles file , select the file to import;    Select the right choice particle controls on the canvas  Setting particle File  and select the file to import.", 
            "title": "2 Particle"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/UI/BasicObjects/en/index.html#3-audio", 
            "text": "Audio is a widget for music and sound effects, which is very important for user experience of games. Audio widget supports mp3, wav audio file formats.  In the official example of a victory scene, we apply Audio for victory sound effects.   Scenario 1: Import File  To import a specific effect of a sound file (mp3 / wav file), do the following:    Drag the file from the Resources panel to voice control, release the mouse that implementation file import;    In the Properties panel  Feature , click  Import sound files , select the file to import;    Select the right choice particle controls on the canvas  Setting sound file  and select the file to import.    Scenario 2: Make sound loop   This icon means that the sound file will loop.   This icon means the sound file play once.", 
            "title": "3 Audio"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/UI/BasicObjects/en/index.html#4-node", 
            "text": "Node is the basic element of the scene graph, during game production, often need to create parent node to group other widgets. Node has three main features: the object can contain other nodes; You can set up a scheduled callback; can perform action.  In both 2D and 3D examples, we use many Nodes to manage the linkage effect between multiple widgets.", 
            "title": "4 Node"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/UI/BasicObjects/en/index.html#5-sprite", 
            "text": "To add a Sprite, you need to import pictures resources. Compared with Image widgets , the Sprite has the following features:    Sprite does not have 9-slice's properties, but it has higher performance. It is often used to load images in games.    Sprites are used to create spritesheet animation in Cocos Studio.    Sprite is used very frequently. Can you point out which are made with sprite in the following example?   After you get the official examples, open the file to see how we use Sprite in  DifficultSelect.csd . It will be helpful for your games.  Scenario 1: When to use the sprite widget?  In the above picture, all window borders are created with Sprite. We choose Sprite for two reasons:    Reduce game resources.    Reuse resources. Border stitching on the map, we only use the following resources.     After adding a sprite to the canvas, select the sprite, and the property panel will show the current resource thumbnail. You can modify the resources by double-clicking a thumbnail picture, or drag pictures onto this property. You can also replace image resources through the properties panel or right-click menu.", 
            "title": "5 Sprite"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/UI/Widgets/en/index.html", 
            "text": "Widgets\n\n\n1 Button\n\n\n\n\nButton is a frequently used widget. It can be pressed or clicked to perform an action, containing three states, normal, pressed and disabled. You can set style and texts for it. In the following example, the contents of the scene are composed of Buttons.\n\n\n\n\nMostly game levels, diamonds, and coins are composed of Buttons. Touching these buttons, you will see popup windows.\n\n\nButton has a lot of features. The following section will introduce you the button widget through several scenes.\n\n\nScenario 1: Modify button background, and set the button pressed style and disabled style.\n\n\nButton has three states. Each state can be defined by an image. See the official Main Scene Demo.\n\n\n\n\nFirst, you need to add a Button to the canvas. After selecting the Button, the Properties panel will show the current button style, you can modify the properties by double-clicking the Button, you can also drag an image to the property. We set up a normal state and a pressed state. When touch the button in the game, the button will automatically switch to the state picture. If necessary, you can also set the disabled state of the button.\n\n\n\n\nReplace resource by right-click the button.\n\n\nScenario 2: When using the buttons, you need to add texts for the button.\n\n\n\n\nCustomize the text of the button, font, and size, Properties -\n Feature -\n Text. When you modify the button text, select the button -\n modify text attributes in the Properties area. You can also use right mouse or double-click the node to modify the text popups.\n\n\n\n\nScenario 3: Set a Button not to respond to a click event.\n\n\nSet the button as Disable. When the button is disabled, it will not respond to touch events in the game.\n\n\n2  Checkbox\n\n\n\n\nCheckbox is a basic widget that can be checked or unchecked, and multiple selection is available. Checkbox is mostly used on a login screen as \"Remember User Name\" or \"Remember Password\".\n\n\n\n\nIt is also used in the setting interface in some games to switch the music or sound effects. Checkbox widget has many properties, in addition to general properties, it includes some features properties, we will introduce you the checkbox widget by several scenarios that checkbox features are used.\n\n\nScenario 1: Modify checkbox style\n\n\nCheckbox has five states: normal background style, background pressed style, background disabled styles, selected check style, selected disabled check style, each state can be defined with image. If you want to implement conventional style check box, as shown below:\n\n\n\n\nYou can set the images of each of the five states to reach your requirements. Below is an example of turning on/off music by using a checkbox:\n\n\n\n\nYou only need to set the background normal style, background pressed style, background disabled style. You can also replace resource by right-clicking the button.\n\n\nScenario 2: Checkbox is checked (or not checked) by default.\n\n\nWhen you set a checkbox selected, the checkbox\u2019s initial state is selected. You can modify it through the properties panel or right-click menu.\n\n\n3 Image\n\n\n\n\n\n\nAdd an image with 9-slice property. 9-Slice is a way to stretch the image without making it look too distorted. About 9-slice usage, please refer to \nHow to Use the 9-Slice\n.\n\n\nImage has the following characteristics with respect to the Sprite:\n\n\n\n\n\n\nChange the original size without image distortion.\n\n\n\n\n\n\nUse one resource to achieve different effects by setting various 9-slice values.\n\n\n\n\n\n\nCost more performance than sprite widgets; it is recommended not to overuse image widget.\n\n\n\n\n\n\nCan you point out which are made with Image in the following example?\n\n\n\n\nGet the official example, and open \nDifficultSelect.csd\n to see how we  use image widget.One of the background is made by a size of 16x32 image. \n Here we show you how to use the image widgets make this background.\n\n\nScenario 1: Use an Image\n\n\n\n\nModify a widget by double-clicking the thumbnail, or drag the image onto the properties panel to replace the current style. You can also replace an image through the properties panel or right-click menu. Modify margins of the \"9-slice\" to 0,0,10,0, and then modify the widget size to 70,32. These margins will affect the 9-slice effect. For more information about 9-slice, please see \nHow to Use the 9-Slice\n.\n\n\n4 Label\n\n\n\n\nLabel is also one of the most commonly used widgets in the game. You can set fonts, size, alignment, etc. for a label widget.\n\n\nUsage: In the example there are many Labels, such as the main menu.\n\n\n\n\nScenario 1: modify the text using different font styles\n\n\nIf you need a special font you need to import a TTF font, the font will be packaged and exported when you publish a game. Default font in users' mobile phone will be used if you do not specify a font.\n\n\n5 FNT Font\n\n\n\n\nYou can achieve a variety of artistic fonts by setting FNT font. Compared to Atlas Label, FNT font has the following features:\n\n\n\n\n\n\nSupport all kinds of text. Following is an example of FNT fonts, which support various characters.\n\n\n\n\n\n\nHard to create. It requires professional software to create FNT font.\n\n\n\n\n\n\n\n\nScenario 1: Use FNT Font\n\n\nAdd a FNT font to Canvas, and then select the FNT. In the Properties panel, you can modify its values. You can also replace resource by right-clicking the button. To change the text, you can either double click, right click, or modify the properties. When you enter characters that's not in the fnt file, these missing characters will be displayed as spaces. When you enter characters which are not in the FNT file, the missing characters will be displayed as spaces.\n\n\n\n\n6 Progress Bar\n\n\n\n\nA progress bar is used to represent progression. In the official example, the HP bar is an example of progress bar.\n\n\n\n\nScenario 1: Modify the progress bar style\n\n\nCreate a progress bar on canvas, select the progress bar, then double click or drag 'n' drop to change the resources for the progress bar. You can also use right-click menu to add new resources. Here is an example of setting the background:\n\n\n\n\nScenario 2: Set the progress bar direction\n\n\n\n\nSee HP bar shown above (one left, one right). Set the \"type\" property of the progress bar, choosing from \"left to right\" and \"right to left\" to change the direction of the progress bar.\n\n\n7 Slider\n\n\n\n\nMove the slider to display status of a task. Slider is great for observing degrees of changes, such as setting volume, etc. In the official example, we use Slider in the setting screen.\n\n\n\n\nScenario 1: Modify the slider style\n\n\nTo create a slider, you need 5 images. We didn\u2019t set the disabled state in this example. Add a slider on the canvas, select the slider, double click or drag and drop to replace the images. You can also use right-click menu to add new resources.\n\n\n\n\n\n\n8 Atlas Label\n\n\n\n\nAtlas Label can be realized by a PNG image including \"./0123456789\". Each character has the same height as the image, the width of 1/12 of the image, atlas label can be used to display numbers in game. It is a very simple visual effect. Compared to FNT fonts, atlas label has the following features. In the official example, atlas label is used in selecting level.\n\n\n\n\n\n\nEasy to make.\n\n\n\n\n\n\nLimited functionality, supporting \".\", \"/\", and number 0-9.\n\n\n\n\n\n\n\n\nScenario 1: Modify the image resources for Atlas label\n\n\nAdding an atlas label on canvas, select the atlas label, properties will display the current resource thumbnail, you can modify it by double-clicking a thumbnail, as well as drag image to it. In addition you can also use right mouse. When you modify the button text simply select the button, modify text attributes in the Properties, same can be done though right mouse.\n\n\n\n\nNote\n To create atlas label, designers need to provide an image containing \".\", \"/\", or number 0-9. Make sure the order is ./0123456789 and spaces between numbers need to be equal.\n\n\n\n\nA typical atlas label image.", 
            "title": "_Widgets"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/UI/Widgets/en/index.html#widgets", 
            "text": "", 
            "title": "Widgets"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/UI/Widgets/en/index.html#1-button", 
            "text": "Button is a frequently used widget. It can be pressed or clicked to perform an action, containing three states, normal, pressed and disabled. You can set style and texts for it. In the following example, the contents of the scene are composed of Buttons.   Mostly game levels, diamonds, and coins are composed of Buttons. Touching these buttons, you will see popup windows.  Button has a lot of features. The following section will introduce you the button widget through several scenes.  Scenario 1: Modify button background, and set the button pressed style and disabled style.  Button has three states. Each state can be defined by an image. See the official Main Scene Demo.   First, you need to add a Button to the canvas. After selecting the Button, the Properties panel will show the current button style, you can modify the properties by double-clicking the Button, you can also drag an image to the property. We set up a normal state and a pressed state. When touch the button in the game, the button will automatically switch to the state picture. If necessary, you can also set the disabled state of the button.   Replace resource by right-click the button.  Scenario 2: When using the buttons, you need to add texts for the button.   Customize the text of the button, font, and size, Properties -  Feature -  Text. When you modify the button text, select the button -  modify text attributes in the Properties area. You can also use right mouse or double-click the node to modify the text popups.   Scenario 3: Set a Button not to respond to a click event.  Set the button as Disable. When the button is disabled, it will not respond to touch events in the game.", 
            "title": "1 Button"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/UI/Widgets/en/index.html#2-checkbox", 
            "text": "Checkbox is a basic widget that can be checked or unchecked, and multiple selection is available. Checkbox is mostly used on a login screen as \"Remember User Name\" or \"Remember Password\".   It is also used in the setting interface in some games to switch the music or sound effects. Checkbox widget has many properties, in addition to general properties, it includes some features properties, we will introduce you the checkbox widget by several scenarios that checkbox features are used.  Scenario 1: Modify checkbox style  Checkbox has five states: normal background style, background pressed style, background disabled styles, selected check style, selected disabled check style, each state can be defined with image. If you want to implement conventional style check box, as shown below:   You can set the images of each of the five states to reach your requirements. Below is an example of turning on/off music by using a checkbox:   You only need to set the background normal style, background pressed style, background disabled style. You can also replace resource by right-clicking the button.  Scenario 2: Checkbox is checked (or not checked) by default.  When you set a checkbox selected, the checkbox\u2019s initial state is selected. You can modify it through the properties panel or right-click menu.", 
            "title": "2  Checkbox"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/UI/Widgets/en/index.html#3-image", 
            "text": "Add an image with 9-slice property. 9-Slice is a way to stretch the image without making it look too distorted. About 9-slice usage, please refer to  How to Use the 9-Slice .  Image has the following characteristics with respect to the Sprite:    Change the original size without image distortion.    Use one resource to achieve different effects by setting various 9-slice values.    Cost more performance than sprite widgets; it is recommended not to overuse image widget.    Can you point out which are made with Image in the following example?   Get the official example, and open  DifficultSelect.csd  to see how we  use image widget.One of the background is made by a size of 16x32 image.   Here we show you how to use the image widgets make this background.  Scenario 1: Use an Image   Modify a widget by double-clicking the thumbnail, or drag the image onto the properties panel to replace the current style. You can also replace an image through the properties panel or right-click menu. Modify margins of the \"9-slice\" to 0,0,10,0, and then modify the widget size to 70,32. These margins will affect the 9-slice effect. For more information about 9-slice, please see  How to Use the 9-Slice .", 
            "title": "3 Image"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/UI/Widgets/en/index.html#4-label", 
            "text": "Label is also one of the most commonly used widgets in the game. You can set fonts, size, alignment, etc. for a label widget.  Usage: In the example there are many Labels, such as the main menu.   Scenario 1: modify the text using different font styles  If you need a special font you need to import a TTF font, the font will be packaged and exported when you publish a game. Default font in users' mobile phone will be used if you do not specify a font.", 
            "title": "4 Label"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/UI/Widgets/en/index.html#5-fnt-font", 
            "text": "You can achieve a variety of artistic fonts by setting FNT font. Compared to Atlas Label, FNT font has the following features:    Support all kinds of text. Following is an example of FNT fonts, which support various characters.    Hard to create. It requires professional software to create FNT font.     Scenario 1: Use FNT Font  Add a FNT font to Canvas, and then select the FNT. In the Properties panel, you can modify its values. You can also replace resource by right-clicking the button. To change the text, you can either double click, right click, or modify the properties. When you enter characters that's not in the fnt file, these missing characters will be displayed as spaces. When you enter characters which are not in the FNT file, the missing characters will be displayed as spaces.", 
            "title": "5 FNT Font"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/UI/Widgets/en/index.html#6-progress-bar", 
            "text": "A progress bar is used to represent progression. In the official example, the HP bar is an example of progress bar.   Scenario 1: Modify the progress bar style  Create a progress bar on canvas, select the progress bar, then double click or drag 'n' drop to change the resources for the progress bar. You can also use right-click menu to add new resources. Here is an example of setting the background:   Scenario 2: Set the progress bar direction   See HP bar shown above (one left, one right). Set the \"type\" property of the progress bar, choosing from \"left to right\" and \"right to left\" to change the direction of the progress bar.", 
            "title": "6 Progress Bar"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/UI/Widgets/en/index.html#7-slider", 
            "text": "Move the slider to display status of a task. Slider is great for observing degrees of changes, such as setting volume, etc. In the official example, we use Slider in the setting screen.   Scenario 1: Modify the slider style  To create a slider, you need 5 images. We didn\u2019t set the disabled state in this example. Add a slider on the canvas, select the slider, double click or drag and drop to replace the images. You can also use right-click menu to add new resources.", 
            "title": "7 Slider"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/UI/Widgets/en/index.html#8-atlas-label", 
            "text": "Atlas Label can be realized by a PNG image including \"./0123456789\". Each character has the same height as the image, the width of 1/12 of the image, atlas label can be used to display numbers in game. It is a very simple visual effect. Compared to FNT fonts, atlas label has the following features. In the official example, atlas label is used in selecting level.    Easy to make.    Limited functionality, supporting \".\", \"/\", and number 0-9.     Scenario 1: Modify the image resources for Atlas label  Adding an atlas label on canvas, select the atlas label, properties will display the current resource thumbnail, you can modify it by double-clicking a thumbnail, as well as drag image to it. In addition you can also use right mouse. When you modify the button text simply select the button, modify text attributes in the Properties, same can be done though right mouse.   Note  To create atlas label, designers need to provide an image containing \".\", \"/\", or number 0-9. Make sure the order is ./0123456789 and spaces between numbers need to be equal.   A typical atlas label image.", 
            "title": "8 Atlas Label"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/UI/Containers/en/index.html", 
            "text": "Containers\n\n\n1 Panel\n\n\n\n\nPanel can be used to control child element's layout, also has handy features like clipping, fill color or background image. In the official example, we make extensive use of the panel to manage the layout, such as the main menu, user name, diamonds and gold they all have Panel, in order to ensure a relatively uniform layout.\n\n\n\n\nScenario 1: Do not display the contents out of the container\n\n\nWhen you want to hide the content that\u2019s bigger than the panel, you can use attribute \"clipping\" so the panel will clip the content.\n\n\nScenario 2: Set the background and effects\n\n\nThere are two options to fill the color: solid color background, or gradient background. You can choose color and set the opacity of the background; when you select a gradient background, you need to set the starting color and ending color, and opacity can be set separately for these two colors.\n\n\n\n\nScenario 3: Add child controls\n\n\nOn canvas, right click the selected widget, and then you can add all types of widgets as its child.\n\n\n\n\n2 ListView\n\n\n\n\nListView can auto-arrange widgets quickly. ListView is often used in game scenes where list effects are needed.\n\n\nNote\n The position cannot be modified when a widget is added into ListView.\n\n\n\n\nScenario 1: Do not display the contents of the container outside\n\n\nWhen you want to hide the content that's bigger than the panel, you can use \"clipping\" to clip the content.\n\n\nScenario 2: Add widgets into ListView\n\n\nWhen widgets are added into ListView, they will be arranged automatically. By setting features such as Scroll Direction, Alignment and Gap, positions of widgets inside ListView are settled. A ListView is thus created in horizontal or vertical direction.\n\n\n3 PageView\n\n\n\n\nPageView is a container with a page flip effect, can only add basic container. PageView often used in game scenes like inventory with page flip effect, the official example, we use PageView in level selection screen, player can paging between different levels.\n\n\n\n\nScenario 1: Do not display the contents out of the container\n\n\nWhen you want to hide the content that\u2019s bigger than the panel, you can use attribute \"clipping\" so the panel will clip the content. As shown above, after enable Clipping, the effect is as follows:\n\n\n\n\nScenario 2: Add flip effect\n\n\nTo achieve flip effect, do the following. Add a child basic widget for ListView, and customize contents for the child widget. PageView will use the child widget automatically.\n\n\nWhen a widget is added to PageView, it will be reset back to default settsing, including position, scale, rotation, anchor point and size. These values cannot be modified. The layout of the child widget cannot be modified as well.\n\n\n4 ScrollView\n\n\n\n\nScrollView shows scrolling effect on the touch screen, it has the ability to set the scroll area, scroll direction and other attributes. In the official example, we implemented scrollview in task selection screen (MissionSelect.csd), player can scroll the background. We set the height of the background about triple the size of a screen, so user can slide up and down the screen to view the entire map.\n\n\n\n\nScenario 1: Do not display the contents out of the container\n\n\nWhen you want to hide the content that\u2019s bigger than the panel, you can use attribute \"clipping\" so the panel will clip the content. As shown above, after we check the properties, the effect is as follows:\n\n\n\n\nScenario 2: Set the size of the scrolling content\n\n\n\n\nIn the above picture, area A is the size of ScrollView. When enable Clipping for the ScrollView, areas outside A will not be displayed. However, contents in area B can be displayed by scrolling to area A. Scrolling content size has to be bigger than the scrollview for the scrolling to work.\n\n\nYou can select the desired scroll direction: horizontal, vertical or both.\n\n\nScenario 3: Set the rebound effect\n\n\nWhen ScrollView slides to screen border, the  interface will have a rebound effect if it continues to slide. To achieve this effect, you only need to enable\"Bounce Back\". The system will load this effect in the game.", 
            "title": "_Containers"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/UI/Containers/en/index.html#containers", 
            "text": "", 
            "title": "Containers"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/UI/Containers/en/index.html#1-panel", 
            "text": "Panel can be used to control child element's layout, also has handy features like clipping, fill color or background image. In the official example, we make extensive use of the panel to manage the layout, such as the main menu, user name, diamonds and gold they all have Panel, in order to ensure a relatively uniform layout.   Scenario 1: Do not display the contents out of the container  When you want to hide the content that\u2019s bigger than the panel, you can use attribute \"clipping\" so the panel will clip the content.  Scenario 2: Set the background and effects  There are two options to fill the color: solid color background, or gradient background. You can choose color and set the opacity of the background; when you select a gradient background, you need to set the starting color and ending color, and opacity can be set separately for these two colors.   Scenario 3: Add child controls  On canvas, right click the selected widget, and then you can add all types of widgets as its child.", 
            "title": "1 Panel"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/UI/Containers/en/index.html#2-listview", 
            "text": "ListView can auto-arrange widgets quickly. ListView is often used in game scenes where list effects are needed.  Note  The position cannot be modified when a widget is added into ListView.   Scenario 1: Do not display the contents of the container outside  When you want to hide the content that's bigger than the panel, you can use \"clipping\" to clip the content.  Scenario 2: Add widgets into ListView  When widgets are added into ListView, they will be arranged automatically. By setting features such as Scroll Direction, Alignment and Gap, positions of widgets inside ListView are settled. A ListView is thus created in horizontal or vertical direction.", 
            "title": "2 ListView"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/UI/Containers/en/index.html#3-pageview", 
            "text": "PageView is a container with a page flip effect, can only add basic container. PageView often used in game scenes like inventory with page flip effect, the official example, we use PageView in level selection screen, player can paging between different levels.   Scenario 1: Do not display the contents out of the container  When you want to hide the content that\u2019s bigger than the panel, you can use attribute \"clipping\" so the panel will clip the content. As shown above, after enable Clipping, the effect is as follows:   Scenario 2: Add flip effect  To achieve flip effect, do the following. Add a child basic widget for ListView, and customize contents for the child widget. PageView will use the child widget automatically.  When a widget is added to PageView, it will be reset back to default settsing, including position, scale, rotation, anchor point and size. These values cannot be modified. The layout of the child widget cannot be modified as well.", 
            "title": "3 PageView"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/UI/Containers/en/index.html#4-scrollview", 
            "text": "ScrollView shows scrolling effect on the touch screen, it has the ability to set the scroll area, scroll direction and other attributes. In the official example, we implemented scrollview in task selection screen (MissionSelect.csd), player can scroll the background. We set the height of the background about triple the size of a screen, so user can slide up and down the screen to view the entire map.   Scenario 1: Do not display the contents out of the container  When you want to hide the content that\u2019s bigger than the panel, you can use attribute \"clipping\" so the panel will clip the content. As shown above, after we check the properties, the effect is as follows:   Scenario 2: Set the size of the scrolling content   In the above picture, area A is the size of ScrollView. When enable Clipping for the ScrollView, areas outside A will not be displayed. However, contents in area B can be displayed by scrolling to area A. Scrolling content size has to be bigger than the scrollview for the scrolling to work.  You can select the desired scroll direction: horizontal, vertical or both.  Scenario 3: Set the rebound effect  When ScrollView slides to screen border, the  interface will have a rebound effect if it continues to slide. To achieve this effect, you only need to enable\"Bounce Back\". The system will load this effect in the game.", 
            "title": "4 ScrollView"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/UI/Armature/en/index.html", 
            "text": "Armature (Skeleton)\n\n\n\n\nArmature supports:\n- Importing animation files created by Cocos Studio v.1.x;\n\n\n\n\n\n\nSwitching the animation list;\n\n\n\n\n\n\nSetting  the play mode: Loop \n Auto Play;\n\n\n\n\n\n\nPreviewing the animation in the editor.\n\n\n\n\n\n\n\n\nScenario 1: Importing and using animation files exported from v. 1. x\n\n\nTo import previously edited animation files (*\n.ExportJson\n) into Armature widget, do one of the following:\n\n\n\n\nDrag and drop the selected file(s) from Resource panel to the properties section of the Armature widget;\n\n\nIn the Properties panel, choose Base\n Feature \n File, and select the file(s) you want to import;\n\n\nIn Canvas, right-click the Armature widget, choose \"Select Armature File\", and select the file(s) you want to import.\n\n\n\n\n\n\nScenario 2: Set options for animation\n\n\nYou can do the following:\n\n\n\n\n\n\nSelect the animation list for the current Armature widget;\n\n\n\n\n\n\nSet the animation playing mode into \u201cLoop\u201d;\n\n\n\n\n\n\nSet the Armature widget to play automatically when preview.", 
            "title": "_Armature"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/UI/Armature/en/index.html#armature-skeleton", 
            "text": "Armature supports:\n- Importing animation files created by Cocos Studio v.1.x;    Switching the animation list;    Setting  the play mode: Loop   Auto Play;    Previewing the animation in the editor.     Scenario 1: Importing and using animation files exported from v. 1. x  To import previously edited animation files (* .ExportJson ) into Armature widget, do one of the following:   Drag and drop the selected file(s) from Resource panel to the properties section of the Armature widget;  In the Properties panel, choose Base  Feature   File, and select the file(s) you want to import;  In Canvas, right-click the Armature widget, choose \"Select Armature File\", and select the file(s) you want to import.    Scenario 2: Set options for animation  You can do the following:    Select the animation list for the current Armature widget;    Set the animation playing mode into \u201cLoop\u201d;    Set the Armature widget to play automatically when preview.", 
            "title": "Armature (Skeleton)"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/UI/Layout/en/index.html", 
            "text": "UI Layout and Multi-resolution Support\n\n\n1 Cocos Studio\n\n\nAuto-layout functionality mainly refers to \"Pin \n Sizing\" property.\n\n\n\n\nYou can have the effect in the above figure by setting Enable/ Disable the \"Pins\" around and the \"Size bars\" in the center.\n\n\nEffects\n\n\n\n\nWhen a pin is enabled, a widget will be arranged at the corresponding border of its parent widget. The margins between a widget and its parent widget maintain a proportion as the parent widget changes its size.\n\n\n\n\n\n\n\n\nWhen two pins are enabled, a widget will be arranged at the corresponding borders of its parent widget.\n\n\n\n\n\n\n\n\nWhen a size bar is enabled, the widget scales maintaining its margin proportions to its parent widget.\n\n\n\n\n\n\nOther important information\n\n\n\n\n\n\nBy default, a widget is fixed at the bottom right corner.\n\n\n\n\n\n\nCurrently, only Widget (except label and bitmap label) and Containers have this feature.\n\n\n\n\n\n\n2 Cocos 2d-x (Cocos Framework) related notions and codes\n\n\nDesign size and screen size\n\n\nFirst, let's see two concepts in cocos2d-x: design size and screen size. Screen is the physical size of the screen I am going to get the application running on. The design size is the size I am programming for initially. Knowing the design size, I will (more accurately, cocos2d-x will) be able to scale widgets correctly to other resolutions.\n\n\nThe design size is usually set when system is started. Create the demo in\n\n\nAppDelegate::applicationDidFinishLaunching\n\n\nAs follows,\n\n\ndirector-\ngetOpenGLView()-\nsetDesignResolutionSize(960,640,ResolutionPolicy::FIXED_HEIGHT)\n;\n\n\nSet the design size as 960 * 640, and choose fixed_width for the canvas. However, even if we set it as 960 * 640, we may not get a design size as 960 * 640. Why? See the code:\n\n\nTurn to \"setDesignResolutionSize\". Here we can see some judgement and assignment, and call \nupdateDesignResolutionSize\n finally. Turn to \nupdateDesignResolutionSize\n, part of the codes for this function is as follows:\n\n\n //1.\u8ba1\u7b97\u6e38\u620f\u754c\u9762\u5728\u7f29\u653e\u81f3\u5145\u6ee1\u5c4f\u5e55\u7684\u60c5\u51b5\u4e0bX,Y\u8f74\u7684\u7f29\u653e\u7387:\n\n _scaleX= (float)_screenSize.width/ _designResolutionSize.width;\n\n _scaleY= (float)_screenSize.height/ _designResolutionSize.height;\n\n //2.\u6839\u636e\u8bbe\u914d\u7b56\u7565\uff0c\u8c03\u6574\u7f29\u653e\u7387\u548c\u8bbe\u8ba1\u5206\u8fa8\u7387:\n\n if(_resolutionPolicy== ResolutionPolicy::NO_BORDER)\n\n {//\u5c06X,Y\u8f74\u7f29\u653e\u503c\u8bbe\u7f6e\u4e3a\u5176\u4e2d\u7684\u6700\u5927\u8005\n\n _scaleX = _scaleY = MAX(_scaleX,_scaleY);\n\n }\n\n else if(_resolutionPolicy== ResolutionPolicy::SHOW_ALL)\n\n {//\u5c06X,Y\u8f74\u7f29\u653e\u503c\u8bbe\u7f6e\u4e3a\u5176\u4e2d\u7684\u6700\u5c0f\u8005\n\n _scaleX = _scaleY = MIN(_scaleX,_scaleY);\n\n }\n\n else if( _resolutionPolicy == ResolutionPolicy::FIXED_HEIGHT) {\n\n _scaleX = _scaleY;//\u5c06X,Y\u8f74\u7f29\u653e\u503c\u56fa\u5b9a\u4e3aY\u8f74\u7f29\u653e\u503c\uff0c\u8c03\u6574\u8bbe\u8ba1\u5206\u8fa8\u7387\u7684\u5bbd\u5ea6\uff0c\u4f7f\u8bbe\u8ba1\u5206\u8fa8\u7387\u7684\u5bbd\u5ea6\u5728\u7f29\u653e\u540e\u4f9d\u7136\u80fd\u591f\u5145\u6ee1\u5c4f\u5e55\u3002\n\n _designResolutionSize.width= ceilf(_screenSize.width/_scaleX);\n\n }\n\n else if( _resolutionPolicy == ResolutionPolicy::FIXED_WIDTH) {\n\n _scaleY= _scaleX;//\u5c06X,Y\u8f74\u7f29\u653e\u503c\u56fa\u5b9a\u4e3aX\u8f74\u7f29\u653e\u503c\uff0c\u8c03\u6574\u8bbe\u8ba1\u5206\u8fa8\u7387\u7684\u9ad8\u5ea6\uff0c\u4f7f\u8bbe\u8ba1\u5206\u8fa8\u7387\u7684\u9ad8\u5ea6\u5728\u7f29\u653e\u540e\u4f9d\u7136\u80fd\u591f\u5145\u6ee1\u5c4f\u5e55\u3002\n\n _designResolutionSize.height= ceilf(_screenSize.height/_scaleY);\n\n }\n\n //\u5176\u4ed6\u7f29\u653e\u7b56\u7565:EXACT_FIT\u4e0d\u4f5c\u8c03\u6574\n\n\n\nThe code mainly accomplish tow functions:\n\n\n\n\n\n\nCalculate the UI's scaling rate according to screen size and design size;\n\n\n\n\n\n\nAdjust the design size.\n\n\n\n\n\n\nAccording to the source code above, it may be easy to understand the different policies of scaling:\n\n\n\u00b7NO_BORDER\n: The entire application fills the specified area, without distortion but possibly with some cropping, while maintaining the original aspect ratio of the application.\n\n\n\u00b7SHOW_ALL\n: (Default setting of cocos2d-x) The entire application is visible in the specified area without distortion while maintaining the original aspect ratio of the application. Borders can appear on two sides of the application.\n\n\n\u00b7FIXED_HEIGHT\n: The application takes the height of the design resolution size and modifies the width of the internal canvas so that it fits the aspect ratio of the device no distortion will occur however you must make sure your application works on different aspect ratios.\n\n\n\u00b7FIXED_WIDTH\n: The application takes the width of the design resolution size and modifies the height of the internal canvas so that it fits the aspect ratio of the device no distortion will occur however you must make sure your application works on different aspect ratios.\n\n\n\u00b7EXACT_FIT\n: The entire application is visible in the specified area without trying to preserve the original aspect ratio. Distortion can occur, and the application may appear stretched or compressed.\n\n\nSo, which one to choose? I'm going to choose FIXED_HEIGHT OR FIXED_WIDTH. The two policy will scale images so that the height of the image fills the height of the device - so as long as the width of the image, after this scaling, is equal to or greater than the device width, all will look fine.\n\n\nLoad the interface in \nHelloWorld::init\n:\n\n\n auto rootNode= CSLoader::createNode(\"MainScene.csb\");\n\n auto size= Director::getInstance()-\ngetVisibleSize();\n\n rootNode-\nsetContentSize(size);\n\n ui::Helper::doLayout(rootNode);\n\n addChild(rootNode);\n\n\n\nExcept loading the interface with \ncreateNode\n, and adding it to HelloWorld, we need to adjust two more settings:\n\n\nAdjust the \nContentSize\n of the loaded interface, call \nui::Helper::doLayout\n for \nrootNode\n.\n\n\nEffects\n\n\n\n\nThe screen size is bigger than the design size, and choose FIXED_HEIGHT as the design resolution size.\n\n\n\n\n\n\n\n\nThe screen size is bigger than the design size, and choose FIXED_WIDTH as the design resolution size.\n\n\n\n\n\n\n\n\nThe screen size is smaller than the design size, and choose FIXED_ HEIGHT as the design resolution size.\n\n\n\n\n\n\n\n\nThe screen size is smaller than the design size, and choose FIXED_WIDTH as the design resolution size.\n\n\n\n\n\n\nNote\n The example ResolutionPolicy is the default option provided by framework. You need to know the screen resolution, and adjust the design size according to different screen resolution.", 
            "title": "_UI Layout and Multi-resolution Support"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/UI/Layout/en/index.html#ui-layout-and-multi-resolution-support", 
            "text": "", 
            "title": "UI Layout and Multi-resolution Support"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/UI/Layout/en/index.html#1-cocos-studio", 
            "text": "Auto-layout functionality mainly refers to \"Pin   Sizing\" property.   You can have the effect in the above figure by setting Enable/ Disable the \"Pins\" around and the \"Size bars\" in the center.", 
            "title": "1 Cocos Studio"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/UI/Layout/en/index.html#effects", 
            "text": "When a pin is enabled, a widget will be arranged at the corresponding border of its parent widget. The margins between a widget and its parent widget maintain a proportion as the parent widget changes its size.     When two pins are enabled, a widget will be arranged at the corresponding borders of its parent widget.     When a size bar is enabled, the widget scales maintaining its margin proportions to its parent widget.", 
            "title": "Effects"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/UI/Layout/en/index.html#other-important-information", 
            "text": "By default, a widget is fixed at the bottom right corner.    Currently, only Widget (except label and bitmap label) and Containers have this feature.", 
            "title": "Other important information"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/UI/Layout/en/index.html#2-cocos-2d-x-cocos-framework-related-notions-and-codes", 
            "text": "Design size and screen size  First, let's see two concepts in cocos2d-x: design size and screen size. Screen is the physical size of the screen I am going to get the application running on. The design size is the size I am programming for initially. Knowing the design size, I will (more accurately, cocos2d-x will) be able to scale widgets correctly to other resolutions.  The design size is usually set when system is started. Create the demo in  AppDelegate::applicationDidFinishLaunching  As follows,  director- getOpenGLView()- setDesignResolutionSize(960,640,ResolutionPolicy::FIXED_HEIGHT) ;  Set the design size as 960 * 640, and choose fixed_width for the canvas. However, even if we set it as 960 * 640, we may not get a design size as 960 * 640. Why? See the code:  Turn to \"setDesignResolutionSize\". Here we can see some judgement and assignment, and call  updateDesignResolutionSize  finally. Turn to  updateDesignResolutionSize , part of the codes for this function is as follows:   //1.\u8ba1\u7b97\u6e38\u620f\u754c\u9762\u5728\u7f29\u653e\u81f3\u5145\u6ee1\u5c4f\u5e55\u7684\u60c5\u51b5\u4e0bX,Y\u8f74\u7684\u7f29\u653e\u7387:  _scaleX= (float)_screenSize.width/ _designResolutionSize.width;  _scaleY= (float)_screenSize.height/ _designResolutionSize.height;  //2.\u6839\u636e\u8bbe\u914d\u7b56\u7565\uff0c\u8c03\u6574\u7f29\u653e\u7387\u548c\u8bbe\u8ba1\u5206\u8fa8\u7387:  if(_resolutionPolicy== ResolutionPolicy::NO_BORDER)  {//\u5c06X,Y\u8f74\u7f29\u653e\u503c\u8bbe\u7f6e\u4e3a\u5176\u4e2d\u7684\u6700\u5927\u8005  _scaleX = _scaleY = MAX(_scaleX,_scaleY);  }  else if(_resolutionPolicy== ResolutionPolicy::SHOW_ALL)  {//\u5c06X,Y\u8f74\u7f29\u653e\u503c\u8bbe\u7f6e\u4e3a\u5176\u4e2d\u7684\u6700\u5c0f\u8005  _scaleX = _scaleY = MIN(_scaleX,_scaleY);  }  else if( _resolutionPolicy == ResolutionPolicy::FIXED_HEIGHT) {  _scaleX = _scaleY;//\u5c06X,Y\u8f74\u7f29\u653e\u503c\u56fa\u5b9a\u4e3aY\u8f74\u7f29\u653e\u503c\uff0c\u8c03\u6574\u8bbe\u8ba1\u5206\u8fa8\u7387\u7684\u5bbd\u5ea6\uff0c\u4f7f\u8bbe\u8ba1\u5206\u8fa8\u7387\u7684\u5bbd\u5ea6\u5728\u7f29\u653e\u540e\u4f9d\u7136\u80fd\u591f\u5145\u6ee1\u5c4f\u5e55\u3002  _designResolutionSize.width= ceilf(_screenSize.width/_scaleX);  }  else if( _resolutionPolicy == ResolutionPolicy::FIXED_WIDTH) {  _scaleY= _scaleX;//\u5c06X,Y\u8f74\u7f29\u653e\u503c\u56fa\u5b9a\u4e3aX\u8f74\u7f29\u653e\u503c\uff0c\u8c03\u6574\u8bbe\u8ba1\u5206\u8fa8\u7387\u7684\u9ad8\u5ea6\uff0c\u4f7f\u8bbe\u8ba1\u5206\u8fa8\u7387\u7684\u9ad8\u5ea6\u5728\u7f29\u653e\u540e\u4f9d\u7136\u80fd\u591f\u5145\u6ee1\u5c4f\u5e55\u3002  _designResolutionSize.height= ceilf(_screenSize.height/_scaleY);  }  //\u5176\u4ed6\u7f29\u653e\u7b56\u7565:EXACT_FIT\u4e0d\u4f5c\u8c03\u6574  The code mainly accomplish tow functions:    Calculate the UI's scaling rate according to screen size and design size;    Adjust the design size.    According to the source code above, it may be easy to understand the different policies of scaling:  \u00b7NO_BORDER : The entire application fills the specified area, without distortion but possibly with some cropping, while maintaining the original aspect ratio of the application.  \u00b7SHOW_ALL : (Default setting of cocos2d-x) The entire application is visible in the specified area without distortion while maintaining the original aspect ratio of the application. Borders can appear on two sides of the application.  \u00b7FIXED_HEIGHT : The application takes the height of the design resolution size and modifies the width of the internal canvas so that it fits the aspect ratio of the device no distortion will occur however you must make sure your application works on different aspect ratios.  \u00b7FIXED_WIDTH : The application takes the width of the design resolution size and modifies the height of the internal canvas so that it fits the aspect ratio of the device no distortion will occur however you must make sure your application works on different aspect ratios.  \u00b7EXACT_FIT : The entire application is visible in the specified area without trying to preserve the original aspect ratio. Distortion can occur, and the application may appear stretched or compressed.  So, which one to choose? I'm going to choose FIXED_HEIGHT OR FIXED_WIDTH. The two policy will scale images so that the height of the image fills the height of the device - so as long as the width of the image, after this scaling, is equal to or greater than the device width, all will look fine.  Load the interface in  HelloWorld::init :   auto rootNode= CSLoader::createNode(\"MainScene.csb\");  auto size= Director::getInstance()- getVisibleSize();  rootNode- setContentSize(size);  ui::Helper::doLayout(rootNode);  addChild(rootNode);  Except loading the interface with  createNode , and adding it to HelloWorld, we need to adjust two more settings:  Adjust the  ContentSize  of the loaded interface, call  ui::Helper::doLayout  for  rootNode .  Effects   The screen size is bigger than the design size, and choose FIXED_HEIGHT as the design resolution size.     The screen size is bigger than the design size, and choose FIXED_WIDTH as the design resolution size.     The screen size is smaller than the design size, and choose FIXED_ HEIGHT as the design resolution size.     The screen size is smaller than the design size, and choose FIXED_WIDTH as the design resolution size.    Note  The example ResolutionPolicy is the default option provided by framework. You need to know the screen resolution, and adjust the design size according to different screen resolution.", 
            "title": "2 Cocos 2d-x (Cocos Framework) related notions and codes"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/UI/9Slice/en/index.html", 
            "text": "9-Slice\n\n\n9-slice can be used to reduce projects' size. Among official examples, 9-slice is used frequently.\n\n\n\n\nThe yellow background is created by a picture of 482 byte size.\n\n\n\n\nHow to use 9-Slice Scaling\n\n\n\n\n\n\nIn the Properties panel, select 9-slice checkbox (9-slice scaling cannot be applied to some widgets).\n\n\n\n\n\n\nBy default the 9-slice. You can also set 9-slice based on the widgets' size. For example, 10 pixels to the left means that contents within 10 pixels from the left side will not be distorted when scaling.\n\n\n\n\n\n\nDo one of the following to set 9-slice preferences\n\n\n\n\n\n\nType a number in the box;\n\n\n\n\n\n\nClick on the value box, and then use the mouse wheel's scroll to change the value;\n\n\n\n\n\n\nDrag the four guides within 9-slice to change the value.\n\n\n\n\n\n\n\n\nModify the widget's size as needed.\n\n\n\n\n\n\nHow 9-Slice scaling works\n\n\n9-Slice scaling can keep a picture from distorting even though it is resized. When scaling, the slices in the center row will scale vertically, the slices in the middle column scale horizontally, the center slice scales horizontally and vertically, the four corner regions consistent with the original shape.\n\n\n\n\nIn Cocos Studio, you can specify the 9-slice margins to make sure some sections will not be distorted. 9-slice scaling is available by enabling it when you use a widget supporting 9-slice function.", 
            "title": "_9-Slice"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/UI/9Slice/en/index.html#9-slice", 
            "text": "9-slice can be used to reduce projects' size. Among official examples, 9-slice is used frequently.   The yellow background is created by a picture of 482 byte size.   How to use 9-Slice Scaling    In the Properties panel, select 9-slice checkbox (9-slice scaling cannot be applied to some widgets).    By default the 9-slice. You can also set 9-slice based on the widgets' size. For example, 10 pixels to the left means that contents within 10 pixels from the left side will not be distorted when scaling.    Do one of the following to set 9-slice preferences    Type a number in the box;    Click on the value box, and then use the mouse wheel's scroll to change the value;    Drag the four guides within 9-slice to change the value.     Modify the widget's size as needed.    How 9-Slice scaling works  9-Slice scaling can keep a picture from distorting even though it is resized. When scaling, the slices in the center row will scale vertically, the slices in the middle column scale horizontally, the center slice scales horizontally and vertically, the four corner regions consistent with the original shape.   In Cocos Studio, you can specify the 9-slice margins to make sure some sections will not be distorted. 9-slice scaling is available by enabling it when you use a widget supporting 9-slice function.", 
            "title": "9-Slice"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/UI/RulersGuides/en/index.html", 
            "text": "Rulers and Guides\n\n\nCocos v2.3.0 has introduced Rulers and Guides functions for developers to easily position widgets when organize them.\n\n\nRulers\n\n\nWhen you open a project, you will see rulers along the left and bottom side of the Scene. The corner of Canvas is known as its origin (0,0). By default Rulers are visible, to show or hide rulers, you can choose Menu -\n View -\n select or deselect Ruler. Keyboard shortcuts are Ctrl+Shift+R(Win), Command+Shift+R(Mac). Rulers visibility setting is avaiblable to all projects once it is set.\n\n\nBasic functions of guides: Create guides, Move Guides, Lock Guides, Hide Guides and Clear Guides, etc.\n\n\nWork with Guides\n\n\nCreate Guides\n\n\nTo create Guides, please do one of the following:\n\n\n\n\n\n\nDrag from the horizontal ruler to create a horizontal guide to a position. Drag from the vertical ruler to create a vertical guide.\n\n\n\n\n\n\nMenu -\n View -\n select \"New Guides\" -\n select Direction and Position -\n click \"OK\". The position is the location of the line, being displayed parallel to the X coordinate  (Horizontal Direction) or Y coordinate (Vertical Direction) of rulers. Press Alt (Windows) or Option (Mac OS), and drag from the vertical ruler to created a horizontal guide and vice versa. When draging the ruler, you can see the position of the guide.\n\n\n\n\n\n\n\n\n\n\nMove Guides\n\n\nPosition the pointer over the guide until the pointer turns into a double-headed arrow, and then drag the guide to move it. Holding down Alt, drag the vertical guide to make it a horizontal one, and vice versa. When moving guides, the position of the guide is shown.\n\n\nLock Guides\n\n\nTo lock all guides, choose Menu -\n View -\n select Lock Guides. Keyboard shortcut is Ctrl+Alt+; (Windows), Command+Alt+;(Mac).\n\n\n\n\nHide Guides\n\n\nBy default, the guides are visible. To hide all guides , choose Menu -\n View -\n deselect Guides. Keyboard shortcut is Ctrl+; (Windows), Command+;(Mac).\n\n\n\n\nClear Guides\n\n\nRemove a single guide: to drag the guide outside the Scene.\n\n\nRemove all guides: choose Menu -\n View -\n Clear Guides.\n\n\nSet guide preferences\n\n\nBy default the Guide'd color is cyan. To customize its color, select Menu -\n Edit -\n Preferences -\n Guides -\n select a color and click OK.\n\n\n\n\nSave Guides\n\n\nGuides settings are saved with files (.csd). Guides will disappear when a project is closed.", 
            "title": "_Rulers and Guides"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/UI/RulersGuides/en/index.html#rulers-and-guides", 
            "text": "Cocos v2.3.0 has introduced Rulers and Guides functions for developers to easily position widgets when organize them.", 
            "title": "Rulers and Guides"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/UI/RulersGuides/en/index.html#rulers", 
            "text": "When you open a project, you will see rulers along the left and bottom side of the Scene. The corner of Canvas is known as its origin (0,0). By default Rulers are visible, to show or hide rulers, you can choose Menu -  View -  select or deselect Ruler. Keyboard shortcuts are Ctrl+Shift+R(Win), Command+Shift+R(Mac). Rulers visibility setting is avaiblable to all projects once it is set.  Basic functions of guides: Create guides, Move Guides, Lock Guides, Hide Guides and Clear Guides, etc.", 
            "title": "Rulers"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/UI/RulersGuides/en/index.html#work-with-guides", 
            "text": "Create Guides  To create Guides, please do one of the following:    Drag from the horizontal ruler to create a horizontal guide to a position. Drag from the vertical ruler to create a vertical guide.    Menu -  View -  select \"New Guides\" -  select Direction and Position -  click \"OK\". The position is the location of the line, being displayed parallel to the X coordinate  (Horizontal Direction) or Y coordinate (Vertical Direction) of rulers. Press Alt (Windows) or Option (Mac OS), and drag from the vertical ruler to created a horizontal guide and vice versa. When draging the ruler, you can see the position of the guide.      Move Guides  Position the pointer over the guide until the pointer turns into a double-headed arrow, and then drag the guide to move it. Holding down Alt, drag the vertical guide to make it a horizontal one, and vice versa. When moving guides, the position of the guide is shown.  Lock Guides  To lock all guides, choose Menu -  View -  select Lock Guides. Keyboard shortcut is Ctrl+Alt+; (Windows), Command+Alt+;(Mac).   Hide Guides  By default, the guides are visible. To hide all guides , choose Menu -  View -  deselect Guides. Keyboard shortcut is Ctrl+; (Windows), Command+;(Mac).   Clear Guides  Remove a single guide: to drag the guide outside the Scene.  Remove all guides: choose Menu -  View -  Clear Guides.  Set guide preferences  By default the Guide'd color is cyan. To customize its color, select Menu -  Edit -  Preferences -  Guides -  select a color and click OK.   Save Guides  Guides settings are saved with files (.csd). Guides will disappear when a project is closed.", 
            "title": "Work with Guides"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/Animation/2DSpriteSheetAnimation/en/index.html", 
            "text": "Create 2D SpriteSheet Animation\n\n\nYou can create 2D SpriteSheet Animation with cocos in two ways.\n\n\n1 Select two or more image resources in Resources panel -\n right click and select \"create SpriteSheet animation\".\n\n\n\n\nAdjust the Start Frame and Spacing between frames in the following dialog box. To make a smooth animation, cocos has created a function called \"Append start frame as end frame\", which means that to add a duplicate frame of the start frame as the last one.\n\n\n\n\nClick OK to create the animation.\n\n\n\n\n2 Add a Sprite to Canvas\n\n\n\n\nSelect two or more images resources in Resources panel, drag and drop them to the Sprite hierarchy tree.\n\n\n\n\nSet the \"Start Frame\", \"Spacing\" and \"Append the start frame as end frame\", click OK.", 
            "title": "_Create 2D SpriteSheet Animation"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/Animation/2DSpriteSheetAnimation/en/index.html#create-2d-spritesheet-animation", 
            "text": "You can create 2D SpriteSheet Animation with cocos in two ways.  1 Select two or more image resources in Resources panel -  right click and select \"create SpriteSheet animation\".   Adjust the Start Frame and Spacing between frames in the following dialog box. To make a smooth animation, cocos has created a function called \"Append start frame as end frame\", which means that to add a duplicate frame of the start frame as the last one.   Click OK to create the animation.   2 Add a Sprite to Canvas   Select two or more images resources in Resources panel, drag and drop them to the Sprite hierarchy tree.   Set the \"Start Frame\", \"Spacing\" and \"Append the start frame as end frame\", click OK.", 
            "title": "Create 2D SpriteSheet Animation"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/Animation/InsertKeyframe/en/index.html", 
            "text": "Key Frames\n\n\nFrame is the minimum single image in a motion picture. In Cocos Studio, the time is represented on the timeline by frames. Key Frame refers to a single still image in an animated sequence that occurs at an important point in that sequence. Following is an example to show how to create key frames.\n\n\n1 Create four footprints and put them at a start position.\n\n\n2 Realize walking footprints that requires four footprints appear and disappear alternately, then assume the footprints appear to disappear need 10 frame, then we can think that the first step to set keyframes between 0 and 10, the second in the between 10 and 20, and so on. Why the same space to set two keyframes? To make the footprints appear and disappear from the animation, we need to edit the last two keyframes. Key frame records the time that stores the value of a property.\n\n\nThere are four ways to \nadd keyframes\n:\n\n\n\n\nRight-click on the timeline marker, and select \"add frame\".\n\n\n\n\n\n\n\n\nClick \"Add Frame\" button.\n\n\n\n\n\n\n\n\n\n\nClick the timeline marker, and press K on the keyboard to add a key frame.\n\n\n\n\n\n\nSelect \"Begin to record frame\" checkbox.\n\n\n\n\n\n\n\n\nCocos Studio provides an effective method to record key frames: Begin to record frame. When you select \"AutoRecord Frame\"check box, and move timeline marker to a position, you can adjust its values for a perfect effects. All the widgets and their changed properties will be saved and recorded automatically.\n\n\nNote:\n Remove the timeline marker to a desired position, and then customize widgets' settings.\n\n\nEdit keyframes\n\n\n\n\n\n\nPerform the following operations on a single key frame: move around, copy, cut, paste, delete.\n\n\n\n\n\n\nSelect multiple frames and perform the above function at the same time.", 
            "title": "_Key Frames"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/Animation/InsertKeyframe/en/index.html#key-frames", 
            "text": "Frame is the minimum single image in a motion picture. In Cocos Studio, the time is represented on the timeline by frames. Key Frame refers to a single still image in an animated sequence that occurs at an important point in that sequence. Following is an example to show how to create key frames.  1 Create four footprints and put them at a start position.  2 Realize walking footprints that requires four footprints appear and disappear alternately, then assume the footprints appear to disappear need 10 frame, then we can think that the first step to set keyframes between 0 and 10, the second in the between 10 and 20, and so on. Why the same space to set two keyframes? To make the footprints appear and disappear from the animation, we need to edit the last two keyframes. Key frame records the time that stores the value of a property.  There are four ways to  add keyframes :   Right-click on the timeline marker, and select \"add frame\".     Click \"Add Frame\" button.      Click the timeline marker, and press K on the keyboard to add a key frame.    Select \"Begin to record frame\" checkbox.     Cocos Studio provides an effective method to record key frames: Begin to record frame. When you select \"AutoRecord Frame\"check box, and move timeline marker to a position, you can adjust its values for a perfect effects. All the widgets and their changed properties will be saved and recorded automatically.  Note:  Remove the timeline marker to a desired position, and then customize widgets' settings.  Edit keyframes    Perform the following operations on a single key frame: move around, copy, cut, paste, delete.    Select multiple frames and perform the above function at the same time.", 
            "title": "Key Frames"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/Animation/AddFrameEvents/en/index.html", 
            "text": "Create a Frame Event\n\n\nFrame event property allows to customize each frame of a widget for back-end calls.\n\n\n1 Select the \"Begin to record frame\" checkbox.\n\n\n\n\n2 Select a widget, and then click on a desired position for a new frame event in the timeline.\n\n\n\n\n3 On the Properties panel, select the Advanced option.\n\n\n\n\n4 Personalize the frame event.\n\n\n\n\n5 Move the timeline marker to another position.\n\n\n\n\n6 Personalize the frame event again (This can be different from previous settings).", 
            "title": "_Create a Frame Event"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/Animation/AddFrameEvents/en/index.html#create-a-frame-event", 
            "text": "Frame event property allows to customize each frame of a widget for back-end calls.  1 Select the \"Begin to record frame\" checkbox.   2 Select a widget, and then click on a desired position for a new frame event in the timeline.   3 On the Properties panel, select the Advanced option.   4 Personalize the frame event.   5 Move the timeline marker to another position.   6 Personalize the frame event again (This can be different from previous settings).", 
            "title": "Create a Frame Event"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/Animation/CreateSkeletalAnimation/en/index.html", 
            "text": "Create a Skeletal Animation\n\n\nThere are three ways to create a skeletal animation.\n\n\n\n\n\n\nCreate a skeletal animation with menu bar. Do the following:\n\n\nFile -\n New File -\n select Skeletal Animation -\n customize file name -\n click New.\n\n\n\n\n\n\n\n\nCreate a skeletal animation with New File shortcut. Do the following:\n\n\nClick the New File shortcut -\n select Skeletal Animation -\n customize file name -\n click New.\n\n\n\n\n\n\n\n\nCreate a skeletal animation in the Resource panel.\n\n\nIn the Resources panel, click the \"+\" icon at left bottom corner -\n New File -\n  Skeletal Animation -\n customize file name -\n click New.\n\n\n\n\nOr in the Resource panel, right click to create a new file.", 
            "title": "_Create a Skeletal Animation"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/Animation/CreateSkeletalAnimation/en/index.html#create-a-skeletal-animation", 
            "text": "There are three ways to create a skeletal animation.    Create a skeletal animation with menu bar. Do the following:  File -  New File -  select Skeletal Animation -  customize file name -  click New.     Create a skeletal animation with New File shortcut. Do the following:  Click the New File shortcut -  select Skeletal Animation -  customize file name -  click New.     Create a skeletal animation in the Resource panel.  In the Resources panel, click the \"+\" icon at left bottom corner -  New File -   Skeletal Animation -  customize file name -  click New.   Or in the Resource panel, right click to create a new file.", 
            "title": "Create a Skeletal Animation"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/Animation/EditSkeletalAnimation/en/index.html", 
            "text": "Edit Skeletal Animation\n\n\n1. Create Bones\n\n\nClick the Binding button on the Tools panel to create multiple bones. Hierarchical relationship between every two connected bones are shown by using an arrow pointing to the parent node. Press the button again or right click the mouse to stop creating a new bone.\n\n\n\n\nNow if you press the Create Bone button on the Tools panel, you will create a bone that has root as its parent.\n\n\n2. Bind Bones\n\n\nTo bind the bones, do the following:\n\n\n\n\n\n\nClick the Binding button \n on the Tools panel.\n\n\n\n\n\n\nSelect a bone that you want to bind to a parent bone. Now you can see a cube icon at the right bottom corner  of the mouse.\n\n\n\n\n\n\nClick the parent bone to establish a hierarchical relationship.\n\n\n\n\n\n\nBefore binding:\n\n\n\n\nAfter binding:\n\n\n\n\nBind skin to bones in the same way you bind the bones.\n\n\n3.Unbind Bones\n\n\nTo unbind the hierarchical relationship between connected bones, do the following:\n\n\n\n\n\n\nSelect the bone or skin conponents that you want to unbind on the Animation panel.\n\n\n\n\n\n\nClick the Unbinding button \n on the Tools panel. Or right click a component, and then select Unbinding on the context menu.\n\n\n\n\n\n\n\n\n4.Set the Position of Bones\n\n\nClick these buttons \n to move the canvas, move/ rotate or scale the bones.\n\n\n\n\nMove\n\n\n\n\n\n\nMove the vertical arrow to change the Y-axis value. Move the horizontal arrow to change the X-axis value.  Select the red rectangle to move the skeleton to any direction.\n\n\nYou can also modify X and Y axis values in the Properties panel.\n\n\n\n\nRotate\n\n\n\n\n\n\nSelect the arrow on the bone's left to rotate the bone  clockwise.  Select the arrow on the bone's right to rotate the bone counter clockwise. You can also modify the rotation value in the Properties panel.\n\n\n\n\nScale\n\n\n\n\n\n\nClick and move the left arrow to scale the bone in X-axis direction. Click and move the right arrow to scale the bone in Y-axis direction. Click and move the triangle between the two arrow to scale the bone evenly in all directions.\n\n\n5. Skeletal Animation Panel\n\n\nSkeletal Animation panel is shown below. The list on the left is the hierarchical relationship of bones, and on the right side there is an animation timeline.\n\n\n\n\nThe hierarchical relationship between bones, between bones and skin, is shown on the left list.\n\n\nThe workflow of building a skeleton animation is similar to the general animation workflow in cocos. Create a keyframe in Timeline, and then edit the skeletons on the keyframe.", 
            "title": "_Edit Skeletal Animation"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/Animation/EditSkeletalAnimation/en/index.html#edit-skeletal-animation", 
            "text": "", 
            "title": "Edit Skeletal Animation"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/Animation/EditSkeletalAnimation/en/index.html#1-create-bones", 
            "text": "Click the Binding button on the Tools panel to create multiple bones. Hierarchical relationship between every two connected bones are shown by using an arrow pointing to the parent node. Press the button again or right click the mouse to stop creating a new bone.   Now if you press the Create Bone button on the Tools panel, you will create a bone that has root as its parent.", 
            "title": "1. Create Bones"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/Animation/EditSkeletalAnimation/en/index.html#2-bind-bones", 
            "text": "To bind the bones, do the following:    Click the Binding button   on the Tools panel.    Select a bone that you want to bind to a parent bone. Now you can see a cube icon at the right bottom corner  of the mouse.    Click the parent bone to establish a hierarchical relationship.    Before binding:   After binding:   Bind skin to bones in the same way you bind the bones.", 
            "title": "2. Bind Bones"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/Animation/EditSkeletalAnimation/en/index.html#3unbind-bones", 
            "text": "To unbind the hierarchical relationship between connected bones, do the following:    Select the bone or skin conponents that you want to unbind on the Animation panel.    Click the Unbinding button   on the Tools panel. Or right click a component, and then select Unbinding on the context menu.", 
            "title": "3.Unbind Bones"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/Animation/EditSkeletalAnimation/en/index.html#4set-the-position-of-bones", 
            "text": "Click these buttons   to move the canvas, move/ rotate or scale the bones.   Move    Move the vertical arrow to change the Y-axis value. Move the horizontal arrow to change the X-axis value.  Select the red rectangle to move the skeleton to any direction.  You can also modify X and Y axis values in the Properties panel.   Rotate    Select the arrow on the bone's left to rotate the bone  clockwise.  Select the arrow on the bone's right to rotate the bone counter clockwise. You can also modify the rotation value in the Properties panel.   Scale    Click and move the left arrow to scale the bone in X-axis direction. Click and move the right arrow to scale the bone in Y-axis direction. Click and move the triangle between the two arrow to scale the bone evenly in all directions.", 
            "title": "4.Set the Position of Bones"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/Animation/EditSkeletalAnimation/en/index.html#5-skeletal-animation-panel", 
            "text": "Skeletal Animation panel is shown below. The list on the left is the hierarchical relationship of bones, and on the right side there is an animation timeline.   The hierarchical relationship between bones, between bones and skin, is shown on the left list.  The workflow of building a skeleton animation is similar to the general animation workflow in cocos. Create a keyframe in Timeline, and then edit the skeletons on the keyframe.", 
            "title": "5. Skeletal Animation Panel"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/Animation/Sample/en/index.html", 
            "text": "How to: Create a Skeletal Animation with cocos\n\n\nFollow the steps below build a skeletal animation.\n\n\n\n\n\n\nCreate a skeletal animation file. Details about creating a skeletal animation, please see \nCreate a Skeletal Animation\n.\n\n\n\n\n\n\nPrepare resources for skeletal animation. Import the resources to Resources panel.\n\n\n\n\n\n\n\n\nDrag and drop resources to the rendering section.\n\n\n\n\n\n\n\n\nClick the Create Bone button \n to build the skeletal structure of the dragon example.\n\n\n\n\n\n\nThe skeletal structure and hierarchical relationship are shown below:\n\n\n\n\n\n\nIt can be seen from the hierarchical relationship the binding of vertices is not correct. Next rearrange the bones by using Binding and UnBinding \n feature. About Binding and UnBinding, please see \nEdit Skeletal Animation\n.\n\n\n\n\n\n\nThe new hierarchical relationship is shown below:\n\n\n\n\n\n\n\n\nBind skin to bones.\n\n\n\n\n\n\nAdd keyframes in the Timeline at frame 5 and frame 10.\n\n\n\n\nBuild seperate animations for legs, arms and tails.\n\n\n\n\n\n\n\n\nChange settings for bones' position, scale and rotation. In the following example, we set the position of bones, the movement of legs, arms and tails.\n\n\n\n\n\n\n\n\nYou can change the apperance or color of bones by replacing them with new skin. Editing the apperance will not change the animation.", 
            "title": "_How to -> Create a Skeletal Animation with cocos"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/Animation/Sample/en/index.html#how-to-create-a-skeletal-animation-with-cocos", 
            "text": "Follow the steps below build a skeletal animation.    Create a skeletal animation file. Details about creating a skeletal animation, please see  Create a Skeletal Animation .    Prepare resources for skeletal animation. Import the resources to Resources panel.     Drag and drop resources to the rendering section.     Click the Create Bone button   to build the skeletal structure of the dragon example.    The skeletal structure and hierarchical relationship are shown below:    It can be seen from the hierarchical relationship the binding of vertices is not correct. Next rearrange the bones by using Binding and UnBinding   feature. About Binding and UnBinding, please see  Edit Skeletal Animation .    The new hierarchical relationship is shown below:     Bind skin to bones.    Add keyframes in the Timeline at frame 5 and frame 10.   Build seperate animations for legs, arms and tails.     Change settings for bones' position, scale and rotation. In the following example, we set the position of bones, the movement of legs, arms and tails.     You can change the apperance or color of bones by replacing them with new skin. Editing the apperance will not change the animation.", 
            "title": "How to: Create a Skeletal Animation with cocos"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/Animation/UseSkeletalAnimation/en/index.html", 
            "text": "Use Skeletal Animation\n\n\nSkeletal animation files can be used in cocos after being nested to Scene, Node or Layer. To use skeletal files, do the following:\n\n\n\n\n\n\nSelect the skeletal files from the Resources panel.\n\n\n\n\n\n\nDrag and drop the files to a Scene, Node or Layer file in the rendering section, and release the mouse button.\n\n\n\n\n\n\nYou may receive an error message when nesting skeletal files, if those files do not conform to the nested rules.\n\n\n\n\n\n\n\n\nSkeletal files are used as nodes in the nested files, therefore their properties are the same as Node.\n\n\nNote\n\n\n1. Other types of files annot be nested in skeletal animation files. SpriteSheet  files cannot nest or be nexted with other files.\n\n\n2. The  type of skeletal files is Node, with a default name ProjectNode_X.\n\n\n3. After the skeletal files being nested, no spritesheet in ProjectNode_X.", 
            "title": "_Use Skeletal Animation"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/Animation/UseSkeletalAnimation/en/index.html#use-skeletal-animation", 
            "text": "Skeletal animation files can be used in cocos after being nested to Scene, Node or Layer. To use skeletal files, do the following:    Select the skeletal files from the Resources panel.    Drag and drop the files to a Scene, Node or Layer file in the rendering section, and release the mouse button.    You may receive an error message when nesting skeletal files, if those files do not conform to the nested rules.     Skeletal files are used as nodes in the nested files, therefore their properties are the same as Node.  Note  1. Other types of files annot be nested in skeletal animation files. SpriteSheet  files cannot nest or be nexted with other files.  2. The  type of skeletal files is Node, with a default name ProjectNode_X.  3. After the skeletal files being nested, no spritesheet in ProjectNode_X.", 
            "title": "Use Skeletal Animation"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/3D/New3DScene/en/index.html", 
            "text": "Create 3D Scenes\n\n\n1 Create a New Scene\n\n\nClick File -\n  New File, select 3D Scene and  name the file as \"Testscene\". -\n click New \uff1a\n\n\n\n\n2 Import Scene Resources\n\n\nIn the following sample, we use the resources in the red box. You can choose alternaive resources to build a scene following the  steps shown below.\n\n\n\n\n3 Arrange Scene Resources\n\n\n\n\nDrag and drop \"changing.c3b\" from Scene folder to scene. Select it and set its properties.\n\n\n\n\n\n\n\n\nDrag and drop \"dragon.c3b\" from dragon folder to scene. Select it and customize its properties.\n\n\n\n\n\n\n\n\nDrag and drop \"knight.c3b\" and \"mage.c3b\" to scene. Select them and set their properties respectively, and you can see the following scene.\n\n\n\n\n\n\n\n\nCreate a camera, and set its basic properties as following.\n\n\n\n\n\n\n\n\nA draft scene can be viewed with camera as the following picture shows.\n\n\n\n\n\n\n\n\nPublish this scene file to cocos project, and a simple game such as Hero VS. Monster can be achieved by adding code control.", 
            "title": "_Create 3D Scenes"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/3D/New3DScene/en/index.html#create-3d-scenes", 
            "text": "1 Create a New Scene  Click File -   New File, select 3D Scene and  name the file as \"Testscene\". -  click New \uff1a   2 Import Scene Resources  In the following sample, we use the resources in the red box. You can choose alternaive resources to build a scene following the  steps shown below.   3 Arrange Scene Resources   Drag and drop \"changing.c3b\" from Scene folder to scene. Select it and set its properties.     Drag and drop \"dragon.c3b\" from dragon folder to scene. Select it and customize its properties.     Drag and drop \"knight.c3b\" and \"mage.c3b\" to scene. Select them and set their properties respectively, and you can see the following scene.     Create a camera, and set its basic properties as following.     A draft scene can be viewed with camera as the following picture shows.     Publish this scene file to cocos project, and a simple game such as Hero VS. Monster can be achieved by adding code control.", 
            "title": "Create 3D Scenes"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/3D/3DModel/en/index.html", 
            "text": "3D Model Overview\n\n\n3D Model is a widget for creating 3D objects in 3D Scene.  Various 3D objects can be created by modifing 3D models' properties and mapping.\n\n\nHow to use 3D Model\n\n\n1 Create a 3D Model\n\n\nDrag and drop a Model from 3D Widgets to Scene.\n\n\n\n\n2 Modify objects' properties\n\n\nAdjust the properties of the model, either using the Properties panel or you can left click a numeric property and scroll the mouse wheel to vary the values.\n\n\n\n\n\n\n3 Import models\n\n\nImport model and map resources to a project, then drag and drop model files to scene.\n\n\n\n\n\n\n\n\nTo use model resources, just drag and drop them to the scene.", 
            "title": "_3D Model Overview"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/3D/3DModel/en/index.html#3d-model-overview", 
            "text": "3D Model is a widget for creating 3D objects in 3D Scene.  Various 3D objects can be created by modifing 3D models' properties and mapping.  How to use 3D Model  1 Create a 3D Model  Drag and drop a Model from 3D Widgets to Scene.   2 Modify objects' properties  Adjust the properties of the model, either using the Properties panel or you can left click a numeric property and scroll the mouse wheel to vary the values.    3 Import models  Import model and map resources to a project, then drag and drop model files to scene.     To use model resources, just drag and drop them to the scene.", 
            "title": "3D Model Overview"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/3D/3DParticle/en/index.html", 
            "text": "3D Particles Overview\n\n\nParcles use a large number of small objects, controlled by emitter or scripts, to simulate phenomena such as water, fire, smoke and smoke, etc. To use 3D particles, do the following:\n\n\n1 Create a 3D particle\n\n\nDrag and drop a 3D particle from 3D Objects to Scene.\n\n\n\n\n2 Modify objects' properties\n\n\nModify basic properties, or move and dynamically adjust a particle's states with mouse, such as its position, scale and rotation, etc. You can use Particle Universe to create more particle effects and import the files into Cocos Studio.\n\n\n3 Import particle resources\n\n\nImport particle resources to a project, and then drag and drop them to scene.\n\n\n\n\n\n\n\n\nTo use particle resources, just drag and drop them to the Scene.\n\n\n\n\nDrag and drop particle files to Particle widget to replace previous resources.", 
            "title": "_3D Particles Overview"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/3D/3DParticle/en/index.html#3d-particles-overview", 
            "text": "Parcles use a large number of small objects, controlled by emitter or scripts, to simulate phenomena such as water, fire, smoke and smoke, etc. To use 3D particles, do the following:  1 Create a 3D particle  Drag and drop a 3D particle from 3D Objects to Scene.   2 Modify objects' properties  Modify basic properties, or move and dynamically adjust a particle's states with mouse, such as its position, scale and rotation, etc. You can use Particle Universe to create more particle effects and import the files into Cocos Studio.  3 Import particle resources  Import particle resources to a project, and then drag and drop them to scene.     To use particle resources, just drag and drop them to the Scene.   Drag and drop particle files to Particle widget to replace previous resources.", 
            "title": "3D Particles Overview"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/3D/Camera/en/index.html", 
            "text": "Camera\n\n\nCameras are used to capture and display the world of a game scene. Only the objects within the camera view can be displayed.\n\n\n1 Create a camera\n\n\nDrag and drop Camera from 3D Widgets to Scene.\n\n\n\n\n2 Modify camera's basic properties\n\n\nModify basic properties in Properties panel, or move and dynamically adjust the camera's position and rotation with mouse.\n\n\n\n\n3 Adjust the camera's frustum\n\n\nObjects can be captured by camera when they are within the frustum. For example, in the following picture the bule diverging line defines the frustum, and the box on the left is not visible while the box on the right is visible to the camera.\n\n\n\n\nAdjust the field of view to control the size of frustum, so that to control what is visible to the camera. The position of far clipping plane and near clipping plane decide what can be captured by the camera.", 
            "title": "_Camera"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/3D/Camera/en/index.html#camera", 
            "text": "Cameras are used to capture and display the world of a game scene. Only the objects within the camera view can be displayed.  1 Create a camera  Drag and drop Camera from 3D Widgets to Scene.   2 Modify camera's basic properties  Modify basic properties in Properties panel, or move and dynamically adjust the camera's position and rotation with mouse.   3 Adjust the camera's frustum  Objects can be captured by camera when they are within the frustum. For example, in the following picture the bule diverging line defines the frustum, and the box on the left is not visible while the box on the right is visible to the camera.   Adjust the field of view to control the size of frustum, so that to control what is visible to the camera. The position of far clipping plane and near clipping plane decide what can be captured by the camera.", 
            "title": "Camera"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/3D/3DShortcutKey/en/index.html", 
            "text": "3D Keyboard Shortcuts\n\n\nZoom/scale the objects in 3D scene\n\n\n1 Select an object, hold down the center mouse wheel  with Shift to scale 3D object in X, Y, and Z axis.\n\n\n2 In 3D scene, there is a shortcut bar at the top of the wokrspace. See the following picture.\n\n\n\n\nOn Windows:\n\n\n\n\n\n\nMove the scene with keyboard shortcut Q.\n\n\n\n\n\n\nMove the selected object with keyboard shortcut W.\n\n\n\n\n\n\n\n\n\n\nRotate the selected object with keyboard shortcut E.\n\n\n\n\n\n\n\n\nScale the selected object with keyboard shortcut R.\n\n\n\n\n \n\n\n3D Camera Rotation\n\n\nPress ALT and left mouse button to orbit the view around the focal point when move the mouse.", 
            "title": "_3D Keyboard Shortcuts"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/3D/3DShortcutKey/en/index.html#3d-keyboard-shortcuts", 
            "text": "Zoom/scale the objects in 3D scene  1 Select an object, hold down the center mouse wheel  with Shift to scale 3D object in X, Y, and Z axis.  2 In 3D scene, there is a shortcut bar at the top of the wokrspace. See the following picture.   On Windows:    Move the scene with keyboard shortcut Q.    Move the selected object with keyboard shortcut W.      Rotate the selected object with keyboard shortcut E.     Scale the selected object with keyboard shortcut R.      3D Camera Rotation  Press ALT and left mouse button to orbit the view around the focal point when move the mouse.", 
            "title": "3D Keyboard Shortcuts"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/3D/3DNode/en/index.html", 
            "text": "3D Node Overview\n\n\n\n\n3D nodes mainly have three features: containing other nodes; setting up regular callback; implementing certain behaviors.\n\n\nHow to edit 3D nodes\n\n\n1 Create a 3D node.\n\n\nDrag and drop a 3D node from 3D Objects panel to Scene.\n\n\n\n\n2 Specify properties for the Object.\n\n\nIn the Properties panel, you can modify some property values, including Name, Visible, Tag, Position, Scale, Rotation, Opacity, Color and Camera Mask.\n\n\n\n\n3.You can use drag-and-drop operation and shortcut bar at the same time to customize position, scale and rotation settings.", 
            "title": "_3D Node Overview"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/3D/3DNode/en/index.html#3d-node-overview", 
            "text": "3D nodes mainly have three features: containing other nodes; setting up regular callback; implementing certain behaviors.", 
            "title": "3D Node Overview"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/3D/3DNode/en/index.html#how-to-edit-3d-nodes", 
            "text": "1 Create a 3D node.  Drag and drop a 3D node from 3D Objects panel to Scene.   2 Specify properties for the Object.  In the Properties panel, you can modify some property values, including Name, Visible, Tag, Position, Scale, Rotation, Opacity, Color and Camera Mask.   3.You can use drag-and-drop operation and shortcut bar at the same time to customize position, scale and rotation settings.", 
            "title": "How to edit 3D nodes"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/3D/SkyBox/en/index.html", 
            "text": "Skybox\n\n\nSkybox is a technique used to create a sphere with textures drawn around the scene or the camera. It helps to create an environment infinitely far away, such as a blue sky with white clouds or a dark sky with stars.\n\n\nHow to create a skybox\n\n\n\n\n\n\nTo enable Skybox. Check the Display option in the Skybox tab under Properties panel. Skybox can be attached to the root node of a 3D scene and cameras.\n\n\n\n\n\n\nAssign six pictures (jpg, png) to the skybox, including Left, Right, Front, Back, Up and Bottom. Match the pictures to the direction they represent.\n\n\n\n\n\n\n\n\n\n\nDisplay of skybox.\n\n\n\n\na. When Skybox is enabled for the root node.\n\n\n\n\n\n\nIf  the skybox is disabled for all the cameras, skybox of the scene (root node) will be displayed in rendering section, camera preview window and simulator.\n\n\n\n\n\n\n\n\nIf  the skybox is enabled for multiple cameras, selecting one of these cameras, skybox of these camera will be displayed in camera preview window.\n\n\n\n\n\n\n\n\nIf the skybox is enabled for multiple cameras, selecting one camera that skybox is unchecked, skybox of the scene (root node) will be displayed in camera preview window, while skybox of a higher level camera (node at the bottom) will be displayed in simulator.\n\n\n\n\nb. When Skybox is not checked to display for the root node.\n\n\n\n\n\n\nIf the skybox is disabled for all the cameras, skybox cannot be previewed in rendering section, camera preview window and simulator.\n\n\n\n\n\n\n\n\nIf the skybox is enabled for multiple cameras, selecting one of these cameras, skybox of the camera will be displayed in camera preview window.\n\n\n\n\n\n\n\n\nIf the skybox is enabled for multiple cameras, selecting one camera that skybox is unchecked, nothing will be displayed in camera preview window, and skybox of a higher level camera (which Skybox is checked to display) will be displayed in simulator.\n\n\n\n\n\n\nNote: Only when the 6 sides of the skybox are assigned with pictures, can the skybox display. The six pictures should be same in size, filename extension and coding format.", 
            "title": "_SkyBox"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/3D/SkyBox/en/index.html#skybox", 
            "text": "Skybox is a technique used to create a sphere with textures drawn around the scene or the camera. It helps to create an environment infinitely far away, such as a blue sky with white clouds or a dark sky with stars.  How to create a skybox    To enable Skybox. Check the Display option in the Skybox tab under Properties panel. Skybox can be attached to the root node of a 3D scene and cameras.    Assign six pictures (jpg, png) to the skybox, including Left, Right, Front, Back, Up and Bottom. Match the pictures to the direction they represent.      Display of skybox.   a. When Skybox is enabled for the root node.    If  the skybox is disabled for all the cameras, skybox of the scene (root node) will be displayed in rendering section, camera preview window and simulator.     If  the skybox is enabled for multiple cameras, selecting one of these cameras, skybox of these camera will be displayed in camera preview window.     If the skybox is enabled for multiple cameras, selecting one camera that skybox is unchecked, skybox of the scene (root node) will be displayed in camera preview window, while skybox of a higher level camera (node at the bottom) will be displayed in simulator.   b. When Skybox is not checked to display for the root node.    If the skybox is disabled for all the cameras, skybox cannot be previewed in rendering section, camera preview window and simulator.     If the skybox is enabled for multiple cameras, selecting one of these cameras, skybox of the camera will be displayed in camera preview window.     If the skybox is enabled for multiple cameras, selecting one camera that skybox is unchecked, nothing will be displayed in camera preview window, and skybox of a higher level camera (which Skybox is checked to display) will be displayed in simulator.    Note: Only when the 6 sides of the skybox are assigned with pictures, can the skybox display. The six pictures should be same in size, filename extension and coding format.", 
            "title": "Skybox"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/3D/Light/en/index.html", 
            "text": "3D Light\n\n\nCurrently four 3D lighting techniques are supported in cocos, which are Directional Light, Point Light, Spot Light and Ambient Light.\n\n\nDirectional Light provides parallel light from one direction. It is often used to simulate light from one direction.\n\n\n\n\nPoint Light emits light in all directions equally from a central spot. Objects within the sphere can be lighted.\n\n\n\n\nSpot Light provides light from a single point in a cone shape. Objects within the cone area can be affected. It is often used to simulate the effect of lamps.\n\n\n\n\nAmbient Light is used to light up the whole scene evenly. It has no specific direction of the light source.\n\n\n\n\nAdd Light\n\n\nDrag Light from 3D Widgets to a 3D scene.\n\n\n\n\nModify Light Properties\n\n\nSelect the Light in the structure tree.\n\n\n\n\nModify the properties of the seleted object.\n\n\n\n\nNotes of Light Properties\n\n\n\n\n\n\nGeneral properties of light include Visible, Tag, Position, Scale, Rotation and color.\n\n\n\n\n\n\nWithin the Feature tab, you can modify Light Type, Light Flag, whether enable light, values of Intensity, Range and Angle.\n\n\n\n\n\n\nThe intensity ranges from 0-10.\n\n\n\n\n\n\nRange is used to modify the radius of Point Light and the height of the cone of the Spot Light.\n\n\n\n\n\n\nAngle is used to adjust the cone angle of the Spot Light.\n\n\n\n\n\n\nObject in the scene can only be affected by one directional light, one point light and one spot light. The effects of Ambient Light can be mixed.\n\n\n\n\n\n\nWhen there are more than one directional light/ point light/ spot light, and all are enabled, objects will only be affected by the light with same light flag.\n\n\n\n\n\n\nWhen there are more than one light of the same type and same light flag, objects will be affected by the light at the top of the structure tree. In the following example, object is lighted by Spot but Spot_0.", 
            "title": "_Light"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/3D/Light/en/index.html#3d-light", 
            "text": "Currently four 3D lighting techniques are supported in cocos, which are Directional Light, Point Light, Spot Light and Ambient Light.  Directional Light provides parallel light from one direction. It is often used to simulate light from one direction.   Point Light emits light in all directions equally from a central spot. Objects within the sphere can be lighted.   Spot Light provides light from a single point in a cone shape. Objects within the cone area can be affected. It is often used to simulate the effect of lamps.   Ambient Light is used to light up the whole scene evenly. It has no specific direction of the light source.", 
            "title": "3D Light"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/3D/Light/en/index.html#add-light", 
            "text": "Drag Light from 3D Widgets to a 3D scene.", 
            "title": "Add Light"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/3D/Light/en/index.html#modify-light-properties", 
            "text": "Select the Light in the structure tree.   Modify the properties of the seleted object.", 
            "title": "Modify Light Properties"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/3D/Light/en/index.html#notes-of-light-properties", 
            "text": "General properties of light include Visible, Tag, Position, Scale, Rotation and color.    Within the Feature tab, you can modify Light Type, Light Flag, whether enable light, values of Intensity, Range and Angle.    The intensity ranges from 0-10.    Range is used to modify the radius of Point Light and the height of the cone of the Spot Light.    Angle is used to adjust the cone angle of the Spot Light.    Object in the scene can only be affected by one directional light, one point light and one spot light. The effects of Ambient Light can be mixed.    When there are more than one directional light/ point light/ spot light, and all are enabled, objects will only be affected by the light with same light flag.    When there are more than one light of the same type and same light flag, objects will be affected by the light at the top of the structure tree. In the following example, object is lighted by Spot but Spot_0.", 
            "title": "Notes of Light Properties"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/Extend/WidgetExtend/en/index.html", 
            "text": "Widgets Extension\n\n\nOverview\n\n\nThis section introduces two ways to create widgets:\n\n\n\n\n\n\n(basic level) Create widgets for Cocos Studio in Lua;\n\n\n\n\n\n\n(advanced level) Create widgets for Cocos Studio in C# + Lua.\n\n\n\n\n\n\nAbout Readers\n\n\nThis section assumes the reader has the following knowledge:\n\n\n\n\n\n\nHave good knowledge of Cocos Studio.\n\n\n\n\n\n\nBe familiar with Lua scripts.\n\n\n\n\n\n\nProficiency in Lua interface exported from Cocos 2d-x.\n\n\n\n\n\n\nHave basic knowledge of C# (high requirement necessary for advanced articles).\n\n\n\n\n\n\nBackground\n\n\nTo understand the contents of this document, you need to understand the following concepts:\n\n\n\n\n\n\nLua\n\n\n\n\n\n\nCocos 2d-x Lua Binding.\n\n\n\n\n\n\nMono.Addins\n\n\n\n\n\n\nT4 templates\n\n\n\n\n\n\nDirectory Path\n\n\nThe directory paths which used in this document are listed below for easy reference. All the paths are the default path of Cocos Studio on Window.\n\n\n\n\n\n\nAddins Path\n\n\nBy default samples are installed to  \n%userprofile%\\Documents\\Cocos\\CocosStudio2\\Addins\n on the computer. If the default installation folder is changed, samples are in the same folder with Documents. For example, if document is installed to \nD:\\CocosDocuments\n, samples are in \nD:\\CocosDocuments\\Cocos\\CocosStudio2\\Addins\n. On Mac, samples are installed to \n/Library/Application Support/Cocos/CocosStudio2/Addins\n.\n\n\n\n\n\n\nSample Path\n\n\nBy default samples are installed to  \n%userprofile%\\Documents\\Cocos\\CocosStudio2\\Samples\\Addins\n on the computer. If the default installation folder is changed, samples are in the same folder with Documents. For example, if document is installed to \nD:\\CocosDocuments\n, samples are in \n D:\\CocosDocuments\\Cocos\\CocosStudio2\\Samples\\Addins\n. On Mac, samples are installed to \n/Library/Application Support/Cocos/CocosStudio2/Samples/Addins\n.\n\n\n\n\n\n\nCustom Widgets\n\n\nCurrently there are two ways to create custom widgets for Cocos Studio. The following will explore how they are used to create custom widgets.\n\n\n\n\n\n\nOnly Lua codes, it is a fundamental method to create custom widgets. This method can be applied to edit existing widgets in Cocos Studio.\n\n\n\n\n\n\nC# and Lua, it offers more possibilities to create custom widgets.\n\n\n\n\n\n\nIf there are custom widgets created with Lua, these Lua files are necessary when loading scenes. Lua data format is added in Cocos Studio for developers to easily create scenes in Lua.\n\n\n\n\nYou need to select Lua File (Beta) when publishing projects with Lua custom widgets. Otherwise, custom widgets will not show. For example, if a project is published as \n.csb\n file, its Lua widget is not usable. If other data format is required, see \nCustomizing Export Data Formats\n.\n\n\n1 Basic Level (Lua)\n\n\nWhen Cocos Studio starts, it scans the LuaScript directory under plugin directory. Lua files will be recognized as custom widgets edited in Lua. Custom widgets will be displayed in Objects panel with the same name as Lua files' name.\n\n\nTo modify, expand or set default values to a widget, you can use Lua scripts to accomplish this acquirements. For example, to set the default text font.\n\n\n\n\n\n\nCreate Lua scripts for custom widgets.\n\n\n\n\n\n\nPut the codes in the LuaScript folder under plugin directory.\n\n\n\n\n\n\nFollowing is a sample: A custom Sprite widget with text. The sample below is \nabc.lua\n in LuaScript directory.\n\n\nSample\n\n\nTextSprite\n:  to display some texts on top of the Sprite.\n\n\nFollowing are the codes of \nabc.lua\n.\n\n\nlocal container = {}\n\nfunction container.CreateCustomNode()\n    local rootNode = cc.Sprite:create('temp.png')\n    local label = cc.Label:create()\n    label:setString('abc Label From Lua')\n    label:setSystemFontSize(24)\n    label:setPosition(140, 50)\n    label:setName('labelName')\n    label:retain()\n\nrootNode:addChild(label)\nreturn rootNode\nend\n\nfunction container.GetBaseType()\nreturn 'Sprite'\nend\n\nreturn container\n\n\n\nAnalysis\n:\n\n\nThe example above is a complete Lua template. Loading the template will return a Lua Table, which is the container table at the end of the above codes.\n\n\nThe method \nGetBaseType\n is  used to return the extended widget type. In this case, \"Sprite\" is returned, which means the extended widget is \"sprite\".\n\n\nThe method \nCreateCustomNode\n is used to return a node, which is an extended widget in this example.\n\n\nSupposed the file \nabc.lua\n has been copied into LuaScript directory under Plugin directory, and meanwhile \ntemp.png\n is in that directory.\n\n\nStart Cocos Studio, and then you will see the custom widget, with the name \"abc\", in the Objects panel.\n\n\n\n\nThe widget's icon is same as Sprite, for this custom widget is extended based on Sprite.\n\n\nDrag and drop \"abc\" to rendering section, you can see the following (background picture is temp.png).\n\n\n\n\nSelecting it in the rendering section, we can see that its type is Sprite.\n\n\n\n\nFAQ \n Notes\n\n\n\n\n\n\nWhat to do if custom widgets do not display on Panel?\n\n\nSolution: The codes and a picture named temp.png should be in the LuaScript folder under plugin directory. Otherwise, this Lua file cannot be loaded when Cocos Studio starts.\n\n\nResources used in Lua scripts should also be put in LuaScript directory, and be loaded in relative path. When publish a project, LuaScript directory will be copied to publish directory. LuaScript directory is just copied once, if there is a directory with the same name in publish directory, LuaScript directory will not be copied.\n\n\nA Lua file is a complete Lua template. Loading the template will return a Lua Table\n\n\nThe method \nCreateCustomNode\n has to be used to return a node.\n\n\n\"Lua Table\" must include a method \nGetBaseType\n, which is used to return a widget's node. Widgets in Cocos Studio and their GetBaseType are listed below:\n\n\n  \u63a7\u4ef6\u540d                                GetBaseType\u8fd4\u56de\n Sprite                              Sprite\n ParticleSystemQuad                  Particle\n TMXTiledMap                         GameMap\n ComAudio                            SimpleAudio\n Node                                Node\n Button                              Button\n CheckBox                            CheckBox\n ImageView                           ImageView\n TextBMFont                          TextBMFont\n LoadingBar                          LoadingBar\n Slider                              Slider\n Text                                Text\n TextField                           TextField\n ScrollView                          ScrollView\n ListView                            ListView\n PageView                            PageView\n Particle3D                          Particle3D\n Sprite3D                            Sprite3D\n UserCamera                          UserCamera\n\n\n\n\n\n\n\nHow to call third party's Lua codes library from custom widget's Lua codes library?\n\n\nSolution: Currently Lua runtime of Cocos Studio only supports interfaces exported from Cocos 2d-x. If other interfaces need to be loaded, please load it in Lua codes. For example, if you need lua interface provided by Quick-cocos2d-x, load the  required library in the codes.\n\n\n\n\n\n\nA custom widget should be defined by one Lua file. A Lua file should define only one custom widget. Cocos Studio will load all the Lua files in LuaScript directory, and each Lua file is represented by a widget's icon in Objects' panel. Name of the icon is same with files' names.\n\n\n\n\n\n\nThere is a project having Lua custom widgets. If Lua scripts have been modified, it will be opened with new scripts. If there is any mistake during the loading process, the corresponding widget will not be displayed.\n\n\n\n\n\n\nBest Practice: create required widgets in Cocos Studio, and then publish the project as Lua file.\n\n\n\n\n\n\nAbove is the introduction of creating custom widgets in Lua. However, you can only create a simple custom widget in Lua.\n\n\n2 Advanced Level (C# \n Lua)\n\n\nTo modify widgets' properties, you need to write codes in C#.\n\n\nCocos Studio build its addin system based on Mono.Addins, which is helpful when we want to expand properties.\n\n\nExport the expanded widget to Lua file (generated by adding a template to generate Lua codes). A concept diagram about this process is listed below:\n\n\n\n\nNote\n Lua Objects are the Lua scripts of custom widgets. Lua Codes are exported from Data Model.\n\n\nGenerally speaking, following are steps to implement this operation:\n\n\n\n\n\n\nCreate scripts for custom widgets.\n\n\n\n\n\n\nPut the scripts created in previous step in LuaScript folder under plugin directory.\n\n\n\n\n\n\nConfigure AddinConfig.cs.\n\n\n\n\n\n\nAdd ViewModel and DataModels.\n\n\n\n\n\n\nAdd a template to generate Lua codes.\n\n\n\n\n\n\nHere is an example:\n\n\nThere is a TextSprite widget, when selected, you can modify the contents and font size of the text.\n\n\nFind Addins.sln in Samples folder. Open Addins.sln in Visual Studio 2013.\n\n\nThe Samples and Analysis below are based on this example.\n\n\nSamples\n\n\nAdd a method to deal with text contents and font size in Lua scripts. In LuaScript directory, scripts of sprite0.lua are listed below:\n\n\n--[[\n   ]]\n\n\n    local function CreateSprite()\n        return cc.Sprite:create('temp.png')\n    end\n\n    local function CreateLabel()\n        local label = cc.Label:create()\n        label:setString('sprite0 Label from Lua')\n        label:setSystemFontSize(24)\n        label:setPosition(140, 50)\n        label:setName('labelName')\n        label:retain()\n        return label\n    end\n\n    -- make sure ccslog is not empty\n    local ccslog = ccslog\n    if not ccslog then\n        ccslog = function(...) end\n    end\n\n    local container = {}\n\n    function container.CreateCustomNode()\n        local rootNode = CreateSprite()\n        rootNode:addChild(CreateLabel())\n        return rootNode\n    end\n\n    function container.GetBaseType()\n    return 'Sprite'\n    end\n\n\n    function container.GetLabelText(root)\n    local child = root:getChildByName('labelName')\n    return child:getString()\n    end\n\n\n    function container.SetLabelText(root, value)\n    local child = root:getChildByName('labelName')\n    child:setString(value)\n    end\n\n    function container.GetLabelFont(root)\n    local child = root:getChildByName('labelName')\n    return child:getSystemFontSize()\n    end\n\n    function container.SetLabelFont(root, value)\n    local child = root:getChildByName('labelName')\n    child:setSystemFontSize(value)\n    end\n\n    return container\n\n\n\nAnalysis\n\n\nWe have discussed how to create TextSprite in basic level section. Now let's see two methods of Set/Get, which will be used in C#:\n\n\n\n\n\n\nGetLabelText/SetLabelText: to get/ set text contents on Sprite.\n\n\n\n\n\n\nGetLabelFont/SetLabelFont: to get/ set font size on Sprite.\n\n\n\n\n\n\nSome operations are implemented by Lua interface exported from Cocos 2d-x.\n\n\nIn Cocos Studio version 3.10, add a \nccslog\n function for print message to Cocos Studio output area\u3002The usage of \nccslog\n is the same as \nprint\n in lua, you can find a sample in sprite0.lua code in the sample project of Cocos Studio 3.10\u3002\n\n\nScripts of LuaCustomObject:\n\n\n[DisplayName(\"Sprite Extend\")]\n[ModelExtension(2)]\n[ControlGroup(ViewObjectCategory.CustomGroupKey, 2)]\n[EngineClassName(\"LuaCustom\")]\npublic class LuaCustomObject : SpriteObject\n{\n    public LuaCustomObject()\n        : base(GetScriptFileData())\n    {\n        if (System.IO.File.Exists(luaFile))\n            luaValueConverter = new LuaValueConverter(luaFile, this);\n        else\n            throw new System.IO.FileNotFoundException(luaFile + \" not found!\");\n    }\n\n    private LuaValueConverter luaValueConverter;\n\n    private static string luaFile = GetLuaFilePath();\n\n    private static ScriptFileData GetScriptFileData()\n    {\n        if (System.IO.File.Exists(luaFile))\n        {\n            CSCocosHelp.AddSearchPath(Path.GetDirectoryName(luaFile));\n            return new ScriptFileData(luaFile, ScriptType.Lua);\n        }\n\n        LogConfig.Output.Info(luaFile + \" not exist!\");\n        return null;\n    }\n\n    /// \nsummary\n\n    /// get lua file path according to current running assembly.\n    /// lua script file should in a folder \"LuaScript\" which is in current running assembly parent folder.\n    /// e.g. current running assembly is in \"Addins\", lua file path is \"Addins/LuaScript/sprite0.lua\"\n    ///\n    ///      Addins\n    ///      \u251c\u2500Addins.Sample.dll (current running assembly)\n    ///      \u2514\u2500LuaScript\n    ///          \u251c\u2500 sprite0.lua\n    ///\n    /// you can modify \"LuaScript\" or lua file name \"sprite0.lua\" to other name as you like.\n    /// NOTICE: only Addins/LuaScript folder will be copied to target folder. if lua script is in other\n    /// folder, user should write extra codes to copy it to target folder, e.g. use CustomSerializer to do the job.\n    /// \n/summary\n\n    /// \nreturns\nlua file path\n/returns\n\n    private static string GetLuaFilePath()\n    {\n        string assemblyFolder = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);\n        string luaScriptFolder = Path.Combine(assemblyFolder, \"LuaScript\");\n\n        // make sure luaFile exists, if not, please copy it from source folder to target.\n        // you can find the lua script file in \"../LuaScript/\" folder as \".\"(current folder) is the one\n        // who contains current file LuaCustomObject.cs.(here \".\" is \"Addins.Sample/Lua/ViewModel\")\n        //\n        //  \u251c\u2500LuaScript\n        //  \u2502   \u251c\u2500 sprite0.lua\n        //  \u2502\n        //  \u2514\u2500ViewModel\n        //      \u251c\u2500 LuaCustomObject.cs (current file)\n        //\n        string luaFilePath = Path.Combine(luaScriptFolder, \"sprite0.lua\");\n\n        return luaFilePath;\n    }\n\n    protected override string GetNamePrefix()\n    {\n        return \"LuaSprite_\";\n    }\n\n    [UndoProperty]\n    [DefaultValue(\"abc\")]\n    [DisplayName(\"Label Text\")]\n    [Category(\"Group_Feature\")]\n    [Browsable(true)]\n    [PropertyOrder(0)]\n    public string LabelText\n    {\n        get\n        {\n            return luaValueConverter.GetStringValue(\"GetLabelText\");\n        }\n        set\n        {\n            luaValueConverter.SetStringValue(\"SetLabelText\", value);\n            this.RaisePropertyChanged(() =\n this.LabelText);\n        }\n    }\n\n    [UndoProperty]\n    [DisplayName(\"Label Font\")]\n    [Category(\"Group_Feature\")]\n    [Description(\"Int value description\")]\n    [PropertyOrder(1)]\n    [Browsable(true)]\n    public int LabelFont\n    {\n        get\n        {\n            return luaValueConverter.GetIntValue(\"GetLabelFont\");\n        }\n        set\n        {\n            luaValueConverter.SetIntValue(\"SetLabelFont\", value);\n            this.RaisePropertyChanged(() =\n this.LabelFont);\n        }\n    }\n\n    #region methods for clone\n\n    // set value to the object, used in clone.\n    protected override void SetValue(object cObject)\n    {\n        base.SetValue(cObject);\n\n        LuaCustomObject nObject = cObject as LuaCustomObject;\n        if (nObject == null)\n            return;\n        nObject.LabelText = this.LabelText;\n        nObject.LabelFont = this.LabelFont;\n    }\n\n    #endregion methods for clone\n}\n\n\n\nAnalysis\n\n\nSince this custom widget is Sprite, it inherits from SpriteObject.\n\n\nDisplayName Property: widget's name is displayed in Objects panel, while here \"Sprite Extend\" is displayed.\n\n\nModelExtension Property: export ViewModel of the custom widget, with Type as its parameter. The custom widget will show on Custom Widget panel with name \"Sprite Extend\".\n\n\n\n\nIf the extended custom widget is a 3D widget, a 3D parameter should be added in ModelExtension.\n\n\n[ModelExtension(2, EnumModelType.ThreeDimensional)]\n\n\n\nCategory Properties: \nControl_Custom\n means that to show the widget on Custom Widgets panel.\n\n\nEngineClassName: a widget name, which will show as Type on Properties panel. Here widgets will show their type the same as what they are in Cocos 2d-x.\n\n\n\n\nLabelText and LabelFont have been added to extended properties, and they are displayed on Properties panel as following:\n\n\n\n\nIn Cocos Studio, each ViewModel has a DataModel that contains all the data information. For example, DataModel will be serialized and saved to .csd files.\n\n\nData Model\n\n\nScripts of LuaCustomObjectData:\n\n\n[DataModelExtension(typeof(LuaCustomObject))]\npublic class LuaCustomObjectData : SpriteObjectData\n{\n    [ItemProperty]\n    [JsonProperty]\n    public string LabelText { get; set; }\n\n    [ItemProperty]\n    [JsonProperty]\n    public int LabelFont { get; set; }\n}\n\n\n\nAnalysis\n\n\nSince this custom widget is Sprite, it inherits from SpriteObjectData.\n\n\nAdd DataModelExtension property, with its value LuaCustomObject.\n\n\nNote\n DataModel and ViewModel should have same name.\n\n\nNow let's see how to realize the interaction between expanded properties and Lua codes of ViewModel. C# codes are listed below:\n\n\nData Interaction\n\n\n[UndoPropertyAttribute]\n[DefaultValue(\"abc\")]\n[DisplayName(\"Label Text\")]\n[Category(\"Group_Feature\")]\n[Browsable(true)]\n[PropertyOrder(0)]\npublic string LabelText\n{\n    get\n    {\n        return luaValueConverter.GetStringValue(\"GetLabelText\");\n    }\n    set\n    {\n        luaValueConverter.SetStringValue(\"SetLabelText\", value);\n        this.RaisePropertyChanged(() =\n this.LabelText);\n    }\n}\n\n[UndoPropertyAttribute]\n[DisplayName(\"Label Font\")]\n[Category(\"Group_Feature\")]\n[Description(\"Int value description\")]\n[PropertyOrder(1)]\n[Browsable(true)]\npublic int LabelFont\n{\n    get\n    {\n        return luaValueConverter.GetIntValue(\"GetLabelFont\");\n    }\n    set\n    {\n        luaValueConverter.SetIntValue(\"SetLabelFont\", value);\n        this.RaisePropertyChanged(() =\n this.LabelFont);\n    }\n}\n\n\n\nAnalysis\n\n\nThe \nluaValueConverter.GetStringValue\n is a string value obtained from Lua codes. The parameter \u201cGetLabelFont\u201d means to get the texts on Sprite. Pay attention to the correspondent relationship between method and Lua codes, which is similar to the interaction among other data.\n\n\nSet\n in properties will call \nthis.RaisePropertyChanged\n at last, to notify the properties' values have been changed and to refresh Properties panel.\n\n\nCopy \nAddins.Sample.dll\n to Addins directory of Cocos Studio. Follow the rules for Cocos Studio's Addins, we need to add the following features to the project.\n\n\nSince the convention Cocos Studio plug- scheme used, the need to generate an assembly , add the following features:\n\n\nAdd AddinConfig.cs\n\n\nAdd AddinConfig.cs to project:\n\n\n // \"3.10\" is version of the this Addin. Addin should match its dependency with the same version.\n[assembly: Addin(\"Addins.Sample\", \"3.10\", Namespace = Option.AddinNamespace)]\n\n// \"3.10\" is the version of Addin dependency.\n[assembly: AddinDependency(\"CocoStudio.Core\", \"3.10\")]\n[assembly: AddinDependency(\"CocoStudio.Projects\", \"3.10\")]\n[assembly: AddinDependency(\"CocoStudio.Model\", \"3.10\")]\n[assembly: AddinDependency(\"CocoStudio.Model.Lua\", \"3.10\")]\n[assembly: AddinDependency(\"CocoStudio.Model3D\", \"3.10\")]\n[assembly: AddinDependency(\"CocoStudio.Model3D.Lua\", \"3.10\")]\n[assembly: AddinDependency(\"Addins.LuaExtend\", \"3.10\")]\n\n\n\nAnalysis\n\n\nAddin export and addin dependence settings.\n\n\nCustom widgets are created in Lua. In order to export the expanded properties to Lua, we need to transfer DataModel to Lua codes.\n\n\nTemplate to generate Lua codes\n\n\nWe can use T4 template to transfer Datamedel to Lua codes.\n\n\nT4 template\n\n\n#@ template debug=\"false\" inherits=\"LuaSpriteObject\" language=\"C#\" linePragmas=\"false\"#\n\n\n#@ assembly name=\"System.Core\" #\n\n\n#@ import namespace=\"System.Linq\" #\n\n\n#@ import namespace=\"System.Text\" #\n\n\n#@ import namespace=\"System.Collections.Generic\" #\n\n\n#@ import namespace=\"CocoStudio.Model.DataModel\" #\n\n\n#@ import namespace=\"Addins.Sample.Lua.DataModel\"#\n\n\n#@ import namespace=\"CocoStudio.Model.Lua.Templates\" #\n\n\n#@ import namespace=\"Mono.Addins\" #\n\n\n\n#+\npublic override bool CanSerialize(BaseObjectData objectData)\n{\n    bool isOK = typeof(LuaCustomObjectData) == objectData.GetType();\n    return isOK;\n}\n\npublic override void CreateObject(BaseObjectData objectData)\n{\n    LuaCustomObjectData data = objectData as LuaCustomObjectData;\n#\n\nlocal luaScript = require(\"\n#= CocoStudio.Basic.Option.luaScriptFolderName #\n/\n#= System.IO.Path.GetFileName(data.ScriptData.RelativeScriptFile) #\n\")\n\n#= GetNameDeclaration(objectData.Name) #\n = luaScript.CreateCustomNode()\n\n#+\n}\n\npublic override void InitializeObject(BaseObjectData objectData)\n{\n    LuaCustomObjectData data = objectData as LuaCustomObjectData;\n    base.InitializeObject(data);\n#\n\nluaScript.SetLabelText(\n#= data.Name #\n, \"\n#= data.LabelText #\n\")\nluaScript.SetLabelFont(\n#= data.Name #\n, \n#=data.LabelFont#\n)\nluaScript.GetLabelVisible(\n#= data.Name #\n, \n#=data.LabelVisible.ToString().ToLower()#\n)\nluaScript.SetMixedColor(\n#= data.Name #\n, \n#=data.MixedColor.ToLuaString()#\n)\n\n#+\n}\n#\n\n\n\n\nAnalysis\n\n\ninherits=\"LuaSpriteObject\": to set T4 template to inherit from LuaSpriteObject.\n\n\nCanSerialize\uff1ato make sure DataModel is LuaCustomObjectData.\n\n\nCreateObject: to create Lua codes for the custom widget.\n\n\nInitializeObject: to create property codes for the custom widget.\n\n\nAddChild: the custom widget is a Sprite, and adding child widget does not require special operation, therefore no need to rewrite AddChild method.\n\n\nEach DataModel will correspond to a Lua code template. When extending a widget, Lua code generation template class needs to inherit from widgets' code generation template class.\n\n\nT4 template uses Monodevelop addin mechanism. It needs a xml export file. When exporting Lua files, the addin mechanism will scan all LuaBaseObject class under \n/CocoStudio/Model/Lua/Templates\n. When generating Lua codes, Cocos Studio will call CanSerialize to find the corresponding code templates to generate classes. DataModel class will be taken as parameter.\n\n\nExport Template\n\n\nT4 template is associated with \nLuaObjects.addin.xml\n in ExtensionModel directory. In VS2013, \nLuaObjects.addin.xml\n's \"Build Action\" property is \"Embedded Resource\", and its \"Copy to Output Directory\" property is \"Do not Copy\".\n\n\nIn the extension point of \n/CocoStudio/Model/Lua/Templates\n, \nAddins.Sample.Lua.Lua.LuaCustomObject\n the full path generated by T4 template class will be added. Codes are as follows:\n\n\n?xml version=\"1.0\" encoding=\"utf-8\" ?\n\n\nExtensionModel\n\n\nExtension path = \"/CocoStudio/Model/Lua/Templates\"\n\n    \nClass class = \"Addins.Sample.Lua.Lua.LuaCustomObject\"/\n\n\n/Extension\n\n\n/ExtensionModel\n\n\n\n\nFAQ \n Notes\n\n\nAbout Addins\n\n\nCocos Studio build its addin system based on Mono.Addins. Add  AddinConfig.cs in C# project, and set Addin features, and use AddinDependency to set dependence. Put the DLL in \n%userprofile%\\Documents\\Cocos\\CocosStudio2\\Addins\n (Windows file path)\u3002\n\n\nFor more information about Mono.Addins, please see \nhttp://monoaddins.codeplex.com/\n.\n\n\nDataModel and ViewModel\n\n\nIn Cocos Studio, each widget is a ViewModel, and each ViewModel has a DataModel to manage its data.\n\n\nViewModel need to inherit from NodeObject or some subclass of NodeObject depending on the different widgets. Correspondingly, DataModel need to inherit from NodeObjectData and the subclass of NodeObjectData respectively. The interaction between DataModel and ViewModel is realized through DataModelExtension.\n\n\nAttribute names for DataModel and ViewModel  should be same.\n\n\nAbout Serialization\n\n\nSerialization in DataModel need to add ItemProperty and JsonProperty, which respectively correspond to XML Serialization and JSON Serialization.\n\n\nXML Serialization is handled by MonoDevelop. For details, please see \nhttp://www.monodevelop.com/developers/articles/using-the-data-serializer/\n.\n\n\nJSON Serialization is handled by \nNewtonsoft.Json Library\n. For more information about Newtonsoft, please see \nhttp://www.newtonsoft.com/json\n.\n\n\nData Interaction\n\n\nLuaValueConverter can be used to transfer data between C# and Lua.\n\n\nMethods provided by \nLuaValueConverter\n are listed below:\n\n\nMethod Name\n\nbool GetBoolValue(string funcName)\nvoid SetBoolValue(string funcName, bool val)\nint GetIntValue(string funcName)\nvoid SetIntValue(string funcName, int val)\nstring GetStringValue(string funcName)\nvoid SetStringValue(string funcName, string val)\ndouble GetDoubleValue(string funcName)\nvoid SetDoubleValue(string funcName, double val)\nfloat GetFloatValue(string funcName)\nvoid SetFloatValue(string funcName, float val)\nSystem.Drawing.Color GetColorValue(string funcName)\nvoid SetColorValue(string funcName, System.Drawing.Color val)\nvoid SetResourceDataValue(string funcName, ResourceData val)\n\n\n\nNotes\n\n\nThe above function signature is the method name in C#. Types are same as C# language types.\n\n\nWhen calling funName, it should be changed to the method name in Lua.\n\n\nOnly set but get can be performed on resources. You can call GetStringValue to return to resources' path and perform subsequent processing in C# layer.\n\n\nFor interaction between C# and Lua, Cocos Studio currently only supports several predefined types. If there is a need for complex types, try to combine methods and convert types. In subsequent development, we will gradually enrich supported types.\n\n\nT4 Template\n\n\nCreate T4 template for DataModel. Export DataModel to Lua files when exporting Cocos Studio projects.\n\n\nRules of T4 template:\n\n\nEach widget that needs to be exported to Lua codes corresponds to a T4 template.\n\n\nC# files created by T4 template need to inherit from corresponding expanded widget classes. Meanwhile, override the following methods:\n\n\nCanSerialier: to judge DataModel type.\n\n\nCreateObject: to load the appropriate Lua extension file based on the imported DataModel.  Lua code is generated for a new extension of the widget.\n\n\nInitializeObject: to export expanded properties to Lua codes.\n\n\nAddChild: If AddChild from NodeObject is not used to add childwidget, you will need to override this method. For example, when adding child widgets for PageView, you need to use AddPage.\n\n\nT4 template: \nhttps://msdn.microsoft.com/en-us/library/bb126445.aspx \n.\n\n\nAdding association in T4 template, to find this template when Cocos Studio exporting projects to Lua.\n\n\nRelated Class Names\n\n\nFollowing are some class names in ViewModel, DataModel and what generated by T4 model:\n\n\nViewModel Class          DataModel Class           T4 Model Class\n\nSpriteObject             SpriteObjectData          LuaSpriteObject\nParticleObject           ParticleObjectData        LuaParticleObject\nGameMapObject            GameMapObjectData         LuaGameMapObject\nSimpleAudioObject        SimpleAudioObjectData     LuaSimpleAudioObject\nNodeObject               NodeObjectData            LuaNodeObject\nButtonObject             ButtonObjectData          LuaButtonObject\nCheckBoxObject           CheckBoxObjectData        LuaCheckBoxObject\nImageViewObject          ImageViewObjectData       LuaImageViewObject\nTextBMFontObject         TextBMFontObjectData      LuaTextBMFontObject\nLoadingBarObject         LoadingBarObjecDatat      LuaLoadingBarObject\nSliderObject             SliderObjectData          LuaSliderObject\nTextObject               TextObjectData            LuaTextObject\nTextFieldObject          TextFieldObjectData       LuaTextFieldObject\nPanelObject              PanelObjectData           LuaPanelObject\nScrollViewObject         ScrollViewObjectData      LuaScrollViewObject\nListViewObject           ListViewObjectData        LuaListViewObject\nPageViewObject           PageViewObjectData        LuaPageViewObject\nNode3DObject             Node3DObjectData          LuaNode3DObject\nParticle3DObject         Particle3DObjectData      LuaParticle3DObject\nSprite3DObject           Sprite3DObjectData        LuaSprite3DObject\nUserCameraObject         UserCameraObjectData      LuaUserCameraObject\n\n\n\nNote\n Lua codes or resources are not in LuaScript directory. You need to handle the directory path issue manually. If Lua files are in LuaScript directory, they will be implemented as basic custom widgets without extended properties.\n\n\n Sprite Extend is a custom widget with extended properties, but sprite0 is the basic custom widget.\n\n\n\n\n\n\n\nIf you need to create a project, take this tutorial as an example. Target framework is .Net Framework4.5 and output type is Class Library.\n\n\n\n\nSamples\n\n\n\n\n\n\nSample Path\n\n\nBy default samples are installed to  \n%userprofile%\\Documents\\Cocos\\CocosStudio2\\Samples\\Addins\n on the computer. If the default installation folder is changed, samples are in the same folder with Documents. For example, if document is installed to \nD:\\CocosDocuments\n, samples are in \nD:\\CocosDocuments\\Cocos\\CocosStudio2\\Samples\\Addins\n. On Mac, samples are installed to \n/Library/Application Support/Cocos/CocosStudio2/Samples/Addins\n.\n\n\n\n\n\n\nCompiling Samples\n\n\nSample is a solution of Visual Studio 2013. You can directly compile Addins.sln on Windows. Mono library and GTK# are essential. Please install them on your computer.\n\n\nOn Mac, you need to copy samples to a directory which users have permission to compile. On Mac, you can choose Xamarin Studio to compile. MonoFramework is necessary.\n\n\n\n\n\n\nCopying DLL\n\n\nAfter successful compile, you will get \nAddins.Sample.dll\n. Copy it to Addins directory.\n\n\nBy default samples are installed to  \n%userprofile%\\Documents\\Cocos\\CocosStudio2\\Addins\n on the computer. If the default installation folder is changed, samples are in the same folder with Documents. For example, if document is installed to \nD:\\CocosDocuments\n, samples are in \nD:\\CocosDocuments\\Cocos\\CocosStudio2\\Addins\n. On Mac, samples are installed to \n/Library/Application Support/Cocos/CocosStudio2/Addins\n.\n\n\n\n\n\n\nIf there is any update on Samples, please check the latest version for reference.  For more information about Samples'\n\n\n\n\nFor changes, see ChangeLog.txt in Lua folder under Samples directory.\n\n\n\n\nOther Important Information\n\n\n\n\n\n\nThis document applies to Samples of Cocos Studio v2.2.5+.\n\n\n\n\n\n\nNames of custom widgets should be given legal Lua variable. Otherwise, the published Lua file cannot be implemented properly. You can enable naming convention in Cocos Studio's configurations. If you give a variable an illegal name, there will be a notification \"XX is not a valid Lua variable name\" in the output section.\n\n\n\n\n\n\nIn the subsequent development of Cocos Studio, we will extend more interfaces and classes, and provide document for reference.\n\n\n\n\n\n\nNote\n The contents of the document are under continuous update based on users' feedback. Please check the latest version for reference. If you have any suggestions or comments on the extensions of Cocos Studio, please let us know. Thanks for your interest and support for Cocos Studio, and for helping us make a better product.", 
            "title": "_Widgets Extension"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/Extend/WidgetExtend/en/index.html#widgets-extension", 
            "text": "", 
            "title": "Widgets Extension"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/Extend/WidgetExtend/en/index.html#overview", 
            "text": "This section introduces two ways to create widgets:    (basic level) Create widgets for Cocos Studio in Lua;    (advanced level) Create widgets for Cocos Studio in C# + Lua.", 
            "title": "Overview"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/Extend/WidgetExtend/en/index.html#about-readers", 
            "text": "This section assumes the reader has the following knowledge:    Have good knowledge of Cocos Studio.    Be familiar with Lua scripts.    Proficiency in Lua interface exported from Cocos 2d-x.    Have basic knowledge of C# (high requirement necessary for advanced articles).", 
            "title": "About Readers"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/Extend/WidgetExtend/en/index.html#background", 
            "text": "To understand the contents of this document, you need to understand the following concepts:    Lua    Cocos 2d-x Lua Binding.    Mono.Addins    T4 templates", 
            "title": "Background"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/Extend/WidgetExtend/en/index.html#directory-path", 
            "text": "The directory paths which used in this document are listed below for easy reference. All the paths are the default path of Cocos Studio on Window.    Addins Path  By default samples are installed to   %userprofile%\\Documents\\Cocos\\CocosStudio2\\Addins  on the computer. If the default installation folder is changed, samples are in the same folder with Documents. For example, if document is installed to  D:\\CocosDocuments , samples are in  D:\\CocosDocuments\\Cocos\\CocosStudio2\\Addins . On Mac, samples are installed to  /Library/Application Support/Cocos/CocosStudio2/Addins .    Sample Path  By default samples are installed to   %userprofile%\\Documents\\Cocos\\CocosStudio2\\Samples\\Addins  on the computer. If the default installation folder is changed, samples are in the same folder with Documents. For example, if document is installed to  D:\\CocosDocuments , samples are in   D:\\CocosDocuments\\Cocos\\CocosStudio2\\Samples\\Addins . On Mac, samples are installed to  /Library/Application Support/Cocos/CocosStudio2/Samples/Addins .", 
            "title": "Directory Path"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/Extend/WidgetExtend/en/index.html#custom-widgets", 
            "text": "Currently there are two ways to create custom widgets for Cocos Studio. The following will explore how they are used to create custom widgets.    Only Lua codes, it is a fundamental method to create custom widgets. This method can be applied to edit existing widgets in Cocos Studio.    C# and Lua, it offers more possibilities to create custom widgets.    If there are custom widgets created with Lua, these Lua files are necessary when loading scenes. Lua data format is added in Cocos Studio for developers to easily create scenes in Lua.   You need to select Lua File (Beta) when publishing projects with Lua custom widgets. Otherwise, custom widgets will not show. For example, if a project is published as  .csb  file, its Lua widget is not usable. If other data format is required, see  Customizing Export Data Formats .", 
            "title": "Custom Widgets"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/Extend/WidgetExtend/en/index.html#1-basic-level-lua", 
            "text": "When Cocos Studio starts, it scans the LuaScript directory under plugin directory. Lua files will be recognized as custom widgets edited in Lua. Custom widgets will be displayed in Objects panel with the same name as Lua files' name.  To modify, expand or set default values to a widget, you can use Lua scripts to accomplish this acquirements. For example, to set the default text font.    Create Lua scripts for custom widgets.    Put the codes in the LuaScript folder under plugin directory.    Following is a sample: A custom Sprite widget with text. The sample below is  abc.lua  in LuaScript directory.", 
            "title": "1 Basic Level (Lua)"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/Extend/WidgetExtend/en/index.html#sample", 
            "text": "TextSprite :  to display some texts on top of the Sprite.  Following are the codes of  abc.lua .  local container = {}\n\nfunction container.CreateCustomNode()\n    local rootNode = cc.Sprite:create('temp.png')\n    local label = cc.Label:create()\n    label:setString('abc Label From Lua')\n    label:setSystemFontSize(24)\n    label:setPosition(140, 50)\n    label:setName('labelName')\n    label:retain()\n\nrootNode:addChild(label)\nreturn rootNode\nend\n\nfunction container.GetBaseType()\nreturn 'Sprite'\nend\n\nreturn container  Analysis :  The example above is a complete Lua template. Loading the template will return a Lua Table, which is the container table at the end of the above codes.  The method  GetBaseType  is  used to return the extended widget type. In this case, \"Sprite\" is returned, which means the extended widget is \"sprite\".  The method  CreateCustomNode  is used to return a node, which is an extended widget in this example.  Supposed the file  abc.lua  has been copied into LuaScript directory under Plugin directory, and meanwhile  temp.png  is in that directory.  Start Cocos Studio, and then you will see the custom widget, with the name \"abc\", in the Objects panel.   The widget's icon is same as Sprite, for this custom widget is extended based on Sprite.  Drag and drop \"abc\" to rendering section, you can see the following (background picture is temp.png).   Selecting it in the rendering section, we can see that its type is Sprite.", 
            "title": "Sample"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/Extend/WidgetExtend/en/index.html#faq-notes", 
            "text": "What to do if custom widgets do not display on Panel?  Solution: The codes and a picture named temp.png should be in the LuaScript folder under plugin directory. Otherwise, this Lua file cannot be loaded when Cocos Studio starts.  Resources used in Lua scripts should also be put in LuaScript directory, and be loaded in relative path. When publish a project, LuaScript directory will be copied to publish directory. LuaScript directory is just copied once, if there is a directory with the same name in publish directory, LuaScript directory will not be copied.  A Lua file is a complete Lua template. Loading the template will return a Lua Table  The method  CreateCustomNode  has to be used to return a node.  \"Lua Table\" must include a method  GetBaseType , which is used to return a widget's node. Widgets in Cocos Studio and their GetBaseType are listed below:    \u63a7\u4ef6\u540d                                GetBaseType\u8fd4\u56de\n Sprite                              Sprite\n ParticleSystemQuad                  Particle\n TMXTiledMap                         GameMap\n ComAudio                            SimpleAudio\n Node                                Node\n Button                              Button\n CheckBox                            CheckBox\n ImageView                           ImageView\n TextBMFont                          TextBMFont\n LoadingBar                          LoadingBar\n Slider                              Slider\n Text                                Text\n TextField                           TextField\n ScrollView                          ScrollView\n ListView                            ListView\n PageView                            PageView\n Particle3D                          Particle3D\n Sprite3D                            Sprite3D\n UserCamera                          UserCamera    How to call third party's Lua codes library from custom widget's Lua codes library?  Solution: Currently Lua runtime of Cocos Studio only supports interfaces exported from Cocos 2d-x. If other interfaces need to be loaded, please load it in Lua codes. For example, if you need lua interface provided by Quick-cocos2d-x, load the  required library in the codes.    A custom widget should be defined by one Lua file. A Lua file should define only one custom widget. Cocos Studio will load all the Lua files in LuaScript directory, and each Lua file is represented by a widget's icon in Objects' panel. Name of the icon is same with files' names.    There is a project having Lua custom widgets. If Lua scripts have been modified, it will be opened with new scripts. If there is any mistake during the loading process, the corresponding widget will not be displayed.    Best Practice: create required widgets in Cocos Studio, and then publish the project as Lua file.    Above is the introduction of creating custom widgets in Lua. However, you can only create a simple custom widget in Lua.", 
            "title": "FAQ &amp; Notes"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/Extend/WidgetExtend/en/index.html#2-advanced-level-c-lua", 
            "text": "To modify widgets' properties, you need to write codes in C#.  Cocos Studio build its addin system based on Mono.Addins, which is helpful when we want to expand properties.  Export the expanded widget to Lua file (generated by adding a template to generate Lua codes). A concept diagram about this process is listed below:   Note  Lua Objects are the Lua scripts of custom widgets. Lua Codes are exported from Data Model.  Generally speaking, following are steps to implement this operation:    Create scripts for custom widgets.    Put the scripts created in previous step in LuaScript folder under plugin directory.    Configure AddinConfig.cs.    Add ViewModel and DataModels.    Add a template to generate Lua codes.    Here is an example:  There is a TextSprite widget, when selected, you can modify the contents and font size of the text.  Find Addins.sln in Samples folder. Open Addins.sln in Visual Studio 2013.  The Samples and Analysis below are based on this example.", 
            "title": "2 Advanced Level (C# &amp; Lua)"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/Extend/WidgetExtend/en/index.html#samples", 
            "text": "Add a method to deal with text contents and font size in Lua scripts. In LuaScript directory, scripts of sprite0.lua are listed below:  --[[\n   ]]\n\n\n    local function CreateSprite()\n        return cc.Sprite:create('temp.png')\n    end\n\n    local function CreateLabel()\n        local label = cc.Label:create()\n        label:setString('sprite0 Label from Lua')\n        label:setSystemFontSize(24)\n        label:setPosition(140, 50)\n        label:setName('labelName')\n        label:retain()\n        return label\n    end\n\n    -- make sure ccslog is not empty\n    local ccslog = ccslog\n    if not ccslog then\n        ccslog = function(...) end\n    end\n\n    local container = {}\n\n    function container.CreateCustomNode()\n        local rootNode = CreateSprite()\n        rootNode:addChild(CreateLabel())\n        return rootNode\n    end\n\n    function container.GetBaseType()\n    return 'Sprite'\n    end\n\n\n    function container.GetLabelText(root)\n    local child = root:getChildByName('labelName')\n    return child:getString()\n    end\n\n\n    function container.SetLabelText(root, value)\n    local child = root:getChildByName('labelName')\n    child:setString(value)\n    end\n\n    function container.GetLabelFont(root)\n    local child = root:getChildByName('labelName')\n    return child:getSystemFontSize()\n    end\n\n    function container.SetLabelFont(root, value)\n    local child = root:getChildByName('labelName')\n    child:setSystemFontSize(value)\n    end\n\n    return container  Analysis  We have discussed how to create TextSprite in basic level section. Now let's see two methods of Set/Get, which will be used in C#:    GetLabelText/SetLabelText: to get/ set text contents on Sprite.    GetLabelFont/SetLabelFont: to get/ set font size on Sprite.    Some operations are implemented by Lua interface exported from Cocos 2d-x.  In Cocos Studio version 3.10, add a  ccslog  function for print message to Cocos Studio output area\u3002The usage of  ccslog  is the same as  print  in lua, you can find a sample in sprite0.lua code in the sample project of Cocos Studio 3.10\u3002  Scripts of LuaCustomObject:  [DisplayName(\"Sprite Extend\")]\n[ModelExtension(2)]\n[ControlGroup(ViewObjectCategory.CustomGroupKey, 2)]\n[EngineClassName(\"LuaCustom\")]\npublic class LuaCustomObject : SpriteObject\n{\n    public LuaCustomObject()\n        : base(GetScriptFileData())\n    {\n        if (System.IO.File.Exists(luaFile))\n            luaValueConverter = new LuaValueConverter(luaFile, this);\n        else\n            throw new System.IO.FileNotFoundException(luaFile + \" not found!\");\n    }\n\n    private LuaValueConverter luaValueConverter;\n\n    private static string luaFile = GetLuaFilePath();\n\n    private static ScriptFileData GetScriptFileData()\n    {\n        if (System.IO.File.Exists(luaFile))\n        {\n            CSCocosHelp.AddSearchPath(Path.GetDirectoryName(luaFile));\n            return new ScriptFileData(luaFile, ScriptType.Lua);\n        }\n\n        LogConfig.Output.Info(luaFile + \" not exist!\");\n        return null;\n    }\n\n    ///  summary \n    /// get lua file path according to current running assembly.\n    /// lua script file should in a folder \"LuaScript\" which is in current running assembly parent folder.\n    /// e.g. current running assembly is in \"Addins\", lua file path is \"Addins/LuaScript/sprite0.lua\"\n    ///\n    ///      Addins\n    ///      \u251c\u2500Addins.Sample.dll (current running assembly)\n    ///      \u2514\u2500LuaScript\n    ///          \u251c\u2500 sprite0.lua\n    ///\n    /// you can modify \"LuaScript\" or lua file name \"sprite0.lua\" to other name as you like.\n    /// NOTICE: only Addins/LuaScript folder will be copied to target folder. if lua script is in other\n    /// folder, user should write extra codes to copy it to target folder, e.g. use CustomSerializer to do the job.\n    ///  /summary \n    ///  returns lua file path /returns \n    private static string GetLuaFilePath()\n    {\n        string assemblyFolder = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);\n        string luaScriptFolder = Path.Combine(assemblyFolder, \"LuaScript\");\n\n        // make sure luaFile exists, if not, please copy it from source folder to target.\n        // you can find the lua script file in \"../LuaScript/\" folder as \".\"(current folder) is the one\n        // who contains current file LuaCustomObject.cs.(here \".\" is \"Addins.Sample/Lua/ViewModel\")\n        //\n        //  \u251c\u2500LuaScript\n        //  \u2502   \u251c\u2500 sprite0.lua\n        //  \u2502\n        //  \u2514\u2500ViewModel\n        //      \u251c\u2500 LuaCustomObject.cs (current file)\n        //\n        string luaFilePath = Path.Combine(luaScriptFolder, \"sprite0.lua\");\n\n        return luaFilePath;\n    }\n\n    protected override string GetNamePrefix()\n    {\n        return \"LuaSprite_\";\n    }\n\n    [UndoProperty]\n    [DefaultValue(\"abc\")]\n    [DisplayName(\"Label Text\")]\n    [Category(\"Group_Feature\")]\n    [Browsable(true)]\n    [PropertyOrder(0)]\n    public string LabelText\n    {\n        get\n        {\n            return luaValueConverter.GetStringValue(\"GetLabelText\");\n        }\n        set\n        {\n            luaValueConverter.SetStringValue(\"SetLabelText\", value);\n            this.RaisePropertyChanged(() =  this.LabelText);\n        }\n    }\n\n    [UndoProperty]\n    [DisplayName(\"Label Font\")]\n    [Category(\"Group_Feature\")]\n    [Description(\"Int value description\")]\n    [PropertyOrder(1)]\n    [Browsable(true)]\n    public int LabelFont\n    {\n        get\n        {\n            return luaValueConverter.GetIntValue(\"GetLabelFont\");\n        }\n        set\n        {\n            luaValueConverter.SetIntValue(\"SetLabelFont\", value);\n            this.RaisePropertyChanged(() =  this.LabelFont);\n        }\n    }\n\n    #region methods for clone\n\n    // set value to the object, used in clone.\n    protected override void SetValue(object cObject)\n    {\n        base.SetValue(cObject);\n\n        LuaCustomObject nObject = cObject as LuaCustomObject;\n        if (nObject == null)\n            return;\n        nObject.LabelText = this.LabelText;\n        nObject.LabelFont = this.LabelFont;\n    }\n\n    #endregion methods for clone\n}  Analysis  Since this custom widget is Sprite, it inherits from SpriteObject.  DisplayName Property: widget's name is displayed in Objects panel, while here \"Sprite Extend\" is displayed.  ModelExtension Property: export ViewModel of the custom widget, with Type as its parameter. The custom widget will show on Custom Widget panel with name \"Sprite Extend\".   If the extended custom widget is a 3D widget, a 3D parameter should be added in ModelExtension.  [ModelExtension(2, EnumModelType.ThreeDimensional)]  Category Properties:  Control_Custom  means that to show the widget on Custom Widgets panel.  EngineClassName: a widget name, which will show as Type on Properties panel. Here widgets will show their type the same as what they are in Cocos 2d-x.   LabelText and LabelFont have been added to extended properties, and they are displayed on Properties panel as following:   In Cocos Studio, each ViewModel has a DataModel that contains all the data information. For example, DataModel will be serialized and saved to .csd files.  Data Model  Scripts of LuaCustomObjectData:  [DataModelExtension(typeof(LuaCustomObject))]\npublic class LuaCustomObjectData : SpriteObjectData\n{\n    [ItemProperty]\n    [JsonProperty]\n    public string LabelText { get; set; }\n\n    [ItemProperty]\n    [JsonProperty]\n    public int LabelFont { get; set; }\n}  Analysis  Since this custom widget is Sprite, it inherits from SpriteObjectData.  Add DataModelExtension property, with its value LuaCustomObject.  Note  DataModel and ViewModel should have same name.  Now let's see how to realize the interaction between expanded properties and Lua codes of ViewModel. C# codes are listed below:  Data Interaction  [UndoPropertyAttribute]\n[DefaultValue(\"abc\")]\n[DisplayName(\"Label Text\")]\n[Category(\"Group_Feature\")]\n[Browsable(true)]\n[PropertyOrder(0)]\npublic string LabelText\n{\n    get\n    {\n        return luaValueConverter.GetStringValue(\"GetLabelText\");\n    }\n    set\n    {\n        luaValueConverter.SetStringValue(\"SetLabelText\", value);\n        this.RaisePropertyChanged(() =  this.LabelText);\n    }\n}\n\n[UndoPropertyAttribute]\n[DisplayName(\"Label Font\")]\n[Category(\"Group_Feature\")]\n[Description(\"Int value description\")]\n[PropertyOrder(1)]\n[Browsable(true)]\npublic int LabelFont\n{\n    get\n    {\n        return luaValueConverter.GetIntValue(\"GetLabelFont\");\n    }\n    set\n    {\n        luaValueConverter.SetIntValue(\"SetLabelFont\", value);\n        this.RaisePropertyChanged(() =  this.LabelFont);\n    }\n}  Analysis  The  luaValueConverter.GetStringValue  is a string value obtained from Lua codes. The parameter \u201cGetLabelFont\u201d means to get the texts on Sprite. Pay attention to the correspondent relationship between method and Lua codes, which is similar to the interaction among other data.  Set  in properties will call  this.RaisePropertyChanged  at last, to notify the properties' values have been changed and to refresh Properties panel.  Copy  Addins.Sample.dll  to Addins directory of Cocos Studio. Follow the rules for Cocos Studio's Addins, we need to add the following features to the project.  Since the convention Cocos Studio plug- scheme used, the need to generate an assembly , add the following features:  Add AddinConfig.cs  Add AddinConfig.cs to project:   // \"3.10\" is version of the this Addin. Addin should match its dependency with the same version.\n[assembly: Addin(\"Addins.Sample\", \"3.10\", Namespace = Option.AddinNamespace)]\n\n// \"3.10\" is the version of Addin dependency.\n[assembly: AddinDependency(\"CocoStudio.Core\", \"3.10\")]\n[assembly: AddinDependency(\"CocoStudio.Projects\", \"3.10\")]\n[assembly: AddinDependency(\"CocoStudio.Model\", \"3.10\")]\n[assembly: AddinDependency(\"CocoStudio.Model.Lua\", \"3.10\")]\n[assembly: AddinDependency(\"CocoStudio.Model3D\", \"3.10\")]\n[assembly: AddinDependency(\"CocoStudio.Model3D.Lua\", \"3.10\")]\n[assembly: AddinDependency(\"Addins.LuaExtend\", \"3.10\")]  Analysis  Addin export and addin dependence settings.  Custom widgets are created in Lua. In order to export the expanded properties to Lua, we need to transfer DataModel to Lua codes.  Template to generate Lua codes  We can use T4 template to transfer Datamedel to Lua codes.  T4 template  #@ template debug=\"false\" inherits=\"LuaSpriteObject\" language=\"C#\" linePragmas=\"false\"#  #@ assembly name=\"System.Core\" #  #@ import namespace=\"System.Linq\" #  #@ import namespace=\"System.Text\" #  #@ import namespace=\"System.Collections.Generic\" #  #@ import namespace=\"CocoStudio.Model.DataModel\" #  #@ import namespace=\"Addins.Sample.Lua.DataModel\"#  #@ import namespace=\"CocoStudio.Model.Lua.Templates\" #  #@ import namespace=\"Mono.Addins\" #  #+\npublic override bool CanSerialize(BaseObjectData objectData)\n{\n    bool isOK = typeof(LuaCustomObjectData) == objectData.GetType();\n    return isOK;\n}\n\npublic override void CreateObject(BaseObjectData objectData)\n{\n    LuaCustomObjectData data = objectData as LuaCustomObjectData;\n# \nlocal luaScript = require(\" #= CocoStudio.Basic.Option.luaScriptFolderName # / #= System.IO.Path.GetFileName(data.ScriptData.RelativeScriptFile) # \") #= GetNameDeclaration(objectData.Name) #  = luaScript.CreateCustomNode() #+\n}\n\npublic override void InitializeObject(BaseObjectData objectData)\n{\n    LuaCustomObjectData data = objectData as LuaCustomObjectData;\n    base.InitializeObject(data);\n# \nluaScript.SetLabelText( #= data.Name # , \" #= data.LabelText # \")\nluaScript.SetLabelFont( #= data.Name # ,  #=data.LabelFont# )\nluaScript.GetLabelVisible( #= data.Name # ,  #=data.LabelVisible.ToString().ToLower()# )\nluaScript.SetMixedColor( #= data.Name # ,  #=data.MixedColor.ToLuaString()# ) #+\n}\n#   Analysis  inherits=\"LuaSpriteObject\": to set T4 template to inherit from LuaSpriteObject.  CanSerialize\uff1ato make sure DataModel is LuaCustomObjectData.  CreateObject: to create Lua codes for the custom widget.  InitializeObject: to create property codes for the custom widget.  AddChild: the custom widget is a Sprite, and adding child widget does not require special operation, therefore no need to rewrite AddChild method.  Each DataModel will correspond to a Lua code template. When extending a widget, Lua code generation template class needs to inherit from widgets' code generation template class.  T4 template uses Monodevelop addin mechanism. It needs a xml export file. When exporting Lua files, the addin mechanism will scan all LuaBaseObject class under  /CocoStudio/Model/Lua/Templates . When generating Lua codes, Cocos Studio will call CanSerialize to find the corresponding code templates to generate classes. DataModel class will be taken as parameter.  Export Template  T4 template is associated with  LuaObjects.addin.xml  in ExtensionModel directory. In VS2013,  LuaObjects.addin.xml 's \"Build Action\" property is \"Embedded Resource\", and its \"Copy to Output Directory\" property is \"Do not Copy\".  In the extension point of  /CocoStudio/Model/Lua/Templates ,  Addins.Sample.Lua.Lua.LuaCustomObject  the full path generated by T4 template class will be added. Codes are as follows:  ?xml version=\"1.0\" encoding=\"utf-8\" ?  ExtensionModel  Extension path = \"/CocoStudio/Model/Lua/Templates\" \n     Class class = \"Addins.Sample.Lua.Lua.LuaCustomObject\"/  /Extension  /ExtensionModel", 
            "title": "Samples"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/Extend/WidgetExtend/en/index.html#faq-notes_1", 
            "text": "About Addins  Cocos Studio build its addin system based on Mono.Addins. Add  AddinConfig.cs in C# project, and set Addin features, and use AddinDependency to set dependence. Put the DLL in  %userprofile%\\Documents\\Cocos\\CocosStudio2\\Addins  (Windows file path)\u3002  For more information about Mono.Addins, please see  http://monoaddins.codeplex.com/ .  DataModel and ViewModel  In Cocos Studio, each widget is a ViewModel, and each ViewModel has a DataModel to manage its data.  ViewModel need to inherit from NodeObject or some subclass of NodeObject depending on the different widgets. Correspondingly, DataModel need to inherit from NodeObjectData and the subclass of NodeObjectData respectively. The interaction between DataModel and ViewModel is realized through DataModelExtension.  Attribute names for DataModel and ViewModel  should be same.  About Serialization  Serialization in DataModel need to add ItemProperty and JsonProperty, which respectively correspond to XML Serialization and JSON Serialization.  XML Serialization is handled by MonoDevelop. For details, please see  http://www.monodevelop.com/developers/articles/using-the-data-serializer/ .  JSON Serialization is handled by  Newtonsoft.Json Library . For more information about Newtonsoft, please see  http://www.newtonsoft.com/json .  Data Interaction  LuaValueConverter can be used to transfer data between C# and Lua.  Methods provided by  LuaValueConverter  are listed below:  Method Name\n\nbool GetBoolValue(string funcName)\nvoid SetBoolValue(string funcName, bool val)\nint GetIntValue(string funcName)\nvoid SetIntValue(string funcName, int val)\nstring GetStringValue(string funcName)\nvoid SetStringValue(string funcName, string val)\ndouble GetDoubleValue(string funcName)\nvoid SetDoubleValue(string funcName, double val)\nfloat GetFloatValue(string funcName)\nvoid SetFloatValue(string funcName, float val)\nSystem.Drawing.Color GetColorValue(string funcName)\nvoid SetColorValue(string funcName, System.Drawing.Color val)\nvoid SetResourceDataValue(string funcName, ResourceData val)  Notes  The above function signature is the method name in C#. Types are same as C# language types.  When calling funName, it should be changed to the method name in Lua.  Only set but get can be performed on resources. You can call GetStringValue to return to resources' path and perform subsequent processing in C# layer.  For interaction between C# and Lua, Cocos Studio currently only supports several predefined types. If there is a need for complex types, try to combine methods and convert types. In subsequent development, we will gradually enrich supported types.  T4 Template  Create T4 template for DataModel. Export DataModel to Lua files when exporting Cocos Studio projects.  Rules of T4 template:  Each widget that needs to be exported to Lua codes corresponds to a T4 template.  C# files created by T4 template need to inherit from corresponding expanded widget classes. Meanwhile, override the following methods:  CanSerialier: to judge DataModel type.  CreateObject: to load the appropriate Lua extension file based on the imported DataModel.  Lua code is generated for a new extension of the widget.  InitializeObject: to export expanded properties to Lua codes.  AddChild: If AddChild from NodeObject is not used to add childwidget, you will need to override this method. For example, when adding child widgets for PageView, you need to use AddPage.  T4 template:  https://msdn.microsoft.com/en-us/library/bb126445.aspx  .  Adding association in T4 template, to find this template when Cocos Studio exporting projects to Lua.  Related Class Names  Following are some class names in ViewModel, DataModel and what generated by T4 model:  ViewModel Class          DataModel Class           T4 Model Class\n\nSpriteObject             SpriteObjectData          LuaSpriteObject\nParticleObject           ParticleObjectData        LuaParticleObject\nGameMapObject            GameMapObjectData         LuaGameMapObject\nSimpleAudioObject        SimpleAudioObjectData     LuaSimpleAudioObject\nNodeObject               NodeObjectData            LuaNodeObject\nButtonObject             ButtonObjectData          LuaButtonObject\nCheckBoxObject           CheckBoxObjectData        LuaCheckBoxObject\nImageViewObject          ImageViewObjectData       LuaImageViewObject\nTextBMFontObject         TextBMFontObjectData      LuaTextBMFontObject\nLoadingBarObject         LoadingBarObjecDatat      LuaLoadingBarObject\nSliderObject             SliderObjectData          LuaSliderObject\nTextObject               TextObjectData            LuaTextObject\nTextFieldObject          TextFieldObjectData       LuaTextFieldObject\nPanelObject              PanelObjectData           LuaPanelObject\nScrollViewObject         ScrollViewObjectData      LuaScrollViewObject\nListViewObject           ListViewObjectData        LuaListViewObject\nPageViewObject           PageViewObjectData        LuaPageViewObject\nNode3DObject             Node3DObjectData          LuaNode3DObject\nParticle3DObject         Particle3DObjectData      LuaParticle3DObject\nSprite3DObject           Sprite3DObjectData        LuaSprite3DObject\nUserCameraObject         UserCameraObjectData      LuaUserCameraObject  Note  Lua codes or resources are not in LuaScript directory. You need to handle the directory path issue manually. If Lua files are in LuaScript directory, they will be implemented as basic custom widgets without extended properties.   Sprite Extend is a custom widget with extended properties, but sprite0 is the basic custom widget.    If you need to create a project, take this tutorial as an example. Target framework is .Net Framework4.5 and output type is Class Library.", 
            "title": "FAQ &amp; Notes"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/Extend/WidgetExtend/en/index.html#samples_1", 
            "text": "Sample Path  By default samples are installed to   %userprofile%\\Documents\\Cocos\\CocosStudio2\\Samples\\Addins  on the computer. If the default installation folder is changed, samples are in the same folder with Documents. For example, if document is installed to  D:\\CocosDocuments , samples are in  D:\\CocosDocuments\\Cocos\\CocosStudio2\\Samples\\Addins . On Mac, samples are installed to  /Library/Application Support/Cocos/CocosStudio2/Samples/Addins .    Compiling Samples  Sample is a solution of Visual Studio 2013. You can directly compile Addins.sln on Windows. Mono library and GTK# are essential. Please install them on your computer.  On Mac, you need to copy samples to a directory which users have permission to compile. On Mac, you can choose Xamarin Studio to compile. MonoFramework is necessary.    Copying DLL  After successful compile, you will get  Addins.Sample.dll . Copy it to Addins directory.  By default samples are installed to   %userprofile%\\Documents\\Cocos\\CocosStudio2\\Addins  on the computer. If the default installation folder is changed, samples are in the same folder with Documents. For example, if document is installed to  D:\\CocosDocuments , samples are in  D:\\CocosDocuments\\Cocos\\CocosStudio2\\Addins . On Mac, samples are installed to  /Library/Application Support/Cocos/CocosStudio2/Addins .    If there is any update on Samples, please check the latest version for reference.  For more information about Samples'   For changes, see ChangeLog.txt in Lua folder under Samples directory.", 
            "title": "Samples"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/Extend/WidgetExtend/en/index.html#other-important-information", 
            "text": "This document applies to Samples of Cocos Studio v2.2.5+.    Names of custom widgets should be given legal Lua variable. Otherwise, the published Lua file cannot be implemented properly. You can enable naming convention in Cocos Studio's configurations. If you give a variable an illegal name, there will be a notification \"XX is not a valid Lua variable name\" in the output section.    In the subsequent development of Cocos Studio, we will extend more interfaces and classes, and provide document for reference.    Note  The contents of the document are under continuous update based on users' feedback. Please check the latest version for reference. If you have any suggestions or comments on the extensions of Cocos Studio, please let us know. Thanks for your interest and support for Cocos Studio, and for helping us make a better product.", 
            "title": "Other Important Information"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/Extend/ParamExtend/en/index.html", 
            "text": "Properties Extension\n\n\nNOTE:\n Some interfaces of property have been changed in v2.3.3.0. More details in \nInterface Changes\n\n\nWidget Types\n\n\nCocos Studio supports extensions of widgets and widgets\u2019 properties. The editor has some general settings of widgets' properties in default. It is also recommended to add custom properties to widgets (For more information, see Sample).\n\n\nA series of widget types is available in Cocos Studio.\n\n\n\n\nstring type\n\n\n\n\n\n\nFrame event is a string type with a text field, which has no text format restriction and can also be blank. For example:\n\n\nstring customString = string.Empty;\n[UndoPropertyAttribute]\n[DisplayName(\"\u5b57\u7b26\u4e32\")]\n[Category(\"Custom_Plug\")]\n[PropertyOrder(0)]\n[Browsable(true)]\npublic string CustomString\n{\n    get { return customString; }\n    set\n    {\n        if (customString != value)\n        {\n            customString = value;\n            this.RaisePropertyChanged(() =\n this.CustomString);\n        }\n    }\n}\n\n\n\n\n\nName is a string type with a text field, which has no text format restriction but cannot be blank. If it is blank, it will restore the previous value by default. Such text field can be applied by calling \nValidTextEditor\n. For example:\n\n\n[UndoPropertyAttribute]\n[DisplayName(\"ValidTextBox\")]\n[Editor(typeof(ValidTextEditor), typeof(ValidTextEditor))]\n[Category(\"Custom_Plug\")]\n[PropertyOrder(0)]\n[Browsable(true)]\npublic string ValidTextBoxString { get; set; }\n\n\n\n\n\nint type\n\n\n\n\nLogical Label is an \nint\n type with a text field only for numbers extending from -9999999 to 9999999, which can be set by \nSetMaxMin\n. For example:\n\n\nint customInt = 0;\n[UndoPropertyAttribute]\n[DisplayName(\"Integer\")]\n[Category(\"Custom_Plug\")]\n[PropertyOrder(1)]\n[Browsable(true)]\npublic int CustomInt\n{\n    get { return customInt; }\n    set\n    {\n        if (customInt != value)\n        {\n            customInt = value;\n            this.RaisePropertyChanged(() =\n this.CustomInt);\n        }\n    }\n}\n\n\n\n\n\nbool type\n\n\n\n\n\n\nVisible is a \nbool\n type with a check box, which can be checked or unchecked. For example\uff1a\n\n\nbool customBool = false;\n[UndoPropertyAttribute]\n[DisplayName(\"Bool\")]\n[Category(\"Custom_Extend\")]\n[PropertyOrder(4)]\n[Browsable(true)]\npublic bool CustomBool\n{\n    get { return customBool; }\n    set\n    {\n        if (customBool != value)\n        {\n            customBool = value;\n            this.RaisePropertyChanged(() =\n this.CustomBool);\n        }\n    }\n}\n\n\n\n\n\nenum type\n\n\n\n\n\n\nAlignment is an \nenmu\n type with a combox, in which various enmu items can be selected. For example:\n\n\npublic enum CocosEnum\n{\n    None,\n    Fir,\n    Sec,\n    Thi\n}\n\nCocosEnum customEnum = CocosEnum.None;\n\n[UndoPropertyAttribute]\n[DisplayName(\"Enum\")]\n[Category(\"Custom_Plug\")]\n[PropertyOrder(5)]\n[Browsable(true)]\npublic CocosEnum CustomEnum\n{\n    get { return customEnum; }\n    set\n    {\n        if (customEnum != value)\n        {\n            customEnum = value;\n            this.RaisePropertyChanged(() =\n this.CustomEnum);\n        }\n    }\n}\n\n\n\n\n\nColor type\n\n\n\n\n\n\nColor-blend is a Color type with a combined control, in which various color can be selected. For example:\n\n\nSystem.Drawing.Color customColor = System.Drawing.Color.White;\n[UndoPropertyAttribute]\n[Editor(typeof(ColorEditor), typeof(ColorEditor))]\n[DisplayName(\"Color\")]\n[Category(\"Custom_Extend\")]\n[PropertyOrder(6)]\n[Browsable(true)]\npublic System.Drawing.Color CustomColor\n{\n    get { return customColor; }\n    set\n    {\n        if (customColor != value)\n        {\n            customColor = value;\n            this.RaisePropertyChanged(() =\n this.CustomColor);\n        }\n    }\n}\n\n\n\n\n\nScaleValue type\n\n\n\n\n\n\nSkew is a \nScaleValue\n type with a combined control, in which the value of X and Y can be set separately. Minimum/ Maximum values and value range can be set in property. For example:\n\n\nScaleValue customScaleValue = new ScaleValue(1, 1);\n[UndoPropertyAttribute]\n[Editor(typeof(CustomEditor), typeof(CustomEditor))]\n[ValueRange(int.MinValue, int.MaxValue, 1)]\n[DisplayName(\"ScaleValue\")]\n[Category(\"Custom_Extend\")]\n[PropertyOrder(7)]\n[Browsable(true)]\npublic ScaleValue CustomScaleValue\n{\n    get { return customScaleValue; }\n    set\n    {\n        if (customScaleValue != value)\n        {\n            customScaleValue = value;\n            this.RaisePropertyChanged(() =\n this.CustomScaleValue);\n        }\n    }\n}\n\n\n\n\n\nPointF type\n\n\n\n\n\n\nThe anchor attribute is a \nPoinfF\n Type. Type refers to a combined control, in which the value of X and Y can be set separately. For example:\n\n\nPointF customPointF = new PointF(1, 1);\n[UndoPropertyAttribute]\n[Editor(typeof(PointFEditor), typeof(PointFEditor))]\n[ValueRange(int.MinValue, int.MaxValue, 1)]\n[DisplayName(\"ScaleValue\")]\n[Category(\"Custom_Extend\")]\n[PropertyOrder(7)]\n[Browsable(true)]\npublic PointF CustomPointF\n{\n    get { return customPointF; }\n    set\n    {\n        if (customPointF != value)\n        {\n            customPointF = value;\n            this.RaisePropertyChanged(() =\n this.CustomScaleValue);\n        }\n    }\n}\n\n\n\nSome properties are available in the sample file of \nCustomObject\n. After adding these properties, users need to add the corresponding properties in \nCustomObjectData\n class, so that property settings can be saved when exit the editor. Previously saved property settings will be read when a file is opened. For example:\n\n\n    [ItemProperty]\n    [JsonProperty]\n    public int CustomInt { get; set; }\n\n\n\nThe specific codes have been added to \nCustomObjectData\n.\n\n\nCreating a Custom Widget\n\n\n\n\n\n\nCustomEditor\n inherits \nBaseEditor\n base class, \nBaseEditor\n inherits \nIPropertyEditor\n interface.\n\n\nBaseEditor\n has realised \nIPropertyEditor\n, but when inherit from \nBaseEditor\n, you still need to override some method of the base class. The methods which must be override are:\n\n\nprotected abstract Gtk.Widget OnCreateWidget();\nprotected abstract void void OnSetControl();\n\n\n\nGtk.Widget OnCreateWidget() is called when initialize the editor. It returns the Gtk widget of the editor which will be shown in the PropertyGrid.\n\n\nvoid OnSetControl() is used to refresh the Gtk widgets when property changed.\n\n\nWhen the value of entry in CustomEditor changed, it will set the property value. This is done through  the member \nPropertyItem\n. You can get or set property value using \nPropertyItem\n.\n\n\nprivate void XEntryValueChangedHandler(object sender, EntryIntEventArgs e)\n{\n    using (GetLock())\n    {\n        for (int i = 0; i \n PropertyItem.Objects.Count; i++)\n        {\n            ScaleValue value = PropertyItem.Values[i] as ScaleValue;\n            value.ScaleX = e.Value;\n            PropertyItem.Values[i] = value;\n        }\n    }\n}\n\n\n\n\n\n\n\nInterface Changes\n\n\nSome interface of property have been changed in v2.3.3.0, including:\n\n\n1)\n The project \nCocoStudio.ToolKit\n is merged into \nModules.Communal.PropertyGrid\n. Please use \nModules.Communal.PropertyGrid\n namespace instead of \nCocoStudio.ToolKit\n namespace.\n\n\n2)\n \nITypeEditor\n is renamed to \nIPropertyEditor\n. Old methods in \nITypeEditor\n are obsoloted, pleased use new methods in \nIPropertyEditor\n instead.\n\n\n3)\n \nCatagoryAttribute\n is renamed to \nControlGroupAttribute\n, and is moved to project \nCocoStudio.Model\n.\n\n\n4)\n \nPropertyEditorTypeAttribte\n is deleted for it is no longer used in the new property grid frame.\n\n\nNote\n The contents of the document are under continuous update based on users' feedback. Please check the latest version for reference. If you have any suggestions or comments on the extensions of Cocos Studio, please let us know. Thanks for your interest and support for Cocos Studio, and for helping us make a better product.", 
            "title": "_Properties Extension"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/Extend/ParamExtend/en/index.html#properties-extension", 
            "text": "NOTE:  Some interfaces of property have been changed in v2.3.3.0. More details in  Interface Changes", 
            "title": "Properties Extension"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/Extend/ParamExtend/en/index.html#widget-types", 
            "text": "Cocos Studio supports extensions of widgets and widgets\u2019 properties. The editor has some general settings of widgets' properties in default. It is also recommended to add custom properties to widgets (For more information, see Sample).  A series of widget types is available in Cocos Studio.   string type    Frame event is a string type with a text field, which has no text format restriction and can also be blank. For example:  string customString = string.Empty;\n[UndoPropertyAttribute]\n[DisplayName(\"\u5b57\u7b26\u4e32\")]\n[Category(\"Custom_Plug\")]\n[PropertyOrder(0)]\n[Browsable(true)]\npublic string CustomString\n{\n    get { return customString; }\n    set\n    {\n        if (customString != value)\n        {\n            customString = value;\n            this.RaisePropertyChanged(() =  this.CustomString);\n        }\n    }\n}   Name is a string type with a text field, which has no text format restriction but cannot be blank. If it is blank, it will restore the previous value by default. Such text field can be applied by calling  ValidTextEditor . For example:  [UndoPropertyAttribute]\n[DisplayName(\"ValidTextBox\")]\n[Editor(typeof(ValidTextEditor), typeof(ValidTextEditor))]\n[Category(\"Custom_Plug\")]\n[PropertyOrder(0)]\n[Browsable(true)]\npublic string ValidTextBoxString { get; set; }   int type   Logical Label is an  int  type with a text field only for numbers extending from -9999999 to 9999999, which can be set by  SetMaxMin . For example:  int customInt = 0;\n[UndoPropertyAttribute]\n[DisplayName(\"Integer\")]\n[Category(\"Custom_Plug\")]\n[PropertyOrder(1)]\n[Browsable(true)]\npublic int CustomInt\n{\n    get { return customInt; }\n    set\n    {\n        if (customInt != value)\n        {\n            customInt = value;\n            this.RaisePropertyChanged(() =  this.CustomInt);\n        }\n    }\n}   bool type    Visible is a  bool  type with a check box, which can be checked or unchecked. For example\uff1a  bool customBool = false;\n[UndoPropertyAttribute]\n[DisplayName(\"Bool\")]\n[Category(\"Custom_Extend\")]\n[PropertyOrder(4)]\n[Browsable(true)]\npublic bool CustomBool\n{\n    get { return customBool; }\n    set\n    {\n        if (customBool != value)\n        {\n            customBool = value;\n            this.RaisePropertyChanged(() =  this.CustomBool);\n        }\n    }\n}   enum type    Alignment is an  enmu  type with a combox, in which various enmu items can be selected. For example:  public enum CocosEnum\n{\n    None,\n    Fir,\n    Sec,\n    Thi\n}\n\nCocosEnum customEnum = CocosEnum.None;\n\n[UndoPropertyAttribute]\n[DisplayName(\"Enum\")]\n[Category(\"Custom_Plug\")]\n[PropertyOrder(5)]\n[Browsable(true)]\npublic CocosEnum CustomEnum\n{\n    get { return customEnum; }\n    set\n    {\n        if (customEnum != value)\n        {\n            customEnum = value;\n            this.RaisePropertyChanged(() =  this.CustomEnum);\n        }\n    }\n}   Color type    Color-blend is a Color type with a combined control, in which various color can be selected. For example:  System.Drawing.Color customColor = System.Drawing.Color.White;\n[UndoPropertyAttribute]\n[Editor(typeof(ColorEditor), typeof(ColorEditor))]\n[DisplayName(\"Color\")]\n[Category(\"Custom_Extend\")]\n[PropertyOrder(6)]\n[Browsable(true)]\npublic System.Drawing.Color CustomColor\n{\n    get { return customColor; }\n    set\n    {\n        if (customColor != value)\n        {\n            customColor = value;\n            this.RaisePropertyChanged(() =  this.CustomColor);\n        }\n    }\n}   ScaleValue type    Skew is a  ScaleValue  type with a combined control, in which the value of X and Y can be set separately. Minimum/ Maximum values and value range can be set in property. For example:  ScaleValue customScaleValue = new ScaleValue(1, 1);\n[UndoPropertyAttribute]\n[Editor(typeof(CustomEditor), typeof(CustomEditor))]\n[ValueRange(int.MinValue, int.MaxValue, 1)]\n[DisplayName(\"ScaleValue\")]\n[Category(\"Custom_Extend\")]\n[PropertyOrder(7)]\n[Browsable(true)]\npublic ScaleValue CustomScaleValue\n{\n    get { return customScaleValue; }\n    set\n    {\n        if (customScaleValue != value)\n        {\n            customScaleValue = value;\n            this.RaisePropertyChanged(() =  this.CustomScaleValue);\n        }\n    }\n}   PointF type    The anchor attribute is a  PoinfF  Type. Type refers to a combined control, in which the value of X and Y can be set separately. For example:  PointF customPointF = new PointF(1, 1);\n[UndoPropertyAttribute]\n[Editor(typeof(PointFEditor), typeof(PointFEditor))]\n[ValueRange(int.MinValue, int.MaxValue, 1)]\n[DisplayName(\"ScaleValue\")]\n[Category(\"Custom_Extend\")]\n[PropertyOrder(7)]\n[Browsable(true)]\npublic PointF CustomPointF\n{\n    get { return customPointF; }\n    set\n    {\n        if (customPointF != value)\n        {\n            customPointF = value;\n            this.RaisePropertyChanged(() =  this.CustomScaleValue);\n        }\n    }\n}  Some properties are available in the sample file of  CustomObject . After adding these properties, users need to add the corresponding properties in  CustomObjectData  class, so that property settings can be saved when exit the editor. Previously saved property settings will be read when a file is opened. For example:      [ItemProperty]\n    [JsonProperty]\n    public int CustomInt { get; set; }  The specific codes have been added to  CustomObjectData .", 
            "title": "Widget Types"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/Extend/ParamExtend/en/index.html#creating-a-custom-widget", 
            "text": "CustomEditor  inherits  BaseEditor  base class,  BaseEditor  inherits  IPropertyEditor  interface.  BaseEditor  has realised  IPropertyEditor , but when inherit from  BaseEditor , you still need to override some method of the base class. The methods which must be override are:  protected abstract Gtk.Widget OnCreateWidget();\nprotected abstract void void OnSetControl();  Gtk.Widget OnCreateWidget() is called when initialize the editor. It returns the Gtk widget of the editor which will be shown in the PropertyGrid.  void OnSetControl() is used to refresh the Gtk widgets when property changed.  When the value of entry in CustomEditor changed, it will set the property value. This is done through  the member  PropertyItem . You can get or set property value using  PropertyItem .  private void XEntryValueChangedHandler(object sender, EntryIntEventArgs e)\n{\n    using (GetLock())\n    {\n        for (int i = 0; i   PropertyItem.Objects.Count; i++)\n        {\n            ScaleValue value = PropertyItem.Values[i] as ScaleValue;\n            value.ScaleX = e.Value;\n            PropertyItem.Values[i] = value;\n        }\n    }\n}", 
            "title": "Creating a Custom Widget"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/Extend/ParamExtend/en/index.html#interface-changes", 
            "text": "Some interface of property have been changed in v2.3.3.0, including:  1)  The project  CocoStudio.ToolKit  is merged into  Modules.Communal.PropertyGrid . Please use  Modules.Communal.PropertyGrid  namespace instead of  CocoStudio.ToolKit  namespace.  2)   ITypeEditor  is renamed to  IPropertyEditor . Old methods in  ITypeEditor  are obsoloted, pleased use new methods in  IPropertyEditor  instead.  3)   CatagoryAttribute  is renamed to  ControlGroupAttribute , and is moved to project  CocoStudio.Model .  4)   PropertyEditorTypeAttribte  is deleted for it is no longer used in the new property grid frame.  Note  The contents of the document are under continuous update based on users' feedback. Please check the latest version for reference. If you have any suggestions or comments on the extensions of Cocos Studio, please let us know. Thanks for your interest and support for Cocos Studio, and for helping us make a better product.", 
            "title": "Interface Changes"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/Extend/CustomExport/en/index.html", 
            "text": "Customizing Exported Data Formats\n\n\nBy default you can export data from Cocos Studio to other formats, including CSB, JSON and Lua. You can also customize export formats by implementing the following interface: \nCocoStudio.Projects.IGameProjectSerializer\n.  (or after Cocos v2.3.3 the interface is \nCocoStudio.Projects.IGameFileSerializer\n . ) For more information, see the description of \nCustomSerializer\n in Samples. \n\n\nInterface Description:\n\n\n[TypeExtensionPoint]\n// or in version 2.3.3, it's IGameFileSerializer\npublic interface IGameProjectSerializer\n{\n\n    string ID { get; }\n\n    string Label { get; }\n\n    // or in verison 2.3.3, the second parameter is GameFile gameFile\n    string Serialize(PublishInfo info, IProjectFile projFile);\n\n    void ContextInitialize(PublishInfo publishInfo);\n\n    void ContextFinalize(PublishInfo publishInfo);\n }\n\n\n\nCurrently you can transfer CSD file (Cocos Studio project file) to other targeted file formats. \n\n\nNote\n The contents of the document are under continuous update based on users' feedback. Please check the latest version for reference. If you have any suggestions or comments on the extensions of Cocos Studio, please let us know. Thanks for your interest and support for Cocos Studio, and for helping us make a better product.", 
            "title": "_Customizing Exported Data Formats"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/Extend/CustomExport/en/index.html#customizing-exported-data-formats", 
            "text": "By default you can export data from Cocos Studio to other formats, including CSB, JSON and Lua. You can also customize export formats by implementing the following interface:  CocoStudio.Projects.IGameProjectSerializer .  (or after Cocos v2.3.3 the interface is  CocoStudio.Projects.IGameFileSerializer  . ) For more information, see the description of  CustomSerializer  in Samples.   Interface Description:  [TypeExtensionPoint]\n// or in version 2.3.3, it's IGameFileSerializer\npublic interface IGameProjectSerializer\n{\n\n    string ID { get; }\n\n    string Label { get; }\n\n    // or in verison 2.3.3, the second parameter is GameFile gameFile\n    string Serialize(PublishInfo info, IProjectFile projFile);\n\n    void ContextInitialize(PublishInfo publishInfo);\n\n    void ContextFinalize(PublishInfo publishInfo);\n }  Currently you can transfer CSD file (Cocos Studio project file) to other targeted file formats.   Note  The contents of the document are under continuous update based on users' feedback. Please check the latest version for reference. If you have any suggestions or comments on the extensions of Cocos Studio, please let us know. Thanks for your interest and support for Cocos Studio, and for helping us make a better product.", 
            "title": "Customizing Exported Data Formats"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/Extend/Sample/en/index.html", 
            "text": "Samples\n\n\nSample Path\n\n\nBy default samples are installed to  \n%userprofile%\\Documents\\Cocos\\CocosStudio2\\Samples\\Addins\n on the computer. If the default installation folder is changed, samples are in the same folder with Documents. For example, if document is installed to \nD:\\CocosDocuments\n, samples are in \nD:\\CocosDocuments\\Cocos\\CocosStudio2\\Samples\\Addins\n. On Mac, samples are installed to \n/Library/Application Support/Cocos/CocosStudio2/Samples/Addins\n.\n\n\nNote \n%userprofile%\n is an environment variable on Windows.It is installed in \nC:\\users\\ABC\n (ABC is user name). Paste and open the location in Window Resource Manager. For example, type \nset userprofile\n in Windows CMD command line, you will get the following information on the screen.\n\n\n\n\n(Username is covered.)\n\n\nCompiling Samples\n\n\nSample is a solution of Visual Studio 2013. You can directly compile Addins.sln on Windows. Mono library and GTK# are essential. Please install them on your computer.\n\n\nOn Mac, you need to copy samples to a directory which users have permission to compile. On Mac, you can choose Xamarin Studio to compile. MonoFramework is necessary.\n\n\nCopying DLL\n\n\nAfter successful compile, you will get \nAddins.Sample.dll\n. Copy it to Addins directory.\n\n\nBy default samples are installed to  \n%userprofile%\\Documents\\Cocos\\CocosStudio2\\Addins\n on the computer. If the default installation folder is changed, samples are in the same folder with Documents. For example, if document is installed to \nD:\\CocosDocuments\n, samples are in \nD:\\CocosDocuments\\Cocos\\CocosStudio2\\Addins\n. On Mac, samples are installed to \n/Library/Application Support/Cocos/CocosStudio2/Addins\n.", 
            "title": "_Samples"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/Extend/Sample/en/index.html#samples", 
            "text": "", 
            "title": "Samples"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/Extend/Sample/en/index.html#sample-path", 
            "text": "By default samples are installed to   %userprofile%\\Documents\\Cocos\\CocosStudio2\\Samples\\Addins  on the computer. If the default installation folder is changed, samples are in the same folder with Documents. For example, if document is installed to  D:\\CocosDocuments , samples are in  D:\\CocosDocuments\\Cocos\\CocosStudio2\\Samples\\Addins . On Mac, samples are installed to  /Library/Application Support/Cocos/CocosStudio2/Samples/Addins .  Note  %userprofile%  is an environment variable on Windows.It is installed in  C:\\users\\ABC  (ABC is user name). Paste and open the location in Window Resource Manager. For example, type  set userprofile  in Windows CMD command line, you will get the following information on the screen.   (Username is covered.)", 
            "title": "Sample Path"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/Extend/Sample/en/index.html#compiling-samples", 
            "text": "Sample is a solution of Visual Studio 2013. You can directly compile Addins.sln on Windows. Mono library and GTK# are essential. Please install them on your computer.  On Mac, you need to copy samples to a directory which users have permission to compile. On Mac, you can choose Xamarin Studio to compile. MonoFramework is necessary.", 
            "title": "Compiling Samples"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/Extend/Sample/en/index.html#copying-dll", 
            "text": "After successful compile, you will get  Addins.Sample.dll . Copy it to Addins directory.  By default samples are installed to   %userprofile%\\Documents\\Cocos\\CocosStudio2\\Addins  on the computer. If the default installation folder is changed, samples are in the same folder with Documents. For example, if document is installed to  D:\\CocosDocuments , samples are in  D:\\CocosDocuments\\Cocos\\CocosStudio2\\Addins . On Mac, samples are installed to  /Library/Application Support/Cocos/CocosStudio2/Addins .", 
            "title": "Copying DLL"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/HowToCode/CallBack/en/index.html", 
            "text": "Callback Feature\n\n\nThe section is an introduction to callback functions in C++ and Lua.\n\n\nC++\n\n\n1   Click the root node as illustrated.\n\n\n\n\n2 In the Properties panel, choose Advanced -\n CallBack Feature -\n Custom Class, name the Custom class, for example, MyClass.\n\n\n\n\n3 Select the widget that needs to add callback feature, then select Properties -\n Advanced -\n Callback method, and name the method. For example: select Touch, and name it as onTouch.\n\n\n\n\n4 Create a customized class in C++. The class must conform the following requirements.\n\n\n\n\n\n\nInherit WidgetCallBackHandlerProtocol \n Node (or other classes inherited from node ).\n\n\n\n\n\n\nOverwrite the following interfaces:\n\n\nonLocateTouchCallback\n\n\nonLocateClickCallback\n\n\nonLocateEventCallback\n\n\n\n\n\n\nGo back to the handlers of Touch, Click and Event (You can choose to edit the callback property that has been used). For example,\n\n\n    //.h file\n\n#ifndef __TestCpp__MyClass__\n#define __TestCpp__MyClass__\n#include \"cocos2d.h\"\n#include \"cocostudio/CocoStudio.h\"\n#include \"cocostudio/WidgetCallBackHandlerProtocol.h\"\nclass MyClass : public cocos2d::Node, public cocostudio::WidgetCallBackHandlerProtocol\n{\npublic:\n    CREATE_FUNC(MyClass)\n    MyClass();\n    virtual cocos2d::ui::Widget::ccWidgetTouchCallback\n    onLocateTouchCallback(const std::string \ncallBackName);\n    virtual cocos2d::ui::Widget::ccWidgetClickCallback\n    onLocateClickCallback(const std::string \ncallBackName);\n    virtual cocos2d::ui::Widget::ccWidgetEventCallback\n    onLocateEventCallback(const std::string \ncallBackName);\n    void onTouch(cocos2d::Ref* sender, cocos2d::ui::Widget::TouchEventType type);\n    void onClick(cocos2d::Ref* sender);\n    void onEvent(cocos2d::Ref* sender, int eventType);\n private:\n    std::vector\nstd::string\n _touchTypes;\n    std::string _click;\n    std::vector\nstd::string\n _eventTypes;\n};\n//.cpp file\n#include \"MyClass.h\"\n#include \"ui/UIText.h\"\n\nUSING_NS_CC;\nusing namespace std;\nusing namespace cocos2d::ui;\n\nMyClass::MyClass()\n{}\n\nWidget::ccWidgetTouchCallback MyClass::onLocateTouchCallback(const string \ncallBackName)\n{\n    if (callBackName == \"onTouch\")\n    {\n        return CC_CALLBACK_2(MyClass::onTouch, this);\n    }\n    return nullptr;\n}\n\nWidget::ccWidgetClickCallback MyClass::onLocateClickCallback(const string \ncallBackName)\n{\n    if (callBackName == \"onClick\")\n    {\n        return CC_CALLBACK_1(MyClass::onClick, this);\n    }\n    return nullptr;\n}\n\nWidget::ccWidgetEventCallback MyClass::onLocateEventCallback(const string \ncallBackName)\n{\n    if (callBackName == \"onEvent\")\n    {\n        return CC_CALLBACK_2(MyClass::onEvent, this);\n    }\n    return nullptr;\n}\n\nvoid MyClass::onTouch(cocos2d::Ref* object, cocos2d::ui::Widget::TouchEventType type)\n{\n    CCLOG(\"onTouch\");\n}\n\nvoid MyClass::onClick(cocos2d::Ref* sender)\n{\n    CCLOG(\"onClick\");\n}\n\nvoid MyClass::onEvent(cocos2d::Ref* sender, int eventType)\n{\n    CCLOG(\"onEvent\");\n}\n\n\n\n\n\nCreate a factory class for the class created in step 3.\n\n\n\n\nThis class mush inherit cocostudio::NodeReader, and then overwrite the following three interfaces.\n\n\nGetlnstance--- return to factory class example\n\n\nPurge\u2014delete factory class\n\n\ncreateNodeWithFlatBuffers\u2014create the class edited in step 4, and invoke setPropsWithFlatBuffers, as following,\n\n\n purge\n createNodeWithFlatBuffers\n\n\n\nFor example,\n\n\n//.h file\n\n\n#ifndef __cocos2d_libs__MyClassReader__\n#define __cocos2d_libs__MyClassReader__\n\n#include \"cocos2d.h\"\n#include \"cocostudio/CocosStudioExport.h\"\n#include \"cocostudio/WidgetReader/NodeReader/NodeReader.h\"\n\nclass MyClassReader : public cocostudio::NodeReader\n{\npublic:\n    MyClassReader() {};\n    ~MyClassReader() {};\n    static MyClassReader* getInstance();\n    static void purge();\n    cocos2d::Node* createNodeWithFlatBuffers(const flatbuffers::Table* nodeOptions);\n};\n\n#endif /*defined(__cocos2d_libs__MyClassReader__) */\n\n//.cpp file\n#include \"MyClassReader.h\"\n#include \"MyClass.h\"\n\nUSING_NS_CC;\n\nstatic MyClassReader* _instanceMyClassReader = nullptr;\nMyClassReader* MyClassReader::getInstance()\n{\n    if (!_instanceMyClassReader)\n    {\n        _instanceMyClassReader = new MyClassReader();\n    }\n    return _instanceMyClassReader;\n}\n\nvoid MyClassReader::purge()\n{\n    CC_SAFE_DELETE(_instanceMyClassReader);\n}\n\nNode* MyClassReader::createNodeWithFlatBuffers(const flatbuffers::Table *nodeOptions)\n{\n    MyClass* node = MyClass::create();\n    setPropsWithFlatBuffers(node, nodeOptions);\n    return node;\n}\n\n\n\n5 Register this interface to CSLoader before using createNode.\n\n\nCSLoader* instance = CSLoader::getInstance();\ninstance-\nregistReaderObject(\"MyClassReader\",(ObjectFactory::Instance)MyClassReader::getInstance);\n\n\n\n6 Load your node.\n\n\nLoad your node with CreateNode. Because your custom class has been entrusted to the factory class, which will create your custom class in CreateNode and call \nonLocateTouchCallback\n\uff0c\nonLocateClickCallback\n and \nonLocateEventCallback\n to implement code correction and editor binding.\n\n\nLua\n\n\nFor Lua, see the tutorial \nBinding Custom Class to Lua Runtime in cocos\n.", 
            "title": "_Callback Feature"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/HowToCode/CallBack/en/index.html#callback-feature", 
            "text": "The section is an introduction to callback functions in C++ and Lua.", 
            "title": "Callback Feature"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/HowToCode/CallBack/en/index.html#c", 
            "text": "1   Click the root node as illustrated.   2 In the Properties panel, choose Advanced -  CallBack Feature -  Custom Class, name the Custom class, for example, MyClass.   3 Select the widget that needs to add callback feature, then select Properties -  Advanced -  Callback method, and name the method. For example: select Touch, and name it as onTouch.   4 Create a customized class in C++. The class must conform the following requirements.    Inherit WidgetCallBackHandlerProtocol   Node (or other classes inherited from node ).    Overwrite the following interfaces:  onLocateTouchCallback  onLocateClickCallback  onLocateEventCallback    Go back to the handlers of Touch, Click and Event (You can choose to edit the callback property that has been used). For example,      //.h file\n\n#ifndef __TestCpp__MyClass__\n#define __TestCpp__MyClass__\n#include \"cocos2d.h\"\n#include \"cocostudio/CocoStudio.h\"\n#include \"cocostudio/WidgetCallBackHandlerProtocol.h\"\nclass MyClass : public cocos2d::Node, public cocostudio::WidgetCallBackHandlerProtocol\n{\npublic:\n    CREATE_FUNC(MyClass)\n    MyClass();\n    virtual cocos2d::ui::Widget::ccWidgetTouchCallback\n    onLocateTouchCallback(const std::string  callBackName);\n    virtual cocos2d::ui::Widget::ccWidgetClickCallback\n    onLocateClickCallback(const std::string  callBackName);\n    virtual cocos2d::ui::Widget::ccWidgetEventCallback\n    onLocateEventCallback(const std::string  callBackName);\n    void onTouch(cocos2d::Ref* sender, cocos2d::ui::Widget::TouchEventType type);\n    void onClick(cocos2d::Ref* sender);\n    void onEvent(cocos2d::Ref* sender, int eventType);\n private:\n    std::vector std::string  _touchTypes;\n    std::string _click;\n    std::vector std::string  _eventTypes;\n};\n//.cpp file\n#include \"MyClass.h\"\n#include \"ui/UIText.h\"\n\nUSING_NS_CC;\nusing namespace std;\nusing namespace cocos2d::ui;\n\nMyClass::MyClass()\n{}\n\nWidget::ccWidgetTouchCallback MyClass::onLocateTouchCallback(const string  callBackName)\n{\n    if (callBackName == \"onTouch\")\n    {\n        return CC_CALLBACK_2(MyClass::onTouch, this);\n    }\n    return nullptr;\n}\n\nWidget::ccWidgetClickCallback MyClass::onLocateClickCallback(const string  callBackName)\n{\n    if (callBackName == \"onClick\")\n    {\n        return CC_CALLBACK_1(MyClass::onClick, this);\n    }\n    return nullptr;\n}\n\nWidget::ccWidgetEventCallback MyClass::onLocateEventCallback(const string  callBackName)\n{\n    if (callBackName == \"onEvent\")\n    {\n        return CC_CALLBACK_2(MyClass::onEvent, this);\n    }\n    return nullptr;\n}\n\nvoid MyClass::onTouch(cocos2d::Ref* object, cocos2d::ui::Widget::TouchEventType type)\n{\n    CCLOG(\"onTouch\");\n}\n\nvoid MyClass::onClick(cocos2d::Ref* sender)\n{\n    CCLOG(\"onClick\");\n}\n\nvoid MyClass::onEvent(cocos2d::Ref* sender, int eventType)\n{\n    CCLOG(\"onEvent\");\n}   Create a factory class for the class created in step 3.   This class mush inherit cocostudio::NodeReader, and then overwrite the following three interfaces.  Getlnstance--- return to factory class example  Purge\u2014delete factory class  createNodeWithFlatBuffers\u2014create the class edited in step 4, and invoke setPropsWithFlatBuffers, as following,   purge\n createNodeWithFlatBuffers  For example,  //.h file  #ifndef __cocos2d_libs__MyClassReader__\n#define __cocos2d_libs__MyClassReader__\n\n#include \"cocos2d.h\"\n#include \"cocostudio/CocosStudioExport.h\"\n#include \"cocostudio/WidgetReader/NodeReader/NodeReader.h\"\n\nclass MyClassReader : public cocostudio::NodeReader\n{\npublic:\n    MyClassReader() {};\n    ~MyClassReader() {};\n    static MyClassReader* getInstance();\n    static void purge();\n    cocos2d::Node* createNodeWithFlatBuffers(const flatbuffers::Table* nodeOptions);\n};\n\n#endif /*defined(__cocos2d_libs__MyClassReader__) */\n\n//.cpp file\n#include \"MyClassReader.h\"\n#include \"MyClass.h\"\n\nUSING_NS_CC;\n\nstatic MyClassReader* _instanceMyClassReader = nullptr;\nMyClassReader* MyClassReader::getInstance()\n{\n    if (!_instanceMyClassReader)\n    {\n        _instanceMyClassReader = new MyClassReader();\n    }\n    return _instanceMyClassReader;\n}\n\nvoid MyClassReader::purge()\n{\n    CC_SAFE_DELETE(_instanceMyClassReader);\n}\n\nNode* MyClassReader::createNodeWithFlatBuffers(const flatbuffers::Table *nodeOptions)\n{\n    MyClass* node = MyClass::create();\n    setPropsWithFlatBuffers(node, nodeOptions);\n    return node;\n}  5 Register this interface to CSLoader before using createNode.  CSLoader* instance = CSLoader::getInstance();\ninstance- registReaderObject(\"MyClassReader\",(ObjectFactory::Instance)MyClassReader::getInstance);  6 Load your node.  Load your node with CreateNode. Because your custom class has been entrusted to the factory class, which will create your custom class in CreateNode and call  onLocateTouchCallback \uff0c onLocateClickCallback  and  onLocateEventCallback  to implement code correction and editor binding.", 
            "title": "C++"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/HowToCode/CallBack/en/index.html#lua", 
            "text": "For Lua, see the tutorial  Binding Custom Class to Lua Runtime in cocos .", 
            "title": "Lua"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/HowToCode/UserData/en/index.html", 
            "text": "Create Custom Data\n\n\nSelect Button-\n Properties -\n Advanced -\n User Data. For example, type 123, as the following picture shows.\n\n\n\n\nC++\n\n\nThe previous version cocos2d-x 3.8:\n\n\n    #include \"cocostudio/CCObjectExtensionData.h\"\n    .....\n    auto button = _rootNode-\ngetChildByTag(\"XXX\");\n\n    auto userdata = ((cocostudio::ObjectExtensionData*)(rootNode-\ngetUserObject()))-\ngetCustomProperty();\n    CCLOG(\"%s\", userdata.c_str());\n\n\n\ncocos2d-x 3.8 and later version:\n\n\n    #include \"cocostudio/CCComExtensionData.h\"\n    .....\n    auto button = _rootNode-\ngetChildByTag(\"XXX\");\n\n    ComExtensionData* data = dynamic_cast\nComExtensionData*\n(child-\ngetComponent(\"ComExtensionData\"));\n    auto userdata = data-\ngetCustomProperty();\n    CCLOG(\"%s\", userdata.c_str());\n\n\n\nJS\n\n\n    var button = mainscene.node.getChildByTag(XXXXX);\n    var userdata = button.getUserData();\n    cc.log(userdata);\n\n\n\nLua\n\n\nCurrently not supported.", 
            "title": "_Create Custom Data"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/HowToCode/UserData/en/index.html#create-custom-data", 
            "text": "Select Button-  Properties -  Advanced -  User Data. For example, type 123, as the following picture shows.", 
            "title": "Create Custom Data"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/HowToCode/UserData/en/index.html#c", 
            "text": "The previous version cocos2d-x 3.8:      #include \"cocostudio/CCObjectExtensionData.h\"\n    .....\n    auto button = _rootNode- getChildByTag(\"XXX\");\n\n    auto userdata = ((cocostudio::ObjectExtensionData*)(rootNode- getUserObject()))- getCustomProperty();\n    CCLOG(\"%s\", userdata.c_str());  cocos2d-x 3.8 and later version:      #include \"cocostudio/CCComExtensionData.h\"\n    .....\n    auto button = _rootNode- getChildByTag(\"XXX\");\n\n    ComExtensionData* data = dynamic_cast ComExtensionData* (child- getComponent(\"ComExtensionData\"));\n    auto userdata = data- getCustomProperty();\n    CCLOG(\"%s\", userdata.c_str());", 
            "title": "C++"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/HowToCode/UserData/en/index.html#js", 
            "text": "var button = mainscene.node.getChildByTag(XXXXX);\n    var userdata = button.getUserData();\n    cc.log(userdata);", 
            "title": "JS"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/HowToCode/UserData/en/index.html#lua", 
            "text": "Currently not supported.", 
            "title": "Lua"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/HowToCode/LoadExportData/en/index.html", 
            "text": "Load Exported Data\n\n\nCSB files, published by Cocos Studio v2.0, need to be loaded with CSLoader. CSLoader has been available from Cocos2d-x 3.3 RC0. Currently Cocos Studio supports C++ and JS. The following are C ++, JS code.\n\n\nC++ (only support CSB data)\n\n\n#include \"ui/CocosGUI.h\"\n#include \"Cocos Studio/Cocos Studio.h\"\n\nusing namespace cocos2d;\nusing namespace Cocos Studio::timeline;\n\nvoid myScene::initFunc() \n{ \n     Node *rootNode = CSLoader::createNode(\"MainScene.csb\");\n     this-\naddChild(rootNode);\n\n     ActionTimeline *action = CSLoader::createTimeline(\"MainScene.csb\"); \n     rootNode-\nrunAction(action);\n\n     action-\ngotoFrameAndPlay(0,true);\n}\n\n\n\nLua (support CSB and Lua data)\n\n\nTo load CSB\n \n\n\n        --\u76f8\u5173\u4ee3\u7801\u5728src\\packages\\mvc\\ViewBase.lua\u6587\u4ef6\n    function ViewBase:createResoueceNode(resourceFilename)\n        if self.resourceNode_ then\n            self.resourceNode_:removeSelf()\n                self.resourceNode_ = nil\n        end\n\n        self.resourceNode_ = cc.CSLoader:createNode(resourceFilename)\n        self:addChild(self.resourceNode_)\n\n        local action = cc.CSLoader:createTimeline(resourceFilename)\n        self.resourceNode_:runAction(action)\n\n        action:gotoFrameAndPlay(0, true)\n    end\n\n\n\nTo load Lua\n \n\n\n   -- src\\app\\views\\MainScene.lua: \n       MainScene.RESOURCE_FILENAME = \"MainScene.csb\" change to  \n       MainScene.RESOURCE_FILENAME = \"MainScene.lua\"\n\n   --src\\packages\\mvc\\ViewBase.lua\uff1a \n   function ViewBase:createResoueceNode(resourceFilename)\n       if self.resourceNode_ then\n            self.resourceNode_:removeSelf()\n                self.resourceNode_ = nil\n       end\n\n       local scene=require(resourceFilename)\n       local gameScene=scene.create(nil)\n       self.resourceNode_=gameScene.root\n\n       gameScene.root:runAction(gameScene.animation)\n\n       gameScene.animation:gotoFrameAndPlay(0,true)\n    end\n\n\n\nJS (only support JSON)\n\n\n//src\\app.js:\nvar HelloWorldLayer = cc.Layer.extend({\n    sprite:null,\n    ctor:function () {\n        //////////////////////////////\n        // 1. super init first\n        this._super();\n\n        /////////////////////////////\n        // 2. add a menu item with \"X\" image, which is clicked to quit the program\n        //    you may modify it.\n        // ask the window size\n        var size = cc.winSize;\n\n        var mainscene = ccs.load(res.MainScene_json);\n\n        var action = mainscene.action;\n        if(action){\n\n            mainscene.node.runAction(action);\n\n            action.gotoFrameAndPlay(0, true);\n        }\n        this.addChild(mainscene.node);\n        return true;\n    }\n});\n\n\n\nNotes\n \n\n\n1 You can find the published csb/ json files in \"res\" directory under published projects folder.\n \n\n\n2 Data exported from Cocos Studio v2.1+, Cocos2d-x v3.4+ and Cocos 2d-js v3.3+ can be loaded.\n\n\n3 Cocos Studio v2.x assumes that the resources\u2019 directory of the editor is same as the directory of the game. If the directory of the exported files has been changed, so has the directory of the editor. You can also add the file path into FileUils with addSearchpath, and it should be noted that file name conflicts are not supported.", 
            "title": "_Load Exported Data"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/HowToCode/LoadExportData/en/index.html#load-exported-data", 
            "text": "CSB files, published by Cocos Studio v2.0, need to be loaded with CSLoader. CSLoader has been available from Cocos2d-x 3.3 RC0. Currently Cocos Studio supports C++ and JS. The following are C ++, JS code.", 
            "title": "Load Exported Data"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/HowToCode/LoadExportData/en/index.html#c-only-support-csb-data", 
            "text": "#include \"ui/CocosGUI.h\"\n#include \"Cocos Studio/Cocos Studio.h\"\n\nusing namespace cocos2d;\nusing namespace Cocos Studio::timeline;\n\nvoid myScene::initFunc() \n{ \n     Node *rootNode = CSLoader::createNode(\"MainScene.csb\");\n     this- addChild(rootNode);\n\n     ActionTimeline *action = CSLoader::createTimeline(\"MainScene.csb\"); \n     rootNode- runAction(action);\n\n     action- gotoFrameAndPlay(0,true);\n}", 
            "title": "C++ (only support CSB data)"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/HowToCode/LoadExportData/en/index.html#lua-support-csb-and-lua-data", 
            "text": "To load CSB            --\u76f8\u5173\u4ee3\u7801\u5728src\\packages\\mvc\\ViewBase.lua\u6587\u4ef6\n    function ViewBase:createResoueceNode(resourceFilename)\n        if self.resourceNode_ then\n            self.resourceNode_:removeSelf()\n                self.resourceNode_ = nil\n        end\n\n        self.resourceNode_ = cc.CSLoader:createNode(resourceFilename)\n        self:addChild(self.resourceNode_)\n\n        local action = cc.CSLoader:createTimeline(resourceFilename)\n        self.resourceNode_:runAction(action)\n\n        action:gotoFrameAndPlay(0, true)\n    end  To load Lua       -- src\\app\\views\\MainScene.lua: \n       MainScene.RESOURCE_FILENAME = \"MainScene.csb\" change to  \n       MainScene.RESOURCE_FILENAME = \"MainScene.lua\"\n\n   --src\\packages\\mvc\\ViewBase.lua\uff1a \n   function ViewBase:createResoueceNode(resourceFilename)\n       if self.resourceNode_ then\n            self.resourceNode_:removeSelf()\n                self.resourceNode_ = nil\n       end\n\n       local scene=require(resourceFilename)\n       local gameScene=scene.create(nil)\n       self.resourceNode_=gameScene.root\n\n       gameScene.root:runAction(gameScene.animation)\n\n       gameScene.animation:gotoFrameAndPlay(0,true)\n    end", 
            "title": "Lua (support CSB and Lua data)"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/HowToCode/LoadExportData/en/index.html#js-only-support-json", 
            "text": "//src\\app.js:\nvar HelloWorldLayer = cc.Layer.extend({\n    sprite:null,\n    ctor:function () {\n        //////////////////////////////\n        // 1. super init first\n        this._super();\n\n        /////////////////////////////\n        // 2. add a menu item with \"X\" image, which is clicked to quit the program\n        //    you may modify it.\n        // ask the window size\n        var size = cc.winSize;\n\n        var mainscene = ccs.load(res.MainScene_json);\n\n        var action = mainscene.action;\n        if(action){\n\n            mainscene.node.runAction(action);\n\n            action.gotoFrameAndPlay(0, true);\n        }\n        this.addChild(mainscene.node);\n        return true;\n    }\n});  Notes    1 You can find the published csb/ json files in \"res\" directory under published projects folder.    2 Data exported from Cocos Studio v2.1+, Cocos2d-x v3.4+ and Cocos 2d-js v3.3+ can be loaded.  3 Cocos Studio v2.x assumes that the resources\u2019 directory of the editor is same as the directory of the game. If the directory of the exported files has been changed, so has the directory of the editor. You can also add the file path into FileUils with addSearchpath, and it should be noted that file name conflicts are not supported.", 
            "title": "JS (only support JSON)"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/HowToCode/CustomizeFramework-v3.10/en/index.html", 
            "text": "Customize Cocos Precompiled Library\n\n\nOverview\n\n\nThe following section provides guidance on how to custom Cocos2d-x precompiled library for your games.\n\n\nVersion Requirement\n\n\nCustomizing cocos2d-x precompiled library requires Cocos v3.10 or higher. This document is used for version v3.10 or higher.\n\n\nThe directories below are based on v3.10 and the installation of Cocos v3.10.\n\n\nHow to customize Cocos2d-x precompiled library\n\n\nCustomizing cocos2d-x precompiled library is actually modifying its source codes. After the installation of Cocos 3.10, you can customize the cocos2d-x with IDE or code editors.\n\n\n\n\nOn Mac, you can open projects \n/Applications/Cocos/Cocos2d-x/cocos2d-x-v3.10/build/cocos2d_libs.xcodeproj\n with XCode. Then you need to modify and debug codes.\n\n\nOn Windows, you can open projects \n[installation directory]/Cocos/cocos2d-x-v3.10/build/cocos2d-win32.sln\n with Visual Studio. Then you need to modify and debug codes.\n\n\n\n\nHow to publish the custom Cocos2d-x\n\n\nBuild a new precompiled library\n\n\nThere is a scripting tool in Cocos2d-x-3.10 to compile source codes to precompiled library: \ncocos gen-libs\n.\n\n\nThe following is a detailed description of how to use this scripting tool:\n\n\nusage: cocos gen-libs [-h] [-c] [-e ENGINE_PATH] [-p {ios,mac,android,win32}]\n                      [-m {debug,release}] [--dis-strip] [--vs VS_VERSION]\n                      [--app-abi APP_ABI]\n\nGenerate prebuilt libs of engine. The libs will be placed in 'prebuilt' folder\nof the engine root path.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -c                    Remove the 'prebuilt' folder at first.\n  -e ENGINE_PATH        Specify the engine path. Default is the engine root\n                        path of current tools.\n  -p {ios,mac,android,win32}\n                        Specify the target platform. Can specify multi\n                        platform by using '-p' multi times. Default generate\n                        all available platforms.\n  -m {debug,release}, --mode {debug,release}\n                        Generate cocos libs for debug or release. Default is\n                        release.\n  --dis-strip           Disable the strip of the generated libs.\n\nWindows Options:\n  --vs VS_VERSION       Specify the Visual Studio version, such as 2013.\n                        Default find available version automatically.\n\nAndroid Options:\n  --app-abi APP_ABI     Set the APP_ABI of ndk-build. Can be multi value\n                        separated with ':'. Sample : --app-aib\n                        armeabi:x86:mips. Default value is 'armeabi'.\n\n\n\n\n\nFor example:\n\n\n\n\ncocos gen-libs -c\n : Clear previous precompiled library and compile all platforms.\n\n\ncocos gen-libs -p win32 --vs 2013\n : Compile Win32 platform with Visual Studio 2013.\n\n\n\n\nPrecompiled library will be created in the following directory \nCocos2d-x/cocos2d-x-v3.10/prebuilt\n. Include the new precompiled library to game projects.\n\n\nNote\n\n\n\n\nTo customize Cocos2d-x precompiled library, you need to modify source codes and maintain project files. Any problem in the custom codes or projects will lead to a failure in implementing compiling tools.\n\n\nWhen you're genrating prebuilt libs with \n-m debug\n, you should modify the Visual Studio configuration of your game project like this:\nChange the value of \nC/C++ -\n Code Generation -\n Runtime Library\n from \n/MD\n to \n/MDd\n. Take a look at the image:", 
            "title": "_Customize Cocos Framework & Simulator"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/HowToCode/CustomizeFramework-v3.10/en/index.html#customize-cocos-precompiled-library", 
            "text": "", 
            "title": "Customize Cocos Precompiled Library"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/HowToCode/CustomizeFramework-v3.10/en/index.html#overview", 
            "text": "The following section provides guidance on how to custom Cocos2d-x precompiled library for your games.", 
            "title": "Overview"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/HowToCode/CustomizeFramework-v3.10/en/index.html#version-requirement", 
            "text": "Customizing cocos2d-x precompiled library requires Cocos v3.10 or higher. This document is used for version v3.10 or higher.  The directories below are based on v3.10 and the installation of Cocos v3.10.", 
            "title": "Version Requirement"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/HowToCode/CustomizeFramework-v3.10/en/index.html#how-to-customize-cocos2d-x-precompiled-library", 
            "text": "Customizing cocos2d-x precompiled library is actually modifying its source codes. After the installation of Cocos 3.10, you can customize the cocos2d-x with IDE or code editors.   On Mac, you can open projects  /Applications/Cocos/Cocos2d-x/cocos2d-x-v3.10/build/cocos2d_libs.xcodeproj  with XCode. Then you need to modify and debug codes.  On Windows, you can open projects  [installation directory]/Cocos/cocos2d-x-v3.10/build/cocos2d-win32.sln  with Visual Studio. Then you need to modify and debug codes.", 
            "title": "How to customize Cocos2d-x precompiled library"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/HowToCode/CustomizeFramework-v3.10/en/index.html#how-to-publish-the-custom-cocos2d-x", 
            "text": "", 
            "title": "How to publish the custom Cocos2d-x"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/HowToCode/CustomizeFramework-v3.10/en/index.html#build-a-new-precompiled-library", 
            "text": "There is a scripting tool in Cocos2d-x-3.10 to compile source codes to precompiled library:  cocos gen-libs .  The following is a detailed description of how to use this scripting tool:  usage: cocos gen-libs [-h] [-c] [-e ENGINE_PATH] [-p {ios,mac,android,win32}]\n                      [-m {debug,release}] [--dis-strip] [--vs VS_VERSION]\n                      [--app-abi APP_ABI]\n\nGenerate prebuilt libs of engine. The libs will be placed in 'prebuilt' folder\nof the engine root path.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -c                    Remove the 'prebuilt' folder at first.\n  -e ENGINE_PATH        Specify the engine path. Default is the engine root\n                        path of current tools.\n  -p {ios,mac,android,win32}\n                        Specify the target platform. Can specify multi\n                        platform by using '-p' multi times. Default generate\n                        all available platforms.\n  -m {debug,release}, --mode {debug,release}\n                        Generate cocos libs for debug or release. Default is\n                        release.\n  --dis-strip           Disable the strip of the generated libs.\n\nWindows Options:\n  --vs VS_VERSION       Specify the Visual Studio version, such as 2013.\n                        Default find available version automatically.\n\nAndroid Options:\n  --app-abi APP_ABI     Set the APP_ABI of ndk-build. Can be multi value\n                        separated with ':'. Sample : --app-aib\n                        armeabi:x86:mips. Default value is 'armeabi'.  For example:   cocos gen-libs -c  : Clear previous precompiled library and compile all platforms.  cocos gen-libs -p win32 --vs 2013  : Compile Win32 platform with Visual Studio 2013.   Precompiled library will be created in the following directory  Cocos2d-x/cocos2d-x-v3.10/prebuilt . Include the new precompiled library to game projects.  Note   To customize Cocos2d-x precompiled library, you need to modify source codes and maintain project files. Any problem in the custom codes or projects will lead to a failure in implementing compiling tools.  When you're genrating prebuilt libs with  -m debug , you should modify the Visual Studio configuration of your game project like this:\nChange the value of  C/C++ -  Code Generation -  Runtime Library  from  /MD  to  /MDd . Take a look at the image:", 
            "title": "Build a new precompiled library"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter4/connect-solution/en/index.html", 
            "text": "No Android Devices Found\uff1f\n\n\nThere are a few reasons why you might be getting an error message when trying to get files onto your Android device. Following are some options for you to solve these problems.\n\n\n1 Check USB cable.\n\n\nSome data lines are just charging cable, having no ability to transfer data.\n\n\n2 Replug to check the wire the device are attached properly.\n\n\nReconnect the device to check the USB ports.\n\n\n3 Try another USB interface.\n\n\nPower supply shortage of the USB port may lead to the unrecognized connection.\n\n\n4 Try another data line.\n\n\nA bad USB component may cause errors such as \"unrecognized USB device\".\n\n\n5 Change the USB connection options.\n\n\nThe default option may be \"charging\". The issue can be solved by changing the mode to \"mass storage\". Different devices have different options. I choose two popular mobiles to show how to changing the connection modes.\n\n\nSamsung\n\n\n1)  If the picture \n appears when connect Samsung devices to the computer, you need to change the connection option. Slide down the screen as the following picture shows.\n\n\n\n\n2\uff09Click the circle in the following picture.\n\n\n\n\n3\uff09Enable \"Media Device (MTP)\", and the system will find the phone.\n\n\n\n\nHuawei\n\n\n1\uff09Usually, a pop-up window will appear to select connection mode after connecting the device. Enable \"Media Device (MTP)\", and the system will find the phone.\n\n\n\n\n2\uff09Slide down the screen if there is no pop-out notification for you to select connection modes.\n\n\n\n\n3\uff09Click the circle in the following picture.\n\n\n\n\n4\uff09Enable \"Media Device (MTP)\", and the system will find the phone.\n\n\n\n\n\n\nEnable USB debugging mode? USB debugging mode is also Developer mode, allows apps to be copied via USB to the device.  For different Android versions there will be different configurations to turn the USB debugging mode.\n\n\n\n\n(1) Android 1.5 - Android 3.2, Settings \n Application \n Develop \n enable \"USB debugging\". There may be slightly differences for phones with different ROM.\n\n\n(2) Android 4.0.X\uff0cSettings \n Developer Options \n Enable \u201cUSB Debugging\u201d.\n\n\n(3) Android 4.1.X\uff0cSettings \n Developer Options \n Enable \u201cUSB Debugging\u201d.\n\n\n(4) Android 4.2 - Android 4.3\uff0cSettings \n \"About phone\u201d \n \"Build Number\u201d \n Developer Options\n Enable \u201cUSB Debugging\u201d.\n\n\nFollow the steps below to enable USB Debugging for Android v2.3 and Android v4.2.\n\n\nAndroid v2.3\n\n\n\n\nPress the menu button -\n select Settings.\n\n\n\n\n\n\n\n\nSelect Applications.\n\n\n\n\n\n\n\n\nSelect Development.\n\n\n\n\n\n\n\n\nEnable USB Debugging.\n\n\n\n\n\n\nAndroid v4.2\n\n\n\n\nSelect Settings -\n Select About Phone.\n\n\n\n\n  \n\n\n\n\nQuick tap Build number, until the Developer Mode being activated.\n\n\n\n\n\n\n\n\nYou'll see the message \"You are now a developer!\"\n\n\n\n\n\n\n\n\nTap the Back button and you'll see the Developer options menu under System on your Settings screen.\n\n\n\n\n\n\n\n\nSelect USB Debugging.\n\n\n\n\n\n\n\n\nClick OK to enable USB debugging.\n\n\n\n\n\n\n\n\n\n\nNow the USB debugging mode has been successfully enabled\n\n\n\n\n\n\nRestart the computer or Android device\n\n\nMultiple programs are running at the same time, and that leads to timeout errors. Restart the Android device, run Cocos Studio, try to connect again.", 
            "title": "_1 No Android Devices Found"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter4/connect-solution/en/index.html#no-android-devices-found", 
            "text": "There are a few reasons why you might be getting an error message when trying to get files onto your Android device. Following are some options for you to solve these problems.  1 Check USB cable.  Some data lines are just charging cable, having no ability to transfer data.  2 Replug to check the wire the device are attached properly.  Reconnect the device to check the USB ports.  3 Try another USB interface.  Power supply shortage of the USB port may lead to the unrecognized connection.  4 Try another data line.  A bad USB component may cause errors such as \"unrecognized USB device\".  5 Change the USB connection options.  The default option may be \"charging\". The issue can be solved by changing the mode to \"mass storage\". Different devices have different options. I choose two popular mobiles to show how to changing the connection modes.", 
            "title": "No Android Devices Found\uff1f"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter4/connect-solution/en/index.html#samsung", 
            "text": "1)  If the picture   appears when connect Samsung devices to the computer, you need to change the connection option. Slide down the screen as the following picture shows.   2\uff09Click the circle in the following picture.   3\uff09Enable \"Media Device (MTP)\", and the system will find the phone.", 
            "title": "Samsung"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter4/connect-solution/en/index.html#huawei", 
            "text": "1\uff09Usually, a pop-up window will appear to select connection mode after connecting the device. Enable \"Media Device (MTP)\", and the system will find the phone.   2\uff09Slide down the screen if there is no pop-out notification for you to select connection modes.   3\uff09Click the circle in the following picture.   4\uff09Enable \"Media Device (MTP)\", and the system will find the phone.    Enable USB debugging mode? USB debugging mode is also Developer mode, allows apps to be copied via USB to the device.  For different Android versions there will be different configurations to turn the USB debugging mode.   (1) Android 1.5 - Android 3.2, Settings   Application   Develop   enable \"USB debugging\". There may be slightly differences for phones with different ROM.  (2) Android 4.0.X\uff0cSettings   Developer Options   Enable \u201cUSB Debugging\u201d.  (3) Android 4.1.X\uff0cSettings   Developer Options   Enable \u201cUSB Debugging\u201d.  (4) Android 4.2 - Android 4.3\uff0cSettings   \"About phone\u201d   \"Build Number\u201d   Developer Options  Enable \u201cUSB Debugging\u201d.  Follow the steps below to enable USB Debugging for Android v2.3 and Android v4.2.  Android v2.3   Press the menu button -  select Settings.     Select Applications.     Select Development.     Enable USB Debugging.    Android v4.2   Select Settings -  Select About Phone.        Quick tap Build number, until the Developer Mode being activated.     You'll see the message \"You are now a developer!\"     Tap the Back button and you'll see the Developer options menu under System on your Settings screen.     Select USB Debugging.     Click OK to enable USB debugging.      Now the USB debugging mode has been successfully enabled    Restart the computer or Android device  Multiple programs are running at the same time, and that leads to timeout errors. Restart the Android device, run Cocos Studio, try to connect again.", 
            "title": "Huawei"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter4/debug-on-browser/en/index.html", 
            "text": "How to: Debug Browser Preview\n\n\nFor a JS project, there may be something wrong with preview effect after clicking \"Run in browser\". There are two ways to solve this problem.\n\n\n1 Drop the scene files used in the current browser to the list of JS projects src/resource.js. For example,\n\n\nOriginal resource.js:\n\n\n\n\nModified resources. js:\n\n\n\n\nAdd the resources of current scene to g_resources=[...].\n\n\n2 Enable \"developer tool\", find the bug according to log.\n\n\nChrome\n\n\nCustomize and control Google Chrome -\n More tools -\n Developer tools\n\n\n\n\n360 Browser\n\n\nTools -\n Developer Tools:\n\n\nFirefox\n\n\nSettings -\n Developer -\n Browser Console -\n JS", 
            "title": "_2 How to -> Debug Browser Preview"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter4/debug-on-browser/en/index.html#how-to-debug-browser-preview", 
            "text": "For a JS project, there may be something wrong with preview effect after clicking \"Run in browser\". There are two ways to solve this problem.  1 Drop the scene files used in the current browser to the list of JS projects src/resource.js. For example,  Original resource.js:   Modified resources. js:   Add the resources of current scene to g_resources=[...].  2 Enable \"developer tool\", find the bug according to log.  Chrome  Customize and control Google Chrome -  More tools -  Developer tools   360 Browser  Tools -  Developer Tools:  Firefox  Settings -  Developer -  Browser Console -  JS", 
            "title": "How to: Debug Browser Preview"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter4/FWNoLog/en/index.html", 
            "text": "How to: Use CCLog to Debug project based on precompiled library\n\n\nSymptoms\n\n\nNo log output of projects based on precompiled library . \n\n\nResolution\n\n\nTo solve this issue and use debug log,  take the following interface description for reference.\n\n\ncpp : log(\u201cany string\u201d)\n\n\nlua : release_print(\u201cany string\u201d)\n\n\njs : console.log(\"any string\")", 
            "title": "_3 How to -> Use CCLog to Debug project based on precompiled library"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter4/FWNoLog/en/index.html#how-to-use-cclog-to-debug-project-based-on-precompiled-library", 
            "text": "Symptoms  No log output of projects based on precompiled library .   Resolution  To solve this issue and use debug log,  take the following interface description for reference.  cpp : log(\u201cany string\u201d)  lua : release_print(\u201cany string\u201d)  js : console.log(\"any string\")", 
            "title": "How to: Use CCLog to Debug project based on precompiled library"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter4/HowToUseFBX/en/index.html", 
            "text": "How to: Use FBX File?\n\n\nCurrently cocos support .c3b/.c3t/.obj files. If you want to use .fbx files, you need to convert them to the file types that cocos supports.\n\n\nHow to convert:\n\n\n1 Locate tools/fbx-conv folder in engine directory, and find the converter;\n\n\n\n\n2 Choose appropriate converter for different operating system;\n\n\n\n\n3 Convert the .fbx file to a .c3b file. See   3D Models for more details.", 
            "title": "_4 How to -> Use FBX File"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter4/HowToUseFBX/en/index.html#how-to-use-fbx-file", 
            "text": "Currently cocos support .c3b/.c3t/.obj files. If you want to use .fbx files, you need to convert them to the file types that cocos supports.  How to convert:  1 Locate tools/fbx-conv folder in engine directory, and find the converter;   2 Choose appropriate converter for different operating system;   3 Convert the .fbx file to a .c3b file. See   3D Models for more details.", 
            "title": "How to: Use FBX File?"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter4/OnePixelBug/en/index.html", 
            "text": "How to: Load SpriteSheet Correctly\n\n\nSymptoms\n\n1 pixel gap appears after loading a sprite sheet with cocos. \n\n\nResolution\n\n\nModify \nccConfig.h\n\n\nChange \n#DEFINE CC_FIX_ARTIFACTS_BY_STRECHING_TEXEL 0\n\n\nto \n#define CC_FIX_ARTIFACTS_BY_STRECHING_TEXEL 1", 
            "title": "_5 How to -> Load SpriteSheet Correctly"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter4/OnePixelBug/en/index.html#how-to-load-spritesheet-correctly", 
            "text": "Symptoms \n1 pixel gap appears after loading a sprite sheet with cocos.   Resolution  Modify  ccConfig.h  Change  #DEFINE CC_FIX_ARTIFACTS_BY_STRECHING_TEXEL 0  to  #define CC_FIX_ARTIFACTS_BY_STRECHING_TEXEL 1", 
            "title": "How to: Load SpriteSheet Correctly"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter4/PreloadRes/en/index.html", 
            "text": "How to: Preload Resources\n\n\nCocos Studio does not support asynchronous loading configuration  files but supports asynchronous loading UI images. \n\n\nUse this function \nTextureCache::getInstance()-\naddImageAsync(filename,callback)\n to load images to memory,  and then load UI images. \n\n\nNote\n The loading efficiency of UI has been considerably improved since Cocos 2d-x v3.2. Now loading UI images from memory takes the most loading time.", 
            "title": "_6 How to -> Preload Resources"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter4/PreloadRes/en/index.html#how-to-preload-resources", 
            "text": "Cocos Studio does not support asynchronous loading configuration  files but supports asynchronous loading UI images.   Use this function  TextureCache::getInstance()- addImageAsync(filename,callback)  to load images to memory,  and then load UI images.   Note  The loading efficiency of UI has been considerably improved since Cocos 2d-x v3.2. Now loading UI images from memory takes the most loading time.", 
            "title": "How to: Preload Resources"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter4/TextAuto/en/index.html", 
            "text": "How to: Automatically Wrap Text and Adjust Height of Text\n\n\nFollowing the steps below: \n\n\n1 Adjust \nsetTextAreaSize\n as fixed width and height value 0. \n\n\n2 Set \nignoreContentAdaptWithSize\n true.", 
            "title": "_7 How to -> Automatically Wrap Text and Adjust Height of Text"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter4/TextAuto/en/index.html#how-to-automatically-wrap-text-and-adjust-height-of-text", 
            "text": "Following the steps below:   1 Adjust  setTextAreaSize  as fixed width and height value 0.   2 Set  ignoreContentAdaptWithSize  true.", 
            "title": "How to: Automatically Wrap Text and Adjust Height of Text"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter4/UIHelperGetNode/en/index.html", 
            "text": "Two Automatic Recursive Function on UIHelper\n\n\nAll types of nodes inherited from \nNode\n support the use of \ngetChildByName(name)\n and \ngetChildByTag(tag)\nto obtain a child of the current node. The two functions are able to meet most of our needs. \n\n\nSometimes we need to get the child nodes of some child nodes, and such demand is common. To get the child nodes layer by layer may take long time and energy. \n\n\nFor Cocos Studio v1.x, Cocos 2d-x has offered two seek function to help us solve this problem: \nseekWidgetByName\n \nseekWidgetByTag\n in \nui::UIHelper\n. The two functions will automatically search each layer until finding the matching object. The above child node type, provided by UIHelper is supposed to be Widget. Nodes created by Cocos Studio may contain Widget and non-Widget types of nodes simultaneously. Therefore previous method is not applicable to the new version of Cocos Studio. The two functions are assumed as Widget type, but they only use the node\u2019s interface. What we need to do is to copy these two functions, and change Widget to Node. The two functions are modified as follows. For JS and Lua users, you can design your own.\n\n\nNode* seekNodeByTag(Node* root, int tag)\n{\u00a0\n\u00a0 \u00a0 if (!root)\u00a0\n\u00a0 \u00a0 {\u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 return nullptr;\u00a0\n\u00a0 \u00a0 }\u00a0\n\u00a0 \u00a0 if (root-\ngetTag() == tag)\u00a0\n\u00a0 \u00a0 {\u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 return root;\u00a0\n\u00a0 \u00a0 }\u00a0\n\u00a0 \u00a0 const auto\n arrayRootChildren = root-\ngetChildren();\u00a0\n\u00a0 \u00a0 ssize_t length = arrayRootChildren.size();\u00a0\n\u00a0 \u00a0 for (ssize_t i=0;i\nlength;i++)\u00a0\n\u00a0 \u00a0 {\u00a0\n\u00a0 \u00a0 \u00a0 \u00a0\u00a0Node* child = dynamic_cast\nNode*\n(arrayRootChildren.at(i));\u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 if (child)\u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Node* res = seekNodeByTag(child,tag);\u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (res != nullptr)\u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return res;\u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0\n\u00a0 \u00a0 }\u00a0\n\u00a0 \u00a0 return nullptr;\u00a0\n}\u00a0\n\u00a0\n\u00a0\nNode* seekNodeByName(Node* root, const std::string\n name)\u00a0\n{\u00a0\n\u00a0 \u00a0 if (!root)\u00a0\n\u00a0 \u00a0 {\u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 return nullptr;\u00a0\n\u00a0 \u00a0 }\u00a0\n\u00a0 \u00a0 if (root-\ngetName() == name)\u00a0\n\u00a0 \u00a0 {\u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 return root;\u00a0\n\u00a0 \u00a0 }\u00a0\n\u00a0 \u00a0 const auto\n arrayRootChildren = root-\ngetChildren();\u00a0\n\u00a0 \u00a0 for (auto\n subWidget : arrayRootChildren)\u00a0\n\u00a0 \u00a0 {\u00a0\n\u00a0 \u00a0 \u00a0 \u00a0\u00a0Node* child = dynamic_cast\nNode*\n(subWidget);\u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 if (child)\u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Node* res = seekNodeByName(child,name);\u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (res != nullptr)\u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return res;\u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0\n\u00a0 \u00a0 }\u00a0\n\u00a0 \u00a0 return nullptr;\u00a0\n}", 
            "title": "_8 Two Automatic Recursive Function on UIHelper"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter4/UIHelperGetNode/en/index.html#two-automatic-recursive-function-on-uihelper", 
            "text": "All types of nodes inherited from  Node  support the use of  getChildByName(name)  and  getChildByTag(tag) to obtain a child of the current node. The two functions are able to meet most of our needs.   Sometimes we need to get the child nodes of some child nodes, and such demand is common. To get the child nodes layer by layer may take long time and energy.   For Cocos Studio v1.x, Cocos 2d-x has offered two seek function to help us solve this problem:  seekWidgetByName   seekWidgetByTag  in  ui::UIHelper . The two functions will automatically search each layer until finding the matching object. The above child node type, provided by UIHelper is supposed to be Widget. Nodes created by Cocos Studio may contain Widget and non-Widget types of nodes simultaneously. Therefore previous method is not applicable to the new version of Cocos Studio. The two functions are assumed as Widget type, but they only use the node\u2019s interface. What we need to do is to copy these two functions, and change Widget to Node. The two functions are modified as follows. For JS and Lua users, you can design your own.  Node* seekNodeByTag(Node* root, int tag)\n{\u00a0\n\u00a0 \u00a0 if (!root)\u00a0\n\u00a0 \u00a0 {\u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 return nullptr;\u00a0\n\u00a0 \u00a0 }\u00a0\n\u00a0 \u00a0 if (root- getTag() == tag)\u00a0\n\u00a0 \u00a0 {\u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 return root;\u00a0\n\u00a0 \u00a0 }\u00a0\n\u00a0 \u00a0 const auto  arrayRootChildren = root- getChildren();\u00a0\n\u00a0 \u00a0 ssize_t length = arrayRootChildren.size();\u00a0\n\u00a0 \u00a0 for (ssize_t i=0;i length;i++)\u00a0\n\u00a0 \u00a0 {\u00a0\n\u00a0 \u00a0 \u00a0 \u00a0\u00a0Node* child = dynamic_cast Node* (arrayRootChildren.at(i));\u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 if (child)\u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Node* res = seekNodeByTag(child,tag);\u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (res != nullptr)\u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return res;\u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0\n\u00a0 \u00a0 }\u00a0\n\u00a0 \u00a0 return nullptr;\u00a0\n}\u00a0\n\u00a0\n\u00a0\nNode* seekNodeByName(Node* root, const std::string  name)\u00a0\n{\u00a0\n\u00a0 \u00a0 if (!root)\u00a0\n\u00a0 \u00a0 {\u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 return nullptr;\u00a0\n\u00a0 \u00a0 }\u00a0\n\u00a0 \u00a0 if (root- getName() == name)\u00a0\n\u00a0 \u00a0 {\u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 return root;\u00a0\n\u00a0 \u00a0 }\u00a0\n\u00a0 \u00a0 const auto  arrayRootChildren = root- getChildren();\u00a0\n\u00a0 \u00a0 for (auto  subWidget : arrayRootChildren)\u00a0\n\u00a0 \u00a0 {\u00a0\n\u00a0 \u00a0 \u00a0 \u00a0\u00a0Node* child = dynamic_cast Node* (subWidget);\u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 if (child)\u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Node* res = seekNodeByName(child,name);\u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (res != nullptr)\u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return res;\u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0\n\u00a0 \u00a0 }\u00a0\n\u00a0 \u00a0 return nullptr;\u00a0\n}", 
            "title": "Two Automatic Recursive Function on UIHelper"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter4/upgrade-framework/en/index.html", 
            "text": "Issues about Upgrading or Downgrading Framework\n\n\nBased on version 3.10 and later cocos2d-x:\n\n\nIs no longer supported by switching Cocos Framework version for automatic upgrades, support supports manual upgrade, as follows:\n\n\nCreate a project (Project 1) based on the new matching Framework. Find the original project (Project 2) folders before upgrading Framework. Compare files of Project 1 with those of Project 2. Manually merge files in Classes, proj.android, proj,ios_mac, proj, win32 except files under project folder.\n\n\nBased on cocos2d-x 3.9 and earlier versions:\n\n\nDifferent versions of Framework can be selected. Under Project in the menu bar, select Project Setting -\n Package, as shown below,\n\n\n\n\nAfter selecting the matching Framework, the project will upgrade automatically when you run or package them. Files in Classes, proj.android, proj,ios_mac, proj, win32 will redirect to those of the new matching Framework except files under project folder. If there are issues after upgrading Framework, you can try the following method:\n\n\nCreate a project (Project 1) based on the new matching Framework. Find the original project (Project 2) folders before upgrading Framework. Compare files of Project 1 with those of Project 2. Manually merge files in Classes, proj.android, proj,ios_mac, proj, win32 except files under project folder.", 
            "title": "_9 Issues about Upgrading or Downgrading Framework"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter4/upgrade-framework/en/index.html#issues-about-upgrading-or-downgrading-framework", 
            "text": "Based on version 3.10 and later cocos2d-x:  Is no longer supported by switching Cocos Framework version for automatic upgrades, support supports manual upgrade, as follows:  Create a project (Project 1) based on the new matching Framework. Find the original project (Project 2) folders before upgrading Framework. Compare files of Project 1 with those of Project 2. Manually merge files in Classes, proj.android, proj,ios_mac, proj, win32 except files under project folder.  Based on cocos2d-x 3.9 and earlier versions:  Different versions of Framework can be selected. Under Project in the menu bar, select Project Setting -  Package, as shown below,   After selecting the matching Framework, the project will upgrade automatically when you run or package them. Files in Classes, proj.android, proj,ios_mac, proj, win32 will redirect to those of the new matching Framework except files under project folder. If there are issues after upgrading Framework, you can try the following method:  Create a project (Project 1) based on the new matching Framework. Find the original project (Project 2) folders before upgrading Framework. Compare files of Project 1 with those of Project 2. Manually merge files in Classes, proj.android, proj,ios_mac, proj, win32 except files under project folder.", 
            "title": "Issues about Upgrading or Downgrading Framework"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter4/LoadError/en/index.html", 
            "text": "How to: Load Data Exported from cocos\n\n\nSymptoms\n\n\nFailed to load data exported from cocos or the loading effects are not the same as desired.\n\n\nCause\n\n\nThis issue may occur due to one or more of the following reasons: directory structure, layout codes and browser settings.\n\n\nResolution\n\n\n1 Adjust directory structure, and add \nAddSearchPath\n to res folder by default.\n\n\n2 Call layout codes, see \nUI Layout and Multi-resolution Support\n for more information.\n\n\n3 Add additional resources to \nsrc/resource.js\n, see \nLoad Exported Data\n from more information.", 
            "title": "_10 How to -> Load Data Exported from cocos"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter4/LoadError/en/index.html#how-to-load-data-exported-from-cocos", 
            "text": "Symptoms  Failed to load data exported from cocos or the loading effects are not the same as desired.  Cause  This issue may occur due to one or more of the following reasons: directory structure, layout codes and browser settings.  Resolution  1 Adjust directory structure, and add  AddSearchPath  to res folder by default.  2 Call layout codes, see  UI Layout and Multi-resolution Support  for more information.  3 Add additional resources to  src/resource.js , see  Load Exported Data  from more information.", 
            "title": "How to: Load Data Exported from cocos"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter4/Import1.6ProjectError/en/index.html", 
            "text": "How to: Import Project from v1.6\n\n\nSymptoms\n\n\nImport project from v1.6\" option is  unavailable. \n\n\nResolution\n\n\nTo solve this issue, create a project first and then choose \"File -\n Import -\n import project from v1.6...\".", 
            "title": "_11 How to -> Import Project from v1.6"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter4/Import1.6ProjectError/en/index.html#how-to-import-project-from-v16", 
            "text": "Symptoms  Import project from v1.6\" option is  unavailable.   Resolution  To solve this issue, create a project first and then choose \"File -  Import -  import project from v1.6...\".", 
            "title": "How to: Import Project from v1.6"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/HowToCode/CustomizeFramework/en/index.html", 
            "text": "Customize Cocos Framework \n Simulator\n\n\nOverview\n\n\nThe following section provides guidance on how to create and include custom Cocos Framework \n Simulator for your games.\n\n\nVersion Requirement\n\n\nCustomizing Cocos Framework requires Cocos Framework v3.7 or higher.\n\n\nThe directories below are based on v3.7 and the installation of Cocos Framework.\n\n\nHow to customize Cocos Framework\n\n\nCustomizing Cocos Framework is actually modifying its source codes. After the installation of Cocos Framework, you can customize the framework with IDE or code editors.\n\n\n\n\nOn Mac, you can open projects \n/Applications/Cocos/frameworks/cocos2d-x-v3.7/build/CocosFramework.xcodeproj\n with XCode. Then you need to modify and debug codes.\n\n\nOn Windows, you can open projects \n[installation directory]/frameworks/cocos2d-x-v3.7/build/CocosFramework.sln\n with Visual Studio. Then you need to modify and debug codes.\n\n\n\n\nHow to release the custom Cocos Framework\n\n\nBuild a new precompiled library\n\n\nThere is a scripting tool in Cocos Framework to compile source codes to precompiled library: \nframeworks/cocos2d-x-v3.7/tools/framework-compile/gen_cocos_libs.py\n.\n\n\nThe following is a detailed description of how to use this scripting tool:\n\n\n```\nusage: gen_cocos_libs.py [-h] [-c] [-all] [--win] [--mac] [--ios] [--android]\n [--dis-strip] [--vs VS_VERSION] [--app-abi APP_ABI]\n\n -h,\n\n -c\n\n -all\n\n --win\n\n --mac\n\n --ios\n\n --android\n\n --dis-strip, --disable-strip\n --vs VS_VERSION\n\n --app-abi APP_ABI\n ```\n\n\n\nFor example:\n\n\n\n\npython gen_cocos_libs.py -c -all\n : Clear previous precompiled library and compile all platforms.\n\n\npython gen_cocos_libs.py --win --vs 2015\n : Compile Win32 platform with Visual Studio 2015.\n\n\n\n\nPrecompiled library will be created in the following directory \nframeworks/cocos2d-x-v3.7/prebuilt\n. Include the new precompiled library to game projects.\n\n\nNote\n To customize Cocos Framework, you need to modify source codes and maintain project files. Any problem in the custom codes or projects will lead to a failure in implementing compiling tools.\n\n\nCreate a new simulator\n\n\nThere is a scripting tool in Cocos Framework to compile source codes to precompiled library: \nframeworks/cocos2d-x-v3.7/tools/framework-compile/gen_cocos_simulator.py\n\u3002\n\n\nThe following is a detailed description of how to use this scripting tool:\n\n\n```\nusage: gen_cocos_simulator.py [-h] [-c] [-m {debug,release}] [-o OUT_DIR] -p\n  {ios,mac,android,win32,all} [--vs VS_VERSION]\n\n\n-h, --help\n\n-c, --clean\n\n-m {debug,release}, --mode {debug,release}\n\n-o OUT_DIR,\n\n-p {ios,mac,android,win32,all}\n\n--vs VS_VERSION   \u6307\u5b9a\u4f7f\u7528\u7684 Visual Studio \u7248\u672c\u3002\u4e0d\u6307\u5b9a\u7684\u8bdd\uff0c\u81ea\u52a8\u67e5\u627e\u53ef\u7528\u7248\u672c\u3002\n```\n\n\n\nFor example:\n\n\n\n\npython gen_cocos_simulator.py -c -p all\n : Clear previous simulators and compile all platforms.\n\n\npython gen_cocos_libs.py -p win32 --vs 2015\n : Compile Win32 simulator with Visual Studio 2015.\n\n\n\n\nIntegrate custom simulator\n\n\nCopy and replace the files under \" \ninstallation directory/Cocos/cocos-simulator-bin\n \". Once you have done it, you can use the custom simulator.\n\n\nNote\n Simulator is mainly used to preview projects. If you want to use a new simulator, you need to replace the current used simulator with the new one.", 
            "title": "_12 Customize Framework(v3.7)"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/HowToCode/CustomizeFramework/en/index.html#customize-cocos-framework-simulator", 
            "text": "", 
            "title": "Customize Cocos Framework &amp; Simulator"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/HowToCode/CustomizeFramework/en/index.html#overview", 
            "text": "The following section provides guidance on how to create and include custom Cocos Framework   Simulator for your games.", 
            "title": "Overview"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/HowToCode/CustomizeFramework/en/index.html#version-requirement", 
            "text": "Customizing Cocos Framework requires Cocos Framework v3.7 or higher.  The directories below are based on v3.7 and the installation of Cocos Framework.", 
            "title": "Version Requirement"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/HowToCode/CustomizeFramework/en/index.html#how-to-customize-cocos-framework", 
            "text": "Customizing Cocos Framework is actually modifying its source codes. After the installation of Cocos Framework, you can customize the framework with IDE or code editors.   On Mac, you can open projects  /Applications/Cocos/frameworks/cocos2d-x-v3.7/build/CocosFramework.xcodeproj  with XCode. Then you need to modify and debug codes.  On Windows, you can open projects  [installation directory]/frameworks/cocos2d-x-v3.7/build/CocosFramework.sln  with Visual Studio. Then you need to modify and debug codes.", 
            "title": "How to customize Cocos Framework"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/HowToCode/CustomizeFramework/en/index.html#how-to-release-the-custom-cocos-framework", 
            "text": "", 
            "title": "How to release the custom Cocos Framework"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/HowToCode/CustomizeFramework/en/index.html#build-a-new-precompiled-library", 
            "text": "There is a scripting tool in Cocos Framework to compile source codes to precompiled library:  frameworks/cocos2d-x-v3.7/tools/framework-compile/gen_cocos_libs.py .  The following is a detailed description of how to use this scripting tool:  ```\nusage: gen_cocos_libs.py [-h] [-c] [-all] [--win] [--mac] [--ios] [--android]\n [--dis-strip] [--vs VS_VERSION] [--app-abi APP_ABI]\n\n -h,\n\n -c\n\n -all\n\n --win\n\n --mac\n\n --ios\n\n --android\n\n --dis-strip, --disable-strip\n --vs VS_VERSION\n\n --app-abi APP_ABI\n ```  For example:   python gen_cocos_libs.py -c -all  : Clear previous precompiled library and compile all platforms.  python gen_cocos_libs.py --win --vs 2015  : Compile Win32 platform with Visual Studio 2015.   Precompiled library will be created in the following directory  frameworks/cocos2d-x-v3.7/prebuilt . Include the new precompiled library to game projects.  Note  To customize Cocos Framework, you need to modify source codes and maintain project files. Any problem in the custom codes or projects will lead to a failure in implementing compiling tools.", 
            "title": "Build a new precompiled library"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/HowToCode/CustomizeFramework/en/index.html#create-a-new-simulator", 
            "text": "There is a scripting tool in Cocos Framework to compile source codes to precompiled library:  frameworks/cocos2d-x-v3.7/tools/framework-compile/gen_cocos_simulator.py \u3002  The following is a detailed description of how to use this scripting tool:  ```\nusage: gen_cocos_simulator.py [-h] [-c] [-m {debug,release}] [-o OUT_DIR] -p\n  {ios,mac,android,win32,all} [--vs VS_VERSION]\n\n\n-h, --help\n\n-c, --clean\n\n-m {debug,release}, --mode {debug,release}\n\n-o OUT_DIR,\n\n-p {ios,mac,android,win32,all}\n\n--vs VS_VERSION   \u6307\u5b9a\u4f7f\u7528\u7684 Visual Studio \u7248\u672c\u3002\u4e0d\u6307\u5b9a\u7684\u8bdd\uff0c\u81ea\u52a8\u67e5\u627e\u53ef\u7528\u7248\u672c\u3002\n```  For example:   python gen_cocos_simulator.py -c -p all  : Clear previous simulators and compile all platforms.  python gen_cocos_libs.py -p win32 --vs 2015  : Compile Win32 simulator with Visual Studio 2015.", 
            "title": "Create a new simulator"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/HowToCode/CustomizeFramework/en/index.html#integrate-custom-simulator", 
            "text": "Copy and replace the files under \"  installation directory/Cocos/cocos-simulator-bin  \". Once you have done it, you can use the custom simulator.  Note  Simulator is mainly used to preview projects. If you want to use a new simulator, you need to replace the current used simulator with the new one.", 
            "title": "Integrate custom simulator"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/HowToCode/CustomizeFramework-v3.8/en/index.html", 
            "text": "Customize Cocos Framework \n Simulator\n\n\nOverview\n\n\nThe following section provides guidance on how to create and include custom Cocos Framework \n Simulator for your games.\n\n\nVersion Requirement\n\n\nCustomizing Cocos Framework requires Cocos Framework v3.7 or higher. This document is used for version v3.8 or higher.\n\n\nThe directories below are based on v3.8 and the installation of Cocos Framework.\n\n\nHow to customize Cocos Framework\n\n\nCustomizing Cocos Framework is actually modifying its source codes. After the installation of Cocos Framework, you can customize the framework with IDE or code editors.\n\n\n\n\nOn Mac, you can open projects \n/Applications/Cocos/frameworks/cocos2d-x-v3.8/build/CocosFramework.xcodeproj\n with XCode. Then you need to modify and debug codes.\n\n\nOn Windows, you can open projects \n[installation directory]/frameworks/cocos2d-x-v3.8/build/CocosFramework.sln\n with Visual Studio. Then you need to modify and debug codes.\n\n\n\n\nHow to release the custom Cocos Framework\n\n\nBuild a new precompiled library\n\n\nThere is a scripting tool in Cocos Framework to compile source codes to precompiled library: \ncocos gen-libs\n.\n\n\nThe following is a detailed description of how to use this scripting tool:\n\n\nusage: cocos gen-libs [-h] [-c] [-e ENGINE_PATH] [-p {ios,mac,android,win32}]\n                      [-m {debug,release}] [--dis-strip] [--vs VS_VERSION]\n                      [--app-abi APP_ABI]\n\nGenerate prebuilt libs of engine. The libs will be placed in 'prebuilt' folder\nof the engine root path.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -c                    Remove the 'prebuilt' folder at first.\n  -e ENGINE_PATH        Specify the engine path. Default is the engine root\n                        path of current tools.\n  -p {ios,mac,android,win32}\n                        Specify the target platform. Can specify multi\n                        platform by using '-p' multi times. Default generate\n                        all available platforms.\n  -m {debug,release}, --mode {debug,release}\n                        Generate cocos libs for debug or release. Default is\n                        release.\n  --dis-strip           Disable the strip of the generated libs.\n\nWindows Options:\n  --vs VS_VERSION       Specify the Visual Studio version, such as 2013.\n                        Default find available version automatically.\n\nAndroid Options:\n  --app-abi APP_ABI     Set the APP_ABI of ndk-build. Can be multi value\n                        separated with ':'. Sample : --app-aib\n                        armeabi:x86:mips. Default value is 'armeabi'.\n\n\n\n\n\nFor example:\n\n\n\n\ncocos gen-libs -c\n : Clear previous precompiled library and compile all platforms.\n\n\ncocos gen-libs -p win32 --vs 2015\n : Compile Win32 platform with Visual Studio 2015.\n\n\n\n\nPrecompiled library will be created in the following directory \nframeworks/cocos2d-x-v3.8/prebuilt\n. Include the new precompiled library to game projects.\n\n\nNote\n\n\n\n\nTo customize Cocos Framework, you need to modify source codes and maintain project files. Any problem in the custom codes or projects will lead to a failure in implementing compiling tools.\n\n\nWhen you're genrating prebuilt libs with \n-m debug\n, you should modify the Visual Studio configuration of your game project like this:\nChange the value of \nC/C++ -\n Code Generation -\n Runtime Library\n from \n/MD\n to \n/MDd\n. Take a look at the image:\n\n\n\n\n\nCreate a new simulator\n\n\nThere is a scripting tool in Cocos Framework to compile source codes to precompiled library: \ncocos gen-simulator\n\u3002\n\n\nThe following is a detailed description of how to use this scripting tool:\n\n\nusage: cocos gen-simulator [-h] [-c] [-e ENGINE_PATH] [-m {debug,release}]\n                           [-o OUT_DIR] [-p {ios,mac,android,win32}]\n                           [--vs VS_VERSION]\n\nGenerate Cocos Simulator.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -c, --clean           Clean the output directory before generating. Will\n                        remove the output directory at first.\n  -e ENGINE_PATH        Specify the engine path. Default is the engine root\n                        path of current tools.\n  -m {debug,release}, --mode {debug,release}\n                        Generate simulator for debug or release. Default is\n                        debug.\n  -o OUT_DIR, --output OUT_DIR\n                        Where to save Cocos Simulator. Default is the\n                        'simulator' folder in the root path of engine.\n  -p {ios,mac,android,win32}\n                        Specify the target platform. Can specify multi\n                        platform by using '-p' multi times. Default generate\n                        all available platforms.\n  --vs VS_VERSION       Specify the Visual Studio version, such as 2013.\n                        Default find available version automatically.\n\n\n\n\nFor example:\n\n\n\n\ncocos gen-simulator -c\n : Clear previous simulators and compile all platforms.\n\n\ncocos gen-simulator -p win32 --vs 2015\n : Compile Win32 simulator with Visual Studio 2015.\n\n\n\n\nIntegrate custom simulator\n\n\nCopy and replace the files under \" \ninstallation directory/Cocos/cocos-simulator-bin\n \". Once you have done it, you can use the custom simulator.\n\n\nNote\n Simulator is mainly used to preview projects. If you want to use a new simulator, you need to replace the current used simulator with the new one.", 
            "title": "_13 Customize Framework(v3.8~3.9)"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/HowToCode/CustomizeFramework-v3.8/en/index.html#customize-cocos-framework-simulator", 
            "text": "", 
            "title": "Customize Cocos Framework &amp; Simulator"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/HowToCode/CustomizeFramework-v3.8/en/index.html#overview", 
            "text": "The following section provides guidance on how to create and include custom Cocos Framework   Simulator for your games.", 
            "title": "Overview"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/HowToCode/CustomizeFramework-v3.8/en/index.html#version-requirement", 
            "text": "Customizing Cocos Framework requires Cocos Framework v3.7 or higher. This document is used for version v3.8 or higher.  The directories below are based on v3.8 and the installation of Cocos Framework.", 
            "title": "Version Requirement"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/HowToCode/CustomizeFramework-v3.8/en/index.html#how-to-customize-cocos-framework", 
            "text": "Customizing Cocos Framework is actually modifying its source codes. After the installation of Cocos Framework, you can customize the framework with IDE or code editors.   On Mac, you can open projects  /Applications/Cocos/frameworks/cocos2d-x-v3.8/build/CocosFramework.xcodeproj  with XCode. Then you need to modify and debug codes.  On Windows, you can open projects  [installation directory]/frameworks/cocos2d-x-v3.8/build/CocosFramework.sln  with Visual Studio. Then you need to modify and debug codes.", 
            "title": "How to customize Cocos Framework"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/HowToCode/CustomizeFramework-v3.8/en/index.html#how-to-release-the-custom-cocos-framework", 
            "text": "", 
            "title": "How to release the custom Cocos Framework"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/HowToCode/CustomizeFramework-v3.8/en/index.html#build-a-new-precompiled-library", 
            "text": "There is a scripting tool in Cocos Framework to compile source codes to precompiled library:  cocos gen-libs .  The following is a detailed description of how to use this scripting tool:  usage: cocos gen-libs [-h] [-c] [-e ENGINE_PATH] [-p {ios,mac,android,win32}]\n                      [-m {debug,release}] [--dis-strip] [--vs VS_VERSION]\n                      [--app-abi APP_ABI]\n\nGenerate prebuilt libs of engine. The libs will be placed in 'prebuilt' folder\nof the engine root path.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -c                    Remove the 'prebuilt' folder at first.\n  -e ENGINE_PATH        Specify the engine path. Default is the engine root\n                        path of current tools.\n  -p {ios,mac,android,win32}\n                        Specify the target platform. Can specify multi\n                        platform by using '-p' multi times. Default generate\n                        all available platforms.\n  -m {debug,release}, --mode {debug,release}\n                        Generate cocos libs for debug or release. Default is\n                        release.\n  --dis-strip           Disable the strip of the generated libs.\n\nWindows Options:\n  --vs VS_VERSION       Specify the Visual Studio version, such as 2013.\n                        Default find available version automatically.\n\nAndroid Options:\n  --app-abi APP_ABI     Set the APP_ABI of ndk-build. Can be multi value\n                        separated with ':'. Sample : --app-aib\n                        armeabi:x86:mips. Default value is 'armeabi'.  For example:   cocos gen-libs -c  : Clear previous precompiled library and compile all platforms.  cocos gen-libs -p win32 --vs 2015  : Compile Win32 platform with Visual Studio 2015.   Precompiled library will be created in the following directory  frameworks/cocos2d-x-v3.8/prebuilt . Include the new precompiled library to game projects.  Note   To customize Cocos Framework, you need to modify source codes and maintain project files. Any problem in the custom codes or projects will lead to a failure in implementing compiling tools.  When you're genrating prebuilt libs with  -m debug , you should modify the Visual Studio configuration of your game project like this:\nChange the value of  C/C++ -  Code Generation -  Runtime Library  from  /MD  to  /MDd . Take a look at the image:", 
            "title": "Build a new precompiled library"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/HowToCode/CustomizeFramework-v3.8/en/index.html#create-a-new-simulator", 
            "text": "There is a scripting tool in Cocos Framework to compile source codes to precompiled library:  cocos gen-simulator \u3002  The following is a detailed description of how to use this scripting tool:  usage: cocos gen-simulator [-h] [-c] [-e ENGINE_PATH] [-m {debug,release}]\n                           [-o OUT_DIR] [-p {ios,mac,android,win32}]\n                           [--vs VS_VERSION]\n\nGenerate Cocos Simulator.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -c, --clean           Clean the output directory before generating. Will\n                        remove the output directory at first.\n  -e ENGINE_PATH        Specify the engine path. Default is the engine root\n                        path of current tools.\n  -m {debug,release}, --mode {debug,release}\n                        Generate simulator for debug or release. Default is\n                        debug.\n  -o OUT_DIR, --output OUT_DIR\n                        Where to save Cocos Simulator. Default is the\n                        'simulator' folder in the root path of engine.\n  -p {ios,mac,android,win32}\n                        Specify the target platform. Can specify multi\n                        platform by using '-p' multi times. Default generate\n                        all available platforms.\n  --vs VS_VERSION       Specify the Visual Studio version, such as 2013.\n                        Default find available version automatically.  For example:   cocos gen-simulator -c  : Clear previous simulators and compile all platforms.  cocos gen-simulator -p win32 --vs 2015  : Compile Win32 simulator with Visual Studio 2015.", 
            "title": "Create a new simulator"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/HowToCode/CustomizeFramework-v3.8/en/index.html#integrate-custom-simulator", 
            "text": "Copy and replace the files under \"  installation directory/Cocos/cocos-simulator-bin  \". Once you have done it, you can use the custom simulator.  Note  Simulator is mainly used to preview projects. If you want to use a new simulator, you need to replace the current used simulator with the new one.", 
            "title": "Integrate custom simulator"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/HowToCode/CustomizeFramework-v3.10/en/index.html", 
            "text": "Customize Cocos Precompiled Library\n\n\nOverview\n\n\nThe following section provides guidance on how to custom Cocos2d-x precompiled library for your games.\n\n\nVersion Requirement\n\n\nCustomizing cocos2d-x precompiled library requires Cocos v3.10 or higher. This document is used for version v3.10 or higher.\n\n\nThe directories below are based on v3.10 and the installation of Cocos v3.10.\n\n\nHow to customize Cocos2d-x precompiled library\n\n\nCustomizing cocos2d-x precompiled library is actually modifying its source codes. After the installation of Cocos 3.10, you can customize the cocos2d-x with IDE or code editors.\n\n\n\n\nOn Mac, you can open projects \n/Applications/Cocos/Cocos2d-x/cocos2d-x-v3.10/build/cocos2d_libs.xcodeproj\n with XCode. Then you need to modify and debug codes.\n\n\nOn Windows, you can open projects \n[installation directory]/Cocos/cocos2d-x-v3.10/build/cocos2d-win32.sln\n with Visual Studio. Then you need to modify and debug codes.\n\n\n\n\nHow to publish the custom Cocos2d-x\n\n\nBuild a new precompiled library\n\n\nThere is a scripting tool in Cocos2d-x-3.10 to compile source codes to precompiled library: \ncocos gen-libs\n.\n\n\nThe following is a detailed description of how to use this scripting tool:\n\n\nusage: cocos gen-libs [-h] [-c] [-e ENGINE_PATH] [-p {ios,mac,android,win32}]\n                      [-m {debug,release}] [--dis-strip] [--vs VS_VERSION]\n                      [--app-abi APP_ABI]\n\nGenerate prebuilt libs of engine. The libs will be placed in 'prebuilt' folder\nof the engine root path.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -c                    Remove the 'prebuilt' folder at first.\n  -e ENGINE_PATH        Specify the engine path. Default is the engine root\n                        path of current tools.\n  -p {ios,mac,android,win32}\n                        Specify the target platform. Can specify multi\n                        platform by using '-p' multi times. Default generate\n                        all available platforms.\n  -m {debug,release}, --mode {debug,release}\n                        Generate cocos libs for debug or release. Default is\n                        release.\n  --dis-strip           Disable the strip of the generated libs.\n\nWindows Options:\n  --vs VS_VERSION       Specify the Visual Studio version, such as 2013.\n                        Default find available version automatically.\n\nAndroid Options:\n  --app-abi APP_ABI     Set the APP_ABI of ndk-build. Can be multi value\n                        separated with ':'. Sample : --app-aib\n                        armeabi:x86:mips. Default value is 'armeabi'.\n\n\n\n\n\nFor example:\n\n\n\n\ncocos gen-libs -c\n : Clear previous precompiled library and compile all platforms.\n\n\ncocos gen-libs -p win32 --vs 2013\n : Compile Win32 platform with Visual Studio 2013.\n\n\n\n\nPrecompiled library will be created in the following directory \nCocos2d-x/cocos2d-x-v3.10/prebuilt\n. Include the new precompiled library to game projects.\n\n\nNote\n\n\n\n\nTo customize Cocos2d-x precompiled library, you need to modify source codes and maintain project files. Any problem in the custom codes or projects will lead to a failure in implementing compiling tools.\n\n\nWhen you're genrating prebuilt libs with \n-m debug\n, you should modify the Visual Studio configuration of your game project like this:\nChange the value of \nC/C++ -\n Code Generation -\n Runtime Library\n from \n/MD\n to \n/MDd\n. Take a look at the image:", 
            "title": "_14 Customize precompiled library(v3.10)"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/HowToCode/CustomizeFramework-v3.10/en/index.html#customize-cocos-precompiled-library", 
            "text": "", 
            "title": "Customize Cocos Precompiled Library"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/HowToCode/CustomizeFramework-v3.10/en/index.html#overview", 
            "text": "The following section provides guidance on how to custom Cocos2d-x precompiled library for your games.", 
            "title": "Overview"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/HowToCode/CustomizeFramework-v3.10/en/index.html#version-requirement", 
            "text": "Customizing cocos2d-x precompiled library requires Cocos v3.10 or higher. This document is used for version v3.10 or higher.  The directories below are based on v3.10 and the installation of Cocos v3.10.", 
            "title": "Version Requirement"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/HowToCode/CustomizeFramework-v3.10/en/index.html#how-to-customize-cocos2d-x-precompiled-library", 
            "text": "Customizing cocos2d-x precompiled library is actually modifying its source codes. After the installation of Cocos 3.10, you can customize the cocos2d-x with IDE or code editors.   On Mac, you can open projects  /Applications/Cocos/Cocos2d-x/cocos2d-x-v3.10/build/cocos2d_libs.xcodeproj  with XCode. Then you need to modify and debug codes.  On Windows, you can open projects  [installation directory]/Cocos/cocos2d-x-v3.10/build/cocos2d-win32.sln  with Visual Studio. Then you need to modify and debug codes.", 
            "title": "How to customize Cocos2d-x precompiled library"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/HowToCode/CustomizeFramework-v3.10/en/index.html#how-to-publish-the-custom-cocos2d-x", 
            "text": "", 
            "title": "How to publish the custom Cocos2d-x"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter3/HowToCode/CustomizeFramework-v3.10/en/index.html#build-a-new-precompiled-library", 
            "text": "There is a scripting tool in Cocos2d-x-3.10 to compile source codes to precompiled library:  cocos gen-libs .  The following is a detailed description of how to use this scripting tool:  usage: cocos gen-libs [-h] [-c] [-e ENGINE_PATH] [-p {ios,mac,android,win32}]\n                      [-m {debug,release}] [--dis-strip] [--vs VS_VERSION]\n                      [--app-abi APP_ABI]\n\nGenerate prebuilt libs of engine. The libs will be placed in 'prebuilt' folder\nof the engine root path.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -c                    Remove the 'prebuilt' folder at first.\n  -e ENGINE_PATH        Specify the engine path. Default is the engine root\n                        path of current tools.\n  -p {ios,mac,android,win32}\n                        Specify the target platform. Can specify multi\n                        platform by using '-p' multi times. Default generate\n                        all available platforms.\n  -m {debug,release}, --mode {debug,release}\n                        Generate cocos libs for debug or release. Default is\n                        release.\n  --dis-strip           Disable the strip of the generated libs.\n\nWindows Options:\n  --vs VS_VERSION       Specify the Visual Studio version, such as 2013.\n                        Default find available version automatically.\n\nAndroid Options:\n  --app-abi APP_ABI     Set the APP_ABI of ndk-build. Can be multi value\n                        separated with ':'. Sample : --app-aib\n                        armeabi:x86:mips. Default value is 'armeabi'.  For example:   cocos gen-libs -c  : Clear previous precompiled library and compile all platforms.  cocos gen-libs -p win32 --vs 2013  : Compile Win32 platform with Visual Studio 2013.   Precompiled library will be created in the following directory  Cocos2d-x/cocos2d-x-v3.10/prebuilt . Include the new precompiled library to game projects.  Note   To customize Cocos2d-x precompiled library, you need to modify source codes and maintain project files. Any problem in the custom codes or projects will lead to a failure in implementing compiling tools.  When you're genrating prebuilt libs with  -m debug , you should modify the Visual Studio configuration of your game project like this:\nChange the value of  C/C++ -  Code Generation -  Runtime Library  from  /MD  to  /MDd . Take a look at the image:", 
            "title": "Build a new precompiled library"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter4/FixPackageError/en/index.html", 
            "text": "How to: Fix Packaging and Running Issues\n\n\n1 Install JDK, SDK, NDK, Framework and cocos projects in a directory supporting English language. Installation in a directory supporting non-English languages may cause errors when packaging.\n\n\n2 After the successful installation of JDK, in Java directory there will be two folders with the name starting with jdk and jre respectively. Add bin directory of the two folders to Environment Variables. New variable name is JAVA_HOME, and variable value is the folder path where JDK is installed.\n\n\n\n\nSet variable Path, and append the location of the bin folder where the JRE is installed. You need to use a semicolon in English half-angle state, and then add bin directory. For example, C:\\Program Files\\Java\\jre1.8.0_45\\bin.\n\n\n\n\n3 Add cpp files to Visual Studio and XCode projects. Meanwhile modify android.mk, which is located at proj.android/jni/Android.mk.\n\n\n4 Use UTF-8 to code Cpp. It is convenient to view the file encoding format with Visual Studio.\n\n\n\n\n\n\n5 Currently it is not supported to access files on a USB disk, for on Windows the path support in Python is flawed. Copy project files from the USB disk to your computer and run the project.\n\n\n6  Cannot find the header files (No such file of directory), for example:\n\n\nWARNING [Project: :app] Current NDK support is deprecated.  Alternative will be provided in the future.\n:app:preBuild UP-TO-DATE\n:app:preDebugBuild UP-TO-DATE\n:app:compileDebugNdk\n/Users/zhongcs/Documents/CocosProjects/CocosProjecttest/testandroid2/app/src/main/jni/hellocpp/main.cpp:1:25: fatal error: AppDelegate.h: No such file or directory\n #include \"AppDelegate.h\"\n                         ^\ncompilation terminated.\n\n\n\nSolution: Check Android.mk file, and include \"AppDelegate.h\" into LOCAL_C_INCLUDES.\n\n\n7 Undefined reference to \u2026, for example:\n\n\n./obj/local/armeabi/objs-debug/cocos2dcpp_shared/__/__/Classes/Gem.o:Gem.cpp:vtable for Gem: error: undefined reference to 'cocos2d::Sprite::setDisplayFrameWithAnimationName(std::string const\n, int)'\ncollect2.exe: error: ld returned 1 exit status\nmake.exe: *** [obj/local/armeabi/libcocos2dcpp.so] Error 1\n\n\n\nSolution: Add source files to Android.mk.\n\n\n8 \u201cwas declared deprecated\u201d, for example:\n\n\n1\nd:\\cocos2d-x\\project\\xiaochuxinxin\\classes\\xmlparser.cpp(15): warning C4996: 'cocos2d::CCString': \u88ab\u58f0\u660e\u4e3a\u5df2\u5426\u51b3\n1\n          d:\\cocos\\frameworks\\cocos2d-x-3.6\\cocos\\deprecated\\ccdeprecated.h(1050) : \u53c2\u89c1\u201ccocos2d::CCString\u201d\u7684\u58f0\u660e\n1\nd:\\cocos2d-x\\project\\xiaochuxinxin\\classes\\xmlparser.cpp(15): warning C4996: 'cocos2d::CCDictionary': \u88ab\u58f0\u660e\u4e3a\u5df2\u5426\u51b3\n\n\n\nCause: When updating the engine, there will be some deprecated functions, which are available but with this error message.\n\n\nSolution:  use the F12 tools to debug on a statement level, and find the codes to update.\n\n\n9 The system cannot find the path specified, for example:\n\n\nBased on: cocos2d-x-3.6\nUpdated project.properties\nUpdated local.properties\nUpdated file d:\\cocosSample\\Cocos\\CocosProjects\\CocosProject1\\proj.android\\proguard-project.txt\nIt seems that there are sub-projects. If you want to update them\nplease use the --subprojects parameter.\nRunning command: compile\nBuilding mode: debug\nAndroid platform not specified, searching a default one...\nrunning: '\"D:\\Android\\sdk\\android-sdk\\tools\\android\" update project -t android-21 -p d:\\cocosSample\\Cocos\\CocosProjects\\CocosProject1\\proj.android'\nbuilding native\nNDK build mode: release\nNDK_TOOLCHAIN_VERSION: 4.8\nrunning: '\"D:\\Android\\ndk\\ndk-build\" -C d:\\cocosSample\\Cocos\\CocosProjects\\CocosProject1\\proj.android -j3 NDK_MODULE_PATHd:\\Cocos\\frameworks/cocos2d-x-3.6;d:\\Cocos\\frameworks/cocos2d-x-3.6/cocos;d:\\Cocos\\frameworks/cocos2d-x-3.6/external NDK_TOOLCHAIN_VERSION4.8'\nNdk build failed!\n\n\n\nSolution: Find the Framework that creates the current project. Select the console within that Framework to compile. The console is located in tools/cocos2d-console/bin.\n\n\n10 A compilation error of JSB binding, for example:\n\n\nAppDelegate.cpp  register_all_autogentestbindings ns' was not declared in this scope\n\n\n\nSolution: \nhttp://www.cocos2d-x.org/docs/manual/framework/native/v2/scripting-and-translating-between-programming-languages/javascript-binding/how-to-bind-c++-to-Javascript/zh\n\n\nFollow the instruction of above document, which is editted based on v3.6.1. Skip the step \"modify 'autogentestbindings.cpp' in the registration function\". See the test cases in /tools/bindings-generator/test.\n\n\n11 Transplantation compilation error, for example:\n\n\n07-04 12:58:01.362: E/linker(7506): soinfo_relocate(linker.cpp:992): cannot locate symbol \"atof\" referenced by \"libcocos2djs.so\"...\n\n\n\nSolution: create a project, and then copy res,src, project.json,config.json to the project files.\n\n\n12 Transplantation compilation error:\n\n\nCause: .vxproject configuration unchanged.\n\n\nSolution: update .vxproject configuration.\n\n\n13 Missing type specifier (grammar error), for example:\n\n\n\n\nCause\n\n\n\n\nUndeclared identifier, which must be specified in a declaration before using.\n\n\nMissing \":\", grammar error, please check carefully if there is \":\" in the code.\n\n\nMissing type specifier, function type was not declared.\n\n\n\n\nSolution:\n\n\nCC_ENABLE_CHIPMUNK_INTEGRATION=1 change to CC_ENABLE_BOX2D_INTEGRATION=1\n\n\n\nIf you have added references to project, please see \nhttp://www.bkjia.com/Androidjc/889857.html\n.\n\n\nP.S. there is bug in v3.6 BOX2D- TEST. Solution: \nhttps://github.com/cocos2d/cocos2d-x/issues/12104\n.\n\n\n14 sh: cocos: command not found, for example:\n\n\n**** Build of configuration Release for project CocosProjectTest ****\npython /Users/zhongcs/dev/cocosworkspace/CocosProjectTest/proj.android/build_native.py -b release all\nsh: cocos: command not found\nPlease use cocos console instead.\nTraceback (most recent call last):\n  File \"/Users/zhongcs/dev/cocosworkspace/CocosProjectTest/proj.android/build_native.py\", line 43, in\n    build(opts.build_mode)\n  File \"/Users/zhongcs/dev/cocosworkspace/CocosProjectTest/proj.android/build_native.py\", line 28, in build\n\n    raise Exception(\"Build dynamic library for project [ \"   app_android_root   \" ] fails!\")\nException: Build dynamic library for project [ /Users/zhongcs/dev/cocosworkspace/CocosProjectTest/proj.android/../ ] fails!\n**** Build Finished ****\n\n\n\nSolution: \nhttp://www.cocoachina.com/bbs/read.php?tid-296022.html\n\n\n15 Black screen on mobile device when runing cocos2d-x 2.X + R9d with c++11 regular expressoins and APK packaged correctly.\n\n\nCause: Successful compilation on PC means that there is IDE libraries support C++ features (new library files from C++11). On mobile device, GCC 4.9+ supports the C++  \nregex\n, but GCC 4.9 is available for NDK 10+.\n\n\nSolution: Look for 3rd-party regular expression parsing library, for example, C++ regular expression library. Or compile with ndk-r10c or higher versions.\n\n\nNote\n Remember to check log files, which are the points to debug most issues.", 
            "title": "_15 How to -> Fix Packaging and Running Issues"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter4/FixPackageError/en/index.html#how-to-fix-packaging-and-running-issues", 
            "text": "1 Install JDK, SDK, NDK, Framework and cocos projects in a directory supporting English language. Installation in a directory supporting non-English languages may cause errors when packaging.  2 After the successful installation of JDK, in Java directory there will be two folders with the name starting with jdk and jre respectively. Add bin directory of the two folders to Environment Variables. New variable name is JAVA_HOME, and variable value is the folder path where JDK is installed.   Set variable Path, and append the location of the bin folder where the JRE is installed. You need to use a semicolon in English half-angle state, and then add bin directory. For example, C:\\Program Files\\Java\\jre1.8.0_45\\bin.   3 Add cpp files to Visual Studio and XCode projects. Meanwhile modify android.mk, which is located at proj.android/jni/Android.mk.  4 Use UTF-8 to code Cpp. It is convenient to view the file encoding format with Visual Studio.    5 Currently it is not supported to access files on a USB disk, for on Windows the path support in Python is flawed. Copy project files from the USB disk to your computer and run the project.  6  Cannot find the header files (No such file of directory), for example:  WARNING [Project: :app] Current NDK support is deprecated.  Alternative will be provided in the future.\n:app:preBuild UP-TO-DATE\n:app:preDebugBuild UP-TO-DATE\n:app:compileDebugNdk\n/Users/zhongcs/Documents/CocosProjects/CocosProjecttest/testandroid2/app/src/main/jni/hellocpp/main.cpp:1:25: fatal error: AppDelegate.h: No such file or directory\n #include \"AppDelegate.h\"\n                         ^\ncompilation terminated.  Solution: Check Android.mk file, and include \"AppDelegate.h\" into LOCAL_C_INCLUDES.  7 Undefined reference to \u2026, for example:  ./obj/local/armeabi/objs-debug/cocos2dcpp_shared/__/__/Classes/Gem.o:Gem.cpp:vtable for Gem: error: undefined reference to 'cocos2d::Sprite::setDisplayFrameWithAnimationName(std::string const , int)'\ncollect2.exe: error: ld returned 1 exit status\nmake.exe: *** [obj/local/armeabi/libcocos2dcpp.so] Error 1  Solution: Add source files to Android.mk.  8 \u201cwas declared deprecated\u201d, for example:  1 d:\\cocos2d-x\\project\\xiaochuxinxin\\classes\\xmlparser.cpp(15): warning C4996: 'cocos2d::CCString': \u88ab\u58f0\u660e\u4e3a\u5df2\u5426\u51b3\n1           d:\\cocos\\frameworks\\cocos2d-x-3.6\\cocos\\deprecated\\ccdeprecated.h(1050) : \u53c2\u89c1\u201ccocos2d::CCString\u201d\u7684\u58f0\u660e\n1 d:\\cocos2d-x\\project\\xiaochuxinxin\\classes\\xmlparser.cpp(15): warning C4996: 'cocos2d::CCDictionary': \u88ab\u58f0\u660e\u4e3a\u5df2\u5426\u51b3  Cause: When updating the engine, there will be some deprecated functions, which are available but with this error message.  Solution:  use the F12 tools to debug on a statement level, and find the codes to update.  9 The system cannot find the path specified, for example:  Based on: cocos2d-x-3.6\nUpdated project.properties\nUpdated local.properties\nUpdated file d:\\cocosSample\\Cocos\\CocosProjects\\CocosProject1\\proj.android\\proguard-project.txt\nIt seems that there are sub-projects. If you want to update them\nplease use the --subprojects parameter.\nRunning command: compile\nBuilding mode: debug\nAndroid platform not specified, searching a default one...\nrunning: '\"D:\\Android\\sdk\\android-sdk\\tools\\android\" update project -t android-21 -p d:\\cocosSample\\Cocos\\CocosProjects\\CocosProject1\\proj.android'\nbuilding native\nNDK build mode: release\nNDK_TOOLCHAIN_VERSION: 4.8\nrunning: '\"D:\\Android\\ndk\\ndk-build\" -C d:\\cocosSample\\Cocos\\CocosProjects\\CocosProject1\\proj.android -j3 NDK_MODULE_PATHd:\\Cocos\\frameworks/cocos2d-x-3.6;d:\\Cocos\\frameworks/cocos2d-x-3.6/cocos;d:\\Cocos\\frameworks/cocos2d-x-3.6/external NDK_TOOLCHAIN_VERSION4.8'\nNdk build failed!  Solution: Find the Framework that creates the current project. Select the console within that Framework to compile. The console is located in tools/cocos2d-console/bin.  10 A compilation error of JSB binding, for example:  AppDelegate.cpp  register_all_autogentestbindings ns' was not declared in this scope  Solution:  http://www.cocos2d-x.org/docs/manual/framework/native/v2/scripting-and-translating-between-programming-languages/javascript-binding/how-to-bind-c++-to-Javascript/zh  Follow the instruction of above document, which is editted based on v3.6.1. Skip the step \"modify 'autogentestbindings.cpp' in the registration function\". See the test cases in /tools/bindings-generator/test.  11 Transplantation compilation error, for example:  07-04 12:58:01.362: E/linker(7506): soinfo_relocate(linker.cpp:992): cannot locate symbol \"atof\" referenced by \"libcocos2djs.so\"...  Solution: create a project, and then copy res,src, project.json,config.json to the project files.  12 Transplantation compilation error:  Cause: .vxproject configuration unchanged.  Solution: update .vxproject configuration.  13 Missing type specifier (grammar error), for example:   Cause   Undeclared identifier, which must be specified in a declaration before using.  Missing \":\", grammar error, please check carefully if there is \":\" in the code.  Missing type specifier, function type was not declared.   Solution:  CC_ENABLE_CHIPMUNK_INTEGRATION=1 change to CC_ENABLE_BOX2D_INTEGRATION=1  If you have added references to project, please see  http://www.bkjia.com/Androidjc/889857.html .  P.S. there is bug in v3.6 BOX2D- TEST. Solution:  https://github.com/cocos2d/cocos2d-x/issues/12104 .  14 sh: cocos: command not found, for example:  **** Build of configuration Release for project CocosProjectTest ****\npython /Users/zhongcs/dev/cocosworkspace/CocosProjectTest/proj.android/build_native.py -b release all\nsh: cocos: command not found\nPlease use cocos console instead.\nTraceback (most recent call last):\n  File \"/Users/zhongcs/dev/cocosworkspace/CocosProjectTest/proj.android/build_native.py\", line 43, in\n    build(opts.build_mode)\n  File \"/Users/zhongcs/dev/cocosworkspace/CocosProjectTest/proj.android/build_native.py\", line 28, in build\n\n    raise Exception(\"Build dynamic library for project [ \"   app_android_root   \" ] fails!\")\nException: Build dynamic library for project [ /Users/zhongcs/dev/cocosworkspace/CocosProjectTest/proj.android/../ ] fails!\n**** Build Finished ****  Solution:  http://www.cocoachina.com/bbs/read.php?tid-296022.html  15 Black screen on mobile device when runing cocos2d-x 2.X + R9d with c++11 regular expressoins and APK packaged correctly.  Cause: Successful compilation on PC means that there is IDE libraries support C++ features (new library files from C++11). On mobile device, GCC 4.9+ supports the C++   regex , but GCC 4.9 is available for NDK 10+.  Solution: Look for 3rd-party regular expression parsing library, for example, C++ regular expression library. Or compile with ndk-r10c or higher versions.  Note  Remember to check log files, which are the points to debug most issues.", 
            "title": "How to: Fix Packaging and Running Issues"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter4/SimplifyWidgetsRes/en/index.html", 
            "text": "How to: Simplify Widgets Initial Resources\n\n\nIf you want to simplify widgets' initial resources, please do the following:\n\n\nMenu\n -\n \nEdit\n -\n \nPreferences\n -\n \nGeneral\n -\n check the \nsimplify widgets initial resources\n option. By default, the option is unchecked, and only available for Button, CheckBox and Slider.\n\n\n\nButton\n\n\n  when the option is checked  \n\n\nCheckBox\n\n\n  when the option is checked  \n\n\nSlider\n\n\n  when the option is checked", 
            "title": "_16 How to -> Simplify Widgets Initial Resources"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter4/SimplifyWidgetsRes/en/index.html#how-to-simplify-widgets-initial-resources", 
            "text": "If you want to simplify widgets' initial resources, please do the following:  Menu  -   Edit  -   Preferences  -   General  -  check the  simplify widgets initial resources  option. By default, the option is unchecked, and only available for Button, CheckBox and Slider.  Button    when the option is checked    CheckBox    when the option is checked    Slider    when the option is checked", 
            "title": "How to: Simplify Widgets Initial Resources"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter4/PluginLoadError/en/index.html", 
            "text": "How to: Run Previous Versions of Addins in cocos\n\n\nIf plugin interfaces change bewteen versions, previous versions of addins cannot run in higher versions of cocos. To solve this problem, follow the steps below: \n\n\nOpen Samples of latest versions, which is in \n%userprofile%\\Documents\\Cocos\\CocosStudio2\\Samples\\Addins\n (taking the default installation directory on Windows as an example).\n\n\nCompare Samples and the customized addins to find differences and make modifications. \n\n\n\n\n\n\nIf there are changes or updates to an addin, that is version numbers of the Addin and AddinDependency are updated, you need to replace and compile the custom addins' reference library (DLL) with new Samples' reference library.  \n\n\n\n\n\n\nUse the latest version of Lua export plugin if you need to export projects to Lua.", 
            "title": "_17 How to -> Run Previous Versions of Addins in cocos"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter4/PluginLoadError/en/index.html#how-to-run-previous-versions-of-addins-in-cocos", 
            "text": "If plugin interfaces change bewteen versions, previous versions of addins cannot run in higher versions of cocos. To solve this problem, follow the steps below:   Open Samples of latest versions, which is in  %userprofile%\\Documents\\Cocos\\CocosStudio2\\Samples\\Addins  (taking the default installation directory on Windows as an example).  Compare Samples and the customized addins to find differences and make modifications.     If there are changes or updates to an addin, that is version numbers of the Addin and AddinDependency are updated, you need to replace and compile the custom addins' reference library (DLL) with new Samples' reference library.      Use the latest version of Lua export plugin if you need to export projects to Lua.", 
            "title": "How to: Run Previous Versions of Addins in cocos"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter4/runError/en/index.html", 
            "text": "How to fix cocos run -p web error\n\n\nSymptom 1\n\n\nIf the project created based on Framework 3.6 calls cocos run-p web with Framework 3.9, there might be error message. \n\n\nSolution\n: Change the Output Directory to \"simulator\". In Framework 3.6, the Output Directory for lua win32 is \"runtime\", Framework 3.9 has changed the directory to \"simulator\".   \n\n\nSymptom 2\n\n\nCannot select a version of Visual Studio.\n\n\nSolution\n: Add --vs parameter in command line. For example, VS2015 will be forced to use with the command --vs 2015. \n\n\nSymptom 3\n\n\nIf you have installed VS2013 and VS2015 at the same time, compile error messages might be displayed on Framework 3.6 and versions before that. \n\n\nSolution\n: Please install Framework 3.9. In Framework 3.9, appropriate VS version will be selected according to the engine's version, for Framework 3.9 has updated the console command logic.", 
            "title": "_18 How to -> Fix cocos Run Error?"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter4/runError/en/index.html#how-to-fix-cocos-run-p-web-error", 
            "text": "", 
            "title": "How to fix cocos run -p web error"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter4/runError/en/index.html#symptom-1", 
            "text": "If the project created based on Framework 3.6 calls cocos run-p web with Framework 3.9, there might be error message.   Solution : Change the Output Directory to \"simulator\". In Framework 3.6, the Output Directory for lua win32 is \"runtime\", Framework 3.9 has changed the directory to \"simulator\".", 
            "title": "Symptom 1"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter4/runError/en/index.html#symptom-2", 
            "text": "Cannot select a version of Visual Studio.  Solution : Add --vs parameter in command line. For example, VS2015 will be forced to use with the command --vs 2015.", 
            "title": "Symptom 2"
        }, 
        {
            "location": "/deprecated/studio-chapters/chapter4/runError/en/index.html#symptom-3", 
            "text": "If you have installed VS2013 and VS2015 at the same time, compile error messages might be displayed on Framework 3.6 and versions before that.   Solution : Please install Framework 3.9. In Framework 3.9, appropriate VS version will be selected according to the engine's version, for Framework 3.9 has updated the console command logic.", 
            "title": "Symptom 3"
        }
    ]
}