<html><head><meta http-equiv="content-type" content="text/html; charset=UTF-8"> <style>
	.KEYW {color: #933;}
	.COMM {color: #bbb; font-style: italic;}
	.NUMB {color: #393;}
	.STRN {color: #393;}
	.REGX {color: #339;}
	.line {border-right: 1px dotted #666; color: #666; font-style: normal;}
	</style></head><body><pre><span class='line'>  1</span> <span class="COMM">/****************************************************************************
<span class='line'>  2</span>  Copyright (c) 2008-2010 Ricardo Quesada
<span class='line'>  3</span>  Copyright (c) 2011-2012 cocos2d-x.org
<span class='line'>  4</span>  Copyright (c) 2013-2014 Chukong Technologies Inc.
<span class='line'>  5</span>  Copyright (c) 2012 Pierre-David BÃ©langer
<span class='line'>  6</span> 
<span class='line'>  7</span>  http://www.cocos2d-x.org
<span class='line'>  8</span> 
<span class='line'>  9</span>  Permission is hereby granted, free of charge, to any person obtaining a copy
<span class='line'> 10</span>  of this software and associated documentation files (the "Software"), to deal
<span class='line'> 11</span>  in the Software without restriction, including without limitation the rights
<span class='line'> 12</span>  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
<span class='line'> 13</span>  copies of the Software, and to permit persons to whom the Software is
<span class='line'> 14</span>  furnished to do so, subject to the following conditions:
<span class='line'> 15</span> 
<span class='line'> 16</span>  The above copyright notice and this permission notice shall be included in
<span class='line'> 17</span>  all copies or substantial portions of the Software.
<span class='line'> 18</span> 
<span class='line'> 19</span>  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
<span class='line'> 20</span>  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
<span class='line'> 21</span>  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
<span class='line'> 22</span>  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
<span class='line'> 23</span>  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
<span class='line'> 24</span>  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
<span class='line'> 25</span>  THE SOFTWARE.
<span class='line'> 26</span>  ****************************************************************************/</span><span class="WHIT">
<span class='line'> 27</span> 
<span class='line'> 28</span> </span><span class="COMM">/**
<span class='line'> 29</span>  * the value of stencil bits.
<span class='line'> 30</span>  * @type Number
<span class='line'> 31</span>  */</span><span class="WHIT">
<span class='line'> 32</span> </span><span class="NAME">cc.stencilBits</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="PUNC">-</span><span class="NUMB">1</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'> 33</span> 
<span class='line'> 34</span> </span><span class="COMM">/**
<span class='line'> 35</span>  * &lt;p>
<span class='line'> 36</span>  *     Sets the shader program for this node
<span class='line'> 37</span>  *
<span class='line'> 38</span>  *     Since v2.0, each rendering node must set its shader program.
<span class='line'> 39</span>  *     It should be set in initialize phase.
<span class='line'> 40</span>  * &lt;/p>
<span class='line'> 41</span>  * @function
<span class='line'> 42</span>  * @param {cc.Node} node
<span class='line'> 43</span>  * @param {cc.GLProgram} program The shader program which fetchs from CCShaderCache.
<span class='line'> 44</span>  * @example
<span class='line'> 45</span>  * cc.setGLProgram(node, cc.shaderCache.programForKey(cc.SHADER_POSITION_TEXTURECOLOR));
<span class='line'> 46</span>  */</span><span class="WHIT">
<span class='line'> 47</span> </span><span class="NAME">cc.setProgram</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="WHIT"> </span><span class="PUNC">(</span><span class="NAME">node</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">program</span><span class="PUNC">)</span><span class="WHIT"> </span><span class="PUNC">{</span><span class="WHIT">
<span class='line'> 48</span> </span><span class="WHIT">    </span><span class="NAME">node.shaderProgram</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">program</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'> 49</span> 
<span class='line'> 50</span> </span><span class="WHIT">    </span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">children</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">node.children</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'> 51</span> </span><span class="WHIT">    </span><span class="KEYW">if</span><span class="WHIT"> </span><span class="PUNC">(</span><span class="PUNC">!</span><span class="NAME">children</span><span class="PUNC">)</span><span class="WHIT">
<span class='line'> 52</span> </span><span class="WHIT">        </span><span class="KEYW">return</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'> 53</span> 
<span class='line'> 54</span> </span><span class="WHIT">    </span><span class="KEYW">for</span><span class="WHIT"> </span><span class="PUNC">(</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">i</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NUMB">0</span><span class="PUNC">;</span><span class="WHIT"> </span><span class="NAME">i</span><span class="WHIT"> </span><span class="PUNC">&lt;</span><span class="WHIT"> </span><span class="NAME">children.length</span><span class="PUNC">;</span><span class="WHIT"> </span><span class="NAME">i</span><span class="PUNC">++</span><span class="PUNC">)</span><span class="WHIT">
<span class='line'> 55</span> </span><span class="WHIT">        </span><span class="NAME">cc.setProgram</span><span class="PUNC">(</span><span class="NAME">children</span><span class="PUNC">[</span><span class="NAME">i</span><span class="PUNC">]</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">program</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'> 56</span> </span><span class="PUNC">}</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'> 57</span> 
<span class='line'> 58</span> </span><span class="COMM">/**
<span class='line'> 59</span>  * &lt;p>
<span class='line'> 60</span>  *     cc.ClippingNode is a subclass of cc.Node.                                                            &lt;br/>
<span class='line'> 61</span>  *     It draws its content (childs) clipped using a stencil.                                               &lt;br/>
<span class='line'> 62</span>  *     The stencil is an other cc.Node that will not be drawn.                                               &lt;br/>
<span class='line'> 63</span>  *     The clipping is done using the alpha part of the stencil (adjusted with an alphaThreshold).
<span class='line'> 64</span>  * &lt;/p>
<span class='line'> 65</span>  * @class
<span class='line'> 66</span>  * @extends cc.Node
<span class='line'> 67</span>  * @param {cc.Node} [stencil=null]
<span class='line'> 68</span>  *
<span class='line'> 69</span>  * @property {Number}   alphaThreshold  - Threshold for alpha value.
<span class='line'> 70</span>  * @property {Boolean}  inverted        - Indicate whether in inverted mode.
<span class='line'> 71</span>  */</span><span class="WHIT">
<span class='line'> 72</span> </span><span class="COMM">//@property {cc.Node}  stencil         - he cc.Node to use as a stencil to do the clipping.</span><span class="WHIT">
<span class='line'> 73</span> </span><span class="NAME">cc.ClippingNode</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">cc.Node.extend</span><span class="PUNC">(</span><span class="COMM">/** @lends cc.ClippingNode# */</span><span class="PUNC">{</span><span class="WHIT">
<span class='line'> 74</span> </span><span class="WHIT">    </span><span class="NAME">alphaThreshold</span><span class="PUNC">:</span><span class="WHIT"> </span><span class="NUMB">0</span><span class="PUNC">,</span><span class="WHIT">
<span class='line'> 75</span> </span><span class="WHIT">    </span><span class="NAME">inverted</span><span class="PUNC">:</span><span class="WHIT"> </span><span class="KEYW">false</span><span class="PUNC">,</span><span class="WHIT">
<span class='line'> 76</span> 
<span class='line'> 77</span> </span><span class="WHIT">    </span><span class="NAME">_stencil</span><span class="PUNC">:</span><span class="WHIT"> </span><span class="KEYW">null</span><span class="PUNC">,</span><span class="WHIT">
<span class='line'> 78</span> </span><span class="WHIT">    </span><span class="NAME">_godhelpme</span><span class="PUNC">:</span><span class="WHIT"> </span><span class="KEYW">false</span><span class="PUNC">,</span><span class="WHIT">
<span class='line'> 79</span> 
<span class='line'> 80</span> </span><span class="WHIT">    </span><span class="COMM">/**
<span class='line'> 81</span>      * Constructor function, override it to extend the construction behavior, remember to call "this._super()" in the extended "ctor" function.
<span class='line'> 82</span>      * @param {cc.Node} [stencil=null]
<span class='line'> 83</span>      */</span><span class="WHIT">
<span class='line'> 84</span> </span><span class="WHIT">    </span><span class="NAME">ctor</span><span class="PUNC">:</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="WHIT"> </span><span class="PUNC">(</span><span class="NAME">stencil</span><span class="PUNC">)</span><span class="WHIT"> </span><span class="PUNC">{</span><span class="WHIT">
<span class='line'> 85</span> </span><span class="WHIT">        </span><span class="NAME">cc.Node.prototype.ctor.call</span><span class="PUNC">(</span><span class="KEYW">this</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'> 86</span> </span><span class="WHIT">        </span><span class="NAME">this._stencil</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">null</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'> 87</span> </span><span class="WHIT">        </span><span class="NAME">this.alphaThreshold</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NUMB">0</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'> 88</span> </span><span class="WHIT">        </span><span class="NAME">this.inverted</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">false</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'> 89</span> 
<span class='line'> 90</span> </span><span class="WHIT">        </span><span class="NAME">stencil</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">stencil</span><span class="WHIT"> </span><span class="PUNC">||</span><span class="WHIT"> </span><span class="KEYW">null</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'> 91</span> </span><span class="WHIT">        </span><span class="NAME">cc.ClippingNode.prototype.init.call</span><span class="PUNC">(</span><span class="KEYW">this</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">stencil</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'> 92</span> </span><span class="WHIT">    </span><span class="PUNC">}</span><span class="PUNC">,</span><span class="WHIT">
<span class='line'> 93</span> 
<span class='line'> 94</span> </span><span class="WHIT">    </span><span class="COMM">/**
<span class='line'> 95</span>      * Initialization of the node, please do not call this function by yourself, you should pass the parameters to constructor to initialize itâ¨.
<span class='line'> 96</span>      * @function
<span class='line'> 97</span>      * @param {cc.Node} [stencil=null]
<span class='line'> 98</span>      */</span><span class="WHIT">
<span class='line'> 99</span> </span><span class="WHIT">    </span><span class="NAME">init</span><span class="PUNC">:</span><span class="WHIT"> </span><span class="KEYW">null</span><span class="PUNC">,</span><span class="WHIT">
<span class='line'>100</span> 
<span class='line'>101</span> </span><span class="WHIT">    </span><span class="NAME">_className</span><span class="PUNC">:</span><span class="WHIT"> </span><span class="STRN">"ClippingNode"</span><span class="PUNC">,</span><span class="WHIT">
<span class='line'>102</span> 
<span class='line'>103</span> </span><span class="WHIT">    </span><span class="NAME">_initForWebGL</span><span class="PUNC">:</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="WHIT"> </span><span class="PUNC">(</span><span class="NAME">stencil</span><span class="PUNC">)</span><span class="WHIT"> </span><span class="PUNC">{</span><span class="WHIT">
<span class='line'>104</span> </span><span class="WHIT">        </span><span class="NAME">this._stencil</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">stencil</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>105</span> 
<span class='line'>106</span> </span><span class="WHIT">        </span><span class="NAME">this.alphaThreshold</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NUMB">1</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>107</span> </span><span class="WHIT">        </span><span class="NAME">this.inverted</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">false</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>108</span> </span><span class="WHIT">        </span><span class="COMM">// get (only once) the number of bits of the stencil buffer</span><span class="WHIT">
<span class='line'>109</span> </span><span class="WHIT">        </span><span class="NAME">cc.ClippingNode._init_once</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">true</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>110</span> </span><span class="WHIT">        </span><span class="KEYW">if</span><span class="WHIT"> </span><span class="PUNC">(</span><span class="NAME">cc.ClippingNode._init_once</span><span class="PUNC">)</span><span class="WHIT"> </span><span class="PUNC">{</span><span class="WHIT">
<span class='line'>111</span> </span><span class="WHIT">            </span><span class="NAME">cc.stencilBits</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">cc._renderContext.getParameter</span><span class="PUNC">(</span><span class="NAME">cc._renderContext.STENCIL_BITS</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>112</span> </span><span class="WHIT">            </span><span class="KEYW">if</span><span class="WHIT"> </span><span class="PUNC">(</span><span class="NAME">cc.stencilBits</span><span class="WHIT"> </span><span class="PUNC">&lt;=</span><span class="WHIT"> </span><span class="NUMB">0</span><span class="PUNC">)</span><span class="WHIT">
<span class='line'>113</span> </span><span class="WHIT">                </span><span class="NAME">cc.log</span><span class="PUNC">(</span><span class="STRN">"Stencil buffer is not enabled."</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>114</span> </span><span class="WHIT">            </span><span class="NAME">cc.ClippingNode._init_once</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">false</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>115</span> </span><span class="WHIT">        </span><span class="PUNC">}</span><span class="WHIT">
<span class='line'>116</span> </span><span class="WHIT">        </span><span class="KEYW">return</span><span class="WHIT"> </span><span class="KEYW">true</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>117</span> </span><span class="WHIT">    </span><span class="PUNC">}</span><span class="PUNC">,</span><span class="WHIT">
<span class='line'>118</span> 
<span class='line'>119</span> </span><span class="WHIT">    </span><span class="NAME">_initForCanvas</span><span class="PUNC">:</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="WHIT"> </span><span class="PUNC">(</span><span class="NAME">stencil</span><span class="PUNC">)</span><span class="WHIT"> </span><span class="PUNC">{</span><span class="WHIT">
<span class='line'>120</span> </span><span class="WHIT">        </span><span class="NAME">this._stencil</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">stencil</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>121</span> </span><span class="WHIT">        </span><span class="NAME">this.alphaThreshold</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NUMB">1</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>122</span> </span><span class="WHIT">        </span><span class="NAME">this.inverted</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">false</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>123</span> </span><span class="WHIT">    </span><span class="PUNC">}</span><span class="PUNC">,</span><span class="WHIT">
<span class='line'>124</span> 
<span class='line'>125</span> </span><span class="WHIT">    </span><span class="COMM">/**
<span class='line'>126</span>      * &lt;p>
<span class='line'>127</span>      *     Event callback that is invoked every time when node enters the 'stage'.                                   &lt;br/>
<span class='line'>128</span>      *     If the CCNode enters the 'stage' with a transition, this event is called when the transition starts.        &lt;br/>
<span class='line'>129</span>      *     During onEnter you can't access a "sister/brother" node.                                                    &lt;br/>
<span class='line'>130</span>      *     If you override onEnter, you must call its parent's onEnter function with this._super().
<span class='line'>131</span>      * &lt;/p>
<span class='line'>132</span>      * @function
<span class='line'>133</span>      */</span><span class="WHIT">
<span class='line'>134</span> </span><span class="WHIT">    </span><span class="NAME">onEnter</span><span class="PUNC">:</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="WHIT"> </span><span class="PUNC">(</span><span class="PUNC">)</span><span class="WHIT"> </span><span class="PUNC">{</span><span class="WHIT">
<span class='line'>135</span> </span><span class="WHIT">        </span><span class="NAME">cc.Node.prototype.onEnter.call</span><span class="PUNC">(</span><span class="KEYW">this</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>136</span> </span><span class="WHIT">        </span><span class="NAME">this._stencil.onEnter</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>137</span> </span><span class="WHIT">    </span><span class="PUNC">}</span><span class="PUNC">,</span><span class="WHIT">
<span class='line'>138</span> 
<span class='line'>139</span> </span><span class="WHIT">    </span><span class="COMM">/**
<span class='line'>140</span>      * &lt;p>
<span class='line'>141</span>      *     Event callback that is invoked when the node enters in the 'stage'.                                                        &lt;br/>
<span class='line'>142</span>      *     If the node enters the 'stage' with a transition, this event is called when the transition finishes.                       &lt;br/>
<span class='line'>143</span>      *     If you override onEnterTransitionDidFinish, you shall call its parent's onEnterTransitionDidFinish with this._super()
<span class='line'>144</span>      * &lt;/p>
<span class='line'>145</span>      * @function
<span class='line'>146</span>      */</span><span class="WHIT">
<span class='line'>147</span> </span><span class="WHIT">    </span><span class="NAME">onEnterTransitionDidFinish</span><span class="PUNC">:</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="WHIT"> </span><span class="PUNC">(</span><span class="PUNC">)</span><span class="WHIT"> </span><span class="PUNC">{</span><span class="WHIT">
<span class='line'>148</span> </span><span class="WHIT">        </span><span class="NAME">cc.Node.prototype.onEnterTransitionDidFinish.call</span><span class="PUNC">(</span><span class="KEYW">this</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>149</span> </span><span class="WHIT">        </span><span class="NAME">this._stencil.onEnterTransitionDidFinish</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>150</span> </span><span class="WHIT">    </span><span class="PUNC">}</span><span class="PUNC">,</span><span class="WHIT">
<span class='line'>151</span> 
<span class='line'>152</span> </span><span class="WHIT">    </span><span class="COMM">/**
<span class='line'>153</span>      * &lt;p>
<span class='line'>154</span>      *     callback that is called every time the node leaves the 'stage'.  &lt;br/>
<span class='line'>155</span>      *     If the node leaves the 'stage' with a transition, this callback is called when the transition starts. &lt;br/>
<span class='line'>156</span>      *     If you override onExitTransitionDidStart, you shall call its parent's onExitTransitionDidStart with this._super()
<span class='line'>157</span>      * &lt;/p>
<span class='line'>158</span>      * @function
<span class='line'>159</span>      */</span><span class="WHIT">
<span class='line'>160</span> </span><span class="WHIT">    </span><span class="NAME">onExitTransitionDidStart</span><span class="PUNC">:</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="WHIT"> </span><span class="PUNC">(</span><span class="PUNC">)</span><span class="WHIT"> </span><span class="PUNC">{</span><span class="WHIT">
<span class='line'>161</span> </span><span class="WHIT">        </span><span class="NAME">this._stencil.onExitTransitionDidStart</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>162</span> </span><span class="WHIT">        </span><span class="NAME">cc.Node.prototype.onExitTransitionDidStart.call</span><span class="PUNC">(</span><span class="KEYW">this</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>163</span> </span><span class="WHIT">    </span><span class="PUNC">}</span><span class="PUNC">,</span><span class="WHIT">
<span class='line'>164</span> 
<span class='line'>165</span> </span><span class="WHIT">    </span><span class="COMM">/**
<span class='line'>166</span>      * &lt;p>
<span class='line'>167</span>      * callback that is called every time the node leaves the 'stage'. &lt;br/>
<span class='line'>168</span>      * If the node leaves the 'stage' with a transition, this callback is called when the transition finishes. &lt;br/>
<span class='line'>169</span>      * During onExit you can't access a sibling node.                                                             &lt;br/>
<span class='line'>170</span>      * If you override onExit, you shall call its parent's onExit with this._super().
<span class='line'>171</span>      * &lt;/p>
<span class='line'>172</span>      * @function
<span class='line'>173</span>      */</span><span class="WHIT">
<span class='line'>174</span> </span><span class="WHIT">    </span><span class="NAME">onExit</span><span class="PUNC">:</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="WHIT"> </span><span class="PUNC">(</span><span class="PUNC">)</span><span class="WHIT"> </span><span class="PUNC">{</span><span class="WHIT">
<span class='line'>175</span> </span><span class="WHIT">        </span><span class="NAME">this._stencil.onExit</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>176</span> </span><span class="WHIT">        </span><span class="NAME">cc.Node.prototype.onExit.call</span><span class="PUNC">(</span><span class="KEYW">this</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>177</span> </span><span class="WHIT">    </span><span class="PUNC">}</span><span class="PUNC">,</span><span class="WHIT">
<span class='line'>178</span> 
<span class='line'>179</span> </span><span class="WHIT">    </span><span class="COMM">/**
<span class='line'>180</span>      * Recursive method that visit its children and draw them
<span class='line'>181</span>      * @function
<span class='line'>182</span>      * @param {CanvasRenderingContext2D|WebGLRenderingContext} ctx
<span class='line'>183</span>      */</span><span class="WHIT">
<span class='line'>184</span> </span><span class="WHIT">    </span><span class="NAME">visit</span><span class="PUNC">:</span><span class="WHIT"> </span><span class="KEYW">null</span><span class="PUNC">,</span><span class="WHIT">
<span class='line'>185</span> 
<span class='line'>186</span> </span><span class="WHIT">    </span><span class="NAME">_visitForWebGL</span><span class="PUNC">:</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="WHIT"> </span><span class="PUNC">(</span><span class="NAME">ctx</span><span class="PUNC">)</span><span class="WHIT"> </span><span class="PUNC">{</span><span class="WHIT">
<span class='line'>187</span> </span><span class="WHIT">        </span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">gl</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">ctx</span><span class="WHIT"> </span><span class="PUNC">||</span><span class="WHIT"> </span><span class="NAME">cc._renderContext</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>188</span> 
<span class='line'>189</span> </span><span class="WHIT">        </span><span class="COMM">// if stencil buffer disabled</span><span class="WHIT">
<span class='line'>190</span> </span><span class="WHIT">        </span><span class="KEYW">if</span><span class="WHIT"> </span><span class="PUNC">(</span><span class="NAME">cc.stencilBits</span><span class="WHIT"> </span><span class="PUNC">&lt;</span><span class="WHIT"> </span><span class="NUMB">1</span><span class="PUNC">)</span><span class="WHIT"> </span><span class="PUNC">{</span><span class="WHIT">
<span class='line'>191</span> </span><span class="WHIT">            </span><span class="COMM">// draw everything, as if there where no stencil</span><span class="WHIT">
<span class='line'>192</span> </span><span class="WHIT">            </span><span class="NAME">cc.Node.prototype.visit.call</span><span class="PUNC">(</span><span class="KEYW">this</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">ctx</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>193</span> </span><span class="WHIT">            </span><span class="KEYW">return</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>194</span> </span><span class="WHIT">        </span><span class="PUNC">}</span><span class="WHIT">
<span class='line'>195</span> 
<span class='line'>196</span> </span><span class="WHIT">        </span><span class="COMM">// return fast (draw nothing, or draw everything if in inverted mode) if:</span><span class="WHIT">
<span class='line'>197</span> </span><span class="WHIT">        </span><span class="COMM">// - nil stencil node</span><span class="WHIT">
<span class='line'>198</span> </span><span class="WHIT">        </span><span class="COMM">// - or stencil node invisible:</span><span class="WHIT">
<span class='line'>199</span> </span><span class="WHIT">        </span><span class="KEYW">if</span><span class="WHIT"> </span><span class="PUNC">(</span><span class="PUNC">!</span><span class="NAME">this._stencil</span><span class="WHIT"> </span><span class="PUNC">||</span><span class="WHIT"> </span><span class="PUNC">!</span><span class="NAME">this._stencil.visible</span><span class="PUNC">)</span><span class="WHIT"> </span><span class="PUNC">{</span><span class="WHIT">
<span class='line'>200</span> </span><span class="WHIT">            </span><span class="KEYW">if</span><span class="WHIT"> </span><span class="PUNC">(</span><span class="NAME">this.inverted</span><span class="PUNC">)</span><span class="WHIT">
<span class='line'>201</span> </span><span class="WHIT">                </span><span class="NAME">cc.Node.prototype.visit.call</span><span class="PUNC">(</span><span class="KEYW">this</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">ctx</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">   </span><span class="COMM">// draw everything</span><span class="WHIT">
<span class='line'>202</span> </span><span class="WHIT">            </span><span class="KEYW">return</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>203</span> </span><span class="WHIT">        </span><span class="PUNC">}</span><span class="WHIT">
<span class='line'>204</span> 
<span class='line'>205</span> </span><span class="WHIT">        </span><span class="COMM">// store the current stencil layer (position in the stencil buffer),</span><span class="WHIT">
<span class='line'>206</span> </span><span class="WHIT">        </span><span class="COMM">// this will allow nesting up to n CCClippingNode,</span><span class="WHIT">
<span class='line'>207</span> </span><span class="WHIT">        </span><span class="COMM">// where n is the number of bits of the stencil buffer.</span><span class="WHIT">
<span class='line'>208</span> 
<span class='line'>209</span> </span><span class="WHIT">        </span><span class="COMM">// all the _stencilBits are in use?</span><span class="WHIT">
<span class='line'>210</span> </span><span class="WHIT">        </span><span class="KEYW">if</span><span class="WHIT"> </span><span class="PUNC">(</span><span class="NAME">cc.ClippingNode._layer</span><span class="WHIT"> </span><span class="PUNC">+</span><span class="WHIT"> </span><span class="NUMB">1</span><span class="WHIT"> </span><span class="PUNC">==</span><span class="WHIT"> </span><span class="NAME">cc.stencilBits</span><span class="PUNC">)</span><span class="WHIT"> </span><span class="PUNC">{</span><span class="WHIT">
<span class='line'>211</span> </span><span class="WHIT">            </span><span class="COMM">// warn once</span><span class="WHIT">
<span class='line'>212</span> </span><span class="WHIT">            </span><span class="NAME">cc.ClippingNode._visit_once</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">true</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>213</span> </span><span class="WHIT">            </span><span class="KEYW">if</span><span class="WHIT"> </span><span class="PUNC">(</span><span class="NAME">cc.ClippingNode._visit_once</span><span class="PUNC">)</span><span class="WHIT"> </span><span class="PUNC">{</span><span class="WHIT">
<span class='line'>214</span> </span><span class="WHIT">                </span><span class="NAME">cc.log</span><span class="PUNC">(</span><span class="STRN">"Nesting more than "</span><span class="WHIT"> </span><span class="PUNC">+</span><span class="WHIT"> </span><span class="NAME">cc.stencilBits</span><span class="WHIT"> </span><span class="PUNC">+</span><span class="WHIT"> </span><span class="STRN">"stencils is not supported. Everything will be drawn without stencil for this node and its childs."</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>215</span> </span><span class="WHIT">                </span><span class="NAME">cc.ClippingNode._visit_once</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">false</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>216</span> </span><span class="WHIT">            </span><span class="PUNC">}</span><span class="WHIT">
<span class='line'>217</span> </span><span class="WHIT">            </span><span class="COMM">// draw everything, as if there where no stencil</span><span class="WHIT">
<span class='line'>218</span> </span><span class="WHIT">            </span><span class="NAME">cc.Node.prototype.visit.call</span><span class="PUNC">(</span><span class="KEYW">this</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">ctx</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>219</span> </span><span class="WHIT">            </span><span class="KEYW">return</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>220</span> </span><span class="WHIT">        </span><span class="PUNC">}</span><span class="WHIT">
<span class='line'>221</span> 
<span class='line'>222</span> </span><span class="WHIT">        </span><span class="COMM">///////////////////////////////////</span><span class="WHIT">
<span class='line'>223</span> </span><span class="WHIT">        </span><span class="COMM">// INIT</span><span class="WHIT">
<span class='line'>224</span> 
<span class='line'>225</span> </span><span class="WHIT">        </span><span class="COMM">// increment the current layer</span><span class="WHIT">
<span class='line'>226</span> </span><span class="WHIT">        </span><span class="NAME">cc.ClippingNode._layer</span><span class="PUNC">++</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>227</span> 
<span class='line'>228</span> </span><span class="WHIT">        </span><span class="COMM">// mask of the current layer (ie: for layer 3: 00000100)</span><span class="WHIT">
<span class='line'>229</span> </span><span class="WHIT">        </span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">mask_layer</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NUMB">0x1</span><span class="WHIT"> </span><span class="PUNC">&lt;&lt;</span><span class="WHIT"> </span><span class="NAME">cc.ClippingNode._layer</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>230</span> </span><span class="WHIT">        </span><span class="COMM">// mask of all layers less than the current (ie: for layer 3: 00000011)</span><span class="WHIT">
<span class='line'>231</span> </span><span class="WHIT">        </span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">mask_layer_l</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">mask_layer</span><span class="WHIT"> </span><span class="PUNC">-</span><span class="WHIT"> </span><span class="NUMB">1</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>232</span> </span><span class="WHIT">        </span><span class="COMM">// mask of all layers less than or equal to the current (ie: for layer 3: 00000111)</span><span class="WHIT">
<span class='line'>233</span> </span><span class="WHIT">        </span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">mask_layer_le</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">mask_layer</span><span class="WHIT"> </span><span class="PUNC">|</span><span class="WHIT"> </span><span class="NAME">mask_layer_l</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>234</span> 
<span class='line'>235</span> </span><span class="WHIT">        </span><span class="COMM">// manually save the stencil state</span><span class="WHIT">
<span class='line'>236</span> </span><span class="WHIT">        </span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">currentStencilEnabled</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">gl.isEnabled</span><span class="PUNC">(</span><span class="NAME">gl.STENCIL_TEST</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>237</span> </span><span class="WHIT">        </span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">currentStencilWriteMask</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">gl.getParameter</span><span class="PUNC">(</span><span class="NAME">gl.STENCIL_WRITEMASK</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>238</span> </span><span class="WHIT">        </span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">currentStencilFunc</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">gl.getParameter</span><span class="PUNC">(</span><span class="NAME">gl.STENCIL_FUNC</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>239</span> </span><span class="WHIT">        </span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">currentStencilRef</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">gl.getParameter</span><span class="PUNC">(</span><span class="NAME">gl.STENCIL_REF</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>240</span> </span><span class="WHIT">        </span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">currentStencilValueMask</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">gl.getParameter</span><span class="PUNC">(</span><span class="NAME">gl.STENCIL_VALUE_MASK</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>241</span> </span><span class="WHIT">        </span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">currentStencilFail</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">gl.getParameter</span><span class="PUNC">(</span><span class="NAME">gl.STENCIL_FAIL</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>242</span> </span><span class="WHIT">        </span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">currentStencilPassDepthFail</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">gl.getParameter</span><span class="PUNC">(</span><span class="NAME">gl.STENCIL_PASS_DEPTH_FAIL</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>243</span> </span><span class="WHIT">        </span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">currentStencilPassDepthPass</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">gl.getParameter</span><span class="PUNC">(</span><span class="NAME">gl.STENCIL_PASS_DEPTH_PASS</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>244</span> 
<span class='line'>245</span> </span><span class="WHIT">        </span><span class="COMM">// enable stencil use</span><span class="WHIT">
<span class='line'>246</span> </span><span class="WHIT">        </span><span class="NAME">gl.enable</span><span class="PUNC">(</span><span class="NAME">gl.STENCIL_TEST</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>247</span> </span><span class="WHIT">        </span><span class="COMM">// check for OpenGL error while enabling stencil test</span><span class="WHIT">
<span class='line'>248</span> </span><span class="WHIT">        </span><span class="COMM">//cc.checkGLErrorDebug();</span><span class="WHIT">
<span class='line'>249</span> 
<span class='line'>250</span> </span><span class="WHIT">        </span><span class="COMM">// all bits on the stencil buffer are readonly, except the current layer bit,</span><span class="WHIT">
<span class='line'>251</span> </span><span class="WHIT">        </span><span class="COMM">// this means that operation like glClear or glStencilOp will be masked with this value</span><span class="WHIT">
<span class='line'>252</span> </span><span class="WHIT">        </span><span class="NAME">gl.stencilMask</span><span class="PUNC">(</span><span class="NAME">mask_layer</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>253</span> 
<span class='line'>254</span> </span><span class="WHIT">        </span><span class="COMM">// manually save the depth test state</span><span class="WHIT">
<span class='line'>255</span> </span><span class="WHIT">        </span><span class="COMM">//GLboolean currentDepthTestEnabled = GL_TRUE;</span><span class="WHIT">
<span class='line'>256</span> </span><span class="WHIT">        </span><span class="COMM">//currentDepthTestEnabled = glIsEnabled(GL_DEPTH_TEST);</span><span class="WHIT">
<span class='line'>257</span> </span><span class="WHIT">        </span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">currentDepthWriteMask</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">gl.getParameter</span><span class="PUNC">(</span><span class="NAME">gl.DEPTH_WRITEMASK</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>258</span> 
<span class='line'>259</span> </span><span class="WHIT">        </span><span class="COMM">// disable depth test while drawing the stencil</span><span class="WHIT">
<span class='line'>260</span> </span><span class="WHIT">        </span><span class="COMM">//glDisable(GL_DEPTH_TEST);</span><span class="WHIT">
<span class='line'>261</span> </span><span class="WHIT">        </span><span class="COMM">// disable update to the depth buffer while drawing the stencil,</span><span class="WHIT">
<span class='line'>262</span> </span><span class="WHIT">        </span><span class="COMM">// as the stencil is not meant to be rendered in the real scene,</span><span class="WHIT">
<span class='line'>263</span> </span><span class="WHIT">        </span><span class="COMM">// it should never prevent something else to be drawn,</span><span class="WHIT">
<span class='line'>264</span> </span><span class="WHIT">        </span><span class="COMM">// only disabling depth buffer update should do</span><span class="WHIT">
<span class='line'>265</span> </span><span class="WHIT">        </span><span class="NAME">gl.depthMask</span><span class="PUNC">(</span><span class="KEYW">false</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>266</span> 
<span class='line'>267</span> </span><span class="WHIT">        </span><span class="COMM">///////////////////////////////////</span><span class="WHIT">
<span class='line'>268</span> </span><span class="WHIT">        </span><span class="COMM">// CLEAR STENCIL BUFFER</span><span class="WHIT">
<span class='line'>269</span> 
<span class='line'>270</span> </span><span class="WHIT">        </span><span class="COMM">// manually clear the stencil buffer by drawing a fullscreen rectangle on it</span><span class="WHIT">
<span class='line'>271</span> </span><span class="WHIT">        </span><span class="COMM">// setup the stencil test func like this:</span><span class="WHIT">
<span class='line'>272</span> </span><span class="WHIT">        </span><span class="COMM">// for each pixel in the fullscreen rectangle</span><span class="WHIT">
<span class='line'>273</span> </span><span class="WHIT">        </span><span class="COMM">//     never draw it into the frame buffer</span><span class="WHIT">
<span class='line'>274</span> </span><span class="WHIT">        </span><span class="COMM">//     if not in inverted mode: set the current layer value to 0 in the stencil buffer</span><span class="WHIT">
<span class='line'>275</span> </span><span class="WHIT">        </span><span class="COMM">//     if in inverted mode: set the current layer value to 1 in the stencil buffer</span><span class="WHIT">
<span class='line'>276</span> </span><span class="WHIT">        </span><span class="NAME">gl.stencilFunc</span><span class="PUNC">(</span><span class="NAME">gl.NEVER</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">mask_layer</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">mask_layer</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>277</span> </span><span class="WHIT">        </span><span class="NAME">gl.stencilOp</span><span class="PUNC">(</span><span class="PUNC">!</span><span class="NAME">this.inverted</span><span class="WHIT"> </span><span class="PUNC">?</span><span class="WHIT"> </span><span class="NAME">gl.ZERO</span><span class="WHIT"> </span><span class="PUNC">:</span><span class="WHIT"> </span><span class="NAME">gl.REPLACE</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">gl.KEEP</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">gl.KEEP</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>278</span> 
<span class='line'>279</span> </span><span class="WHIT">        </span><span class="COMM">// draw a fullscreen solid rectangle to clear the stencil buffer</span><span class="WHIT">
<span class='line'>280</span> </span><span class="WHIT">        </span><span class="NAME">cc.kmGLMatrixMode</span><span class="PUNC">(</span><span class="NAME">cc.KM_GL_PROJECTION</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>281</span> </span><span class="WHIT">        </span><span class="NAME">cc.kmGLPushMatrix</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>282</span> </span><span class="WHIT">        </span><span class="NAME">cc.kmGLLoadIdentity</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>283</span> </span><span class="WHIT">        </span><span class="NAME">cc.kmGLMatrixMode</span><span class="PUNC">(</span><span class="NAME">cc.KM_GL_MODELVIEW</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>284</span> </span><span class="WHIT">        </span><span class="NAME">cc.kmGLPushMatrix</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>285</span> </span><span class="WHIT">        </span><span class="NAME">cc.kmGLLoadIdentity</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>286</span> </span><span class="WHIT">        </span><span class="NAME">cc._drawingUtil.drawSolidRect</span><span class="PUNC">(</span><span class="NAME">cc.p</span><span class="PUNC">(</span><span class="PUNC">-</span><span class="NUMB">1</span><span class="PUNC">,</span><span class="PUNC">-</span><span class="NUMB">1</span><span class="PUNC">)</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">cc.p</span><span class="PUNC">(</span><span class="NUMB">1</span><span class="PUNC">,</span><span class="NUMB">1</span><span class="PUNC">)</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">cc.color</span><span class="PUNC">(</span><span class="NUMB">255</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NUMB">255</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NUMB">255</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NUMB">255</span><span class="PUNC">)</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>287</span> </span><span class="WHIT">        </span><span class="NAME">cc.kmGLMatrixMode</span><span class="PUNC">(</span><span class="NAME">cc.KM_GL_PROJECTION</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>288</span> </span><span class="WHIT">        </span><span class="NAME">cc.kmGLPopMatrix</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>289</span> </span><span class="WHIT">        </span><span class="NAME">cc.kmGLMatrixMode</span><span class="PUNC">(</span><span class="NAME">cc.KM_GL_MODELVIEW</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>290</span> </span><span class="WHIT">        </span><span class="NAME">cc.kmGLPopMatrix</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>291</span> 
<span class='line'>292</span> </span><span class="WHIT">        </span><span class="COMM">///////////////////////////////////</span><span class="WHIT">
<span class='line'>293</span> </span><span class="WHIT">        </span><span class="COMM">// DRAW CLIPPING STENCIL</span><span class="WHIT">
<span class='line'>294</span> 
<span class='line'>295</span> </span><span class="WHIT">        </span><span class="COMM">// setup the stencil test func like this:</span><span class="WHIT">
<span class='line'>296</span> </span><span class="WHIT">        </span><span class="COMM">// for each pixel in the stencil node</span><span class="WHIT">
<span class='line'>297</span> </span><span class="WHIT">        </span><span class="COMM">//     never draw it into the frame buffer</span><span class="WHIT">
<span class='line'>298</span> </span><span class="WHIT">        </span><span class="COMM">//     if not in inverted mode: set the current layer value to 1 in the stencil buffer</span><span class="WHIT">
<span class='line'>299</span> </span><span class="WHIT">        </span><span class="COMM">//     if in inverted mode: set the current layer value to 0 in the stencil buffer</span><span class="WHIT">
<span class='line'>300</span> </span><span class="WHIT">        </span><span class="NAME">gl.stencilFunc</span><span class="PUNC">(</span><span class="NAME">gl.NEVER</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">mask_layer</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">mask_layer</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>301</span> </span><span class="WHIT">        </span><span class="NAME">gl.stencilOp</span><span class="PUNC">(</span><span class="PUNC">!</span><span class="NAME">this.inverted</span><span class="WHIT"> </span><span class="PUNC">?</span><span class="WHIT"> </span><span class="NAME">gl.REPLACE</span><span class="WHIT"> </span><span class="PUNC">:</span><span class="WHIT"> </span><span class="NAME">gl.ZERO</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">gl.KEEP</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">gl.KEEP</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>302</span> 
<span class='line'>303</span> </span><span class="WHIT">        </span><span class="KEYW">if</span><span class="WHIT"> </span><span class="PUNC">(</span><span class="NAME">this.alphaThreshold</span><span class="WHIT"> </span><span class="PUNC">&lt;</span><span class="WHIT"> </span><span class="NUMB">1</span><span class="PUNC">)</span><span class="WHIT"> </span><span class="PUNC">{</span><span class="WHIT">
<span class='line'>304</span> </span><span class="WHIT">            </span><span class="COMM">// since glAlphaTest do not exists in OES, use a shader that writes</span><span class="WHIT">
<span class='line'>305</span> </span><span class="WHIT">            </span><span class="COMM">// pixel only if greater than an alpha threshold</span><span class="WHIT">
<span class='line'>306</span> </span><span class="WHIT">            </span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">program</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">cc.shaderCache.programForKey</span><span class="PUNC">(</span><span class="NAME">cc.SHADER_POSITION_TEXTURECOLORALPHATEST</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>307</span> </span><span class="WHIT">            </span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">alphaValueLocation</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">gl.getUniformLocation</span><span class="PUNC">(</span><span class="NAME">program.getProgram</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">cc.UNIFORM_ALPHA_TEST_VALUE_S</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>308</span> </span><span class="WHIT">            </span><span class="COMM">// set our alphaThreshold</span><span class="WHIT">
<span class='line'>309</span> </span><span class="WHIT">            </span><span class="NAME">cc.glUseProgram</span><span class="PUNC">(</span><span class="NAME">program.getProgram</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>310</span> </span><span class="WHIT">            </span><span class="NAME">program.setUniformLocationWith1f</span><span class="PUNC">(</span><span class="NAME">alphaValueLocation</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">this.alphaThreshold</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>311</span> </span><span class="WHIT">            </span><span class="COMM">// we need to recursively apply this shader to all the nodes in the stencil node</span><span class="WHIT">
<span class='line'>312</span> </span><span class="WHIT">            </span><span class="COMM">// XXX: we should have a way to apply shader to all nodes without having to do this</span><span class="WHIT">
<span class='line'>313</span> </span><span class="WHIT">            </span><span class="NAME">cc.setProgram</span><span class="PUNC">(</span><span class="NAME">this._stencil</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">program</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>314</span> </span><span class="WHIT">        </span><span class="PUNC">}</span><span class="WHIT">
<span class='line'>315</span> 
<span class='line'>316</span> </span><span class="WHIT">        </span><span class="COMM">// draw the stencil node as if it was one of our child</span><span class="WHIT">
<span class='line'>317</span> </span><span class="WHIT">        </span><span class="COMM">// (according to the stencil test func/op and alpha (or alpha shader) test)</span><span class="WHIT">
<span class='line'>318</span> </span><span class="WHIT">        </span><span class="NAME">cc.kmGLPushMatrix</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>319</span> </span><span class="WHIT">        </span><span class="NAME">this.transform</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>320</span> </span><span class="WHIT">        </span><span class="NAME">this._stencil.visit</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>321</span> </span><span class="WHIT">        </span><span class="NAME">cc.kmGLPopMatrix</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>322</span> 
<span class='line'>323</span> </span><span class="WHIT">        </span><span class="COMM">// restore alpha test state</span><span class="WHIT">
<span class='line'>324</span> </span><span class="WHIT">        </span><span class="COMM">//if (this.alphaThreshold &lt; 1) {</span><span class="WHIT">
<span class='line'>325</span> </span><span class="WHIT">        </span><span class="COMM">// XXX: we need to find a way to restore the shaders of the stencil node and its childs</span><span class="WHIT">
<span class='line'>326</span> </span><span class="WHIT">        </span><span class="COMM">//}</span><span class="WHIT">
<span class='line'>327</span> 
<span class='line'>328</span> </span><span class="WHIT">        </span><span class="COMM">// restore the depth test state</span><span class="WHIT">
<span class='line'>329</span> </span><span class="WHIT">        </span><span class="NAME">gl.depthMask</span><span class="PUNC">(</span><span class="NAME">currentDepthWriteMask</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>330</span> 
<span class='line'>331</span> </span><span class="WHIT">        </span><span class="COMM">///////////////////////////////////</span><span class="WHIT">
<span class='line'>332</span> </span><span class="WHIT">        </span><span class="COMM">// DRAW CONTENT</span><span class="WHIT">
<span class='line'>333</span> 
<span class='line'>334</span> </span><span class="WHIT">        </span><span class="COMM">// setup the stencil test func like this:</span><span class="WHIT">
<span class='line'>335</span> </span><span class="WHIT">        </span><span class="COMM">// for each pixel of this node and its childs</span><span class="WHIT">
<span class='line'>336</span> </span><span class="WHIT">        </span><span class="COMM">//     if all layers less than or equals to the current are set to 1 in the stencil buffer</span><span class="WHIT">
<span class='line'>337</span> </span><span class="WHIT">        </span><span class="COMM">//         draw the pixel and keep the current layer in the stencil buffer</span><span class="WHIT">
<span class='line'>338</span> </span><span class="WHIT">        </span><span class="COMM">//     else</span><span class="WHIT">
<span class='line'>339</span> </span><span class="WHIT">        </span><span class="COMM">//         do not draw the pixel but keep the current layer in the stencil buffer</span><span class="WHIT">
<span class='line'>340</span> </span><span class="WHIT">        </span><span class="NAME">gl.stencilFunc</span><span class="PUNC">(</span><span class="NAME">gl.EQUAL</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">mask_layer_le</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">mask_layer_le</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>341</span> </span><span class="WHIT">        </span><span class="NAME">gl.stencilOp</span><span class="PUNC">(</span><span class="NAME">gl.KEEP</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">gl.KEEP</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">gl.KEEP</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>342</span> 
<span class='line'>343</span> </span><span class="WHIT">        </span><span class="COMM">// draw (according to the stencil test func) this node and its childs</span><span class="WHIT">
<span class='line'>344</span> </span><span class="WHIT">        </span><span class="NAME">cc.Node.prototype.visit.call</span><span class="PUNC">(</span><span class="KEYW">this</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">ctx</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>345</span> 
<span class='line'>346</span> </span><span class="WHIT">        </span><span class="COMM">///////////////////////////////////</span><span class="WHIT">
<span class='line'>347</span> </span><span class="WHIT">        </span><span class="COMM">// CLEANUP</span><span class="WHIT">
<span class='line'>348</span> 
<span class='line'>349</span> </span><span class="WHIT">        </span><span class="COMM">// manually restore the stencil state</span><span class="WHIT">
<span class='line'>350</span> </span><span class="WHIT">        </span><span class="NAME">gl.stencilFunc</span><span class="PUNC">(</span><span class="NAME">currentStencilFunc</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">currentStencilRef</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">currentStencilValueMask</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>351</span> </span><span class="WHIT">        </span><span class="NAME">gl.stencilOp</span><span class="PUNC">(</span><span class="NAME">currentStencilFail</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">currentStencilPassDepthFail</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">currentStencilPassDepthPass</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>352</span> </span><span class="WHIT">        </span><span class="NAME">gl.stencilMask</span><span class="PUNC">(</span><span class="NAME">currentStencilWriteMask</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>353</span> </span><span class="WHIT">        </span><span class="KEYW">if</span><span class="WHIT"> </span><span class="PUNC">(</span><span class="PUNC">!</span><span class="NAME">currentStencilEnabled</span><span class="PUNC">)</span><span class="WHIT">
<span class='line'>354</span> </span><span class="WHIT">            </span><span class="NAME">gl.disable</span><span class="PUNC">(</span><span class="NAME">gl.STENCIL_TEST</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>355</span> 
<span class='line'>356</span> </span><span class="WHIT">        </span><span class="COMM">// we are done using this layer, decrement</span><span class="WHIT">
<span class='line'>357</span> </span><span class="WHIT">        </span><span class="NAME">cc.ClippingNode._layer</span><span class="PUNC">--</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>358</span> </span><span class="WHIT">    </span><span class="PUNC">}</span><span class="PUNC">,</span><span class="WHIT">
<span class='line'>359</span> 
<span class='line'>360</span> </span><span class="WHIT">    </span><span class="NAME">_visitForCanvas</span><span class="PUNC">:</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="WHIT"> </span><span class="PUNC">(</span><span class="NAME">ctx</span><span class="PUNC">)</span><span class="WHIT"> </span><span class="PUNC">{</span><span class="WHIT">
<span class='line'>361</span> </span><span class="WHIT">        </span><span class="COMM">// return fast (draw nothing, or draw everything if in inverted mode) if:</span><span class="WHIT">
<span class='line'>362</span> </span><span class="WHIT">        </span><span class="COMM">// - nil stencil node</span><span class="WHIT">
<span class='line'>363</span> </span><span class="WHIT">        </span><span class="COMM">// - or stencil node invisible:</span><span class="WHIT">
<span class='line'>364</span> </span><span class="WHIT">        </span><span class="KEYW">if</span><span class="WHIT"> </span><span class="PUNC">(</span><span class="PUNC">!</span><span class="NAME">this._stencil</span><span class="WHIT"> </span><span class="PUNC">||</span><span class="WHIT"> </span><span class="PUNC">!</span><span class="NAME">this._stencil.visible</span><span class="PUNC">)</span><span class="WHIT"> </span><span class="PUNC">{</span><span class="WHIT">
<span class='line'>365</span> </span><span class="WHIT">            </span><span class="KEYW">if</span><span class="WHIT"> </span><span class="PUNC">(</span><span class="NAME">this.inverted</span><span class="PUNC">)</span><span class="WHIT">
<span class='line'>366</span> </span><span class="WHIT">                </span><span class="NAME">cc.Node.prototype.visit.call</span><span class="PUNC">(</span><span class="KEYW">this</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">ctx</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">   </span><span class="COMM">// draw everything</span><span class="WHIT">
<span class='line'>367</span> </span><span class="WHIT">            </span><span class="KEYW">return</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>368</span> </span><span class="WHIT">        </span><span class="PUNC">}</span><span class="WHIT">
<span class='line'>369</span> 
<span class='line'>370</span> </span><span class="WHIT">        </span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">context</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">ctx</span><span class="WHIT"> </span><span class="PUNC">||</span><span class="WHIT"> </span><span class="NAME">cc._renderContext</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>371</span> </span><span class="WHIT">        </span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">canvas</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">context.canvas</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>372</span> </span><span class="WHIT">        </span><span class="COMM">// Composition mode, costy but support texture stencil</span><span class="WHIT">
<span class='line'>373</span> </span><span class="WHIT">        </span><span class="KEYW">if</span><span class="WHIT"> </span><span class="PUNC">(</span><span class="NAME">this._cangodhelpme</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="WHIT"> </span><span class="PUNC">||</span><span class="WHIT"> </span><span class="NAME">this._stencil</span><span class="WHIT"> </span><span class="KEYW">instanceof</span><span class="WHIT"> </span><span class="NAME">cc.Sprite</span><span class="PUNC">)</span><span class="WHIT"> </span><span class="PUNC">{</span><span class="WHIT">
<span class='line'>374</span> </span><span class="WHIT">            </span><span class="COMM">// Cache the current canvas, for later use (This is a little bit heavy, replace this solution with other walkthrough)</span><span class="WHIT">
<span class='line'>375</span> </span><span class="WHIT">            </span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">locCache</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">cc.ClippingNode._getSharedCache</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>376</span> </span><span class="WHIT">            </span><span class="NAME">locCache.width</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">canvas.width</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>377</span> </span><span class="WHIT">            </span><span class="NAME">locCache.height</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">canvas.height</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>378</span> </span><span class="WHIT">            </span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">locCacheCtx</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">locCache.getContext</span><span class="PUNC">(</span><span class="STRN">"2d"</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>379</span> </span><span class="WHIT">            </span><span class="NAME">locCacheCtx.drawImage</span><span class="PUNC">(</span><span class="NAME">canvas</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NUMB">0</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NUMB">0</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>380</span> 
<span class='line'>381</span> </span><span class="WHIT">            </span><span class="NAME">context.save</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>382</span> </span><span class="WHIT">            </span><span class="COMM">// Draw everything first using node visit function</span><span class="WHIT">
<span class='line'>383</span> </span><span class="WHIT">            </span><span class="NAME">cc.Node.prototype.visit.call</span><span class="PUNC">(</span><span class="KEYW">this</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">context</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>384</span> 
<span class='line'>385</span> </span><span class="WHIT">            </span><span class="NAME">context.globalCompositeOperation</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">this.inverted</span><span class="WHIT"> </span><span class="PUNC">?</span><span class="WHIT"> </span><span class="STRN">"destination-out"</span><span class="WHIT"> </span><span class="PUNC">:</span><span class="WHIT"> </span><span class="STRN">"destination-in"</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>386</span> 
<span class='line'>387</span> </span><span class="WHIT">            </span><span class="NAME">this.transform</span><span class="PUNC">(</span><span class="NAME">context</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>388</span> </span><span class="WHIT">            </span><span class="NAME">this._stencil.visit</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>389</span> 
<span class='line'>390</span> </span><span class="WHIT">            </span><span class="NAME">context.restore</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>391</span> 
<span class='line'>392</span> </span><span class="WHIT">            </span><span class="COMM">// Redraw the cached canvas, so that the cliped area shows the background etc.</span><span class="WHIT">
<span class='line'>393</span> </span><span class="WHIT">            </span><span class="NAME">context.save</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>394</span> </span><span class="WHIT">            </span><span class="NAME">context.setTransform</span><span class="PUNC">(</span><span class="NUMB">1</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NUMB">0</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NUMB">0</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NUMB">1</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NUMB">0</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NUMB">0</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>395</span> </span><span class="WHIT">            </span><span class="NAME">context.globalCompositeOperation</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="STRN">"destination-over"</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>396</span> </span><span class="WHIT">            </span><span class="NAME">context.drawImage</span><span class="PUNC">(</span><span class="NAME">locCache</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NUMB">0</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NUMB">0</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>397</span> </span><span class="WHIT">            </span><span class="NAME">context.restore</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>398</span> </span><span class="WHIT">        </span><span class="PUNC">}</span><span class="WHIT">
<span class='line'>399</span> </span><span class="WHIT">        </span><span class="COMM">// Clip mode, fast, but only support cc.DrawNode</span><span class="WHIT">
<span class='line'>400</span> </span><span class="WHIT">        </span><span class="KEYW">else</span><span class="WHIT"> </span><span class="PUNC">{</span><span class="WHIT">
<span class='line'>401</span> </span><span class="WHIT">            </span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">i</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">children</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">this._children</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">locChild</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>402</span> 
<span class='line'>403</span> </span><span class="WHIT">            </span><span class="NAME">context.save</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>404</span> </span><span class="WHIT">            </span><span class="NAME">this.transform</span><span class="PUNC">(</span><span class="NAME">context</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>405</span> </span><span class="WHIT">            </span><span class="NAME">this._stencil.visit</span><span class="PUNC">(</span><span class="NAME">context</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>406</span> </span><span class="WHIT">            </span><span class="KEYW">if</span><span class="WHIT"> </span><span class="PUNC">(</span><span class="NAME">this.inverted</span><span class="PUNC">)</span><span class="WHIT"> </span><span class="PUNC">{</span><span class="WHIT">
<span class='line'>407</span> </span><span class="WHIT">                </span><span class="NAME">context.save</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>408</span> 
<span class='line'>409</span> </span><span class="WHIT">                </span><span class="NAME">context.setTransform</span><span class="PUNC">(</span><span class="NUMB">1</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NUMB">0</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NUMB">0</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NUMB">1</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NUMB">0</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NUMB">0</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>410</span> 
<span class='line'>411</span> </span><span class="WHIT">                </span><span class="NAME">context.moveTo</span><span class="PUNC">(</span><span class="NUMB">0</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NUMB">0</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>412</span> </span><span class="WHIT">                </span><span class="NAME">context.lineTo</span><span class="PUNC">(</span><span class="NUMB">0</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">canvas.height</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>413</span> </span><span class="WHIT">                </span><span class="NAME">context.lineTo</span><span class="PUNC">(</span><span class="NAME">canvas.width</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">canvas.height</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>414</span> </span><span class="WHIT">                </span><span class="NAME">context.lineTo</span><span class="PUNC">(</span><span class="NAME">canvas.width</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NUMB">0</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>415</span> </span><span class="WHIT">                </span><span class="NAME">context.lineTo</span><span class="PUNC">(</span><span class="NUMB">0</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NUMB">0</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>416</span> 
<span class='line'>417</span> </span><span class="WHIT">                </span><span class="NAME">context.restore</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>418</span> </span><span class="WHIT">            </span><span class="PUNC">}</span><span class="WHIT">
<span class='line'>419</span> </span><span class="WHIT">            </span><span class="NAME">context.clip</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>420</span> 
<span class='line'>421</span> </span><span class="WHIT">            </span><span class="COMM">// Clip mode doesn't support recusive stencil, so once we used a clip stencil,</span><span class="WHIT">
<span class='line'>422</span> </span><span class="WHIT">            </span><span class="COMM">// so if it has ClippingNode as a child, the child must uses composition stencil.</span><span class="WHIT">
<span class='line'>423</span> </span><span class="WHIT">            </span><span class="NAME">this._cangodhelpme</span><span class="PUNC">(</span><span class="KEYW">true</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>424</span> </span><span class="WHIT">            </span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">len</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">children.length</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>425</span> </span><span class="WHIT">            </span><span class="KEYW">if</span><span class="WHIT"> </span><span class="PUNC">(</span><span class="NAME">len</span><span class="WHIT"> </span><span class="PUNC">></span><span class="WHIT"> </span><span class="NUMB">0</span><span class="PUNC">)</span><span class="WHIT"> </span><span class="PUNC">{</span><span class="WHIT">
<span class='line'>426</span> </span><span class="WHIT">                </span><span class="NAME">this.sortAllChildren</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>427</span> </span><span class="WHIT">                </span><span class="COMM">// draw children zOrder &lt; 0</span><span class="WHIT">
<span class='line'>428</span> </span><span class="WHIT">                </span><span class="KEYW">for</span><span class="WHIT"> </span><span class="PUNC">(</span><span class="NAME">i</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NUMB">0</span><span class="PUNC">;</span><span class="WHIT"> </span><span class="NAME">i</span><span class="WHIT"> </span><span class="PUNC">&lt;</span><span class="WHIT"> </span><span class="NAME">len</span><span class="PUNC">;</span><span class="WHIT"> </span><span class="NAME">i</span><span class="PUNC">++</span><span class="PUNC">)</span><span class="WHIT"> </span><span class="PUNC">{</span><span class="WHIT">
<span class='line'>429</span> </span><span class="WHIT">                    </span><span class="NAME">locChild</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">children</span><span class="PUNC">[</span><span class="NAME">i</span><span class="PUNC">]</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>430</span> </span><span class="WHIT">                    </span><span class="KEYW">if</span><span class="WHIT"> </span><span class="PUNC">(</span><span class="NAME">locChild._localZOrder</span><span class="WHIT"> </span><span class="PUNC">&lt;</span><span class="WHIT"> </span><span class="NUMB">0</span><span class="PUNC">)</span><span class="WHIT">
<span class='line'>431</span> </span><span class="WHIT">                        </span><span class="NAME">locChild.visit</span><span class="PUNC">(</span><span class="NAME">context</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>432</span> </span><span class="WHIT">                    </span><span class="KEYW">else</span><span class="WHIT">
<span class='line'>433</span> </span><span class="WHIT">                        </span><span class="KEYW">break</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>434</span> </span><span class="WHIT">                </span><span class="PUNC">}</span><span class="WHIT">
<span class='line'>435</span> </span><span class="WHIT">                </span><span class="NAME">this.draw</span><span class="PUNC">(</span><span class="NAME">context</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>436</span> </span><span class="WHIT">                </span><span class="KEYW">for</span><span class="WHIT"> </span><span class="PUNC">(</span><span class="PUNC">;</span><span class="WHIT"> </span><span class="NAME">i</span><span class="WHIT"> </span><span class="PUNC">&lt;</span><span class="WHIT"> </span><span class="NAME">len</span><span class="PUNC">;</span><span class="WHIT"> </span><span class="NAME">i</span><span class="PUNC">++</span><span class="PUNC">)</span><span class="WHIT"> </span><span class="PUNC">{</span><span class="WHIT">
<span class='line'>437</span> </span><span class="WHIT">                    </span><span class="NAME">children</span><span class="PUNC">[</span><span class="NAME">i</span><span class="PUNC">]</span><span class="PUNC">.</span><span class="NAME">visit</span><span class="PUNC">(</span><span class="NAME">context</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>438</span> </span><span class="WHIT">                </span><span class="PUNC">}</span><span class="WHIT">
<span class='line'>439</span> </span><span class="WHIT">            </span><span class="PUNC">}</span><span class="WHIT"> </span><span class="KEYW">else</span><span class="WHIT">
<span class='line'>440</span> </span><span class="WHIT">                </span><span class="NAME">this.draw</span><span class="PUNC">(</span><span class="NAME">context</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>441</span> </span><span class="WHIT">            </span><span class="NAME">this._cangodhelpme</span><span class="PUNC">(</span><span class="KEYW">false</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>442</span> 
<span class='line'>443</span> </span><span class="WHIT">            </span><span class="NAME">context.restore</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>444</span> </span><span class="WHIT">        </span><span class="PUNC">}</span><span class="WHIT">
<span class='line'>445</span> </span><span class="WHIT">    </span><span class="PUNC">}</span><span class="PUNC">,</span><span class="WHIT">
<span class='line'>446</span> 
<span class='line'>447</span> </span><span class="WHIT">    </span><span class="COMM">/**
<span class='line'>448</span>      * The cc.Node to use as a stencil to do the clipping.                                   &lt;br/>
<span class='line'>449</span>      * The stencil node will be retained. This default to nil.
<span class='line'>450</span>      * @return {cc.Node}
<span class='line'>451</span>      */</span><span class="WHIT">
<span class='line'>452</span> </span><span class="WHIT">    </span><span class="NAME">getStencil</span><span class="PUNC">:</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="WHIT"> </span><span class="PUNC">(</span><span class="PUNC">)</span><span class="WHIT"> </span><span class="PUNC">{</span><span class="WHIT">
<span class='line'>453</span> </span><span class="WHIT">        </span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">this._stencil</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>454</span> </span><span class="WHIT">    </span><span class="PUNC">}</span><span class="PUNC">,</span><span class="WHIT">
<span class='line'>455</span> 
<span class='line'>456</span> </span><span class="WHIT">    </span><span class="COMM">/**
<span class='line'>457</span>      * Set stencil.
<span class='line'>458</span>      * @function
<span class='line'>459</span>      * @param {cc.Node} stencil
<span class='line'>460</span>      */</span><span class="WHIT">
<span class='line'>461</span> </span><span class="WHIT">    </span><span class="NAME">setStencil</span><span class="PUNC">:</span><span class="WHIT"> </span><span class="KEYW">null</span><span class="PUNC">,</span><span class="WHIT">
<span class='line'>462</span> 
<span class='line'>463</span> </span><span class="WHIT">    </span><span class="NAME">_setStencilForWebGL</span><span class="PUNC">:</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="WHIT"> </span><span class="PUNC">(</span><span class="NAME">stencil</span><span class="PUNC">)</span><span class="WHIT"> </span><span class="PUNC">{</span><span class="WHIT">
<span class='line'>464</span> </span><span class="WHIT">        </span><span class="NAME">this._stencil</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">stencil</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>465</span> </span><span class="WHIT">    </span><span class="PUNC">}</span><span class="PUNC">,</span><span class="WHIT">
<span class='line'>466</span> 
<span class='line'>467</span> </span><span class="WHIT">    </span><span class="NAME">_setStencilForCanvas</span><span class="PUNC">:</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="WHIT"> </span><span class="PUNC">(</span><span class="NAME">stencil</span><span class="PUNC">)</span><span class="WHIT"> </span><span class="PUNC">{</span><span class="WHIT">
<span class='line'>468</span> </span><span class="WHIT">        </span><span class="NAME">this._stencil</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">stencil</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>469</span> </span><span class="WHIT">        </span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">locContext</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">cc._renderContext</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>470</span> </span><span class="WHIT">        </span><span class="COMM">// For texture stencil, use the sprite itself</span><span class="WHIT">
<span class='line'>471</span> </span><span class="WHIT">        </span><span class="KEYW">if</span><span class="WHIT"> </span><span class="PUNC">(</span><span class="NAME">stencil</span><span class="WHIT"> </span><span class="KEYW">instanceof</span><span class="WHIT"> </span><span class="NAME">cc.Sprite</span><span class="PUNC">)</span><span class="WHIT"> </span><span class="PUNC">{</span><span class="WHIT">
<span class='line'>472</span> </span><span class="WHIT">            </span><span class="KEYW">return</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>473</span> </span><span class="WHIT">        </span><span class="PUNC">}</span><span class="WHIT">
<span class='line'>474</span> </span><span class="WHIT">        </span><span class="COMM">// For shape stencil, rewrite the draw of stencil ,only init the clip path and draw nothing.</span><span class="WHIT">
<span class='line'>475</span> </span><span class="WHIT">        </span><span class="KEYW">else</span><span class="WHIT"> </span><span class="KEYW">if</span><span class="WHIT"> </span><span class="PUNC">(</span><span class="NAME">stencil</span><span class="WHIT"> </span><span class="KEYW">instanceof</span><span class="WHIT"> </span><span class="NAME">cc.DrawNode</span><span class="PUNC">)</span><span class="WHIT"> </span><span class="PUNC">{</span><span class="WHIT">
<span class='line'>476</span> </span><span class="WHIT">            </span><span class="NAME">stencil.draw</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="WHIT"> </span><span class="PUNC">(</span><span class="PUNC">)</span><span class="WHIT"> </span><span class="PUNC">{</span><span class="WHIT">
<span class='line'>477</span> </span><span class="WHIT">                </span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">locEGL_ScaleX</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">cc.view.getScaleX</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">locEGL_ScaleY</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">cc.view.getScaleY</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>478</span> </span><span class="WHIT">                </span><span class="NAME">locContext.beginPath</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>479</span> </span><span class="WHIT">                </span><span class="KEYW">for</span><span class="WHIT"> </span><span class="PUNC">(</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">i</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NUMB">0</span><span class="PUNC">;</span><span class="WHIT"> </span><span class="NAME">i</span><span class="WHIT"> </span><span class="PUNC">&lt;</span><span class="WHIT"> </span><span class="NAME">stencil._buffer.length</span><span class="PUNC">;</span><span class="WHIT"> </span><span class="NAME">i</span><span class="PUNC">++</span><span class="PUNC">)</span><span class="WHIT"> </span><span class="PUNC">{</span><span class="WHIT">
<span class='line'>480</span> </span><span class="WHIT">                    </span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">element</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">stencil._buffer</span><span class="PUNC">[</span><span class="NAME">i</span><span class="PUNC">]</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>481</span> </span><span class="WHIT">                    </span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">vertices</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">element.verts</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>482</span> 
<span class='line'>483</span> </span><span class="WHIT">                    </span><span class="COMM">//cc.assert(cc.vertexListIsClockwise(vertices),</span><span class="WHIT">
<span class='line'>484</span> </span><span class="WHIT">                    </span><span class="COMM">//    "Only clockwise polygons should be used as stencil");</span><span class="WHIT">
<span class='line'>485</span> 
<span class='line'>486</span> </span><span class="WHIT">                    </span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">firstPoint</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">vertices</span><span class="PUNC">[</span><span class="NUMB">0</span><span class="PUNC">]</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>487</span> </span><span class="WHIT">                    </span><span class="NAME">locContext.moveTo</span><span class="PUNC">(</span><span class="NAME">firstPoint.x</span><span class="WHIT"> </span><span class="PUNC">*</span><span class="WHIT"> </span><span class="NAME">locEGL_ScaleX</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="PUNC">-</span><span class="NAME">firstPoint.y</span><span class="WHIT"> </span><span class="PUNC">*</span><span class="WHIT"> </span><span class="NAME">locEGL_ScaleY</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>488</span> </span><span class="WHIT">                    </span><span class="KEYW">for</span><span class="WHIT"> </span><span class="PUNC">(</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">j</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NUMB">1</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">len</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">vertices.length</span><span class="PUNC">;</span><span class="WHIT"> </span><span class="NAME">j</span><span class="WHIT"> </span><span class="PUNC">&lt;</span><span class="WHIT"> </span><span class="NAME">len</span><span class="PUNC">;</span><span class="WHIT"> </span><span class="NAME">j</span><span class="PUNC">++</span><span class="PUNC">)</span><span class="WHIT">
<span class='line'>489</span> </span><span class="WHIT">                        </span><span class="NAME">locContext.lineTo</span><span class="PUNC">(</span><span class="NAME">vertices</span><span class="PUNC">[</span><span class="NAME">j</span><span class="PUNC">]</span><span class="PUNC">.</span><span class="NAME">x</span><span class="WHIT"> </span><span class="PUNC">*</span><span class="WHIT"> </span><span class="NAME">locEGL_ScaleX</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="PUNC">-</span><span class="NAME">vertices</span><span class="PUNC">[</span><span class="NAME">j</span><span class="PUNC">]</span><span class="PUNC">.</span><span class="NAME">y</span><span class="WHIT"> </span><span class="PUNC">*</span><span class="WHIT"> </span><span class="NAME">locEGL_ScaleY</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>490</span> </span><span class="WHIT">                </span><span class="PUNC">}</span><span class="WHIT">
<span class='line'>491</span> </span><span class="WHIT">            </span><span class="PUNC">}</span><span class="WHIT">
<span class='line'>492</span> </span><span class="WHIT">        </span><span class="PUNC">}</span><span class="WHIT">
<span class='line'>493</span> </span><span class="WHIT">    </span><span class="PUNC">}</span><span class="PUNC">,</span><span class="WHIT">
<span class='line'>494</span> 
<span class='line'>495</span> </span><span class="WHIT">    </span><span class="COMM">/**
<span class='line'>496</span>      * &lt;p>
<span class='line'>497</span>      * The alpha threshold.                                                                                   &lt;br/>
<span class='line'>498</span>      * The content is drawn only where the stencil have pixel with alpha greater than the alphaThreshold.     &lt;br/>
<span class='line'>499</span>      * Should be a float between 0 and 1.                                                                     &lt;br/>
<span class='line'>500</span>      * This default to 1 (so alpha test is disabled).
<span class='line'>501</span>      * &lt;/P>
<span class='line'>502</span>      * @return {Number}
<span class='line'>503</span>      */</span><span class="WHIT">
<span class='line'>504</span> </span><span class="WHIT">    </span><span class="NAME">getAlphaThreshold</span><span class="PUNC">:</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="WHIT"> </span><span class="PUNC">(</span><span class="PUNC">)</span><span class="WHIT"> </span><span class="PUNC">{</span><span class="WHIT">
<span class='line'>505</span> </span><span class="WHIT">        </span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">this.alphaThreshold</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>506</span> </span><span class="WHIT">    </span><span class="PUNC">}</span><span class="PUNC">,</span><span class="WHIT">
<span class='line'>507</span> 
<span class='line'>508</span> </span><span class="WHIT">    </span><span class="COMM">/**
<span class='line'>509</span>      * set alpha threshold.
<span class='line'>510</span>      * @param {Number} alphaThreshold
<span class='line'>511</span>      */</span><span class="WHIT">
<span class='line'>512</span> </span><span class="WHIT">    </span><span class="NAME">setAlphaThreshold</span><span class="PUNC">:</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="WHIT"> </span><span class="PUNC">(</span><span class="NAME">alphaThreshold</span><span class="PUNC">)</span><span class="WHIT"> </span><span class="PUNC">{</span><span class="WHIT">
<span class='line'>513</span> </span><span class="WHIT">        </span><span class="NAME">this.alphaThreshold</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">alphaThreshold</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>514</span> </span><span class="WHIT">    </span><span class="PUNC">}</span><span class="PUNC">,</span><span class="WHIT">
<span class='line'>515</span> 
<span class='line'>516</span> </span><span class="WHIT">    </span><span class="COMM">/**
<span class='line'>517</span>      * &lt;p>
<span class='line'>518</span>      *     Inverted. If this is set to YES,                                                                 &lt;br/>
<span class='line'>519</span>      *     the stencil is inverted, so the content is drawn where the stencil is NOT drawn.                 &lt;br/>
<span class='line'>520</span>      *     This default to NO.
<span class='line'>521</span>      * &lt;/p>
<span class='line'>522</span>      * @return {Boolean}
<span class='line'>523</span>      */</span><span class="WHIT">
<span class='line'>524</span> </span><span class="WHIT">    </span><span class="NAME">isInverted</span><span class="PUNC">:</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="WHIT"> </span><span class="PUNC">(</span><span class="PUNC">)</span><span class="WHIT"> </span><span class="PUNC">{</span><span class="WHIT">
<span class='line'>525</span> </span><span class="WHIT">        </span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">this.inverted</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>526</span> </span><span class="WHIT">    </span><span class="PUNC">}</span><span class="PUNC">,</span><span class="WHIT">
<span class='line'>527</span> 
<span class='line'>528</span> </span><span class="WHIT">    </span><span class="COMM">/**
<span class='line'>529</span>      * set whether or not invert of stencil
<span class='line'>530</span>      * @param {Boolean} inverted
<span class='line'>531</span>      */</span><span class="WHIT">
<span class='line'>532</span> </span><span class="WHIT">    </span><span class="NAME">setInverted</span><span class="PUNC">:</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="WHIT"> </span><span class="PUNC">(</span><span class="NAME">inverted</span><span class="PUNC">)</span><span class="WHIT"> </span><span class="PUNC">{</span><span class="WHIT">
<span class='line'>533</span> </span><span class="WHIT">        </span><span class="NAME">this.inverted</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">inverted</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>534</span> </span><span class="WHIT">    </span><span class="PUNC">}</span><span class="PUNC">,</span><span class="WHIT">
<span class='line'>535</span> 
<span class='line'>536</span> </span><span class="WHIT">    </span><span class="NAME">_cangodhelpme</span><span class="PUNC">:</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="WHIT"> </span><span class="PUNC">(</span><span class="NAME">godhelpme</span><span class="PUNC">)</span><span class="WHIT"> </span><span class="PUNC">{</span><span class="WHIT">
<span class='line'>537</span> </span><span class="WHIT">        </span><span class="KEYW">if</span><span class="WHIT"> </span><span class="PUNC">(</span><span class="NAME">godhelpme</span><span class="WHIT"> </span><span class="PUNC">===</span><span class="WHIT"> </span><span class="KEYW">true</span><span class="WHIT"> </span><span class="PUNC">||</span><span class="WHIT"> </span><span class="NAME">godhelpme</span><span class="WHIT"> </span><span class="PUNC">===</span><span class="WHIT"> </span><span class="KEYW">false</span><span class="PUNC">)</span><span class="WHIT">
<span class='line'>538</span> </span><span class="WHIT">            </span><span class="NAME">cc.ClippingNode.prototype._godhelpme</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">godhelpme</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>539</span> </span><span class="WHIT">        </span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">cc.ClippingNode.prototype._godhelpme</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>540</span> </span><span class="WHIT">    </span><span class="PUNC">}</span><span class="WHIT">
<span class='line'>541</span> </span><span class="PUNC">}</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>542</span> 
<span class='line'>543</span> </span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">_p</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">cc.ClippingNode.prototype</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>544</span> 
<span class='line'>545</span> </span><span class="KEYW">if</span><span class="WHIT"> </span><span class="PUNC">(</span><span class="NAME">cc._renderType</span><span class="WHIT"> </span><span class="PUNC">===</span><span class="WHIT"> </span><span class="NAME">cc._RENDER_TYPE_WEBGL</span><span class="PUNC">)</span><span class="WHIT"> </span><span class="PUNC">{</span><span class="WHIT">
<span class='line'>546</span> </span><span class="WHIT">    </span><span class="COMM">//WebGL</span><span class="WHIT">
<span class='line'>547</span> </span><span class="WHIT">    </span><span class="NAME">_p.init</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">_p._initForWebGL</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>548</span> </span><span class="WHIT">    </span><span class="NAME">_p.visit</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">_p._visitForWebGL</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>549</span> </span><span class="WHIT">    </span><span class="NAME">_p.setStencil</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">_p._setStencilForWebGL</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>550</span> </span><span class="PUNC">}</span><span class="WHIT"> </span><span class="KEYW">else</span><span class="WHIT"> </span><span class="PUNC">{</span><span class="WHIT">
<span class='line'>551</span> </span><span class="WHIT">    </span><span class="NAME">_p.init</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">_p._initForCanvas</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>552</span> </span><span class="WHIT">    </span><span class="NAME">_p.visit</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">_p._visitForCanvas</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>553</span> </span><span class="WHIT">    </span><span class="NAME">_p.setStencil</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">_p._setStencilForCanvas</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>554</span> </span><span class="PUNC">}</span><span class="WHIT">
<span class='line'>555</span> 
<span class='line'>556</span> </span><span class="COMM">// Extended properties</span><span class="WHIT">
<span class='line'>557</span> </span><span class="NAME">cc.defineGetterSetter</span><span class="PUNC">(</span><span class="NAME">_p</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="STRN">"stencil"</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">_p.getStencil</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">_p.setStencil</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>558</span> </span><span class="COMM">/** @expose */</span><span class="WHIT">
<span class='line'>559</span> </span><span class="NAME">_p.stencil</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>560</span> 
<span class='line'>561</span> 
<span class='line'>562</span> </span><span class="NAME">cc.ClippingNode._init_once</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">null</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>563</span> </span><span class="NAME">cc.ClippingNode._visit_once</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">null</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>564</span> </span><span class="NAME">cc.ClippingNode._layer</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="PUNC">-</span><span class="NUMB">1</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>565</span> </span><span class="NAME">cc.ClippingNode._sharedCache</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">null</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>566</span> 
<span class='line'>567</span> </span><span class="NAME">cc.ClippingNode._getSharedCache</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="WHIT"> </span><span class="PUNC">(</span><span class="PUNC">)</span><span class="WHIT"> </span><span class="PUNC">{</span><span class="WHIT">
<span class='line'>568</span> </span><span class="WHIT">    </span><span class="KEYW">return</span><span class="WHIT"> </span><span class="PUNC">(</span><span class="NAME">cc.ClippingNode._sharedCache</span><span class="PUNC">)</span><span class="WHIT"> </span><span class="PUNC">||</span><span class="WHIT"> </span><span class="PUNC">(</span><span class="NAME">cc.ClippingNode._sharedCache</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">document.createElement</span><span class="PUNC">(</span><span class="STRN">"canvas"</span><span class="PUNC">)</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>569</span> </span><span class="PUNC">}</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>570</span> 
<span class='line'>571</span> </span><span class="COMM">/**
<span class='line'>572</span>  * Creates and initializes a clipping node with an other node as its stencil. &lt;br/>
<span class='line'>573</span>  * The stencil node will be retained.
<span class='line'>574</span>  * @deprecated since v3.0, please use getNodeToParentTransform instead
<span class='line'>575</span>  * @param {cc.Node} [stencil=null]
<span class='line'>576</span>  * @return {cc.ClippingNode}
<span class='line'>577</span>  * @example
<span class='line'>578</span>  * //example
<span class='line'>579</span>  * new cc.ClippingNode(stencil);
<span class='line'>580</span>  */</span><span class="WHIT">
<span class='line'>581</span> </span><span class="NAME">cc.ClippingNode.create</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="WHIT"> </span><span class="PUNC">(</span><span class="NAME">stencil</span><span class="PUNC">)</span><span class="WHIT"> </span><span class="PUNC">{</span><span class="WHIT">
<span class='line'>582</span> </span><span class="WHIT">    </span><span class="KEYW">return</span><span class="WHIT"> </span><span class="KEYW">new</span><span class="WHIT"> </span><span class="NAME">cc.ClippingNode</span><span class="PUNC">(</span><span class="NAME">stencil</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>583</span> </span><span class="PUNC">}</span><span class="PUNC">;</span><span class="WHIT">
<span class='line'>584</span> </span></pre></body></html>